   1                             		.file	"clock.cpp"
   2                             		.section P,"ax"
   3                             	.Ltext0:
   4                             		.global	__Z9initClockv
   6                             	__Z9initClockv:
   7                             	.LFB0:
   8                             		.file 1 "../src/peripheral/clock.cpp"
   1:../src/peripheral/clock.cpp **** /**
   2:../src/peripheral/clock.cpp ****  * @file   clock.c
   3:../src/peripheral/clock.cpp ****  * @brief  クロックの設定
   4:../src/peripheral/clock.cpp ****  *
   5:../src/peripheral/clock.cpp ****  * @date 2016/7/23
   6:../src/peripheral/clock.cpp ****  * @author ryota
   7:../src/peripheral/clock.cpp ****  */
   8:../src/peripheral/clock.cpp **** 
   9:../src/peripheral/clock.cpp **** 
  10:../src/peripheral/clock.cpp **** #include "iodefine.h"
  11:../src/peripheral/clock.cpp **** #include "r_init_non_existent_port.h"
  12:../src/peripheral/clock.cpp **** #include "clock.h"
  13:../src/peripheral/clock.cpp **** 
  14:../src/peripheral/clock.cpp **** 
  15:../src/peripheral/clock.cpp **** /**
  16:../src/peripheral/clock.cpp ****  * クロックの設定を行う
  17:../src/peripheral/clock.cpp ****  *
  18:../src/peripheral/clock.cpp ****  */
  19:../src/peripheral/clock.cpp **** void initClock(void){
   9                             		.loc 1 19 0
  10                             	.LBB2:
  20:../src/peripheral/clock.cpp **** 	/* ---- Initialization of the non-existent ports ---- */
  21:../src/peripheral/clock.cpp **** 	R_INIT_NonExistentPort();
  11                             		.loc 1 21 0
  12 0000 05 00 00 00             		bsr	__Z22R_INIT_NonExistentPortv
  13                             	.LVL0:
  22:../src/peripheral/clock.cpp **** 	/* ---- Initialization of the clock ---- */
  23:../src/peripheral/clock.cpp **** 
  24:../src/peripheral/clock.cpp **** //	SYSTEM.PRCR.WORD = 0xA502;
  25:../src/peripheral/clock.cpp **** //		MSTP(DTC)     = 1;
  26:../src/peripheral/clock.cpp **** //		MSTP(EXDMAC0) = 1;
  27:../src/peripheral/clock.cpp **** //		MSTP(STBYRAM) = 1;
  28:../src/peripheral/clock.cpp **** //		MSTP(ECCRAM)  = 1;
  29:../src/peripheral/clock.cpp **** //		MSTP(RAM0)    = 1;
  30:../src/peripheral/clock.cpp **** //	SYSTEM.PRCR.WORD = 0xA500;
  31:../src/peripheral/clock.cpp **** 
  32:../src/peripheral/clock.cpp **** 	//R_INIT_Clock();
  33:../src/peripheral/clock.cpp **** 	SYSTEM.PRCR.WORD = 0xA503;
  14                             		.loc 1 33 0
  15 0004 FB 3E 00 00 08          		mov.L	#0x80000, r3
  16 0009 FA 39 FF 01 03 A5       		mov.W	#0xffffa503, 1022[r3]
  34:../src/peripheral/clock.cpp **** 		//-------HOCOの設定
  35:../src/peripheral/clock.cpp **** 		SYSTEM.HOCOPCR.BYTE = 0x00;
  17                             		.loc 1 35 0
  18 000f FA 34 94 C2 00          		mov.B	#0, 49812[r3]
  36:../src/peripheral/clock.cpp **** 		#define FREQ_16MHz      (0x00)          /* 16 MHz */
  37:../src/peripheral/clock.cpp **** 		#define FREQ_18MHz      (0x01)          /* 18 MHz */
  38:../src/peripheral/clock.cpp **** 		#define FREQ_20MHz      (0x02)          /* 20 MHz */
  39:../src/peripheral/clock.cpp **** 		#define REG_HOCOCR2     (FREQ_16MHz)
  40:../src/peripheral/clock.cpp **** 
  41:../src/peripheral/clock.cpp **** 		SYSTEM.HOCOCR2.BYTE = REG_HOCOCR2;
  19                             		.loc 1 41 0
  20 0014 F9 34 37 00             		mov.B	#0, 55[r3]
  42:../src/peripheral/clock.cpp **** 		SYSTEM.HOCOCR.BYTE = 0x00;
  21                             		.loc 1 42 0
  22 0018 F9 34 36 00             		mov.B	#0, 54[r3]
  23 001c 76 10 01 00             		.balign 8,3,5
  24                             	.L3:
  43:../src/peripheral/clock.cpp **** 		while(1 != SYSTEM.OSCOVFSR.BIT.HCOVF){
  25                             		.loc 1 43 0 discriminator 1
  26 0020 CD 3E 3C                		mov.B	60[r3], r14
  27 0023 FB 4E 00 00 08          		mov.L	#0x80000, r4
  28 0028 7C 3E                   		btst	#3, r14
  29 002a 20 F6                   		beq	.L3
  44:../src/peripheral/clock.cpp **** 			  /* Confirm that the Oscillation of the pll clock is stable so the clock is
  45:../src/peripheral/clock.cpp **** 				   available for use as the system clock.*/
  46:../src/peripheral/clock.cpp **** 		}
  47:../src/peripheral/clock.cpp **** 		//-------WAITサイクルの設定
  48:../src/peripheral/clock.cpp **** 		#define MEMWAIT_1WAIT       (1)       /* 1wait */
  49:../src/peripheral/clock.cpp **** 		#define MEMWAIT_0WAIT       (0)       /* 0wait */
  50:../src/peripheral/clock.cpp **** 		#define REG_MEMWAIT       (MEMWAIT_0WAIT)
  51:../src/peripheral/clock.cpp **** 		SYSTEM.MEMWAIT.LONG = REG_MEMWAIT;
  30                             		.loc 1 51 0
  31 002c FA 46 84 19 00          		mov.L	#0, 26128[r4]
  52:../src/peripheral/clock.cpp **** 		long dummy = SYSTEM.MEMWAIT.LONG * 6;
  32                             		.loc 1 52 0
  33 0031 EE 4E 84 19             		mov.L	26128[r4], r14
  34                             	.LVL1:
  53:../src/peripheral/clock.cpp **** 		dummy = dummy * dummy;
  54:../src/peripheral/clock.cpp **** 		while(REG_MEMWAIT != SYSTEM.MEMWAIT.BIT.MEMWAIT){
  35                             		.loc 1 54 0
  36 0035 EF 43                   		mov.L	r4, r3
  37 0037 03                      		.balign 8,3,3
  38                             	.L5:
  39                             		.loc 1 54 0 is_stmt 0 discriminator 1
  40 0038 EE 3E 84 19             		mov.L	26128[r3], r14
  41 003c FB 4E 00 00 08          		mov.L	#0x80000, r4
  42 0041 64 1E                   		and	#1, r14
  43 0043 21 F5                   		bne	.L5
  55:../src/peripheral/clock.cpp **** 			/* Wait for writing MEMWAIT */
  56:../src/peripheral/clock.cpp **** 		}
  57:../src/peripheral/clock.cpp **** 		for(int i = 0;i< 0x168;i++){;}            /* wait over 12ms */
  58:../src/peripheral/clock.cpp **** 		//-------PLLの設定
  59:../src/peripheral/clock.cpp **** 		SYSTEM.PLLCR.BIT.PLIDIV = 0b00;     // PLL入力分周 1分周
  44                             		.loc 1 59 0 is_stmt 1
  45 0045 9D 42                   		mov.W	40[r4], r2
  60:../src/peripheral/clock.cpp **** 		SYSTEM.PLLCR.BIT.PLLSRCSEL = 0b1;   //HOCOをPLLクロックソースに設定
  61:../src/peripheral/clock.cpp **** 		SYSTEM.PLLCR.BIT.STC = 0b10111;     //12逓倍
  62:../src/peripheral/clock.cpp **** 		SYSTEM.PLLCR2.BYTE = 0x00;
  63:../src/peripheral/clock.cpp **** 	    while(1 != SYSTEM.OSCOVFSR.BIT.PLOVF){
  46                             		.loc 1 63 0
  47 0047 EF 43                   		mov.L	r4, r3
  59:../src/peripheral/clock.cpp **** 		SYSTEM.PLLCR.BIT.PLLSRCSEL = 0b1;   //HOCOをPLLクロックソースに設定
  48                             		.loc 1 59 0
  49 0049 75 22 FC                		and #-4, r2
  50 004c 95 42                   		mov.W	r2, 40[r4]
  60:../src/peripheral/clock.cpp **** 		SYSTEM.PLLCR.BIT.PLLSRCSEL = 0b1;   //HOCOをPLLクロックソースに設定
  51                             		.loc 1 60 0
  52 004e 9D 42                   		mov.W	40[r4], r2
  53 0050 78 42                   		bset #4, r2
  54 0052 95 42                   		mov.W	r2, 40[r4]
  61:../src/peripheral/clock.cpp **** 		SYSTEM.PLLCR2.BYTE = 0x00;
  55                             		.loc 1 61 0
  56 0054 9D 42                   		mov.W	40[r4], r2
  57 0056 76 22 FF C0             		and #0xffffc0ff, r2
  58 005a 76 32 00 17             		or	#0x1700, r2
  59 005e 95 42                   		mov.W	r2, 40[r4]
  62:../src/peripheral/clock.cpp **** 	    while(1 != SYSTEM.OSCOVFSR.BIT.PLOVF){
  60                             		.loc 1 62 0
  61 0060 C7 4E 2A                		mov.B	r14, 42[r4]
  62 0063 77 10 01 00 00          		.balign 8,3,5
  63                             	.L7:
  64                             		.loc 1 63 0 discriminator 1
  65 0068 CD 34 3C                		mov.B	60[r3], r4
  66 006b FB EE 00 00 08          		mov.L	#0x80000, r14
  67 0070 7C 24                   		btst	#2, r4
  68 0072 20 F6                   		beq	.L7
  64:../src/peripheral/clock.cpp **** 	      /* Confirm that the Oscillation of the pll clock is stable so the clock is
  65:../src/peripheral/clock.cpp **** 	         available for use as the system clock.*/
  66:../src/peripheral/clock.cpp **** 	    }
  67:../src/peripheral/clock.cpp **** 
  68:../src/peripheral/clock.cpp **** 		//-------クロックソースをPLlに設定
  69:../src/peripheral/clock.cpp **** 	    SYSTEM.SCKCR.BIT.ICK    = 0b0001; //1: 2分周 0:1分周
  69                             		.loc 1 69 0
  70 0074 ED E4 08                		mov.L	32[r14], r4
  70:../src/peripheral/clock.cpp **** 	    SYSTEM.SCKCR.BIT.PCKA   = 0b0001; //2分周
  71:../src/peripheral/clock.cpp **** 	    SYSTEM.SCKCR.BIT.PCKB   = 0b0010; //4分周
  72:../src/peripheral/clock.cpp **** 	    SYSTEM.SCKCR.BIT.PCKC   = 0b0010; //4分周
  73:../src/peripheral/clock.cpp **** 	    SYSTEM.SCKCR.BIT.PCKD   = 0b0010; //4分周
  74:../src/peripheral/clock.cpp **** 	    SYSTEM.SCKCR.BIT.FCK    = 0b0010; //4分周
  75:../src/peripheral/clock.cpp **** 	    SYSTEM.SCKCR.BIT.PSTOP0 = 0b1;
  76:../src/peripheral/clock.cpp **** 	    SYSTEM.SCKCR.BIT.PSTOP1 = 0b1;
  77:../src/peripheral/clock.cpp **** 	    SYSTEM.SCKCR.BIT.BCK    = 0b0001; //外部バスクロック 2分周
  78:../src/peripheral/clock.cpp **** 	    for(int i = 0;i< 0x168;i++){;}            /* wait over 12ms */
  79:../src/peripheral/clock.cpp **** 	    //SYSTEM.SCKCR.LONG = REG_SCKCR;
  80:../src/peripheral/clock.cpp **** 		//while (REG_SCKCR != SYSTEM.SCKCR.LONG){
  81:../src/peripheral/clock.cpp **** 			 /* Confirm that the written value can be read correctly. */
  82:../src/peripheral/clock.cpp **** 		//}
  83:../src/peripheral/clock.cpp **** 		SYSTEM.BCKCR.BYTE = 0x01;
  84:../src/peripheral/clock.cpp **** 		while (0x01 != SYSTEM.BCKCR.BYTE){
  71                             		.loc 1 84 0
  72 0077 EF E3                   		mov.L	r14, r3
  69:../src/peripheral/clock.cpp **** 	    SYSTEM.SCKCR.BIT.PCKA   = 0b0001; //2分周
  73                             		.loc 1 69 0
  74 0079 74 24 FF FF FF F0       		and #0xf0ffffff, r4
  75 007f 79 84                   		bset #24, r4
  76 0081 E7 E4 08                		mov.L	r4, 32[r14]
  70:../src/peripheral/clock.cpp **** 	    SYSTEM.SCKCR.BIT.PCKA   = 0b0001; //2分周
  77                             		.loc 1 70 0
  78 0084 ED E4 08                		mov.L	32[r14], r4
  79 0087 77 24 FF 0F FF          		and #0xffff0fff, r4
  80 008c 78 C4                   		bset #12, r4
  81 008e E7 E4 08                		mov.L	r4, 32[r14]
  71:../src/peripheral/clock.cpp **** 	    SYSTEM.SCKCR.BIT.PCKC   = 0b0010; //4分周
  82                             		.loc 1 71 0
  83 0091 ED E4 08                		mov.L	32[r14], r4
  84 0094 76 24 FF F0             		and #0xfffff0ff, r4
  85 0098 78 94                   		bset #9, r4
  86 009a E7 E4 08                		mov.L	r4, 32[r14]
  72:../src/peripheral/clock.cpp **** 	    SYSTEM.SCKCR.BIT.PCKD   = 0b0010; //4分周
  87                             		.loc 1 72 0
  88 009d ED E4 08                		mov.L	32[r14], r4
  89 00a0 76 24 0F FF             		and #0xffffff0f, r4
  90 00a4 78 54                   		bset #5, r4
  91 00a6 E7 E4 08                		mov.L	r4, 32[r14]
  73:../src/peripheral/clock.cpp **** 	    SYSTEM.SCKCR.BIT.FCK    = 0b0010; //4分周
  92                             		.loc 1 73 0
  93 00a9 ED E4 08                		mov.L	32[r14], r4
  94 00ac 75 24 F0                		and #-16, r4
  95 00af 78 14                   		bset #1, r4
  96 00b1 E7 E4 08                		mov.L	r4, 32[r14]
  74:../src/peripheral/clock.cpp **** 	    SYSTEM.SCKCR.BIT.PSTOP0 = 0b1;
  97                             		.loc 1 74 0
  98 00b4 ED E4 08                		mov.L	32[r14], r4
  99 00b7 74 24 FF FF FF 0F       		and #0xfffffff, r4
 100 00bd 79 D4                   		bset #29, r4
 101 00bf E7 E4 08                		mov.L	r4, 32[r14]
  75:../src/peripheral/clock.cpp **** 	    SYSTEM.SCKCR.BIT.PSTOP1 = 0b1;
 102                             		.loc 1 75 0
 103 00c2 ED E4 08                		mov.L	32[r14], r4
 104 00c5 79 64                   		bset #22, r4
 105 00c7 E7 E4 08                		mov.L	r4, 32[r14]
  76:../src/peripheral/clock.cpp **** 	    SYSTEM.SCKCR.BIT.BCK    = 0b0001; //外部バスクロック 2分周
 106                             		.loc 1 76 0
 107 00ca ED E4 08                		mov.L	32[r14], r4
 108 00cd 79 74                   		bset #23, r4
 109 00cf E7 E4 08                		mov.L	r4, 32[r14]
  77:../src/peripheral/clock.cpp **** 	    for(int i = 0;i< 0x168;i++){;}            /* wait over 12ms */
 110                             		.loc 1 77 0
 111 00d2 ED E4 08                		mov.L	32[r14], r4
 112 00d5 77 24 FF FF F0          		and #0xfff0ffff, r4
 113 00da 79 04                   		bset #16, r4
 114 00dc E7 E4 08                		mov.L	r4, 32[r14]
 115                             	.LVL2:
  83:../src/peripheral/clock.cpp **** 		while (0x01 != SYSTEM.BCKCR.BYTE){
 116                             		.loc 1 83 0
 117 00df F9 E4 30 01             		mov.B	#1, 48[r14]
 118 00e3 77 10 01 00 00          		.balign 8,3,5
 119                             	.L9:
 120                             		.loc 1 84 0 discriminator 1
 121 00e8 CD 3E 30                		mov.B	48[r3], r14
 122 00eb FB 4E 00 00 08          		mov.L	#0x80000, r4
 123 00f0 5B EE                   		movu.B	r14, r14
 124 00f2 61 1E                   		cmp	#1, r14
 125 00f4 21 F4                   		bne	.L9
  85:../src/peripheral/clock.cpp **** 			/* Confirm that the written value can be read correctly. */
  86:../src/peripheral/clock.cpp **** 		}
  87:../src/peripheral/clock.cpp **** 		SYSTEM.SCKCR2.WORD = 0x0041;
 126                             		.loc 1 87 0
 127 00f6 3D C2 41                		mov.W	#0x41, 36[r4]
  88:../src/peripheral/clock.cpp **** 		while(0x0041 != SYSTEM.SCKCR2.WORD){
 128                             		.loc 1 88 0
 129 00f9 EF 43                   		mov.L	r4, r3
 130 00fb 77 10 01 00 00          		.balign 8,3,5
 131                             	.L11:
 132                             		.loc 1 88 0 is_stmt 0 discriminator 1
 133 0100 DD 3E 12                		mov.W	36[r3], r14
 134 0103 FB 4E 00 00 08          		mov.L	#0x80000, r4
 135 0108 5F EE                   		movu.W	r14, r14
 136 010a 75 5E 41                		cmp	#0x41, r14
 137 010d 21 F3                   		bne	.L11
  89:../src/peripheral/clock.cpp **** 		   /* Confirm that the written value can be read correctly. */
  90:../src/peripheral/clock.cpp **** 		}
  91:../src/peripheral/clock.cpp **** 		#define CLK_PLL     (0x0400)        /* PLL */
  92:../src/peripheral/clock.cpp **** 		#define CLK_HOCO    (0x0100)        /* HOCO */
  93:../src/peripheral/clock.cpp **** 		#define CLK_SUB     (0x0300)        /* Sub-clock */
  94:../src/peripheral/clock.cpp **** 		#define CLK_MAIN    (0x0200)        /* Main clock */
  95:../src/peripheral/clock.cpp **** 		#define SEL_SYSCLK      (CLK_PLL)
  96:../src/peripheral/clock.cpp **** 		SYSTEM.SCKCR3.WORD = SEL_SYSCLK;
 138                             		.loc 1 96 0 is_stmt 1
 139 010f F9 49 13 00 04          		mov.W	#0x400, 38[r4]
  97:../src/peripheral/clock.cpp **** 	SYSTEM.PRCR.WORD = 0xA500;
 140                             		.loc 1 97 0
 141 0114 FA 49 FF 01 00 A5       		mov.W	#0xffffa500, 1022[r4]
 142 011a 02                      		rts
 143                             	.LBE2:
 144                             	.LFE0:
 172                             	.Letext0:
 173                             		.file 2 "../src/peripheral/iodefine.h"
 174                             		.file 3 "../src/peripheral/clock.h"
 175                             		.file 4 "../src/peripheral/r_init_non_existent_port.h"
