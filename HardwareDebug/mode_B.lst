   1                             		.file	"mode_B.cpp"
   2                             		.section P,"ax"
   3                             	.Ltext0:
   4                             		.section	.text._ZN7GamepadD2Ev,"axG",@progbits,_ZN7GamepadD5Ev,comdat
   5                             		.weak	__ZN7GamepadD2Ev
   7                             	__ZN7GamepadD2Ev:
   8                             	.LFB45:
   9                             		.file 1 "C:\\Users\\ryota\\e2_studio\\workspace\\umouse\\src\\robot_object/gamepad.h"
   1:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\gamepad.h **** 
   2:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\gamepad.h **** #ifndef GAMEPAD_H
   3:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\gamepad.h **** #define GAMEPAD_H
   4:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\gamepad.h **** 
   5:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\gamepad.h **** #include <stdint.h>
   6:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\gamepad.h **** #include "timer.h"
   7:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\gamepad.h **** 
   8:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\gamepad.h **** class Gamepad{
   9:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\gamepad.h **** public:
  10:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\gamepad.h ****     volatile int8_t cross_x;
  11:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\gamepad.h ****     volatile int8_t cross_y;
  12:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\gamepad.h ****     volatile int8_t L3D_x;
  13:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\gamepad.h ****     volatile int8_t L3D_y;
  14:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\gamepad.h ****     volatile int8_t R3D_x;
  15:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\gamepad.h ****     volatile int8_t R3D_y;
  16:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\gamepad.h ****     volatile uint8_t RT;
  17:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\gamepad.h ****     volatile uint8_t LT;
  18:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\gamepad.h ****     volatile uint32_t A;
  19:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\gamepad.h ****     volatile uint32_t B;
  20:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\gamepad.h ****     volatile uint32_t Y;
  21:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\gamepad.h ****     volatile uint32_t X;
  22:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\gamepad.h ****     volatile uint32_t RB;
  23:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\gamepad.h ****     volatile uint32_t LB;
  24:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\gamepad.h ****     volatile uint32_t BACK;
  25:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\gamepad.h ****     volatile uint32_t START;
  26:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\gamepad.h ****     volatile uint8_t receiveCommand[16];
  27:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\gamepad.h **** 
  28:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\gamepad.h ****     static Gamepad& getInstance(){
  29:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\gamepad.h ****         static Gamepad instance;
  30:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\gamepad.h ****         return instance;
  31:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\gamepad.h ****     }
  32:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\gamepad.h **** 
  33:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\gamepad.h ****     bool isConnecting(){
  34:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\gamepad.h ****         if(getElapsedMsec() - preRecieveTime < 200){
  35:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\gamepad.h ****             return true;
  36:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\gamepad.h ****         }
  37:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\gamepad.h ****         else{
  38:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\gamepad.h ****             return false;
  39:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\gamepad.h ****         }
  40:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\gamepad.h **** 
  41:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\gamepad.h ****     };
  42:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\gamepad.h **** 
  43:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\gamepad.h ****     void updateCommand(uint8_t *command){
  44:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\gamepad.h ****         if(command[3] == 254 && command[4] == 253){
  45:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\gamepad.h ****             preRecieveTime = getElapsedMsec();
  46:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\gamepad.h ****             for(uint8_t i=0;i<16; i++){
  47:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\gamepad.h ****                 receiveCommand[i] = command[i];
  48:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\gamepad.h ****             }
  49:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\gamepad.h ****         }
  50:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\gamepad.h ****     };
  51:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\gamepad.h **** 
  52:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\gamepad.h ****     //1msec毎に呼ぶこと
  53:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\gamepad.h ****     void update(){
  54:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\gamepad.h ****        volatile uint8_t *command = receiveCommand;
  55:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\gamepad.h ****        if((command[6] & 0x01) == 1) A++;
  56:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\gamepad.h ****        else A = 0;
  57:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\gamepad.h ****        if(((command[6] & 0x02) >> 1) == 1) B++;
  58:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\gamepad.h ****        else B = 0;
  59:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\gamepad.h ****        if(((command[6] & 0x04) >> 2) == 1) X++;
  60:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\gamepad.h ****        else X= 0;
  61:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\gamepad.h ****        if(((command[6] & 0x08) >> 3) == 1) Y++;
  62:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\gamepad.h ****        else Y = 0;
  63:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\gamepad.h ****        if(((command[6] & 0x10) >> 4) == 1) RB++;
  64:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\gamepad.h ****        else RB = 0;
  65:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\gamepad.h ****        if(((command[6] & 0x20) >> 5) == 1) LB++;
  66:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\gamepad.h ****        else LB = 0;
  67:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\gamepad.h ****        if(((command[6] & 0x40) >> 6) == 1) BACK++;
  68:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\gamepad.h ****        else BACK = 0;
  69:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\gamepad.h ****        if(((command[6] & 0x80) >> 7) == 1) START++;
  70:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\gamepad.h ****        else START = 0;
  71:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\gamepad.h ****        RT = command[7];
  72:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\gamepad.h ****        LT = command[8];
  73:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\gamepad.h ****        cross_x = command[9]  - 128;
  74:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\gamepad.h ****        cross_y = command[10] - 128;
  75:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\gamepad.h ****        R3D_x = command[11] - 128;
  76:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\gamepad.h ****        R3D_y = command[12] - 128;
  77:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\gamepad.h ****        L3D_x = command[13] - 128;
  78:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\gamepad.h ****        L3D_y = command[14] - 128;
  79:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\gamepad.h **** 
  80:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\gamepad.h ****        if(isConnecting() == false){
  81:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\gamepad.h ****            A = 0;
  82:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\gamepad.h ****            B = 0;
  83:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\gamepad.h ****            X = 0;
  84:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\gamepad.h ****            Y = 0;
  85:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\gamepad.h ****            RB = 0;
  86:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\gamepad.h ****            LB = 0;
  87:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\gamepad.h ****            BACK = 0;
  88:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\gamepad.h ****            START = 0;
  89:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\gamepad.h ****            RT = 0;
  90:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\gamepad.h ****            LT = 0;
  91:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\gamepad.h ****            cross_x = 0;
  92:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\gamepad.h ****            cross_y = 0;
  93:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\gamepad.h ****            R3D_x = 0;
  94:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\gamepad.h ****            R3D_y = 0;
  95:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\gamepad.h ****            L3D_x = 0;
  96:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\gamepad.h ****            L3D_y = 0;
  97:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\gamepad.h ****        }
  98:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\gamepad.h **** 
  99:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\gamepad.h ****     };
 100:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\gamepad.h **** private:
 101:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\gamepad.h ****     bool conStatus;
 102:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\gamepad.h ****     uint64_t preRecieveTime;
 103:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\gamepad.h ****     Gamepad(){
 104:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\gamepad.h ****         cross_x = 0;
 105:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\gamepad.h ****         cross_y = 0;
 106:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\gamepad.h ****         L3D_x = 0;
 107:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\gamepad.h ****         R3D_x = 0;
 108:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\gamepad.h ****         R3D_y = 0;
 109:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\gamepad.h ****         RT = 0;
 110:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\gamepad.h ****         LT = 0;
 111:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\gamepad.h ****         A  = 0;
 112:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\gamepad.h ****         B  = 0;
 113:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\gamepad.h ****         Y  = 0;
 114:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\gamepad.h ****         X  = 0;
 115:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\gamepad.h ****         RB = 0;
 116:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\gamepad.h ****         LB = 0;
 117:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\gamepad.h ****         BACK = 0;
 118:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\gamepad.h ****         START = 0;
 119:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\gamepad.h ****         conStatus = false;
 120:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\gamepad.h ****         preRecieveTime = 0;
 121:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\gamepad.h ****     };
 122:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\gamepad.h ****     ~Gamepad(){};
  10                             		.loc 1 122 0
  11                             	.LVL0:
  12 0000 02                      		rts
  13                             	.LFE45:
  15                             		.weak	__ZN7GamepadD1Ev
  16                             		.set	__ZN7GamepadD1Ev,__ZN7GamepadD2Ev
  17                             		.section	.text._ZN7MPU9250D2Ev,"axG",@progbits,_ZN7MPU9250D5Ev,comdat
  18                             		.weak	__ZN7MPU9250D2Ev
  20                             	__ZN7MPU9250D2Ev:
  21                             	.LFB70:
  22                             		.file 2 "C:\\Users\\ryota\\e2_studio\\workspace\\umouse\\src\\umouse_object/imu.hpp"
   1:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\imu.hpp **** #ifndef IMU_H
   2:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\imu.hpp **** #define IMU_H
   3:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\imu.hpp **** 
   4:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\imu.hpp **** #include <stdint.h>
   5:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\imu.hpp **** 
   6:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\imu.hpp **** class Icm20608G{
   7:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\imu.hpp **** 
   8:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\imu.hpp **** public:
   9:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\imu.hpp **** 	volatile int16_t omega_raw[3];
  10:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\imu.hpp **** 	volatile int16_t acc_raw[3];
  11:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\imu.hpp **** 	volatile int16_t temp_raw;
  12:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\imu.hpp **** 
  13:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\imu.hpp **** 	volatile int16_t omega_ref[3];
  14:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\imu.hpp **** 	volatile int16_t acc_ref[3];
  15:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\imu.hpp **** 
  16:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\imu.hpp **** 	volatile int16_t omega_c[3];
  17:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\imu.hpp **** 	volatile int16_t acc_c[3];
  18:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\imu.hpp **** 	volatile int16_t mag_c[3];
  19:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\imu.hpp **** 
  20:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\imu.hpp **** 	volatile float omega_f[3];
  21:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\imu.hpp **** 	volatile float acc_f[3];
  22:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\imu.hpp **** 	volatile float mag_f[3];
  23:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\imu.hpp **** 	volatile float temp_f;
  24:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\imu.hpp **** 
  25:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\imu.hpp **** 	static Icm20608G& getInstance(){
  26:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\imu.hpp **** 		static Icm20608G instance;
  27:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\imu.hpp **** 		return instance;
  28:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\imu.hpp **** 	}
  29:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\imu.hpp **** 
  30:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\imu.hpp **** 
  31:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\imu.hpp **** 	uint8_t whoAmI(void);
  32:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\imu.hpp **** 	void init();
  33:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\imu.hpp ****     void update();
  34:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\imu.hpp **** 	void calibOmegaOffset();
  35:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\imu.hpp ****     void writeReg(uint8_t adress, uint8_t data);
  36:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\imu.hpp ****     uint8_t readReg(uint8_t adress);
  37:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\imu.hpp **** 
  38:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\imu.hpp **** private:
  39:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\imu.hpp **** 	Icm20608G(void){};
  40:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\imu.hpp **** 	~Icm20608G(void){};
  41:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\imu.hpp **** 	Icm20608G(Icm20608G&){};
  42:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\imu.hpp **** 
  43:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\imu.hpp **** };
  44:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\imu.hpp **** 
  45:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\imu.hpp **** 
  46:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\imu.hpp **** 
  47:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\imu.hpp **** 
  48:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\imu.hpp **** class MPU9250{
  49:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\imu.hpp **** public:
  50:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\imu.hpp ****     volatile int16_t omega_raw[3];
  51:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\imu.hpp ****     volatile int16_t acc_raw[3];
  52:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\imu.hpp ****     volatile int16_t mag_raw[3];
  53:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\imu.hpp ****     volatile int16_t temp_raw;
  54:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\imu.hpp **** 
  55:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\imu.hpp ****     volatile int16_t omega_ref[3];
  56:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\imu.hpp ****     volatile int16_t acc_ref[3];
  57:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\imu.hpp ****     volatile int16_t mag_ref[3];
  58:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\imu.hpp **** 
  59:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\imu.hpp ****     volatile int16_t omega_c[3];
  60:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\imu.hpp ****     volatile int16_t acc_c[3];
  61:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\imu.hpp ****     volatile int16_t mag_c[3];
  62:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\imu.hpp **** 
  63:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\imu.hpp ****     volatile float omega_f[3];
  64:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\imu.hpp ****     volatile float acc_f[3];
  65:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\imu.hpp ****     volatile float mag_f[3];
  66:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\imu.hpp ****     volatile float temp_f;
  67:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\imu.hpp ****     volatile uint8_t Asa[3];
  68:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\imu.hpp **** 
  69:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\imu.hpp **** 	static MPU9250& getInstance(){
  70:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\imu.hpp **** 		static MPU9250 instance;
  71:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\imu.hpp **** 		return instance;
  72:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\imu.hpp **** 	};
  73:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\imu.hpp **** 
  74:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\imu.hpp **** 	uint8_t whoAmI();
  75:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\imu.hpp **** 	void init();
  76:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\imu.hpp **** 	void update();
  77:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\imu.hpp **** 	void writeReg(uint8_t adress, uint8_t data);
  78:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\imu.hpp **** 	uint8_t readReg(uint8_t adress);
  79:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\imu.hpp **** 	void calibOmegaOffset(uint32_t ref_num);
  80:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\imu.hpp **** 	void calibAccOffset(uint32_t ref_num);
  81:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\imu.hpp **** private:
  82:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\imu.hpp **** 	MPU9250(){};
  83:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\imu.hpp **** 	~MPU9250(){};
  23                             		.loc 2 83 0
  24                             	.LVL1:
  25 0000 02                      		rts
  26                             	.LFE70:
  28                             		.weak	__ZN7MPU9250D1Ev
  29                             		.set	__ZN7MPU9250D1Ev,__ZN7MPU9250D2Ev
  30                             		.section	.text._ZN6UMouseD2Ev,"axG",@progbits,_ZN6UMouseD5Ev,comdat
  31                             		.weak	__ZN6UMouseD2Ev
  33                             	__ZN6UMouseD2Ev:
  34                             	.LFB88:
  35                             		.file 3 "C:\\Users\\ryota\\e2_studio\\workspace\\umouse\\src\\robot_object/mouse.h"
   1:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h **** #ifndef MOUSE_H
   2:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h **** #define MOUSE_H
   3:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h **** 
   4:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h **** 
   5:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h **** #include "stdint.h"
   6:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h **** #include "iodefine.h"
   7:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h **** #include "maze.h"
   8:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h **** #include "pwm.h"
   9:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h **** #include "machineParameters.h"
  10:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h **** #include "myUtil.h"
  11:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h **** #include "math.h"
  12:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h **** #include "imu.hpp"
  13:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h **** #include <math.h>
  14:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h **** 
  15:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h **** //#include <Core>
  16:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h **** //#include <Geometry>
  17:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h **** //using namespace Eigen;
  18:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h **** //#define EIGEN_DONT_VECTORIZE
  19:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h **** //#define EIGEN_DISABLE_UNALIGNED_ARRAY_ASSERT
  20:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h **** 
  21:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h **** 
  22:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h **** 
  23:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h **** enum direction_e {
  24:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h ****     E = 0, NE, N, NW, W, SW, S, SE
  25:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h **** };
  26:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h **** 
  27:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h **** template <typename T>
  28:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h **** class Coor2D {
  29:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h ****     T x;
  30:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h ****     T y;
  31:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h **** };
  32:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h **** 
  33:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h **** class Vector2f {
  34:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h **** public:
  35:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h ****     float x;
  36:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h ****     float y;
  37:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h **** 
  38:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h ****     Vector2f(float x_0, float y_0){
  39:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h ****         x = x_0;
  40:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h ****         y = y_0;
  41:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h ****     }
  42:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h **** 
  43:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h ****     float operator [](int n){
  44:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h ****         if(n == 0) return x;
  45:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h ****         if(n == 1) return y;
  46:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h ****         return 0.0;
  47:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h ****     }
  48:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h **** 
  49:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h **** };
  50:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h **** 
  51:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h **** 
  52:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h **** class UMouse {
  53:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h **** public:
  54:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h ****     // -32768 から 32767
  55:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h **** 
  56:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h **** 
  57:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h ****     volatile float t_a;       //event側で更新     x 1000
  58:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h ****     volatile float t_v;       //event側で更新     x 3000
  59:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h ****     volatile float t_x;       //event側で更新     x 3000
  60:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h ****     volatile float accum_x;   //event側で更新     x 3000
  61:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h **** 
  62:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h ****     volatile float t_ang_a;   //event側で更新    x 100
  63:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h ****     volatile float t_ang_v;   //event側で更新    x 100
  64:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h ****     volatile float t_ang;   //event側で更新    x 100
  65:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h ****     volatile float accum_ang; //event側で更新    x 100
  66:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h ****     volatile float gyro_ang_v;// -2000deg/secから+2000deg/sec
  67:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h **** 
  68:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h ****     volatile float wall_P;    //event側で更新  -10.0から10.0   x 3000
  69:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h ****     volatile float wall_I;    //event側で更新  -10.0から10.0   x 3000
  70:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h ****     volatile float wall_D;    //event側で更新  -10.0から10.0   x 3000
  71:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h **** 
  72:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h ****     volatile float v_P;       //event側で更新  -10.0から10.0   x 3000
  73:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h ****     volatile float v_I;       //event側で更新  -10.0から10.0   x 3000
  74:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h ****     volatile float v_D;       //event側で更新  -10.0から10.0   x 3000
  75:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h **** 
  76:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h ****     volatile float ang_v_P;   //event側で更新  -10.0から10.0   x 3000
  77:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h ****     volatile float ang_v_I;   //event側で更新  -10.0から10.0   x 3000
  78:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h ****     volatile float ang_v_D;   //event側で更新  -10.0から10.0   x 3000
  79:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h **** 
  80:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h ****     volatile float ang_P;     //event側で更新  -10.0から10.0   x 3000
  81:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h ****     volatile float ang_I;     //event側で更新  -10.0から10.0   x 3000
  82:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h ****     volatile float ang_D;     //event側で更新  -10.0から10.0   x 3000
  83:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h **** 
  84:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h ****     volatile float v_FF;      //event側で更新  -1.0から1.0     x 3000
  85:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h ****     volatile float ang_FF;    //event側で更新  -1.0から1.0     x 3000
  86:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h **** 
  87:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h ****     volatile float v;
  88:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h ****     volatile float a_v; //前方向加速度 x1000
  89:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h ****     volatile float a_h; //横方向加速度 x1000
  90:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h **** 
  91:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h ****     volatile float duty_L;
  92:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h ****     volatile float duty_R;
  93:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h **** 
  94:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h ****     volatile direction_e direction;
  95:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h ****     volatile Coor2D<float> ab_position;
  96:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h ****     volatile Coor2D<uint16_t> coor;
  97:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h ****     volatile Coor2D<uint16_t> start;
  98:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h ****     volatile Coor2D<uint16_t> goal;
  99:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h **** 
 100:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h ****     volatile float ang;
 101:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h ****     volatile float ang_v;
 102:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h ****     volatile float ang_a;
 103:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h **** 
 104:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h ****     volatile Coor2D <float> v_g;
 105:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h ****     volatile Coor2D <float> x_g;
 106:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h ****     volatile Coor2D <float> a_g;
 107:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h **** 
 108:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h ****     volatile Maze maze;
 109:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h ****     volatile Maze mazeBuf[5];
 110:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h **** 
 111:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h ****     volatile float v_enc_R;
 112:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h ****     volatile float v_enc_L;
 113:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h **** 
 114:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h ****     volatile float v_enc;
 115:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h ****     volatile float v_acc;
 116:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h **** 
 117:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h ****     volatile float ang_gyro;
 118:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h ****     volatile float ang_mag;
 119:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h **** 
 120:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h ****     volatile float Vcc;
 121:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h **** 
 122:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h ****     static UMouse& getInstance() {
 123:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h ****         static UMouse instance;
 124:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h ****         return instance;
 125:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h ****     };
 126:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h **** 
 127:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h ****     void update(){
 128:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h ****         static uint16_t R_ENC_pre;
 129:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h ****         static uint16_t L_ENC_pre;
 130:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h ****         static uint16_t R_ENC_now;
 131:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h ****         static uint16_t L_ENC_now;
 132:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h **** 
 133:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h ****         //**************エンコーダ値の読み取り************************//
 134:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h **** 
 135:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h ****         R_ENC_pre = R_ENC_now;
 136:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h ****         L_ENC_pre = L_ENC_now;
 137:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h ****         R_ENC_now = MTU1.TCNT;
 138:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h ****         L_ENC_now = MTU2.TCNT;
 139:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h **** 
 140:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h ****         int32_t count_diff_R = (int32_t)(R_ENC_now - R_ENC_pre);
 141:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h ****         int32_t count_diff_L = (int32_t)(L_ENC_now - L_ENC_pre);
 142:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h ****         //オーバーフロー対策
 143:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h ****         if( count_diff_R > 32768 )  count_diff_R -= 65536;
 144:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h ****         if( count_diff_R < -32768 ) count_diff_R += 65536;
 145:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h ****         if( count_diff_L > 32768 )  count_diff_L -= 65536;
 146:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h ****         if( count_diff_L < -32768 ) count_diff_L += 65536;
 147:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h **** 
 148:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h ****         //エンコーダより計測された速度
 149:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h ****         v_enc_R = (PI* DIA_TIRE / GEAR_RATIO * (float)(count_diff_R)/512.0)/ DELTA_T;
 150:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h ****         v_enc_L = (PI* DIA_TIRE / GEAR_RATIO * (float)(count_diff_L)/512.0)/ DELTA_T;
 151:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h ****         //v_enc = (v_enc_R + v_enc_L) * 0.5;
 152:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h ****         MPU9250 &imu = MPU9250::getInstance();
 153:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h ****         float omega = DEG2RAD(imu.omega_f[2]);
 154:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h ****         v_enc = sqrtf( constrainL(
 155:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h ****                                    0.5 * (  v_enc_R * v_enc_R
 156:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h ****                                    + v_enc_L * v_enc_L
 157:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h ****                                    - 0.5 * omega * omega * TREAD * TREAD)
 158:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h ****                                    ,0.0)
 159:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h ****         );
 160:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h ****         //角速度をセット
 161:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h ****         gyro_ang_v = MPU9250::getInstance().omega_f[2];
 162:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h ****         //電圧の算出
 163:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h ****         Vcc = 15.1 / 5.1 * (S12AD.ADDR0) * 3.3 / 4096;
 164:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h ****         //加速度センサから遠心力を除去
 165:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h ****         float r = 0.0564717;  // 9mm 55.75mm
 166:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h ****         float theta = DEG2RAD(9.17042483);
 167:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h ****         float c_force = r * DEG2RAD(gyro_ang_v) * DEG2RAD(gyro_ang_v);
 168:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h ****         a_v = MPU9250::getInstance().acc_f[1] + c_force * cosf(theta);
 169:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h ****         a_h = MPU9250::getInstance().acc_f[0] + c_force * sinf(theta);
 170:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h **** 
 171:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h ****     }
 172:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h **** 
 173:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h ****     void setDuty(float duty_l, float duty_r){
 174:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h ****         setDuty_L(duty_l);
 175:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h ****         setDuty_R(duty_r);
 176:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h ****     }
 177:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h **** 
 178:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h ****     void setDuty_R(float duty){
 179:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h ****         duty_R = duty;
 180:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h **** 
 181:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h ****         if(duty == 0.0){
 182:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h ****             PORT1.PODR.BIT.B3 = 0;
 183:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h ****             PORT1.PODR.BIT.B2 = 0;
 184:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h ****         }
 185:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h ****         else if(duty > 0){
 186:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h ****             PORT1.PODR.BIT.B3 = 0;
 187:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h ****             PORT1.PODR.BIT.B2 = 1;
 188:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h ****         }
 189:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h ****         else{
 190:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h ****             PORT1.PODR.BIT.B3 = 1;
 191:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h ****             PORT1.PODR.BIT.B2 = 0;
 192:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h ****         }
 193:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h ****         setDutyMTU3(ABS(duty));
 194:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h ****     };
 195:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h ****     void setDuty_L(float duty){
 196:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h ****         duty_L = duty;
 197:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h **** 
 198:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h ****         if(duty == 0.0){
 199:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h ****             PORT2.PODR.BIT.B0 = 0;
 200:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h ****             PORT1.PODR.BIT.B7 = 0;
 201:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h ****         }
 202:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h ****         else if(duty > 0){
 203:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h ****             PORT2.PODR.BIT.B0 = 1;
 204:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h ****             PORT1.PODR.BIT.B7 = 0;
 205:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h ****         }
 206:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h ****         else{
 207:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h ****             PORT2.PODR.BIT.B0 = 0;
 208:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h ****             PORT1.PODR.BIT.B7 = 1;
 209:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h ****         }
 210:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h ****         setDutyMTU4(ABS(duty));
 211:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h ****     };
 212:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h **** 
 213:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h **** 
 214:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h **** private:
 215:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h ****     UMouse() {};
 216:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h ****     ~UMouse() {};
  36                             		.loc 3 216 0
  37                             	.LVL2:
  38 0000 02                      		rts
  39                             	.LFE88:
  41                             		.weak	__ZN6UMouseD1Ev
  42                             		.set	__ZN6UMouseD1Ev,__ZN6UMouseD2Ev
  43                             		.section	.text._ZN4Stop5isEndEv,"axG",@progbits,_ZN4Stop5isEndEv,comdat
  44                             		.weak	__ZN4Stop5isEndEv
  46                             	__ZN4Stop5isEndEv:
  47                             	.LFB1057:
  48                             		.file 4 "C:\\Users\\ryota\\e2_studio\\workspace\\umouse\\src\\umouse_object/moveEvent.h"
   1:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h **** #ifndef MOVEEVENT_H
   2:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h **** #define MOVEEVENT_H
   3:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h **** 
   4:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h **** #include "machineParameters.h"
   5:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h **** #include "myUtil.h"
   6:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h **** #include "imu.hpp"
   7:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h **** #include "mouse.h"
   8:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h **** //#include <Core>
   9:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h **** //#include <Geometry>
  10:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h **** #include <queue>
  11:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h **** #include "uart.hpp"
  12:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h **** #include "timer.h"
  13:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h **** 
  14:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h **** 
  15:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h **** using std::queue;
  16:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h **** //using namespace Eigen;
  17:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h **** //#define EIGEN_DONT_VECTORIZE
  18:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h **** //#define EIGEN_DISABLE_UNALIGNED_ARRAY_ASSERT
  19:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h **** 
  20:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h **** class BaseMoveEvent{
  21:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h **** public:
  22:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****     virtual bool isEnd()=0;
  23:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****     virtual Vector2f calcDuty()=0;
  24:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h **** 
  25:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****     Vector2f dutyFF_ang(float target_ang_a, float target_ang_v){
  26:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         UMouse &mouse = UMouse::getInstance();
  27:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         Vector2f duty(0.0f, 0.0f);
  28:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h **** 
  29:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         //必要な力(回転成分)
  30:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         float F_rotation = INERTIA * DEG2RAD(target_ang_a) / TREAD;
  31:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         //モータとモータドライバの抵抗値
  32:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         float R = COIL_RES + FET_RES;
  33:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         //必要なトルク
  34:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         float torque_L = (- F_rotation)*(0.5* DIA_TIRE/GEAR_RATIO);
  35:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         float torque_R = (+ F_rotation)*(0.5* DIA_TIRE/GEAR_RATIO);
  36:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         //左右輪の速度
  37:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         float v_L = - TREAD * PI * target_ang_v/360.0;
  38:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         float v_R = + TREAD * PI * target_ang_v/360.0;
  39:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         //左右モーターの回転数
  40:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         float rpm_L = v_L * 60.0 /(PI * DIA_TIRE);
  41:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         float rpm_R = v_R * 60.0 /(PI * DIA_TIRE);
  42:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h **** 
  43:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         duty.x = (R*torque_L / K_T + K_E * rpm_L) / mouse.Vcc;
  44:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         duty.y = (R*torque_R / K_T + K_E * rpm_R) / mouse.Vcc;
  45:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h **** 
  46:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         return duty;
  47:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****     };
  48:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h **** 
  49:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****     Vector2f dutyFF_v(float target_a, float target_v){
  50:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         UMouse &mouse = UMouse::getInstance();
  51:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         Vector2f duty(0.0f, 0.0f);
  52:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h **** 
  53:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         //必要な力(直進成分)
  54:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         float F_forward = MASS*target_a/2.0;
  55:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         //モータとモータドライバの抵抗値
  56:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         float R = COIL_RES + FET_RES;
  57:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         //必要なトルク
  58:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         float torque_L = F_forward * (0.5* DIA_TIRE/GEAR_RATIO);
  59:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         float torque_R = F_forward * (0.5* DIA_TIRE/GEAR_RATIO);
  60:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         //左右輪の速度
  61:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         float v_L = target_v;
  62:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         float v_R = target_v;
  63:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         //左右モーターの回転数
  64:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         float rpm_L = v_L * 60.0 /(PI * DIA_TIRE);
  65:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         float rpm_R = v_R * 60.0 /(PI * DIA_TIRE);
  66:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h **** 
  67:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         duty.x = (R*torque_L / K_T + K_E * rpm_L) / mouse.Vcc;
  68:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         duty.y = (R*torque_R / K_T + K_E * rpm_R) / mouse.Vcc;
  69:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h **** 
  70:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         return duty;
  71:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****     };
  72:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h **** 
  73:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h **** };
  74:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h **** 
  75:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h **** 
  76:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h **** 
  77:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h **** 
  78:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h **** 
  79:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h **** 
  80:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h **** #ifdef MEMO
  81:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h **** class NormalMoveEvent : public BaseMoveEvent{
  82:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h **** 
  83:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h **** public:
  84:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****     float target_ang;           //追従目標角度
  85:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****     float target_ang_v;         //追従目標角速度
  86:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****     float target_ang_a;         //追従目標角加速度
  87:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h **** 
  88:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****     float target_x;             //追従目標位置
  89:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****     float target_v;             //追従目標速度
  90:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****     float target_a;             //追従目標加速度
  91:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h **** 
  92:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****     float accum_x;
  93:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****     float accum_ang; //角度積算値
  94:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h **** 
  95:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****     float error_v;
  96:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****     float error_int_v;
  97:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h **** 
  98:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****     float error_ang_v;
  99:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****     float error_int_ang_v;
 100:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h **** 
 101:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****     float error_ang;
 102:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****     float error_int_ang;
 103:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h **** 
 104:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****     float Kp_v;
 105:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****     float Ki_v;
 106:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****     float Kd_v;
 107:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h **** 
 108:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****     float Kp_ang_v;
 109:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****     float Ki_ang_v;
 110:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****     float Kd_ang_v;
 111:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h **** 
 112:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****     float Kp_ang;
 113:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****     float Ki_ang;
 114:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****     float Kd_ang;
 115:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h **** 
 116:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****     void paramInit(){
 117:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         target_ang   = 0.0;           //追従目標角度
 118:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         target_ang_v =0.0;         //追従目標角速度
 119:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         target_ang_a =0.0 ;         //追従目標角加速度
 120:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         accum_ang = 0.0 ;
 121:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h **** 
 122:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         error_int_ang = 0.0;
 123:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         error_int_v = 0.0;
 124:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h **** 
 125:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         Kp_v = 0.0;
 126:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         Ki_v = 0.0;
 127:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         // Kd_v;
 128:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h **** 
 129:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         Kp_ang_v = 0.0;
 130:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         Ki_ang_v = 0.0;
 131:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         // Kd_and_v;
 132:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h **** 
 133:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         Kp_ang = 0.0;
 134:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         Ki_ang = 0.0;
 135:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         Kd_ang = 0.0;
 136:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h **** 
 137:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****     };
 138:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h **** 
 139:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****     virtual bool isEnd()=0;
 140:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****     virtual void trajectoryPlanning()=0;
 141:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h **** 
 142:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****     void updateDuty(){
 143:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         UMouse &mouse = UMouse::getInstance();
 144:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         trajectoryPlanning();
 145:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         integrate();
 146:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         updatePidError();
 147:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         Vector2f duty(0.0f, 0.0f);
 148:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h **** 
 149:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         duty = dutyFF() + dutyFB() + dutyWall();
 150:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         float duty_L = duty(0);
 151:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         float duty_R = duty(1);
 152:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         //mouse.setDuty_L(duty_L);
 153:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         //mouse.setDuty_R(duty_R);
 154:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h **** 
 155:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****     };
 156:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h **** 
 157:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****     void integrate(){
 158:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         UMouse& mouse = UMouse::getInstance();
 159:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         //追従目標の積分処理
 160:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         target_ang   += target_ang_v * DELTA_T;
 161:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         target_ang_v += target_ang_a * DELTA_T;
 162:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h **** 
 163:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         target_x += target_v * DELTA_T;
 164:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         target_v += target_a * DELTA_T;
 165:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         accum_ang += mouse.v_enc * DELTA_T;
 166:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****     };
 167:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h **** 
 168:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****     void updatePidError(){
 169:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         //*******フィードバック制御のゲイン***********//
 170:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         Kp_v = 0.9;//.5;
 171:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         //float Kd_v = 0.3;//;
 172:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         Ki_v = 0.3;//0.1;
 173:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h **** 
 174:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         Kp_ang_v = 0.0093;
 175:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         Ki_ang_v = 0.00042;
 176:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h **** 
 177:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         Kp_ang = 0.0005;//0.005;
 178:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         Ki_ang = 0.00005;//0.003;
 179:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         Kd_ang = 0.0;//0.001;
 180:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         //*********************************//
 181:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         UMouse& mouse = UMouse::getInstance();
 182:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         //速度と角度と角速度の偏差
 183:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         error_v     = target_v     - mouse.v_enc;
 184:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         error_ang   = target_ang   - accum_ang;
 185:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         error_ang_v = target_ang_v - mouse.ang_v;
 186:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         //速度と角度と角速度のI項
 187:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         error_int_v += error_v;
 188:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         error_int_ang += error_ang;
 189:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         error_int_ang_v += error_ang_v;
 190:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h **** 
 191:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         //I項のリミッター
 192:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         if(ABS(error_int_v) > 50.0){
 193:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****             if(error_int_v > 0) error_int_v = 50.0 ;
 194:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****             if(error_int_v < 0) error_int_v = -50.0;
 195:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         }
 196:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h **** 
 197:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         if(ABS(error_int_ang_v) > 1200.0 ){
 198:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****                 if(error_int_ang_v > 0) error_int_ang_v = 1200.0;
 199:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****                 if(error_int_ang_v < 0) error_int_ang_v = -1200.0;
 200:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         }
 201:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h **** 
 202:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         /*
 203:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         if(move_state != ROTATION){
 204:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****             error_int_ang_v=0.0;
 205:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         }
 206:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         */
 207:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h **** 
 208:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         if(ABS(error_int_ang) > 300.0 ){
 209:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****             if(error_int_ang > 0) error_int_ang = 300.0;
 210:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****             if(error_int_ang < 0) error_int_ang = -300.0;
 211:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         }
 212:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h **** 
 213:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h **** 
 214:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****     };
 215:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h **** 
 216:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****     Vector2f dutyFF(){
 217:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         UMouse &mouse = UMouse::getInstance();
 218:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         Vector2f duty(0.0f, 0.0f);
 219:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h **** 
 220:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         //必要な力(直進成分)
 221:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         float F_forward = MASS*target_a/2.0;
 222:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         //必要な力(回転成分)
 223:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         float F_rotation = INERTIA * DEG2RAD(target_ang_a) / TREAD;
 224:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         //モータとモータドライバの抵抗値
 225:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         float R = COIL_RES + FET_RES;
 226:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         //必要なトルク
 227:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         float torque_L = (F_forward - F_rotation)*(0.5* DIA_TIRE/GEAR_RATIO);
 228:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         float torque_R = (F_forward + F_rotation)*(0.5* DIA_TIRE/GEAR_RATIO);
 229:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         //左右輪の速度
 230:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         float v_L = target_v - TREAD * PI * target_ang_v/360.0;
 231:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         float v_R = target_v + TREAD * PI * target_ang_v/360.0;
 232:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         //左右モーターの回転数
 233:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         float rpm_L = v_L * 60.0 /(PI * DIA_TIRE);
 234:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         float rpm_R = v_R * 60.0 /(PI * DIA_TIRE);
 235:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h **** 
 236:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         duty(0) = (R*torque_L / K_T + K_E * rpm_L) / mouse.Vcc;
 237:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         duty(1) = (R*torque_R / K_T + K_E * rpm_R) / mouse.Vcc;
 238:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h **** 
 239:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h **** 
 240:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         return duty;
 241:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****     };
 242:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h **** 
 243:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****     Vector2f dutyFB(){
 244:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         Vector2f duty(0.0f, 0.0f);
 245:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h **** 
 246:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         float FB_v     = Kp_v     * error_v     + Ki_v     * error_int_v;
 247:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         float FB_ang_v = Kp_ang_v * error_ang_v + Ki_ang_v * error_int_ang_v;
 248:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         float FB_ang   = Kp_ang   * error_ang   + Ki_ang   * error_int_ang    + Kd_ang * error_ang_
 249:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h **** 
 250:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         duty(0) = FB_v - FB_ang_v - FB_ang;
 251:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         duty(1) = FB_v + FB_ang_v + FB_ang;
 252:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h **** 
 253:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         return duty;
 254:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****     };
 255:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h **** 
 256:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****     Vector2f dutyWall(){
 257:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         Vector2f duty(0.0f, 0.0f);
 258:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h **** 
 259:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         return duty;
 260:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****     };
 261:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h **** 
 262:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h **** };
 263:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h **** #endif
 264:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h **** 
 265:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h **** 
 266:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h **** class SimplePivotTurn : public BaseMoveEvent{
 267:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h **** 
 268:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h **** public:
 269:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****     volatile float target_ang;
 270:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****     volatile float target_ang_v;
 271:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****     volatile float target_ang_a;
 272:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h **** 
 273:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****     volatile float target_v;
 274:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h **** 
 275:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****     volatile float Kp_ang;
 276:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****     volatile float Ki_ang;
 277:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****     volatile float Kd_ang;
 278:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h **** 
 279:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****     volatile float Kp_ang_v;
 280:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****     volatile float Ki_ang_v;
 281:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****     volatile float Kd_ang_v;
 282:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h **** 
 283:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****     volatile float Kp_v;
 284:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****     volatile float Ki_v;
 285:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****     volatile float Kd_v;
 286:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h **** 
 287:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****     volatile float error_ang;
 288:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****     volatile float error_int_ang;
 289:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****     volatile float error_ang_pre;
 290:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****     volatile float error_d_ang;
 291:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h **** 
 292:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****     volatile float error_ang_v;
 293:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****     volatile float error_int_ang_v;
 294:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****     volatile float error_ang_v_pre;
 295:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****     volatile float error_d_ang_v;
 296:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h **** 
 297:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****     volatile float error_v;
 298:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****     volatile float error_int_v;
 299:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****     volatile float error_d_v;
 300:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****     volatile float error_v_pre;
 301:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h **** 
 302:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****     volatile float ang_a;
 303:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****     volatile float end_ang;
 304:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****     volatile float accum_ang;
 305:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****     volatile float accum_v;
 306:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h **** 
 307:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****     volatile uint8_t scene_num;
 308:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h **** 
 309:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****     SimplePivotTurn(float ang){
 310:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         target_ang = 0.0;
 311:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         target_ang_v = 0.0;
 312:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         target_ang_a = 0.0;
 313:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         end_ang = ang;
 314:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         accum_ang = 0.0;
 315:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h **** 
 316:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         error_ang = 0.0;
 317:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         error_int_ang = 0.0;
 318:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         error_ang_pre = 0.0;
 319:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         error_d_ang = 0.0;
 320:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h **** 
 321:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         Kp_ang = 0.0;
 322:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         Ki_ang = 0.0;
 323:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         Kd_ang = 0.0;//0.001;
 324:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h **** 
 325:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         error_ang_v = 0.0;
 326:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         error_int_ang_v = 0.0;
 327:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         error_ang_v_pre = 0.0;
 328:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         error_d_ang_v = 0.0;
 329:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h **** 
 330:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h **** 
 331:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         Kp_ang_v = 0.0012;
 332:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         Ki_ang_v = 0.0004;
 333:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         Kd_ang_v = 0.0;//0.001;
 334:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h **** 
 335:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h **** 
 336:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         target_v = 0.0;
 337:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         accum_v = 0.0;
 338:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         error_v = 0.0;
 339:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         error_int_v = 0.0;
 340:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         error_v_pre = 0.0;
 341:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         error_d_v = 0.0;
 342:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         Kp_v = 0.00;
 343:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         Ki_v = 0.000;
 344:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         Kd_v = 0.000;
 345:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h **** 
 346:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h **** 
 347:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         ang_a  = SIGN(ang) * 360.0;
 348:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         scene_num = 0;
 349:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****     };
 350:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h **** 
 351:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****     bool isEnd(){
 352:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         static uint32_t time_count = 0;
 353:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h **** 
 354:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         if( scene_num == 0){
 355:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****             myprintf3("%d\n",scene_num);
 356:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****             target_ang_a = ang_a;
 357:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****             scene_num++;
 358:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         }
 359:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h **** 
 360:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         if( ABS(target_ang) >= ABS(end_ang)*1.0/2.0 &&
 361:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****             scene_num == 1){
 362:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****             myprintf3("%d\n",scene_num);
 363:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****             error_int_ang = 0.0;
 364:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****             target_ang_a = 0.0;
 365:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****             scene_num++;
 366:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         }
 367:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h **** 
 368:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         if( ABS(target_ang) >= ABS(end_ang)*1.0/2.0 &&
 369:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****             scene_num == 2 ){
 370:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****             myprintf3("%d\n",scene_num);
 371:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****             error_int_ang *= -1.0;
 372:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****             target_ang_a = - ang_a;
 373:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****             scene_num++;
 374:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         }
 375:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         if((ABS(target_ang) >= ABS(end_ang)     ||
 376:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****             SIGN(ang_a) != SIGN(target_ang_v) ) &&
 377:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****             scene_num == 3){
 378:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****             myprintf3("%d\n",scene_num);
 379:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****             target_ang_a = 0.0;
 380:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****             target_ang_v = 0.0;
 381:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****             target_ang = end_ang;
 382:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****             scene_num ++;
 383:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****             time_count = getElapsedMsec();
 384:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****             Kp_ang = 0.0021;
 385:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****             Ki_ang = 0.00032;
 386:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****             Kd_ang = 0.01;//0.001;
 387:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****             Kp_ang_v = 0.0;
 388:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****             Ki_ang_v = 0.0;
 389:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****             Kd_ang_v = 0.0;
 390:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****             Kp_v = 0.00;
 391:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****             Ki_v = 0.000;
 392:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****             Kd_v = 0.000;
 393:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h **** 
 394:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****             error_int_ang = 0.0;
 395:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         }
 396:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h **** 
 397:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         if(getElapsedMsec() - time_count > 1000 &&
 398:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****             scene_num == 4){
 399:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****             return true;
 400:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         }
 401:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h **** 
 402:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         return false;
 403:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****     };
 404:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h **** 
 405:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****     Vector2f calcDuty(){
 406:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         MPU9250 &imu = MPU9250::getInstance();
 407:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         Vector2f duty(0.0,0.0);
 408:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         UMouse &m = UMouse::getInstance();
 409:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h **** 
 410:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         accum_v += m.a_v * DELTA_T;
 411:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h **** 
 412:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h **** 
 413:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         //ターゲットの積分
 414:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         target_ang_v += target_ang_a * DELTA_T;
 415:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         target_ang   += target_ang_v * DELTA_T;
 416:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         accum_ang    += imu.omega_f[2] * DELTA_T;
 417:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h **** 
 418:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         //角度
 419:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         error_ang   = target_ang - accum_ang;
 420:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         error_d_ang = error_ang - error_ang_pre;
 421:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         error_ang_pre = error_ang;
 422:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         error_int_ang   += error_ang;
 423:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         error_int_ang = constrain(error_int_ang, -200.0, 200.0);
 424:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         //角速度
 425:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         error_ang_v   = target_ang_v - imu.omega_f[2];
 426:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         error_d_ang_v = error_ang_v - error_ang_v_pre;
 427:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         error_ang_v_pre = error_ang_v;
 428:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         //角度と角速度のI項
 429:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         error_int_ang_v   += error_ang_v;
 430:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         error_int_ang_v = constrain(error_int_ang_v, -200.0, 200.0);
 431:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h **** 
 432:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h **** 
 433:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         error_v   = target_v - SIGN(accum_v) * m.v_enc;
 434:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         error_d_v = error_v - error_v_pre;
 435:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         error_v_pre = error_v;
 436:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h **** 
 437:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         error_int_v   += error_v;
 438:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         error_int_v = constrain(error_int_v, -200.0, 200.0);
 439:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h **** 
 440:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h **** 
 441:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         float FB_v = (  Kp_v * error_v
 442:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****                      + Ki_v * error_int_v
 443:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****                      + Kd_v * error_d_v)
 444:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****                      * 8.4/m.Vcc;
 445:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h **** 
 446:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         float FB_ang   = (  Kp_ang * error_ang
 447:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****                          + Ki_ang * error_int_ang
 448:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****                          + Kd_ang * error_d_ang)
 449:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****                          * 8.4/m.Vcc;
 450:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h **** 
 451:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         float FB_ang_v   = (  Kp_ang_v * error_ang_v
 452:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****                          + Ki_ang_v * error_int_ang_v
 453:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****                          + Kd_ang_v * error_d_ang_v)
 454:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****                          * 8.4/m.Vcc;
 455:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h **** 
 456:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h **** 
 457:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         //計算した各種変数をmouseにセット
 458:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h **** 
 459:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         m.t_ang_a = target_ang_a ;
 460:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         m.t_ang_v = target_ang_v;
 461:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         m.t_ang   = target_ang;
 462:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         m.accum_ang = accum_ang;
 463:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h **** 
 464:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         m.ang_P = Kp_ang * error_ang;
 465:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         m.ang_I = Ki_ang * error_int_ang;
 466:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         m.ang_D = Kd_ang * error_d_ang;
 467:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h **** 
 468:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         m.ang_v_P = Kp_ang_v * error_ang_v;
 469:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         m.ang_v_I = Ki_ang_v * error_int_ang_v;
 470:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         m.ang_v_D = Kd_ang_v * error_d_ang_v;
 471:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h **** 
 472:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h **** 
 473:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         m.v_P = Kp_v * error_v;
 474:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         m.v_I = Ki_v * error_int_v;
 475:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         m.v_D = Kd_v * error_d_v;
 476:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         m.t_v = SIGN(accum_v) * m.v_enc;
 477:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h **** 
 478:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         Vector2f FF_ang_duty = dutyFF_ang(target_ang_a, target_ang_v);
 479:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         m.ang_FF = FF_ang_duty.x;
 480:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h **** 
 481:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         FB_ang = constrain(FB_ang, -0.20, 0.20);
 482:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h **** 
 483:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         duty.x =  FB_ang + FB_ang_v + FB_v + FF_ang_duty.x;//左
 484:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         duty.y = -FB_ang - FB_ang_v + FB_v + FF_ang_duty.y;//右
 485:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h **** 
 486:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         return duty;
 487:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****     };
 488:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h **** 
 489:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h **** 
 490:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h **** };
 491:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h **** 
 492:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h **** class SimpleTrape : public BaseMoveEvent{
 493:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h **** 
 494:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h **** public:
 495:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****     volatile float target_ang;
 496:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****     volatile float target_ang_v;
 497:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****     volatile float target_ang_a;
 498:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h **** 
 499:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****     volatile float target_x;
 500:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****     volatile float target_v;
 501:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****     volatile float target_a;
 502:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h **** 
 503:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****     volatile float Kp_ang;
 504:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****     volatile float Ki_ang;
 505:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****     volatile float Kd_ang;
 506:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h **** 
 507:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****     volatile float Kp_ang_v;
 508:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****     volatile float Ki_ang_v;
 509:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****     volatile float Kd_ang_v;
 510:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h **** 
 511:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****     volatile float Kp_v;
 512:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****     volatile float Ki_v;
 513:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****     volatile float Kd_v;
 514:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h **** 
 515:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****     volatile float error_ang;
 516:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****     volatile float error_int_ang;
 517:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****     volatile float error_ang_pre;
 518:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****     volatile float error_d_ang;
 519:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h **** 
 520:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****     volatile float error_ang_v;
 521:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****     volatile float error_int_ang_v;
 522:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****     volatile float error_ang_v_pre;
 523:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****     volatile float error_d_ang_v;
 524:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h **** 
 525:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****     volatile float error_v;
 526:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****     volatile float error_int_v;
 527:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****     volatile float error_d_v;
 528:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****     volatile float error_v_pre;
 529:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h **** 
 530:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****     volatile float ang_a;
 531:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****     volatile float end_x;
 532:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****     volatile float accum_ang;
 533:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****     volatile float accum_v;
 534:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h **** 
 535:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****     volatile uint8_t scene_num;
 536:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h **** 
 537:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****     SimpleTrape(float x){
 538:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         end_x = x;
 539:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         target_a = 1.0;
 540:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h **** 
 541:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         target_ang = 0.0;
 542:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         target_ang_v = 0.0;
 543:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         target_ang_a = 0.0;
 544:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         accum_ang = 0.0;
 545:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h **** 
 546:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         error_ang = 0.0;
 547:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         error_int_ang = 0.0;
 548:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         error_ang_pre = 0.0;
 549:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         error_d_ang = 0.0;
 550:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h **** 
 551:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         Kp_ang = 0.0;
 552:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         Ki_ang = 0.0;
 553:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         Kd_ang = 0.0;//0.001;
 554:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h **** 
 555:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         error_ang_v = 0.0;
 556:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         error_int_ang_v = 0.0;
 557:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         error_ang_v_pre = 0.0;
 558:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         error_d_ang_v = 0.0;
 559:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h **** 
 560:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h **** 
 561:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         Kp_ang_v = 0.0012;
 562:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         Ki_ang_v = 0.0004;
 563:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         Kd_ang_v = 0.0;//0.001;
 564:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h **** 
 565:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h **** 
 566:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         target_v = 0.0;
 567:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         accum_v = 0.0;
 568:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         error_v = 0.0;
 569:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         error_int_v = 0.0;
 570:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         error_v_pre = 0.0;
 571:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         error_d_v = 0.0;
 572:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         Kp_v = 0.01;
 573:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         Ki_v = 0.001;
 574:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         Kd_v = 0.001;
 575:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         myprintf3("Trape\n");
 576:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h **** 
 577:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         scene_num = 0;
 578:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****     };
 579:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h **** 
 580:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****     bool isEnd(){
 581:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         static uint32_t time_count = 0;
 582:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h **** 
 583:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         if( scene_num == 0){
 584:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****             target_a = 1.0;
 585:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****             myprintf3("%d\n",scene_num);
 586:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****             scene_num++;
 587:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         }
 588:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h **** 
 589:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         if( ABS(target_x) >= ABS(end_x)*1.0/2.0 &&
 590:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****             scene_num == 1){
 591:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****             myprintf3("%d\n",scene_num);
 592:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****             target_a = 0.0;
 593:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****             scene_num++;
 594:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         }
 595:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h **** 
 596:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         if( ABS(target_x) >= ABS(end_x)*1.0/2.0 &&
 597:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****             scene_num == 2 ){
 598:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****             myprintf3("%d\n",scene_num);
 599:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****             target_a = - 1.0;
 600:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****             scene_num++;
 601:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         }
 602:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         if((ABS(target_x) >= ABS(end_x)     ||
 603:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****             target_v < 0.0) &&
 604:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****             scene_num == 3){
 605:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****             myprintf3("%d\n",scene_num);
 606:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****             target_a = 0.0;
 607:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****             target_v = 0.0;
 608:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****             target_x = end_x;
 609:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****             scene_num ++;
 610:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****             time_count = getElapsedMsec();
 611:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****             Kp_ang_v = 0.0;
 612:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****             Ki_ang_v = 0.0;
 613:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****             Kd_ang_v = 0.0;
 614:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****             Kp_v = 0.00;
 615:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****             Ki_v = 0.000;
 616:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****             Kd_v = 0.000;
 617:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h **** 
 618:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****             error_int_ang = 0.0;
 619:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         }
 620:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h **** 
 621:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         if(getElapsedMsec() - time_count > 1000 &&
 622:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****             scene_num == 4){
 623:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****             return true;
 624:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         }
 625:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h **** 
 626:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         return false;
 627:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****     };
 628:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h **** 
 629:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****     Vector2f calcDuty(){
 630:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         MPU9250 &imu = MPU9250::getInstance();
 631:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         Vector2f duty(0.0,0.0);
 632:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         UMouse &m = UMouse::getInstance();
 633:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h **** 
 634:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         //ターゲットの積分
 635:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         target_ang_v += target_ang_a * DELTA_T;
 636:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         target_ang   += target_ang_v * DELTA_T;
 637:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         accum_ang    += imu.omega_f[2] * DELTA_T;
 638:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         //速度
 639:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         target_v += target_a * DELTA_T;
 640:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         target_x += target_v * DELTA_T;
 641:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h **** 
 642:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         //角度
 643:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         error_ang   = target_ang - accum_ang;
 644:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         error_d_ang = error_ang - error_ang_pre;
 645:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         error_ang_pre = error_ang;
 646:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         error_int_ang   += error_ang;
 647:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         error_int_ang = constrain(error_int_ang, -200.0, 200.0);
 648:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         //角速度
 649:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         error_ang_v   = target_ang_v - imu.omega_f[2];
 650:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         error_d_ang_v = error_ang_v - error_ang_v_pre;
 651:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         error_ang_v_pre = error_ang_v;
 652:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         //角度と角速度のI項
 653:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         error_int_ang_v   += error_ang_v;
 654:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         error_int_ang_v = constrain(error_int_ang_v, -200.0, 200.0);
 655:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h **** 
 656:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h **** 
 657:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         error_v   = target_v - m.v_enc;
 658:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         error_d_v = error_v - error_v_pre;
 659:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         error_v_pre = error_v;
 660:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h **** 
 661:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         error_int_v   += error_v;
 662:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         error_int_v = constrain(error_int_v, -20.0, 20.0);
 663:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h **** 
 664:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h **** 
 665:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         float FB_v = (  Kp_v * error_v
 666:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****                      + Ki_v * error_int_v
 667:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****                      + Kd_v * error_d_v)
 668:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****                      * 8.4/m.Vcc;
 669:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h **** 
 670:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         float FB_ang   = (  Kp_ang * error_ang
 671:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****                          + Ki_ang * error_int_ang
 672:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****                          + Kd_ang * error_d_ang)
 673:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****                          * 8.4/m.Vcc;
 674:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h **** 
 675:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         float FB_ang_v   = (  Kp_ang_v * error_ang_v
 676:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****                          + Ki_ang_v * error_int_ang_v
 677:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****                          + Kd_ang_v * error_d_ang_v)
 678:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****                          * 8.4/m.Vcc;
 679:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h **** 
 680:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h **** 
 681:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         //計算した各種変数をmouseにセット
 682:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h **** 
 683:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         m.t_ang_a = target_ang_a ;
 684:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         m.t_ang_v = target_ang_v;
 685:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         m.t_ang   = target_ang;
 686:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         m.accum_ang = accum_ang;
 687:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h **** 
 688:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         m.t_a = target_a;
 689:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         m.t_v = target_v;
 690:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         m.t_x = target_x;
 691:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h **** 
 692:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h **** 
 693:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         m.ang_P = Kp_ang * error_ang;
 694:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         m.ang_I = Ki_ang * error_int_ang;
 695:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         m.ang_D = Kd_ang * error_d_ang;
 696:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h **** 
 697:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         m.ang_v_P = Kp_ang_v * error_ang_v;
 698:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         m.ang_v_I = Ki_ang_v * error_int_ang_v;
 699:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         m.ang_v_D = Kd_ang_v * error_d_ang_v;
 700:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h **** 
 701:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h **** 
 702:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         m.v_P = Kp_v * (target_v - m.v_enc);//error_v;
 703:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         float temp = target_v -m.v_enc;
 704:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         if(target_v > m.v_enc){
 705:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****             myprintf3("-----\n");
 706:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****             myprintf3("%f %f %f \n",target_v, m.v_enc, target_v - m.v_enc);
 707:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****             myprintf3("%f %x\n",temp,*(int*)&temp);
 708:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         }
 709:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         if(target_v - m.v_enc < 0 ){
 710:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****             myprintf3("====\n");
 711:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****             myprintf3("%f %f %f \n",target_v, m.v_enc, target_v - m.v_enc);
 712:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****             myprintf3("%f %x\n",temp,*(int*)&temp);
 713:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h **** 
 714:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         }
 715:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h **** 
 716:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         m.v_I = Ki_v * error_int_v;
 717:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         m.v_D = Kd_v * error_d_v;
 718:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h **** 
 719:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         Vector2f FF_ang_duty = dutyFF_ang(target_ang_a, target_ang_v);
 720:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         m.ang_FF = FF_ang_duty.x;
 721:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h **** 
 722:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         FB_ang = constrain(FB_ang, -0.20, 0.20);
 723:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h **** 
 724:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         //duty[0] =  FB_ang + FB_ang_v + FB_v;//左
 725:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         //duty[1] = -FB_ang - FB_ang_v + FB_v;//右
 726:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         duty.x = FB_v;//左
 727:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         duty.y = FB_v;//右
 728:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h **** 
 729:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         //duty += FF_ang_duty;
 730:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         return duty;
 731:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****     };
 732:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h **** 
 733:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h **** 
 734:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h **** };
 735:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h **** 
 736:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h **** 
 737:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h **** 
 738:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h **** 
 739:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h **** class Stop : public BaseMoveEvent{
 740:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h **** 
 741:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h **** public:
 742:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****     uint32_t count = 0;
 743:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****     uint32_t count_end;
 744:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h **** 
 745:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****     Stop(uint32_t stop_ms){
 746:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         count_end = stop_ms;
 747:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****     }
 748:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h **** 
 749:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****     bool isEnd(){
  49                             		.loc 4 749 0
  50                             	.LVL3:
 750:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h **** 
 751:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         if(count < count_end) return false;
  51                             		.loc 4 751 0
  52 0000 ED 1E 01                		mov.L	4[r1], r14
 752:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         else return true;
 753:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****     };
  53                             		.loc 4 753 0
  54 0003 06 85 1E 02             		cmp	8[r1].L, r14
  55 0007 FC DB 12                		scgeu.L	r1
  56                             	.LVL4:
  57 000a 02                      		rts
  58                             	.LFE1057:
  60                             		.section	.rodata.str1.1,"aMS",@progbits,1
  61                             	.LC0:
  62 0000 25 64 0A 00             		.string	"%d\n"
  63                             		.section	.text._ZN11SimpleTrape5isEndEv,"axG",@progbits,_ZN11SimpleTrape5isEndEv,comdat
  64                             		.weak	__ZN11SimpleTrape5isEndEv
  66                             	__ZN11SimpleTrape5isEndEv:
  67                             	.LFB1052:
 580:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         static uint32_t time_count = 0;
  68                             		.loc 4 580 0
  69                             	.LVL5:
  70 0000 6E 7A                   		pushm	r7-r10
  71                             	.LCFI0:
  72 0002 60 80                   		sub	#8, r0
  73                             	.LCFI1:
 580:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         static uint32_t time_count = 0;
  74                             		.loc 4 580 0
  75 0004 EF 17                   		mov.L	r1, r7
  76                             	.LBB424:
 583:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****             target_a = 1.0;
  77                             		.loc 4 583 0
  78 0006 59 1A 80                		movu.B	128[r1], r10
  79 0009 61 0A                   		cmp	#0, r10
  80 000b 3A 39 01                		beq	.L58
 589:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****             scene_num == 1){
  81                             		.loc 4 589 0
  82 000e ED 7A 04                		mov.L	16[r7], r10
  83 0011 FD 72 1A 00 00 00 00    		fcmp	#0x0, r10
  84 0018 ED 7A 04                		mov.L	16[r7], r10
  85 001b 26 05 38 5B 01          		bn	.L59
  86                             	.LVL6:
  87                             		.balign 8,3,1
  88                             	.L12:
 589:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****             scene_num == 1){
  89                             		.loc 4 589 0 is_stmt 0 discriminator 3
  90 0020 ED 7E 1D                		mov.L	116[r7], r14
  91 0023 FD 72 1E 00 00 00 00    		fcmp	#0x0, r14
  92 002a ED 7E 1D                		mov.L	116[r7], r14
  93 002d 26 05 38 61 01          		bn	.L60
  94 0032 74 10 01 00 00 00       		.balign 8,3,6
  95                             	.L49:
 589:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****             scene_num == 1){
  96                             		.loc 4 589 0 discriminator 5
  97 0038 FD 72 3E 00 00 00 3F    		fmul	#0x3f000000, r14
  98 003f 03                      		.balign 8,3,2
  99                             	.L15:
 589:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****             scene_num == 1){
 100                             		.loc 4 589 0 discriminator 6
 101 0040 FC 87 EA                		fcmp	r14, r10
 102 0043 27 0A                   		bn	.L16
 589:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****             scene_num == 1){
 103                             		.loc 4 589 0 discriminator 1
 104 0045 59 7A 80                		movu.B	128[r7], r10
 105 0048 61 1A                   		cmp	#1, r10
 106 004a 3A 81 01                		beq	.L18
 107                             		.balign 8,3,1
 108                             	.L16:
 596:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****             scene_num == 2 ){
 109                             		.loc 4 596 0 is_stmt 1
 110 004d ED 7A 04                		mov.L	16[r7], r10
 111 0050 FD 72 1A 00 00 00 00    		fcmp	#0x0, r10
 112 0057 ED 7A 04                		mov.L	16[r7], r10
 113 005a 26 05 38 66 01          		bn	.L61
 114 005f 03                      		.balign 8,3,1
 115                             	.L21:
 596:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****             scene_num == 2 ){
 116                             		.loc 4 596 0 is_stmt 0 discriminator 3
 117 0060 ED 7E 1D                		mov.L	116[r7], r14
 118 0063 FD 72 1E 00 00 00 00    		fcmp	#0x0, r14
 119 006a ED 7E 1D                		mov.L	116[r7], r14
 120 006d 26 05 38 43 01          		bn	.L62
 596:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****             scene_num == 2 ){
 121                             		.loc 4 596 0 discriminator 5
 122 0072 FD 72 3E 00 00 00 3F    		fmul	#0x3f000000, r14
 123                             		.balign 8,3,2
 124                             	.L24:
 596:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****             scene_num == 2 ){
 125                             		.loc 4 596 0 discriminator 6
 126 0079 FC 87 EA                		fcmp	r14, r10
 127 007c 27 0A                   		bn	.L25
 596:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****             scene_num == 2 ){
 128                             		.loc 4 596 0 discriminator 1
 129 007e 59 7A 80                		movu.B	128[r7], r10
 130 0081 61 2A                   		cmp	#2, r10
 131 0083 3A 68 01                		beq	.L27
 132                             		.balign 8,3,1
 133                             	.L25:
 602:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****             target_v < 0.0) &&
 134                             		.loc 4 602 0 is_stmt 1
 135 0086 ED 7A 04                		mov.L	16[r7], r10
 136 0089 ED 7E 04                		mov.L	16[r7], r14
 137 008c FD 72 1A 00 00 00 00    		fcmp	#0x0, r10
 138 0093 26 05 38 14 01          		bn	.L63
 139                             		.balign 8,3,1
 140                             	.L30:
 602:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****             target_v < 0.0) &&
 141                             		.loc 4 602 0 is_stmt 0 discriminator 3
 142 0098 ED 7A 1D                		mov.L	116[r7], r10
 143 009b FD 72 1A 00 00 00 00    		fcmp	#0x0, r10
 144 00a2 ED 7A 1D                		mov.L	116[r7], r10
 145 00a5 26 05 38 F9 00          		bn	.L64
 146                             		.balign 8,3,2
 147                             	.L33:
 603:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****             scene_num == 3){
 148                             		.loc 4 603 0 is_stmt 1
 149 00aa FC 87 AE                		fcmp	r10, r14
 150 00ad 26 34                   		bpz	.L34
 603:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****             scene_num == 3){
 151                             		.loc 4 603 0 is_stmt 0 discriminator 2
 152 00af ED 7A 05                		mov.L	20[r7], r10
 602:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****             target_v < 0.0) &&
 153                             		.loc 4 602 0 is_stmt 1 discriminator 2
 154 00b2 FD 72 1A 00 00 00 00    		fcmp	#0x0, r10
 155 00b9 27 28                   		bn	.L34
 156 00bb 77 10 01 00 00          		.balign 8,3,5
 157                             	.L56:
 158 00c0 FB A2 00 00 00 00       		mov.L	#__ZZN11SimpleTrape5isEndEvE10time_count, r10
 621:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****             scene_num == 4){
 159                             		.loc 4 621 0
 160 00c6 05 00 00 00             		bsr	__Z14getElapsedMsecv
 161                             	.LVL7:
 162 00ca EC AA                   		mov.L	[r10], r10
 163 00cc 43 A1                   		sub	r10, r1
 164 00ce 76 01 E8 03             		cmp	#0x3e8, r1
 165 00d2 25 6B                   		bleu	.L39
 166                             		.balign 8,3,3
 167                             	.L65:
 621:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****             scene_num == 4){
 168                             		.loc 4 621 0 is_stmt 0 discriminator 1
 169 00d4 59 71 80                		movu.B	128[r7], r1
 170 00d7 61 41                   		cmp	#4, r1
 171 00d9 FC DB 10                		sceq.L	r1
 172 00dc 5B 11                   		movu.B	r1, r1
 173                             	.LBE424:
 627:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h **** 
 174                             		.loc 4 627 0 is_stmt 1 discriminator 1
 175 00de 3F 7A 06                		rtsd	#24, r7-r10
 176                             	.LVL8:
 177                             	.L34:
 178                             	.LBB425:
 603:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****             scene_num == 3){
 179                             		.loc 4 603 0 discriminator 1
 180 00e1 59 7A 80                		movu.B	128[r7], r10
 181 00e4 61 3A                   		cmp	#3, r10
 182 00e6 21 DA                   		bne	.L56
 605:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****             target_a = 0.0;
 183                             		.loc 4 605 0
 184 00e8 CD 7A 80                		mov.B	128[r7], r10
 185 00eb F8 02 00 00 00 00       		mov.L	#.LC0, [r0]
 186 00f1 5B AA                   		movu.B	r10, r10
 187 00f3 E7 0A 01                		mov.L	r10, 4[r0]
 188 00f6 05 00 00 00             		bsr	__Z9myprintf3PKcz
 189                             	.LVL9:
 606:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****             target_v = 0.0;
 190                             		.loc 4 606 0
 191 00fa 3E 76 00                		mov.L	#0x0, 24[r7]
 607:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****             target_x = end_x;
 192                             		.loc 4 607 0
 193 00fd 3E 75 00                		mov.L	#0x0, 20[r7]
 608:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****             scene_num ++;
 194                             		.loc 4 608 0
 195 0100 ED 7E 1D                		mov.L	116[r7], r14
 610:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****             Kp_ang_v = 0.0;
 196                             		.loc 4 610 0
 197 0103 FB A2 00 00 00 00       		mov.L	#__ZZN11SimpleTrape5isEndEvE10time_count, r10
 608:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****             scene_num ++;
 198                             		.loc 4 608 0
 199 0109 E7 7E 04                		mov.L	r14, 16[r7]
 609:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****             time_count = getElapsedMsec();
 200                             		.loc 4 609 0
 201 010c CD 7E 80                		mov.B	128[r7], r14
 202 010f 62 1E                   		add	#1, r14
 203 0111 C7 7E 80                		mov.B	r14, 128[r7]
 610:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****             Kp_ang_v = 0.0;
 204                             		.loc 4 610 0
 205 0114 05 00 00 00             		bsr	__Z14getElapsedMsecv
 206                             	.LVL10:
 611:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****             Ki_ang_v = 0.0;
 207                             		.loc 4 611 0
 208 0118 3E 7A 00                		mov.L	#0x0, 40[r7]
 612:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****             Kd_ang_v = 0.0;
 209                             		.loc 4 612 0
 210 011b 3E 7B 00                		mov.L	#0x0, 44[r7]
 613:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****             Kp_v = 0.00;
 211                             		.loc 4 613 0
 212 011e 3E 7C 00                		mov.L	#0x0, 48[r7]
 614:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****             Ki_v = 0.000;
 213                             		.loc 4 614 0
 214 0121 3E 7D 00                		mov.L	#0x0, 52[r7]
 615:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****             Kd_v = 0.000;
 215                             		.loc 4 615 0
 216 0124 3E 7E 00                		mov.L	#0x0, 56[r7]
 616:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h **** 
 217                             		.loc 4 616 0
 218 0127 3E 7F 00                		mov.L	#0x0, 60[r7]
 610:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****             Kp_ang_v = 0.0;
 219                             		.loc 4 610 0
 220 012a E3 A1                   		mov.L	r1, [r10]
 618:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         }
 221                             		.loc 4 618 0
 222 012c 3E F1 00                		mov.L	#0x0, 68[r7]
 621:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****             scene_num == 4){
 223                             		.loc 4 621 0
 224 012f 05 00 00 00             		bsr	__Z14getElapsedMsecv
 225                             	.LVL11:
 226 0133 EC AA                   		mov.L	[r10], r10
 227 0135 43 A1                   		sub	r10, r1
 228 0137 76 01 E8 03             		cmp	#0x3e8, r1
 229 013b 24 99                   		bgtu	.L65
 230                             		.balign 8,3,1
 231                             	.L39:
 626:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****     };
 232                             		.loc 4 626 0
 233 013d 66 01                   		mov	#0, r1
 234 013f 5B 11                   		movu.B	r1, r1
 235                             	.LBE425:
 627:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h **** 
 236                             		.loc 4 627 0
 237 0141 3F 7A 06                		rtsd	#24, r7-r10
 238                             	.LVL12:
 239                             	.L58:
 240                             	.LBB426:
 584:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****             myprintf3("%d\n",scene_num);
 241                             		.loc 4 584 0
 242 0144 F9 12 06 00 00 80 3F    		mov.L	#0x3f800000, 24[r1]
 585:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****             scene_num++;
 243                             		.loc 4 585 0
 244 014b CD 1A 80                		mov.B	128[r1], r10
 245 014e F8 02 00 00 00 00       		mov.L	#.LC0, [r0]
 246 0154 5B AA                   		movu.B	r10, r10
 247 0156 E7 0A 01                		mov.L	r10, 4[r0]
 248 0159 05 00 00 00             		bsr	__Z9myprintf3PKcz
 249                             	.LVL13:
 586:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         }
 250                             		.loc 4 586 0
 251 015d CD 7A 80                		mov.B	128[r7], r10
 252 0160 62 1A                   		add	#1, r10
 253 0162 C7 7A 80                		mov.B	r10, 128[r7]
 589:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****             scene_num == 1){
 254                             		.loc 4 589 0
 255 0165 ED 7A 04                		mov.L	16[r7], r10
 256 0168 FD 72 1A 00 00 00 00    		fcmp	#0x0, r10
 257 016f ED 7A 04                		mov.L	16[r7], r10
 258 0172 27 05 38 AC FE          		bpz	.L12
 259 0177 03                      		.balign 8,3,5
 260                             	.L59:
 589:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****             scene_num == 1){
 261                             		.loc 4 589 0 is_stmt 0 discriminator 1
 262 0178 70 AA 00 00 00 80       		add	#0x80000000, r10
 263 017e ED 7E 1D                		mov.L	116[r7], r14
 264 0181 FD 72 1E 00 00 00 00    		fcmp	#0x0, r14
 265 0188 ED 7E 1D                		mov.L	116[r7], r14
 266 018b 27 05 38 AB FE          		bpz	.L49
 267                             		.balign 8,3,5
 268                             	.L60:
 589:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****             scene_num == 1){
 269                             		.loc 4 589 0 discriminator 4
 270 0190 70 EE 00 00 00 80       		add	#0x80000000, r14
 271 0196 FD 72 3E 00 00 00 3F    		fmul	#0x3f000000, r14
 272 019d 38 A3 FE                		bra	.L15
 273                             	.L64:
 602:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****             target_v < 0.0) &&
 274                             		.loc 4 602 0 is_stmt 1 discriminator 4
 275 01a0 70 AA 00 00 00 80       		add	#0x80000000, r10
 276 01a6 38 04 FF                		bra	.L33
 277                             	.L63:
 602:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****             target_v < 0.0) &&
 278                             		.loc 4 602 0 is_stmt 0 discriminator 1
 279 01a9 70 EE 00 00 00 80       		add	#0x80000000, r14
 280 01af 38 E9 FE                		bra	.L30
 281                             	.L62:
 596:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****             scene_num == 2 ){
 282                             		.loc 4 596 0 is_stmt 1 discriminator 4
 283 01b2 70 EE 00 00 00 80       		add	#0x80000000, r14
 284 01b8 FD 72 3E 00 00 00 3F    		fmul	#0x3f000000, r14
 285 01bf 38 BA FE                		bra	.L24
 286                             	.L61:
 596:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****             scene_num == 2 ){
 287                             		.loc 4 596 0 is_stmt 0 discriminator 1
 288 01c2 70 AA 00 00 00 80       		add	#0x80000000, r10
 289 01c8 38 98 FE                		bra	.L21
 290                             	.L18:
 591:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****             target_a = 0.0;
 291                             		.loc 4 591 0 is_stmt 1
 292 01cb CD 7A 80                		mov.B	128[r7], r10
 293 01ce F8 02 00 00 00 00       		mov.L	#.LC0, [r0]
 294 01d4 5B AA                   		movu.B	r10, r10
 295 01d6 E7 0A 01                		mov.L	r10, 4[r0]
 296 01d9 05 00 00 00             		bsr	__Z9myprintf3PKcz
 297                             	.LVL14:
 592:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****             scene_num++;
 298                             		.loc 4 592 0
 299 01dd 3E 76 00                		mov.L	#0x0, 24[r7]
 593:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         }
 300                             		.loc 4 593 0
 301 01e0 CD 7A 80                		mov.B	128[r7], r10
 302 01e3 62 1A                   		add	#1, r10
 303 01e5 C7 7A 80                		mov.B	r10, 128[r7]
 304 01e8 38 65 FE                		bra	.L16
 305                             	.L27:
 598:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****             target_a = - 1.0;
 306                             		.loc 4 598 0
 307 01eb CD 7A 80                		mov.B	128[r7], r10
 308 01ee F8 02 00 00 00 00       		mov.L	#.LC0, [r0]
 309 01f4 5B AA                   		movu.B	r10, r10
 310 01f6 E7 0A 01                		mov.L	r10, 4[r0]
 311 01f9 05 00 00 00             		bsr	__Z9myprintf3PKcz
 312                             	.LVL15:
 599:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****             scene_num++;
 313                             		.loc 4 599 0
 314 01fd F9 72 06 00 00 80 BF    		mov.L	#0xbf800000, 24[r7]
 600:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         }
 315                             		.loc 4 600 0
 316 0204 CD 7A 80                		mov.B	128[r7], r10
 317 0207 62 1A                   		add	#1, r10
 318 0209 C7 7A 80                		mov.B	r10, 128[r7]
 319 020c 38 7A FE                		bra	.L25
 320                             	.LBE426:
 321                             	.LFE1052:
 323 020f 03                      		.section	.rodata.str1.1
 324                             	.LC1:
 325 0004 2D 2D 2D 2D 2D 0A 00    		.string	"-----\n"
 326                             	.LC2:
 327 000b 25 66 20 25 66 20 25 66 		.string	"%f %f %f \n"
 327      20 0A 00 
 328                             	.LC3:
 329 0016 25 66 20 25 78 0A 00    		.string	"%f %x\n"
 330                             	.LC4:
 331 001d 3D 3D 3D 3D 0A 00       		.string	"====\n"
 332                             		.section	.text._ZN11SimpleTrape8calcDutyEv,"axG",@progbits,_ZN11SimpleTrape8calcDutyEv,comdat
 333                             		.weak	__ZN11SimpleTrape8calcDutyEv
 335                             	__ZN11SimpleTrape8calcDutyEv:
 336                             	.LFB1053:
 629:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         MPU9250 &imu = MPU9250::getInstance();
 337                             		.loc 4 629 0
 338                             	.LVL16:
 339 0000 6E 6D                   		pushm	r6-r13
 340                             	.LCFI2:
 341 0002 71 00 E4                		add	#-28, r0
 342                             	.LCFI3:
 343                             	.LBB449:
 344                             	.LBB450:
 345                             	.LBB451:
  70:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\imu.hpp **** 		return instance;
 346                             		.loc 2 70 0
 347 0005 FB A2 00 00 00 00       		mov.L	#__ZGVZN7MPU925011getInstanceEvE8instance, r10
 348 000b 58 AB                   		movu.B	[r10], r11
 349                             	.LBE451:
 350                             	.LBE450:
 351                             	.LBE449:
 629:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         MPU9250 &imu = MPU9250::getInstance();
 352                             		.loc 4 629 0
 353 000d EF 17                   		mov.L	r1, r7
 354                             	.LBB480:
 355                             	.LBB456:
 356                             	.LBB452:
  70:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\imu.hpp **** 		return instance;
 357                             		.loc 2 70 0
 358 000f 61 0B                   		cmp	#0, r11
 359 0011 3A 0B 03                		beq	.L92
 360                             	.LVL17:
 361 0014 76 10 01 00             		.balign 8,3,5
 362                             	.L68:
 363                             	.LBE452:
 364                             	.LBE456:
 365                             	.LBB457:
 366                             	.LBB458:
 123:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h ****         return instance;
 367                             		.loc 3 123 0
 368 0018 FB C2 00 00 00 00       		mov.L	#__ZGVZN6UMouse11getInstanceEvE8instance, r12
 369 001e 58 CA                   		movu.B	[r12], r10
 370 0020 61 0A                   		cmp	#0, r10
 371 0022 3A 2E 03                		beq	.L93
 372                             		.balign 8,3,1
 373                             	.L71:
 374                             	.LBE458:
 375                             	.LBE457:
 635:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         target_ang   += target_ang_v * DELTA_T;
 376                             		.loc 4 635 0
 377 0025 ED 7A 03                		mov.L	12[r7], r10
 378 0028 ED 7B 02                		mov.L	8[r7], r11
 379 002b FD 72 3A 6F 12 83 3A    		fmul	#0x3a83126f, r10
 380 0032 FC 8B BA                		fadd	r11, r10
 381 0035 E7 7A 02                		mov.L	r10, 8[r7]
 636:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         accum_ang    += imu.omega_f[2] * DELTA_T;
 382                             		.loc 4 636 0
 383 0038 ED 7A 02                		mov.L	8[r7], r10
 384 003b ED 7B 01                		mov.L	4[r7], r11
 385 003e FD 72 3A 6F 12 83 3A    		fmul	#0x3a83126f, r10
 386 0045 FC 8B BA                		fadd	r11, r10
 387 0048 E7 7A 01                		mov.L	r10, 4[r7]
 637:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         //速度
 388                             		.loc 4 637 0
 389 004b FB B2 00 00 00 00       		mov.L	#__ZZN7MPU925011getInstanceEvE8instance, r11
 390 0051 ED BA 10                		mov.L	64[r11], r10
 391 0054 ED 7D 1E                		mov.L	120[r7], r13
 392 0057 FD 72 3A 6F 12 83 3A    		fmul	#0x3a83126f, r10
 393 005e FC 8B DA                		fadd	r13, r10
 394 0061 E7 7A 1E                		mov.L	r10, 120[r7]
 639:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         target_x += target_v * DELTA_T;
 395                             		.loc 4 639 0
 396 0064 ED 7A 06                		mov.L	24[r7], r10
 397 0067 ED 7D 05                		mov.L	20[r7], r13
 398 006a FD 72 3A 6F 12 83 3A    		fmul	#0x3a83126f, r10
 399 0071 FC 8B DA                		fadd	r13, r10
 400 0074 E7 7A 05                		mov.L	r10, 20[r7]
 640:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h **** 
 401                             		.loc 4 640 0
 402 0077 ED 7A 05                		mov.L	20[r7], r10
 403 007a ED 7D 04                		mov.L	16[r7], r13
 404 007d FD 72 3A 6F 12 83 3A    		fmul	#0x3a83126f, r10
 405 0084 FC 8B DA                		fadd	r13, r10
 406 0087 E7 7A 04                		mov.L	r10, 16[r7]
 643:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         error_d_ang = error_ang - error_ang_pre;
 407                             		.loc 4 643 0
 408 008a ED 7D 01                		mov.L	4[r7], r13
 409 008d ED 7A 1E                		mov.L	120[r7], r10
 647:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         //角速度
 410                             		.loc 4 647 0
 411 0090 FB 22 00 00 48 C3       		mov.L	#0xc3480000, r2
 643:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         error_d_ang = error_ang - error_ang_pre;
 412                             		.loc 4 643 0
 413 0096 FF 8A AD                		fsub	r10, r13, r10
 414 0099 E7 7A 10                		mov.L	r10, 64[r7]
 644:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         error_ang_pre = error_ang;
 415                             		.loc 4 644 0
 416 009c ED 7D 10                		mov.L	64[r7], r13
 417 009f ED 7A 12                		mov.L	72[r7], r10
 647:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         //角速度
 418                             		.loc 4 647 0
 419 00a2 FB 32 00 00 48 43       		mov.L	#0x43480000, r3
 644:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         error_ang_pre = error_ang;
 420                             		.loc 4 644 0
 421 00a8 FF 8A AD                		fsub	r10, r13, r10
 422 00ab E7 7A 13                		mov.L	r10, 76[r7]
 645:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         error_int_ang   += error_ang;
 423                             		.loc 4 645 0
 424 00ae ED 7D 10                		mov.L	64[r7], r13
 657:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         error_d_v = error_v - error_v_pre;
 425                             		.loc 4 657 0
 426 00b1 FB A2 00 00 00 00       		mov.L	#__ZZN6UMouse11getInstanceEvE8instance, r10
 645:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         error_int_ang   += error_ang;
 427                             		.loc 4 645 0
 428 00b7 E7 7D 12                		mov.L	r13, 72[r7]
 646:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         error_int_ang = constrain(error_int_ang, -200.0, 200.0);
 429                             		.loc 4 646 0
 430 00ba ED 7D 10                		mov.L	64[r7], r13
 431 00bd ED 7E 11                		mov.L	68[r7], r14
 432 00c0 FC 8B ED                		fadd	r14, r13
 433 00c3 E7 7D 11                		mov.L	r13, 68[r7]
 647:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         //角速度
 434                             		.loc 4 647 0
 435 00c6 AC 79                   		mov.L	68[r7], r1
 436 00c8 05 00 00 00             		bsr	__Z9constrainfff
 437                             	.LVL18:
 438 00cc A4 79                   		mov.L	r1, 68[r7]
 649:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         error_d_ang_v = error_ang_v - error_ang_v_pre;
 439                             		.loc 4 649 0
 440 00ce ED 7D 02                		mov.L	8[r7], r13
 441 00d1 ED BB 10                		mov.L	64[r11], r11
 654:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h **** 
 442                             		.loc 4 654 0
 443 00d4 FB 22 00 00 48 C3       		mov.L	#0xc3480000, r2
 649:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         error_d_ang_v = error_ang_v - error_ang_v_pre;
 444                             		.loc 4 649 0
 445 00da FF 8B BD                		fsub	r11, r13, r11
 446 00dd E7 7B 14                		mov.L	r11, 80[r7]
 650:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         error_ang_v_pre = error_ang_v;
 447                             		.loc 4 650 0
 448 00e0 ED 7D 14                		mov.L	80[r7], r13
 449 00e3 ED 7B 16                		mov.L	88[r7], r11
 654:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h **** 
 450                             		.loc 4 654 0
 451 00e6 FB 32 00 00 48 43       		mov.L	#0x43480000, r3
 650:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         error_ang_v_pre = error_ang_v;
 452                             		.loc 4 650 0
 453 00ec FF 8B BD                		fsub	r11, r13, r11
 454 00ef E7 7B 17                		mov.L	r11, 92[r7]
 651:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         //角度と角速度のI項
 455                             		.loc 4 651 0
 456 00f2 ED 7B 14                		mov.L	80[r7], r11
 457 00f5 E7 7B 16                		mov.L	r11, 88[r7]
 653:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         error_int_ang_v = constrain(error_int_ang_v, -200.0, 200.0);
 458                             		.loc 4 653 0
 459 00f8 ED 7B 14                		mov.L	80[r7], r11
 460 00fb ED 7D 15                		mov.L	84[r7], r13
 461 00fe FC 8B DB                		fadd	r13, r11
 462 0101 E7 7B 15                		mov.L	r11, 84[r7]
 654:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h **** 
 463                             		.loc 4 654 0
 464 0104 AD 79                   		mov.L	84[r7], r1
 465 0106 05 00 00 00             		bsr	__Z9constrainfff
 466                             	.LVL19:
 467 010a A5 79                   		mov.L	r1, 84[r7]
 657:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         error_d_v = error_v - error_v_pre;
 468                             		.loc 4 657 0
 469 010c ED 7D 05                		mov.L	20[r7], r13
 470 010f EE AB 61 02             		mov.L	2436[r10], r11
 662:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h **** 
 471                             		.loc 4 662 0
 472 0113 FB 22 00 00 A0 C1       		mov.L	#0xc1a00000, r2
 657:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         error_d_v = error_v - error_v_pre;
 473                             		.loc 4 657 0
 474 0119 FF 8B BD                		fsub	r11, r13, r11
 475 011c E7 7B 18                		mov.L	r11, 96[r7]
 658:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         error_v_pre = error_v;
 476                             		.loc 4 658 0
 477 011f ED 7D 18                		mov.L	96[r7], r13
 478 0122 ED 7B 1B                		mov.L	108[r7], r11
 662:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h **** 
 479                             		.loc 4 662 0
 480 0125 FB 32 00 00 A0 41       		mov.L	#0x41a00000, r3
 658:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         error_v_pre = error_v;
 481                             		.loc 4 658 0
 482 012b FF 8B BD                		fsub	r11, r13, r11
 483 012e E7 7B 1A                		mov.L	r11, 104[r7]
 659:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h **** 
 484                             		.loc 4 659 0
 485 0131 ED 7B 18                		mov.L	96[r7], r11
 486 0134 E7 7B 1B                		mov.L	r11, 108[r7]
 661:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         error_int_v = constrain(error_int_v, -20.0, 20.0);
 487                             		.loc 4 661 0
 488 0137 ED 7B 18                		mov.L	96[r7], r11
 489 013a ED 7D 19                		mov.L	100[r7], r13
 490 013d FC 8B DB                		fadd	r13, r11
 491 0140 E7 7B 19                		mov.L	r11, 100[r7]
 662:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h **** 
 492                             		.loc 4 662 0
 493 0143 AE 79                   		mov.L	100[r7], r1
 494 0145 05 00 00 00             		bsr	__Z9constrainfff
 495                             	.LVL20:
 496 0149 A6 79                   		mov.L	r1, 100[r7]
 665:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****                      + Ki_v * error_int_v
 497                             		.loc 4 665 0
 498 014b AB 7E                   		mov.L	52[r7], r6
 499 014d ED 7B 18                		mov.L	96[r7], r11
 666:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****                      + Kd_v * error_d_v)
 500                             		.loc 4 666 0
 501 0150 ED 79 0E                		mov.L	56[r7], r9
 502 0153 ED 7D 19                		mov.L	100[r7], r13
 667:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****                      * 8.4/m.Vcc;
 503                             		.loc 4 667 0
 504 0156 ED 7F 0F                		mov.L	60[r7], r15
 505 0159 AE F5                   		mov.L	104[r7], r5
 668:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h **** 
 506                             		.loc 4 668 0
 507 015b E6 A0 65 02 04          		mov.L	2452[r10], 16[r0]
 670:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****                          + Ki_ang * error_int_ang
 508                             		.loc 4 670 0
 509 0160 A9 F9                   		mov.L	28[r7], r1
 510 0162 AC 72                   		mov.L	64[r7], r2
 671:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****                          + Kd_ang * error_d_ang)
 511                             		.loc 4 671 0
 512 0164 AA 73                   		mov.L	32[r7], r3
 513 0166 AC 7C                   		mov.L	68[r7], r4
 672:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****                          * 8.4/m.Vcc;
 514                             		.loc 4 672 0
 515 0168 E5 70 09 05             		mov.L	36[r7], 20[r0]
 516 016c E5 70 13 06             		mov.L	76[r7], 24[r0]
 673:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h **** 
 517                             		.loc 4 673 0
 518 0170 EE AE 65 02             		mov.L	2452[r10], r14
 675:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****                          + Ki_ang_v * error_int_ang_v
 519                             		.loc 4 675 0
 520 0174 ED 78 0A                		mov.L	40[r7], r8
 521 0177 ED 78 14                		mov.L	80[r7], r8
 676:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****                          + Kd_ang_v * error_d_ang_v)
 522                             		.loc 4 676 0
 523 017a ED 78 0B                		mov.L	44[r7], r8
 524 017d ED 78 15                		mov.L	84[r7], r8
 677:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****                          * 8.4/m.Vcc;
 525                             		.loc 4 677 0
 526 0180 ED 78 0C                		mov.L	48[r7], r8
 527 0183 ED 78 17                		mov.L	92[r7], r8
 678:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h **** 
 528                             		.loc 4 678 0
 529 0186 EE A8 65 02             		mov.L	2452[r10], r8
 683:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         m.t_ang_v = target_ang_v;
 530                             		.loc 4 683 0
 531 018a ED 78 03                		mov.L	12[r7], r8
 665:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****                      + Ki_v * error_int_v
 532                             		.loc 4 665 0
 533 018d FC 8F 6B                		fmul	r6, r11
 683:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         m.t_ang_v = target_ang_v;
 534                             		.loc 4 683 0
 535 0190 E7 A8 04                		mov.L	r8, 16[r10]
 684:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         m.t_ang   = target_ang;
 536                             		.loc 4 684 0
 537 0193 ED 78 02                		mov.L	8[r7], r8
 666:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****                      + Kd_v * error_d_v)
 538                             		.loc 4 666 0
 539 0196 FC 8F 9D                		fmul	r9, r13
 684:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         m.t_ang   = target_ang;
 540                             		.loc 4 684 0
 541 0199 E7 A8 05                		mov.L	r8, 20[r10]
 685:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         m.accum_ang = accum_ang;
 542                             		.loc 4 685 0
 543 019c ED 78 01                		mov.L	4[r7], r8
 666:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****                      + Kd_v * error_d_v)
 544                             		.loc 4 666 0
 545 019f FC 8B DB                		fadd	r13, r11
 685:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         m.accum_ang = accum_ang;
 546                             		.loc 4 685 0
 547 01a2 E7 A8 06                		mov.L	r8, 24[r10]
 686:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h **** 
 548                             		.loc 4 686 0
 549 01a5 ED 7D 1E                		mov.L	120[r7], r13
 667:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****                      * 8.4/m.Vcc;
 550                             		.loc 4 667 0
 551 01a8 FC 8F F5                		fmul	r15, r5
 686:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h **** 
 552                             		.loc 4 686 0
 553 01ab E7 AD 07                		mov.L	r13, 28[r10]
 688:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         m.t_v = target_v;
 554                             		.loc 4 688 0
 555 01ae ED 7D 06                		mov.L	24[r7], r13
 667:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****                      * 8.4/m.Vcc;
 556                             		.loc 4 667 0
 557 01b1 FC 8B 5B                		fadd	r5, r11
 688:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         m.t_v = target_v;
 558                             		.loc 4 688 0
 559 01b4 E3 AD                   		mov.L	r13, [r10]
 689:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         m.t_x = target_x;
 560                             		.loc 4 689 0
 561 01b6 ED 7D 05                		mov.L	20[r7], r13
 668:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h **** 
 562                             		.loc 4 668 0
 563 01b9 FD 72 3B 66 66 06 41    		fmul	#0x41066666, r11
 689:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         m.t_x = target_x;
 564                             		.loc 4 689 0
 565 01c0 E7 AD 01                		mov.L	r13, 4[r10]
 690:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h **** 
 566                             		.loc 4 690 0
 567 01c3 ED 79 04                		mov.L	16[r7], r9
 670:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****                          + Ki_ang * error_int_ang
 568                             		.loc 4 670 0
 569 01c6 FF BD 12                		fmul	r1, r2, r13
 690:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h **** 
 570                             		.loc 4 690 0
 571 01c9 E7 A9 02                		mov.L	r9, 8[r10]
 671:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****                          + Kd_ang * error_d_ang)
 572                             		.loc 4 671 0
 573 01cc FC 8F 34                		fmul	r3, r4
 693:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         m.ang_I = Ki_ang * error_int_ang;
 574                             		.loc 4 693 0
 575 01cf ED 78 07                		mov.L	28[r7], r8
 668:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h **** 
 576                             		.loc 4 668 0
 577 01d2 A9 03                   		mov.L	16[r0], r3
 578 01d4 FC 93 3B                		fdiv	r3, r11
 579                             	.LVL21:
 693:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         m.ang_I = Ki_ang * error_int_ang;
 580                             		.loc 4 693 0
 581 01d7 ED 79 10                		mov.L	64[r7], r9
 671:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****                          + Kd_ang * error_d_ang)
 582                             		.loc 4 671 0
 583 01da FC 8B 4D                		fadd	r4, r13
 672:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****                          * 8.4/m.Vcc;
 584                             		.loc 4 672 0
 585 01dd A9 0C                   		mov.L	20[r0], r4
 586 01df A9 83                   		mov.L	24[r0], r3
 587 01e1 FF B6 43                		fmul	r4, r3, r6
 588 01e4 FC 8B 6D                		fadd	r6, r13
 693:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         m.ang_I = Ki_ang * error_int_ang;
 589                             		.loc 4 693 0
 590 01e7 FF B4 89                		fmul	r8, r9, r4
 591 01ea E7 A4 12                		mov.L	r4, 72[r10]
 694:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         m.ang_D = Kd_ang * error_d_ang;
 592                             		.loc 4 694 0
 593 01ed AA 73                   		mov.L	32[r7], r3
 594 01ef AC 7C                   		mov.L	68[r7], r4
 673:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h **** 
 595                             		.loc 4 673 0
 596 01f1 FD 72 3D 66 66 06 41    		fmul	#0x41066666, r13
 694:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         m.ang_D = Kd_ang * error_d_ang;
 597                             		.loc 4 694 0
 598 01f8 FC 8F 34                		fmul	r3, r4
 599 01fb E7 A4 13                		mov.L	r4, 76[r10]
 695:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h **** 
 600                             		.loc 4 695 0
 601 01fe AA 7B                   		mov.L	36[r7], r3
 602 0200 AC FC                   		mov.L	76[r7], r4
 673:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h **** 
 603                             		.loc 4 673 0
 604 0202 FC 93 ED                		fdiv	r14, r13
 605                             	.LVL22:
 695:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h **** 
 606                             		.loc 4 695 0
 607 0205 FF BE 34                		fmul	r3, r4, r14
 608 0208 E7 AE 14                		mov.L	r14, 80[r10]
 697:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         m.ang_v_I = Ki_ang_v * error_int_ang_v;
 609                             		.loc 4 697 0
 610 020b AA F4                   		mov.L	40[r7], r4
 611 020d ED 7E 14                		mov.L	80[r7], r14
 612 0210 FC 8F 4E                		fmul	r4, r14
 613 0213 E7 AE 0F                		mov.L	r14, 60[r10]
 698:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         m.ang_v_D = Kd_ang_v * error_d_ang_v;
 614                             		.loc 4 698 0
 615 0216 AA FC                   		mov.L	44[r7], r4
 616 0218 ED 7E 15                		mov.L	84[r7], r14
 617 021b FC 8F 4E                		fmul	r4, r14
 618 021e E7 AE 10                		mov.L	r14, 64[r10]
 699:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h **** 
 619                             		.loc 4 699 0
 620 0221 AB 74                   		mov.L	48[r7], r4
 621 0223 ED 7E 17                		mov.L	92[r7], r14
 622 0226 FC 8F 4E                		fmul	r4, r14
 623 0229 E7 AE 11                		mov.L	r14, 68[r10]
 702:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         float temp = target_v -m.v_enc;
 624                             		.loc 4 702 0
 625 022c AB 7C                   		mov.L	52[r7], r4
 626 022e A9 7B                   		mov.L	20[r7], r3
 627 0230 EE AE 61 02             		mov.L	2436[r10], r14
 628 0234 FF 8E E3                		fsub	r14, r3, r14
 629 0237 FC 8F 4E                		fmul	r4, r14
 630 023a E7 AE 0C                		mov.L	r14, 48[r10]
 703:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         if(target_v > m.v_enc){
 631                             		.loc 4 703 0
 632 023d ED 79 05                		mov.L	20[r7], r9
 633 0240 EE A3 61 02             		mov.L	2436[r10], r3
 704:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****             myprintf3("-----\n");
 634                             		.loc 4 704 0
 635 0244 ED 7E 05                		mov.L	20[r7], r14
 636 0247 EE A4 61 02             		mov.L	2436[r10], r4
 703:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         if(target_v > m.v_enc){
 637                             		.loc 4 703 0
 638 024b FC 83 39                		fsub	r3, r9
 639                             	.LVL23:
 704:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****             myprintf3("-----\n");
 640                             		.loc 4 704 0
 641 024e FC 87 E4                		fcmp	r14, r4
 642 0251 26 05 38 59 01          		bn	.L94
 709:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****             myprintf3("====\n");
 643                             		.loc 4 709 0
 644 0256 A9 7C                   		mov.L	20[r7], r4
 645 0258 EE AE 61 02             		mov.L	2436[r10], r14
 646 025c FB 82 00 00 00 00       		mov.L	#__ZZN6UMouse11getInstanceEvE8instance, r8
 647 0262 FF 8E E4                		fsub	r14, r4, r14
 648 0265 FD 72 1E 00 00 00 00    		fcmp	#0x0, r14
 649 026c 26 05 38 93 01          		bn	.L95
 650                             		.balign 8,3,1
 651                             	.L75:
 716:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         m.v_D = Kd_v * error_d_v;
 652                             		.loc 4 716 0
 653 0271 AB F3                   		mov.L	56[r7], r3
 654 0273 AE 7C                   		mov.L	100[r7], r4
 655                             	.LBB462:
 656                             	.LBB463:
 657                             	.LBB464:
 658                             	.LBB465:
 123:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h ****         return instance;
 659                             		.loc 3 123 0
 660 0275 58 CE                   		movu.B	[r12], r14
 661                             	.LBE465:
 662                             	.LBE464:
 663                             	.LBE463:
 664                             	.LBE462:
 716:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         m.v_D = Kd_v * error_d_v;
 665                             		.loc 4 716 0
 666 0277 FF BC 34                		fmul	r3, r4, r12
 667 027a E7 AC 0D                		mov.L	r12, 52[r10]
 717:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h **** 
 668                             		.loc 4 717 0
 669 027d AB FC                   		mov.L	60[r7], r4
 670 027f ED 7C 1A                		mov.L	104[r7], r12
 671 0282 FC 8F 4C                		fmul	r4, r12
 672 0285 E7 AC 0E                		mov.L	r12, 56[r10]
 719:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         m.ang_FF = FF_ang_duty.x;
 673                             		.loc 4 719 0
 674 0288 ED 7C 03                		mov.L	12[r7], r12
 675 028b A8 F7                   		mov.L	8[r7], r7
 676                             	.LVL24:
 677                             	.LBB475:
 678                             	.LBB472:
 679                             	.LBB470:
 680                             	.LBB466:
 123:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h ****         return instance;
 681                             		.loc 3 123 0
 682 028d 61 0E                   		cmp	#0, r14
 683 028f 3A EB 00                		beq	.L96
 684 0292 74 10 01 00 00 00       		.balign 8,3,6
 685                             	.L78:
 686                             	.LVL25:
 687                             	.LBE466:
 688                             	.LBE470:
  30:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         //モータとモータドライバの抵抗値
 689                             		.loc 4 30 0
 690 0298 FD 72 3C DB 0F 49 40    		fmul	#0x40490fdb, r12
 691                             	.LVL26:
 692 029f FD 72 4C 00 00 34 43    		fdiv	#0x43340000, r12
 693                             	.LVL27:
 694 02a6 FD 72 3C E1 A8 13 3A    		fmul	#0x3a13a8e1, r12
 695 02ad FD 72 4C 96 43 8B 3D    		fdiv	#0x3d8b4396, r12
 696                             	.LVL28:
  37:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         float v_R = + TREAD * PI * target_ang_v/360.0;
 697                             		.loc 4 37 0
 698 02b4 FD 72 37 62 C1 5A BE    		fmul	#0xbe5ac162, r7
 699                             	.LVL29:
  34:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         float torque_R = (+ F_rotation)*(0.5* DIA_TIRE/GEAR_RATIO);
 700                             		.loc 4 34 0
 701 02bb 70 CC 00 00 00 80       		add	#0x80000000, r12
 702                             	.LVL30:
  37:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         float v_R = + TREAD * PI * target_ang_v/360.0;
 703                             		.loc 4 37 0
 704 02c1 FD 72 47 00 00 B4 43    		fdiv	#0x43b40000, r7
 705                             	.LVL31:
  34:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         float torque_R = (+ F_rotation)*(0.5* DIA_TIRE/GEAR_RATIO);
 706                             		.loc 4 34 0
 707 02c8 FD 72 3C 7F A1 5D 3B    		fmul	#0x3b5da17f, r12
  40:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         float rpm_R = v_R * 60.0 /(PI * DIA_TIRE);
 708                             		.loc 4 40 0
 709 02cf FD 72 37 00 00 70 42    		fmul	#0x42700000, r7
 710                             	.LVL32:
  43:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         duty.y = (R*torque_R / K_T + K_E * rpm_R) / mouse.Vcc;
 711                             		.loc 4 43 0
 712 02d6 FD 72 3C E2 7A 04 40    		fmul	#0x40047ae2, r12
  40:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         float rpm_R = v_R * 60.0 /(PI * DIA_TIRE);
 713                             		.loc 4 40 0
 714 02dd FD 72 47 11 90 9F 3D    		fdiv	#0x3d9f9011, r7
 715                             	.LVL33:
  43:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         duty.y = (R*torque_R / K_T + K_E * rpm_R) / mouse.Vcc;
 716                             		.loc 4 43 0
 717 02e4 EE AE 65 02             		mov.L	2452[r10], r14
 718 02e8 FD 72 4C E3 C2 01 3B    		fdiv	#0x3b01c2e3, r12
 719 02ef FD 72 37 24 0E 59 39    		fmul	#0x39590e24, r7
 720                             	.LVL34:
 721 02f6 FC 8B C7                		fadd	r12, r7
 722 02f9 FC 93 E7                		fdiv	r14, r7
 723                             	.LVL35:
 724                             	.LBE472:
 725                             	.LBE475:
 722:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h **** 
 726                             		.loc 4 722 0
 727 02fc FB 22 CD CC 4C BE       		mov.L	#0xbe4ccccd, r2
 728 0302 EF D1                   		mov.L	r13, r1
 729 0304 FB 32 CD CC 4C 3E       		mov.L	#0x3e4ccccd, r3
 730                             	.LBB476:
 731                             	.LBB473:
  44:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h **** 
 732                             		.loc 4 44 0
 733 030a EE AC 65 02             		mov.L	2452[r10], r12
 734                             	.LVL36:
 735                             	.LBE473:
 736                             	.LBE476:
 720:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h **** 
 737                             		.loc 4 720 0
 738 030e E7 A7 16                		mov.L	r7, 88[r10]
 722:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h **** 
 739                             		.loc 4 722 0
 740 0311 05 00 00 00             		bsr	__Z9constrainfff
 741                             	.LVL37:
 730:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****     };
 742                             		.loc 4 730 0
 743 0315 EF B1                   		mov.L	r11, r1
 744                             	.LBE480:
 731:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h **** 
 745                             		.loc 4 731 0
 746 0317 EF B2                   		mov.L	r11, r2
 747 0319 3F 6D 0F                		rtsd	#60, r6-r13
 748                             	.LVL38:
 749                             	.L92:
 750                             	.LBB481:
 751                             	.LBB477:
 752                             	.LBB453:
  70:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\imu.hpp **** 		return instance;
 753                             		.loc 2 70 0
 754 031c EF A1                   		mov.L	r10, r1
 755                             	.LVL39:
 756 031e 05 00 00 00             		bsr	___cxa_guard_acquire
 757                             	.LVL40:
 758 0322 61 01                   		cmp	#0, r1
 759 0324 3A F4 FC                		beq	.L68
 760                             	.LVL41:
 761                             	.LBE453:
 762                             	.LBB454:
 763                             	.LBB455:
 764 0327 EF A1                   		mov.L	r10, r1
 765 0329 05 00 00 00             		bsr	___cxa_guard_release
 766                             	.LVL42:
 767 032d FB 12 00 00 00 00       		mov.L	#__ZN7MPU9250D1Ev, r1
 768 0333 FB 22 00 00 00 00       		mov.L	#__ZZN7MPU925011getInstanceEvE8instance, r2
 769 0339 FB 32 00 00 00 00       		mov.L	#___dso_handle, r3
 770 033f 05 00 00 00             		bsr	___cxa_atexit
 771                             	.LVL43:
 772                             	.LBE455:
 773                             	.LBE454:
 774                             	.LBE477:
 775                             	.LBB478:
 776                             	.LBB459:
 123:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h ****         return instance;
 777                             		.loc 3 123 0
 778 0343 FB C2 00 00 00 00       		mov.L	#__ZGVZN6UMouse11getInstanceEvE8instance, r12
 779 0349 58 CA                   		movu.B	[r12], r10
 780 034b 61 0A                   		cmp	#0, r10
 781 034d 3B D8 FC                		bne	.L71
 782                             	.LVL44:
 783                             		.balign 8,3,1
 784                             	.L93:
 785 0350 EF C1                   		mov.L	r12, r1
 786 0352 05 00 00 00             		bsr	___cxa_guard_acquire
 787                             	.LVL45:
 788 0356 61 01                   		cmp	#0, r1
 789 0358 3A CD FC                		beq	.L71
 790                             	.LVL46:
 791                             	.LBE459:
 792                             	.LBB460:
 793                             	.LBB461:
 794 035b EF C1                   		mov.L	r12, r1
 795 035d 05 00 00 00             		bsr	___cxa_guard_release
 796                             	.LVL47:
 797 0361 FB 12 00 00 00 00       		mov.L	#__ZN6UMouseD1Ev, r1
 798 0367 FB 22 00 00 00 00       		mov.L	#__ZZN6UMouse11getInstanceEvE8instance, r2
 799 036d FB 32 00 00 00 00       		mov.L	#___dso_handle, r3
 800 0373 05 00 00 00             		bsr	___cxa_atexit
 801                             	.LVL48:
 802 0377 38 AE FC                		bra	.L71
 803                             	.LVL49:
 804                             	.L96:
 805                             	.LBE461:
 806                             	.LBE460:
 807                             	.LBE478:
 808                             	.LBB479:
 809                             	.LBB474:
 810                             	.LBB471:
 811                             	.LBB467:
 812 037a FB 12 00 00 00 00       		mov.L	#__ZGVZN6UMouse11getInstanceEvE8instance, r1
 813 0380 05 00 00 00             		bsr	___cxa_guard_acquire
 814                             	.LVL50:
 815 0384 61 01                   		cmp	#0, r1
 816 0386 3A 12 FF                		beq	.L78
 817                             	.LVL51:
 818                             	.LBE467:
 819                             	.LBB468:
 820                             	.LBB469:
 821 0389 FB 12 00 00 00 00       		mov.L	#__ZGVZN6UMouse11getInstanceEvE8instance, r1
 822 038f 05 00 00 00             		bsr	___cxa_guard_release
 823                             	.LVL52:
 824 0393 FB 12 00 00 00 00       		mov.L	#__ZN6UMouseD1Ev, r1
 825 0399 FB 22 00 00 00 00       		mov.L	#__ZZN6UMouse11getInstanceEvE8instance, r2
 826 039f FB 32 00 00 00 00       		mov.L	#___dso_handle, r3
 827 03a5 05 00 00 00             		bsr	___cxa_atexit
 828                             	.LVL53:
 829 03a9 38 EF FE                		bra	.L78
 830                             	.LVL54:
 831                             	.L94:
 832                             	.LBE469:
 833                             	.LBE468:
 834                             	.LBE471:
 835                             	.LBE474:
 836                             	.LBE479:
 705:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****             myprintf3("%f %f %f \n",target_v, m.v_enc, target_v - m.v_enc);
 837                             		.loc 4 705 0
 838 03ac F8 02 04 00 00 00       		mov.L	#.LC1, [r0]
 839 03b2 05 00 00 00             		bsr	__Z9myprintf3PKcz
 840                             	.LVL55:
 706:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****             myprintf3("%f %x\n",temp,*(int*)&temp);
 841                             		.loc 4 706 0
 842 03b6 A9 7B                   		mov.L	20[r7], r3
 843 03b8 EE A4 61 02             		mov.L	2436[r10], r4
 844 03bc A9 7A                   		mov.L	20[r7], r2
 845 03be EE AE 61 02             		mov.L	2436[r10], r14
 846 03c2 F8 02 0B 00 00 00       		mov.L	#.LC2, [r0]
 847 03c8 FF 8E E2                		fsub	r14, r2, r14
 848 03cb A0 0B                   		mov.L	r3, 4[r0]
 849 03cd A0 84                   		mov.L	r4, 8[r0]
 850 03cf E7 0E 03                		mov.L	r14, 12[r0]
 851 03d2 05 00 00 00             		bsr	__Z9myprintf3PKcz
 852                             	.LVL56:
 707:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         }
 853                             		.loc 4 707 0
 854 03d6 F8 02 16 00 00 00       		mov.L	#.LC3, [r0]
 855 03dc E7 09 01                		mov.L	r9, 4[r0]
 856 03df E7 09 02                		mov.L	r9, 8[r0]
 857 03e2 05 00 00 00             		bsr	__Z9myprintf3PKcz
 858                             	.LVL57:
 709:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****             myprintf3("====\n");
 859                             		.loc 4 709 0
 860 03e6 A9 7C                   		mov.L	20[r7], r4
 861 03e8 EE AE 61 02             		mov.L	2436[r10], r14
 862 03ec FB 82 00 00 00 00       		mov.L	#__ZZN6UMouse11getInstanceEvE8instance, r8
 863 03f2 FF 8E E4                		fsub	r14, r4, r14
 864 03f5 FD 72 1E 00 00 00 00    		fcmp	#0x0, r14
 865 03fc 27 05 38 73 FE          		bpz	.L75
 866                             	.L95:
 710:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****             myprintf3("%f %f %f \n",target_v, m.v_enc, target_v - m.v_enc);
 867                             		.loc 4 710 0
 868 0401 F8 02 1D 00 00 00       		mov.L	#.LC4, [r0]
 869 0407 05 00 00 00             		bsr	__Z9myprintf3PKcz
 870                             	.LVL58:
 711:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****             myprintf3("%f %x\n",temp,*(int*)&temp);
 871                             		.loc 4 711 0
 872 040b A9 7B                   		mov.L	20[r7], r3
 873 040d EE 84 61 02             		mov.L	2436[r8], r4
 874 0411 A9 7A                   		mov.L	20[r7], r2
 875 0413 EE 8E 61 02             		mov.L	2436[r8], r14
 876 0417 F8 02 0B 00 00 00       		mov.L	#.LC2, [r0]
 877 041d FF 8E E2                		fsub	r14, r2, r14
 878 0420 A0 0B                   		mov.L	r3, 4[r0]
 879 0422 A0 84                   		mov.L	r4, 8[r0]
 880 0424 E7 0E 03                		mov.L	r14, 12[r0]
 881 0427 05 00 00 00             		bsr	__Z9myprintf3PKcz
 882                             	.LVL59:
 712:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h **** 
 883                             		.loc 4 712 0
 884 042b F8 02 16 00 00 00       		mov.L	#.LC3, [r0]
 885 0431 E7 09 01                		mov.L	r9, 4[r0]
 886 0434 E7 09 02                		mov.L	r9, 8[r0]
 887 0437 05 00 00 00             		bsr	__Z9myprintf3PKcz
 888                             	.LVL60:
 889 043b 38 36 FE                		bra	.L75
 890                             	.LBE481:
 891                             	.LFE1053:
 893 043e EF 00                   		.section	.text._ZN9EventListD2Ev,"axG",@progbits,_ZN9EventListD5Ev,comdat
 894                             		.weak	__ZN9EventListD2Ev
 896                             	__ZN9EventListD2Ev:
 897                             	.LFB1072:
 754:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h **** 
 755:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****     Vector2f calcDuty(){
 756:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         Vector2f duty(0.0,0.0);
 757:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h **** 
 758:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         duty.x = 0.0;
 759:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         duty.y = 0.0;
 760:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         MPU9250 &imu = MPU9250::getInstance();
 761:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h **** 
 762:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         if(ref_index < 200){
 763:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****             omega_x[ref_index] = imu.omega_raw[0];
 764:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****             omega_y[ref_index] = imu.omega_raw[1];
 765:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****             omega_z[ref_index] = imu.omega_raw[2];
 766:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h **** 
 767:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****             acc_x[ref_index] = imu.acc_raw[0];
 768:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****             acc_y[ref_index] = imu.acc_raw[1];
 769:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****             acc_z[ref_index] = imu.acc_raw[2];
 770:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h **** 
 771:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****             ref_index++;
 772:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         }
 773:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h **** 
 774:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         if(count == 200){
 775:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****             setRefGyro();
 776:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         }
 777:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         if(count == 201){
 778:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****             setRefAcc();
 779:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         }
 780:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h **** 
 781:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h **** 
 782:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         UMouse &m = UMouse::getInstance();
 783:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         m.t_a = 0.0;
 784:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         m.t_v = 0.0;
 785:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         m.t_x = 0.0;
 786:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         m.accum_x =0.0;
 787:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         m.t_ang_a = 0.0;
 788:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         m.t_ang_v = 0.0;
 789:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         m.t_ang = 0.0;
 790:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         m.accum_ang = 0.0;
 791:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h **** 
 792:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         m.a_v = 0.0;
 793:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         m.a_h = 0.0;
 794:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h **** 
 795:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         m.wall_P =0.0;
 796:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         m.wall_I =0.0;
 797:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         m.wall_D =0.0;
 798:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h **** 
 799:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         m.v_P =0.0;
 800:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         m.v_I =0.0;
 801:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         m.v_D = 0.0;
 802:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h **** 
 803:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         m.ang_v_P = 0.0;
 804:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         m.ang_v_I = 0.0;
 805:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         m.ang_v_D = 0.0;
 806:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h **** 
 807:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         m.ang_P = 0.0;
 808:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         m.ang_I = 0.0;
 809:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         m.ang_D = 0.0;
 810:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h **** 
 811:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         count++;
 812:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         return duty;
 813:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****     };
 814:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h **** 
 815:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h **** private:
 816:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****     uint32_t ref_index = 0;
 817:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****     int16_t omega_x[200];
 818:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****     int16_t omega_y[200];
 819:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****     int16_t omega_z[200];
 820:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h **** 
 821:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****     float omega_x_sum = 0.0;
 822:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****     float omega_y_sum = 0.0;
 823:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****     float omega_z_sum = 0.0;
 824:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h **** 
 825:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****     int16_t acc_x[200];
 826:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****     int16_t acc_y[200];
 827:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****     int16_t acc_z[200];
 828:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h **** 
 829:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****     float acc_x_sum = 0.0;
 830:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****     float acc_y_sum = 0.0;
 831:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****     float acc_z_sum = 0.0;
 832:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h **** 
 833:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h **** 
 834:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****     void setRefGyro(){
 835:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         MPU9250 &imu = MPU9250::getInstance();
 836:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h **** 
 837:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         uint16_t ref_num = ref_index;
 838:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         quickSort_int16(omega_x,0 ,ref_num -1);
 839:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         quickSort_int16(omega_y,0 ,ref_num -1);
 840:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         quickSort_int16(omega_z,0 ,ref_num -1);
 841:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h **** 
 842:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         for(int i=ref_num/4;i<(ref_num*3/4 +1) ;i++)
 843:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         {
 844:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****             omega_x_sum += (float)(omega_x[i]);
 845:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****             omega_y_sum += (float)(omega_y[i]);
 846:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****             omega_z_sum += (float)(omega_z[i]);
 847:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         }
 848:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         imu.omega_ref[0] = (int16_t)(omega_x_sum/(float)ref_num *2.0);
 849:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         imu.omega_ref[1] = (int16_t)(omega_y_sum/(float)ref_num *2.0);
 850:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         imu.omega_ref[2] = (int16_t)(omega_z_sum/(float)ref_num *2.0);
 851:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****     }
 852:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h **** 
 853:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****     void setRefAcc(){
 854:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         MPU9250 &imu = MPU9250::getInstance();
 855:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         uint16_t ref_num = ref_index;
 856:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         quickSort_int16(acc_x,0 ,ref_num -1);
 857:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         quickSort_int16(acc_y,0 ,ref_num -1);
 858:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         quickSort_int16(acc_z,0 ,ref_num -1);
 859:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h **** 
 860:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         for(int i=ref_num/4;i<(ref_num*3/4 +1) ;i++)
 861:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         {
 862:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****             acc_x_sum += (float)(acc_x[i]);
 863:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****             acc_y_sum += (float)(acc_y[i]);
 864:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****             acc_z_sum += (float)(acc_z[i]);
 865:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         }
 866:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         imu.acc_ref[0] = (int16_t)(acc_x_sum/(float)ref_num *2.0);
 867:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         imu.acc_ref[1] = (int16_t)(acc_y_sum/(float)ref_num *2.0);
 868:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         imu.acc_ref[2] = (int16_t)(acc_z_sum/(float)ref_num *2.0);
 869:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         myprintf3("====mpu9250======\n acc offset %d, %d, %d\n",imu.acc_ref[0],imu.acc_ref[1],imu.a
 870:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h **** 
 871:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****     }
 872:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h **** 
 873:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h **** };
 874:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h **** 
 875:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h **** 
 876:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h **** 
 877:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h **** #ifdef Memo
 878:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h **** 
 879:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h **** class PivotTurn : public BaseMoveEvent{
 880:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h **** public:
 881:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****     float ang_a;
 882:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****     float ang;
 883:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h **** 
 884:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****     PivotTurn(float ang_){
 885:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         paramInit();
 886:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         ang = ang_;
 887:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         ang_a = 500.0;
 888:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****     };
 889:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h **** 
 890:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****     bool isEnd(){
 891:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         return ((ABS(target_ang) >= ABS(ang)) ? true:false);
 892:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****     };
 893:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****     void trajectoryPlanning(){
 894:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         static uint8_t scene_num = 0;
 895:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h **** 
 896:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         switch (scene_num){
 897:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****             case 0:
 898:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****                 target_ang_a = ang_a;
 899:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****                 if(ABS(target_ang) >= ABS(ang)/3.0){
 900:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****                     target_ang_a = 0.0;
 901:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****                     scene_num ++;
 902:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****                 }
 903:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****                 break;
 904:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****             case 1:
 905:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****                 if(ABS(target_ang) >= ABS(ang)*2.0/3.0){
 906:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****                     target_ang_a *= -1.0;
 907:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****                     scene_num ++;
 908:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****                 }
 909:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****                 break;
 910:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****             case 2:
 911:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****                 if(ABS(target_ang) >= ABS(ang)){
 912:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****                     target_ang_a *= 0.0;
 913:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****                     scene_num ++;
 914:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****                 }
 915:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****                 break;
 916:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         }
 917:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h **** 
 918:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****     };
 919:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h **** 
 920:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****     virtual void updatePidError(){
 921:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         //*******フィードバック制御のゲイン***********//
 922:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         Kp_v = 0.9;//.5;
 923:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         //float Kd_v = 0.3;//;
 924:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         Ki_v = 0.3;//0.1;
 925:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h **** 
 926:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         Kp_ang_v = 0.0093;
 927:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         Ki_ang_v = 0.00042;
 928:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h **** 
 929:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         Kp_ang = 0.0005;//0.005;
 930:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         Ki_ang = 0.00005;//0.003;
 931:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         Kd_ang = 0.0;//0.001;
 932:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         //*********************************//
 933:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         UMouse& mouse = UMouse::getInstance();
 934:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         //速度と角度と角速度の偏差
 935:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         float v = mouse.v_enc_L - mouse.v_enc_R;
 936:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         error_v     = target_v     - v;
 937:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         error_ang   = target_ang   - accum_ang;
 938:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         error_ang_v = target_ang_v - mouse.ang_v;
 939:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         //速度と角度と角速度のI項
 940:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         error_int_v += error_v;
 941:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         error_int_ang += error_ang;
 942:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         error_int_ang_v += error_ang_v;
 943:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h **** 
 944:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         //I項のリミッター
 945:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         if(ABS(error_int_v) > 50.0){
 946:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****             if(error_int_v > 0) error_int_v = 50.0 ;
 947:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****             if(error_int_v < 0) error_int_v = -50.0;
 948:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         }
 949:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h **** 
 950:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         if(ABS(error_int_ang_v) > 1200.0 ){
 951:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****                 if(error_int_ang_v > 0) error_int_ang_v = 1200.0;
 952:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****                 if(error_int_ang_v < 0) error_int_ang_v = -1200.0;
 953:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         }
 954:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h **** 
 955:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         /*
 956:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         if(move_state != ROTATION){
 957:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****             error_int_ang_v=0.0;
 958:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         }
 959:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         */
 960:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h **** 
 961:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         if(ABS(error_int_ang) > 300.0 ){
 962:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****             if(error_int_ang > 0) error_int_ang = 300.0;
 963:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****             if(error_int_ang < 0) error_int_ang = -300.0;
 964:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         }
 965:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h **** 
 966:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h **** 
 967:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****     };
 968:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h **** 
 969:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h **** };
 970:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h **** #endif
 971:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h **** 
 972:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h **** class EventList{
 973:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h **** public:
 974:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h **** 
 975:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****     static EventList& getInstance(){
 976:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         static EventList instance;
 977:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         return instance;
 978:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****     };
 979:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****     void update(){
 980:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         if(eventList.empty() == false){
 981:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****             UMouse &mouse = UMouse::getInstance();
 982:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****             Vector2f duty = eventList.front()->calcDuty();
 983:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****             if(eventList.front()->isEnd() == true){
 984:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****                 delete eventList.front();
 985:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****                 eventList.pop();
 986:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****             }
 987:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****             mouse.setDuty(duty.x, duty.y);
 988:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h **** 
 989:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h **** 
 990:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         }
 991:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         else{
 992:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****             //UMouse &mouse = UMouse::getInstance();
 993:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****             float gyro_ang_v = MPU9250::getInstance().omega_f[2];
 994:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****             UMouse &mouse = UMouse::getInstance();
 995:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****             mouse.accum_ang += gyro_ang_v * DELTA_T;
 996:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****             mouse.t_v += mouse.a_v * DELTA_T;
 997:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         }
 998:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****     }
 999:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h **** 
1000:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****     void push(BaseMoveEvent* moveEve){
1001:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         eventList.push(moveEve);
1002:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****     }
1003:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h **** 
1004:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****     uint16_t getEventNum(){
1005:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         return eventList.size();
1006:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****     }
1007:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h **** 
1008:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h **** 
1009:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h **** 
1010:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h **** private:
1011:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****     queue<BaseMoveEvent*> eventList;
1012:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h **** 
1013:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****     EventList() {};
1014:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****     ~EventList() {};
 898                             		.loc 4 1014 0
 899 0000 6E 7B                   		pushm	r7-r11
 900                             	.LCFI4:
 901                             		.loc 4 1014 0
 902 0002 EF 1B                   		mov.L	r1, r11
 903                             	.LBB496:
 904                             	.LBB497:
 905                             	.LBB498:
 906                             	.LBB499:
 907                             		.file 5 "c:\\progra~2\\gccfor~2.201\\rx-elf\\rx-elf\\rx-elf\\include\\c++\\4.8.0.201602-gnurx\\bit
   1:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** // Deque implementation -*- C++ -*-
   2:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
   3:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** // Copyright (C) 2001-2013 Free Software Foundation, Inc.
   4:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** //
   5:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** // software; you can redistribute it and/or modify it under the
   7:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** // terms of the GNU General Public License as published by the
   8:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** // Free Software Foundation; either version 3, or (at your option)
   9:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** // any later version.
  10:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
  11:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** // This library is distributed in the hope that it will be useful,
  12:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** // GNU General Public License for more details.
  15:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
  16:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** // permissions described in the GCC Runtime Library Exception, version
  18:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** // 3.1, as published by the Free Software Foundation.
  19:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
  20:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** // You should have received a copy of the GNU General Public License and
  21:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** // <http://www.gnu.org/licenses/>.
  24:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
  25:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** /*
  26:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****  *
  27:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****  * Copyright (c) 1994
  28:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****  * Hewlett-Packard Company
  29:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****  *
  30:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****  * Permission to use, copy, modify, distribute and sell this software
  31:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****  * and its documentation for any purpose is hereby granted without fee,
  32:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****  * provided that the above copyright notice appear in all copies and
  33:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****  * that both that copyright notice and this permission notice appear
  34:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****  * in supporting documentation.  Hewlett-Packard Company makes no
  35:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****  * representations about the suitability of this software for any
  36:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  37:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****  *
  38:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****  *
  39:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****  * Copyright (c) 1997
  40:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****  * Silicon Graphics Computer Systems, Inc.
  41:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****  *
  42:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****  * Permission to use, copy, modify, distribute and sell this software
  43:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****  * and its documentation for any purpose is hereby granted without fee,
  44:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****  * provided that the above copyright notice appear in all copies and
  45:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****  * that both that copyright notice and this permission notice appear
  46:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****  * in supporting documentation.  Silicon Graphics makes no
  47:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****  * representations about the suitability of this software for any
  48:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  49:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****  */
  50:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
  51:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** /** @file bits/stl_deque.h
  52:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****  *  This is an internal header file, included by other library headers.
  53:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****  *  Do not attempt to use it directly. @headername{deque}
  54:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****  */
  55:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
  56:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** #ifndef _STL_DEQUE_H
  57:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** #define _STL_DEQUE_H 1
  58:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
  59:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** #include <bits/concept_check.h>
  60:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** #include <bits/stl_iterator_base_types.h>
  61:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** #include <bits/stl_iterator_base_funcs.h>
  62:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** #if __cplusplus >= 201103L
  63:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** #include <initializer_list>
  64:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** #endif
  65:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
  66:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** namespace std _GLIBCXX_VISIBILITY(default)
  67:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** {
  68:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** _GLIBCXX_BEGIN_NAMESPACE_CONTAINER
  69:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
  70:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****   /**
  71:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****    *  @brief This function controls the size of memory nodes.
  72:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****    *  @param  __size  The size of an element.
  73:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****    *  @return   The number (not byte size) of elements per node.
  74:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****    *
  75:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****    *  This function started off as a compiler kludge from SGI, but
  76:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****    *  seems to be a useful wrapper around a repeated constant
  77:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****    *  expression.  The @b 512 is tunable (and no other code needs to
  78:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****    *  change), but no investigation has been done since inheriting the
  79:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****    *  SGI code.  Touch _GLIBCXX_DEQUE_BUF_SIZE only if you know what
  80:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****    *  you are doing, however: changing it breaks the binary
  81:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****    *  compatibility!!
  82:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****   */
  83:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
  84:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** #ifndef _GLIBCXX_DEQUE_BUF_SIZE
  85:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** #define _GLIBCXX_DEQUE_BUF_SIZE 512
  86:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** #endif
  87:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
  88:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****   inline size_t
  89:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****   __deque_buf_size(size_t __size)
  90:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****   { return (__size < _GLIBCXX_DEQUE_BUF_SIZE
  91:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	    ? size_t(_GLIBCXX_DEQUE_BUF_SIZE / __size) : size_t(1)); }
  92:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
  93:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
  94:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****   /**
  95:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****    *  @brief A deque::iterator.
  96:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****    *
  97:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****    *  Quite a bit of intelligence here.  Much of the functionality of
  98:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****    *  deque is actually passed off to this class.  A deque holds two
  99:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****    *  of these internally, marking its valid range.  Access to
 100:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****    *  elements is done as offsets of either of those two, relying on
 101:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****    *  operator overloading in this class.
 102:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****    *
 103:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****    *  All the functions are op overloads except for _M_set_node.
 104:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****   */
 105:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****   template<typename _Tp, typename _Ref, typename _Ptr>
 106:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****     struct _Deque_iterator
 107:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****     {
 108:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       typedef _Deque_iterator<_Tp, _Tp&, _Tp*>             iterator;
 109:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       typedef _Deque_iterator<_Tp, const _Tp&, const _Tp*> const_iterator;
 110:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
 111:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       static size_t _S_buffer_size()
 112:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       { return __deque_buf_size(sizeof(_Tp)); }
 113:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
 114:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       typedef std::random_access_iterator_tag iterator_category;
 115:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       typedef _Tp                             value_type;
 116:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       typedef _Ptr                            pointer;
 117:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       typedef _Ref                            reference;
 118:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       typedef size_t                          size_type;
 119:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       typedef ptrdiff_t                       difference_type;
 120:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       typedef _Tp**                           _Map_pointer;
 121:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       typedef _Deque_iterator                 _Self;
 122:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
 123:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       _Tp* _M_cur;
 124:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       _Tp* _M_first;
 125:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       _Tp* _M_last;
 126:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       _Map_pointer _M_node;
 127:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
 128:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       _Deque_iterator(_Tp* __x, _Map_pointer __y)
 129:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       : _M_cur(__x), _M_first(*__y),
 130:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****         _M_last(*__y + _S_buffer_size()), _M_node(__y) { }
 131:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
 132:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       _Deque_iterator()
 133:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       : _M_cur(0), _M_first(0), _M_last(0), _M_node(0) { }
 134:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
 135:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       _Deque_iterator(const iterator& __x)
 136:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       : _M_cur(__x._M_cur), _M_first(__x._M_first),
 137:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****         _M_last(__x._M_last), _M_node(__x._M_node) { }
 138:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
 139:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       reference
 140:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       operator*() const
 141:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       { return *_M_cur; }
 142:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
 143:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       pointer
 144:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       operator->() const
 145:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       { return _M_cur; }
 146:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
 147:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       _Self&
 148:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       operator++()
 149:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       {
 150:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	++_M_cur;
 151:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	if (_M_cur == _M_last)
 152:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	  {
 153:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	    _M_set_node(_M_node + 1);
 154:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	    _M_cur = _M_first;
 155:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	  }
 156:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	return *this;
 157:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       }
 158:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
 159:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       _Self
 160:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       operator++(int)
 161:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       {
 162:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	_Self __tmp = *this;
 163:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	++*this;
 164:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	return __tmp;
 165:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       }
 166:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
 167:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       _Self&
 168:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       operator--()
 169:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       {
 170:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	if (_M_cur == _M_first)
 171:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	  {
 172:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	    _M_set_node(_M_node - 1);
 173:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	    _M_cur = _M_last;
 174:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	  }
 175:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	--_M_cur;
 176:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	return *this;
 177:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       }
 178:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
 179:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       _Self
 180:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       operator--(int)
 181:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       {
 182:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	_Self __tmp = *this;
 183:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	--*this;
 184:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	return __tmp;
 185:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       }
 186:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
 187:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       _Self&
 188:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       operator+=(difference_type __n)
 189:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       {
 190:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	const difference_type __offset = __n + (_M_cur - _M_first);
 191:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	if (__offset >= 0 && __offset < difference_type(_S_buffer_size()))
 192:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	  _M_cur += __n;
 193:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	else
 194:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	  {
 195:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	    const difference_type __node_offset =
 196:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	      __offset > 0 ? __offset / difference_type(_S_buffer_size())
 197:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	                   : -difference_type((-__offset - 1)
 198:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 					      / _S_buffer_size()) - 1;
 199:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	    _M_set_node(_M_node + __node_offset);
 200:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	    _M_cur = _M_first + (__offset - __node_offset
 201:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 				 * difference_type(_S_buffer_size()));
 202:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	  }
 203:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	return *this;
 204:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       }
 205:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
 206:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       _Self
 207:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       operator+(difference_type __n) const
 208:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       {
 209:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	_Self __tmp = *this;
 210:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	return __tmp += __n;
 211:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       }
 212:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
 213:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       _Self&
 214:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       operator-=(difference_type __n)
 215:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       { return *this += -__n; }
 216:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
 217:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       _Self
 218:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       operator-(difference_type __n) const
 219:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       {
 220:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	_Self __tmp = *this;
 221:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	return __tmp -= __n;
 222:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       }
 223:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
 224:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       reference
 225:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       operator[](difference_type __n) const
 226:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       { return *(*this + __n); }
 227:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
 228:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       /** 
 229:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  Prepares to traverse new_node.  Sets everything except
 230:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  _M_cur, which should therefore be set by the caller
 231:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  immediately afterwards, based on _M_first and _M_last.
 232:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        */
 233:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       void
 234:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       _M_set_node(_Map_pointer __new_node)
 235:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       {
 236:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	_M_node = __new_node;
 237:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	_M_first = *__new_node;
 238:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	_M_last = _M_first + difference_type(_S_buffer_size());
 239:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       }
 240:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****     };
 241:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
 242:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****   // Note: we also provide overloads whose operands are of the same type in
 243:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****   // order to avoid ambiguous overload resolution when std::rel_ops operators
 244:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****   // are in scope (for additional details, see libstdc++/3628)
 245:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****   template<typename _Tp, typename _Ref, typename _Ptr>
 246:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****     inline bool
 247:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****     operator==(const _Deque_iterator<_Tp, _Ref, _Ptr>& __x,
 248:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	       const _Deque_iterator<_Tp, _Ref, _Ptr>& __y)
 249:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****     { return __x._M_cur == __y._M_cur; }
 250:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
 251:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****   template<typename _Tp, typename _RefL, typename _PtrL,
 252:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	   typename _RefR, typename _PtrR>
 253:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****     inline bool
 254:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****     operator==(const _Deque_iterator<_Tp, _RefL, _PtrL>& __x,
 255:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	       const _Deque_iterator<_Tp, _RefR, _PtrR>& __y)
 256:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****     { return __x._M_cur == __y._M_cur; }
 257:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
 258:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****   template<typename _Tp, typename _Ref, typename _Ptr>
 259:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****     inline bool
 260:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****     operator!=(const _Deque_iterator<_Tp, _Ref, _Ptr>& __x,
 261:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	       const _Deque_iterator<_Tp, _Ref, _Ptr>& __y)
 262:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****     { return !(__x == __y); }
 263:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
 264:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****   template<typename _Tp, typename _RefL, typename _PtrL,
 265:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	   typename _RefR, typename _PtrR>
 266:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****     inline bool
 267:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****     operator!=(const _Deque_iterator<_Tp, _RefL, _PtrL>& __x,
 268:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	       const _Deque_iterator<_Tp, _RefR, _PtrR>& __y)
 269:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****     { return !(__x == __y); }
 270:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
 271:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****   template<typename _Tp, typename _Ref, typename _Ptr>
 272:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****     inline bool
 273:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****     operator<(const _Deque_iterator<_Tp, _Ref, _Ptr>& __x,
 274:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	      const _Deque_iterator<_Tp, _Ref, _Ptr>& __y)
 275:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****     { return (__x._M_node == __y._M_node) ? (__x._M_cur < __y._M_cur)
 276:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****                                           : (__x._M_node < __y._M_node); }
 277:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
 278:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****   template<typename _Tp, typename _RefL, typename _PtrL,
 279:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	   typename _RefR, typename _PtrR>
 280:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****     inline bool
 281:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****     operator<(const _Deque_iterator<_Tp, _RefL, _PtrL>& __x,
 282:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	      const _Deque_iterator<_Tp, _RefR, _PtrR>& __y)
 283:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****     { return (__x._M_node == __y._M_node) ? (__x._M_cur < __y._M_cur)
 284:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	                                  : (__x._M_node < __y._M_node); }
 285:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
 286:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****   template<typename _Tp, typename _Ref, typename _Ptr>
 287:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****     inline bool
 288:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****     operator>(const _Deque_iterator<_Tp, _Ref, _Ptr>& __x,
 289:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	      const _Deque_iterator<_Tp, _Ref, _Ptr>& __y)
 290:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****     { return __y < __x; }
 291:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
 292:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****   template<typename _Tp, typename _RefL, typename _PtrL,
 293:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	   typename _RefR, typename _PtrR>
 294:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****     inline bool
 295:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****     operator>(const _Deque_iterator<_Tp, _RefL, _PtrL>& __x,
 296:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	      const _Deque_iterator<_Tp, _RefR, _PtrR>& __y)
 297:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****     { return __y < __x; }
 298:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
 299:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****   template<typename _Tp, typename _Ref, typename _Ptr>
 300:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****     inline bool
 301:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****     operator<=(const _Deque_iterator<_Tp, _Ref, _Ptr>& __x,
 302:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	       const _Deque_iterator<_Tp, _Ref, _Ptr>& __y)
 303:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****     { return !(__y < __x); }
 304:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
 305:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****   template<typename _Tp, typename _RefL, typename _PtrL,
 306:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	   typename _RefR, typename _PtrR>
 307:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****     inline bool
 308:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****     operator<=(const _Deque_iterator<_Tp, _RefL, _PtrL>& __x,
 309:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	       const _Deque_iterator<_Tp, _RefR, _PtrR>& __y)
 310:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****     { return !(__y < __x); }
 311:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
 312:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****   template<typename _Tp, typename _Ref, typename _Ptr>
 313:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****     inline bool
 314:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****     operator>=(const _Deque_iterator<_Tp, _Ref, _Ptr>& __x,
 315:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	       const _Deque_iterator<_Tp, _Ref, _Ptr>& __y)
 316:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****     { return !(__x < __y); }
 317:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
 318:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****   template<typename _Tp, typename _RefL, typename _PtrL,
 319:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	   typename _RefR, typename _PtrR>
 320:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****     inline bool
 321:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****     operator>=(const _Deque_iterator<_Tp, _RefL, _PtrL>& __x,
 322:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	       const _Deque_iterator<_Tp, _RefR, _PtrR>& __y)
 323:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****     { return !(__x < __y); }
 324:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
 325:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****   // _GLIBCXX_RESOLVE_LIB_DEFECTS
 326:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****   // According to the resolution of DR179 not only the various comparison
 327:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****   // operators but also operator- must accept mixed iterator/const_iterator
 328:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****   // parameters.
 329:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****   template<typename _Tp, typename _Ref, typename _Ptr>
 330:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****     inline typename _Deque_iterator<_Tp, _Ref, _Ptr>::difference_type
 331:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****     operator-(const _Deque_iterator<_Tp, _Ref, _Ptr>& __x,
 332:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	      const _Deque_iterator<_Tp, _Ref, _Ptr>& __y)
 333:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****     {
 334:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       return typename _Deque_iterator<_Tp, _Ref, _Ptr>::difference_type
 335:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	(_Deque_iterator<_Tp, _Ref, _Ptr>::_S_buffer_size())
 336:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	* (__x._M_node - __y._M_node - 1) + (__x._M_cur - __x._M_first)
 337:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	+ (__y._M_last - __y._M_cur);
 338:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****     }
 339:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
 340:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****   template<typename _Tp, typename _RefL, typename _PtrL,
 341:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	   typename _RefR, typename _PtrR>
 342:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****     inline typename _Deque_iterator<_Tp, _RefL, _PtrL>::difference_type
 343:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****     operator-(const _Deque_iterator<_Tp, _RefL, _PtrL>& __x,
 344:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	      const _Deque_iterator<_Tp, _RefR, _PtrR>& __y)
 345:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****     {
 346:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       return typename _Deque_iterator<_Tp, _RefL, _PtrL>::difference_type
 347:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	(_Deque_iterator<_Tp, _RefL, _PtrL>::_S_buffer_size())
 348:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	* (__x._M_node - __y._M_node - 1) + (__x._M_cur - __x._M_first)
 349:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	+ (__y._M_last - __y._M_cur);
 350:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****     }
 351:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
 352:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****   template<typename _Tp, typename _Ref, typename _Ptr>
 353:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****     inline _Deque_iterator<_Tp, _Ref, _Ptr>
 354:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****     operator+(ptrdiff_t __n, const _Deque_iterator<_Tp, _Ref, _Ptr>& __x)
 355:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****     { return __x + __n; }
 356:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
 357:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****   template<typename _Tp>
 358:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****     void
 359:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****     fill(const _Deque_iterator<_Tp, _Tp&, _Tp*>&,
 360:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	 const _Deque_iterator<_Tp, _Tp&, _Tp*>&, const _Tp&);
 361:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
 362:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****   template<typename _Tp>
 363:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****     _Deque_iterator<_Tp, _Tp&, _Tp*>
 364:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****     copy(_Deque_iterator<_Tp, const _Tp&, const _Tp*>,
 365:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	 _Deque_iterator<_Tp, const _Tp&, const _Tp*>,
 366:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	 _Deque_iterator<_Tp, _Tp&, _Tp*>);
 367:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
 368:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****   template<typename _Tp>
 369:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****     inline _Deque_iterator<_Tp, _Tp&, _Tp*>
 370:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****     copy(_Deque_iterator<_Tp, _Tp&, _Tp*> __first,
 371:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	 _Deque_iterator<_Tp, _Tp&, _Tp*> __last,
 372:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	 _Deque_iterator<_Tp, _Tp&, _Tp*> __result)
 373:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****     { return std::copy(_Deque_iterator<_Tp, const _Tp&, const _Tp*>(__first),
 374:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 		       _Deque_iterator<_Tp, const _Tp&, const _Tp*>(__last),
 375:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 		       __result); }
 376:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
 377:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****   template<typename _Tp>
 378:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****     _Deque_iterator<_Tp, _Tp&, _Tp*>
 379:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****     copy_backward(_Deque_iterator<_Tp, const _Tp&, const _Tp*>,
 380:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 		  _Deque_iterator<_Tp, const _Tp&, const _Tp*>,
 381:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 		  _Deque_iterator<_Tp, _Tp&, _Tp*>);
 382:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
 383:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****   template<typename _Tp>
 384:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****     inline _Deque_iterator<_Tp, _Tp&, _Tp*>
 385:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****     copy_backward(_Deque_iterator<_Tp, _Tp&, _Tp*> __first,
 386:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 		  _Deque_iterator<_Tp, _Tp&, _Tp*> __last,
 387:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 		  _Deque_iterator<_Tp, _Tp&, _Tp*> __result)
 388:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****     { return std::copy_backward(_Deque_iterator<_Tp,
 389:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 				const _Tp&, const _Tp*>(__first),
 390:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 				_Deque_iterator<_Tp,
 391:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 				const _Tp&, const _Tp*>(__last),
 392:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 				__result); }
 393:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
 394:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** #if __cplusplus >= 201103L
 395:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****   template<typename _Tp>
 396:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****     _Deque_iterator<_Tp, _Tp&, _Tp*>
 397:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****     move(_Deque_iterator<_Tp, const _Tp&, const _Tp*>,
 398:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	 _Deque_iterator<_Tp, const _Tp&, const _Tp*>,
 399:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	 _Deque_iterator<_Tp, _Tp&, _Tp*>);
 400:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
 401:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****   template<typename _Tp>
 402:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****     inline _Deque_iterator<_Tp, _Tp&, _Tp*>
 403:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****     move(_Deque_iterator<_Tp, _Tp&, _Tp*> __first,
 404:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	 _Deque_iterator<_Tp, _Tp&, _Tp*> __last,
 405:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	 _Deque_iterator<_Tp, _Tp&, _Tp*> __result)
 406:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****     { return std::move(_Deque_iterator<_Tp, const _Tp&, const _Tp*>(__first),
 407:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 		       _Deque_iterator<_Tp, const _Tp&, const _Tp*>(__last),
 408:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 		       __result); }
 409:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
 410:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****   template<typename _Tp>
 411:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****     _Deque_iterator<_Tp, _Tp&, _Tp*>
 412:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****     move_backward(_Deque_iterator<_Tp, const _Tp&, const _Tp*>,
 413:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 		  _Deque_iterator<_Tp, const _Tp&, const _Tp*>,
 414:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 		  _Deque_iterator<_Tp, _Tp&, _Tp*>);
 415:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
 416:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****   template<typename _Tp>
 417:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****     inline _Deque_iterator<_Tp, _Tp&, _Tp*>
 418:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****     move_backward(_Deque_iterator<_Tp, _Tp&, _Tp*> __first,
 419:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 		  _Deque_iterator<_Tp, _Tp&, _Tp*> __last,
 420:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 		  _Deque_iterator<_Tp, _Tp&, _Tp*> __result)
 421:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****     { return std::move_backward(_Deque_iterator<_Tp,
 422:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 				const _Tp&, const _Tp*>(__first),
 423:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 				_Deque_iterator<_Tp,
 424:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 				const _Tp&, const _Tp*>(__last),
 425:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 				__result); }
 426:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** #endif
 427:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
 428:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****   /**
 429:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****    *  Deque base class.  This class provides the unified face for %deque's
 430:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****    *  allocation.  This class's constructor and destructor allocate and
 431:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****    *  deallocate (but do not initialize) storage.  This makes %exception
 432:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****    *  safety easier.
 433:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****    *
 434:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****    *  Nothing in this class ever constructs or destroys an actual Tp element.
 435:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****    *  (Deque handles that itself.)  Only/All memory management is performed
 436:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****    *  here.
 437:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****   */
 438:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****   template<typename _Tp, typename _Alloc>
 439:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****     class _Deque_base
 440:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****     {
 441:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****     public:
 442:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       typedef _Alloc                  allocator_type;
 443:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
 444:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       allocator_type
 445:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       get_allocator() const _GLIBCXX_NOEXCEPT
 446:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       { return allocator_type(_M_get_Tp_allocator()); }
 447:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
 448:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       typedef _Deque_iterator<_Tp, _Tp&, _Tp*>             iterator;
 449:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       typedef _Deque_iterator<_Tp, const _Tp&, const _Tp*> const_iterator;
 450:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
 451:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       _Deque_base()
 452:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       : _M_impl()
 453:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       { _M_initialize_map(0); }
 454:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
 455:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       _Deque_base(size_t __num_elements)
 456:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       : _M_impl()
 457:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       { _M_initialize_map(__num_elements); }
 458:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
 459:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       _Deque_base(const allocator_type& __a, size_t __num_elements)
 460:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       : _M_impl(__a)
 461:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       { _M_initialize_map(__num_elements); }
 462:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
 463:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       _Deque_base(const allocator_type& __a)
 464:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       : _M_impl(__a)
 465:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       { }
 466:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
 467:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** #if __cplusplus >= 201103L
 468:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       _Deque_base(_Deque_base&& __x)
 469:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       : _M_impl(std::move(__x._M_get_Tp_allocator()))
 470:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       {
 471:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	_M_initialize_map(0);
 472:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	if (__x._M_impl._M_map)
 473:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	  {
 474:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	    std::swap(this->_M_impl._M_start, __x._M_impl._M_start);
 475:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	    std::swap(this->_M_impl._M_finish, __x._M_impl._M_finish);
 476:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	    std::swap(this->_M_impl._M_map, __x._M_impl._M_map);
 477:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	    std::swap(this->_M_impl._M_map_size, __x._M_impl._M_map_size);
 478:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	  }
 479:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       }
 480:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** #endif
 481:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
 482:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       ~_Deque_base();
 483:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
 484:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****     protected:
 485:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       //This struct encapsulates the implementation of the std::deque
 486:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       //standard container and at the same time makes use of the EBO
 487:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       //for empty allocators.
 488:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       typedef typename _Alloc::template rebind<_Tp*>::other _Map_alloc_type;
 489:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
 490:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       typedef typename _Alloc::template rebind<_Tp>::other  _Tp_alloc_type;
 491:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
 492:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       struct _Deque_impl
 493:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       : public _Tp_alloc_type
 494:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       {
 495:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	_Tp** _M_map;
 496:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	size_t _M_map_size;
 497:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	iterator _M_start;
 498:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	iterator _M_finish;
 499:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
 500:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	_Deque_impl()
 501:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	: _Tp_alloc_type(), _M_map(0), _M_map_size(0),
 502:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	  _M_start(), _M_finish()
 503:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	{ }
 504:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
 505:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	_Deque_impl(const _Tp_alloc_type& __a)
 506:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	: _Tp_alloc_type(__a), _M_map(0), _M_map_size(0),
 507:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	  _M_start(), _M_finish()
 508:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	{ }
 509:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
 510:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** #if __cplusplus >= 201103L
 511:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	_Deque_impl(_Tp_alloc_type&& __a)
 512:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	: _Tp_alloc_type(std::move(__a)), _M_map(0), _M_map_size(0),
 513:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	  _M_start(), _M_finish()
 514:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	{ }
 515:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** #endif
 516:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       };
 517:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
 518:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       _Tp_alloc_type&
 519:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 520:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       { return *static_cast<_Tp_alloc_type*>(&this->_M_impl); }
 521:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
 522:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       const _Tp_alloc_type&
 523:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 524:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       { return *static_cast<const _Tp_alloc_type*>(&this->_M_impl); }
 525:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
 526:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       _Map_alloc_type
 527:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       _M_get_map_allocator() const _GLIBCXX_NOEXCEPT
 528:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       { return _Map_alloc_type(_M_get_Tp_allocator()); }
 529:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
 530:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       _Tp*
 531:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       _M_allocate_node()
 532:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       { 
 533:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	return _M_impl._Tp_alloc_type::allocate(__deque_buf_size(sizeof(_Tp)));
 534:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       }
 535:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
 536:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       void
 537:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       _M_deallocate_node(_Tp* __p)
 538:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       {
 539:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	_M_impl._Tp_alloc_type::deallocate(__p, __deque_buf_size(sizeof(_Tp)));
 540:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       }
 541:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
 542:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       _Tp**
 543:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       _M_allocate_map(size_t __n)
 544:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       { return _M_get_map_allocator().allocate(__n); }
 545:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
 546:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       void
 547:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       _M_deallocate_map(_Tp** __p, size_t __n)
 548:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       { _M_get_map_allocator().deallocate(__p, __n); }
 549:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
 550:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****     protected:
 551:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       void _M_initialize_map(size_t);
 552:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       void _M_create_nodes(_Tp** __nstart, _Tp** __nfinish);
 553:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       void _M_destroy_nodes(_Tp** __nstart, _Tp** __nfinish);
 554:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       enum { _S_initial_map_size = 8 };
 555:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
 556:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       _Deque_impl _M_impl;
 557:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****     };
 558:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
 559:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****   template<typename _Tp, typename _Alloc>
 560:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****     _Deque_base<_Tp, _Alloc>::
 561:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****     ~_Deque_base()
 562:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****     {
 563:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       if (this->_M_impl._M_map)
 908                             		.loc 5 563 0
 909 0004 EC 11                   		mov.L	[r1], r1
 910 0006 61 01                   		cmp	#0, r1
 911 0008 20 23                   		beq	.L97
 564:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	{
 565:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	  _M_destroy_nodes(this->_M_impl._M_start._M_node,
 566:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 			   this->_M_impl._M_finish._M_node + 1);
 912                             		.loc 5 566 0
 913 000a ED BA 09                		mov.L	36[r11], r10
 914 000d ED B7 05                		mov.L	20[r11], r7
 915 0010 62 4A                   		add	#4, r10
 916                             	.LBB500:
 917                             	.LBB501:
 567:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	  _M_deallocate_map(this->_M_impl._M_map, this->_M_impl._M_map_size);
 568:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	}
 569:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****     }
 570:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
 571:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****   /**
 572:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****    *  @brief Layout storage.
 573:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****    *  @param  __num_elements  The count of T's for which to allocate space
 574:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****    *                        at first.
 575:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****    *  @return   Nothing.
 576:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****    *
 577:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****    *  The initial underlying memory layout is a bit complicated...
 578:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****   */
 579:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****   template<typename _Tp, typename _Alloc>
 580:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****     void
 581:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****     _Deque_base<_Tp, _Alloc>::
 582:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****     _M_initialize_map(size_t __num_elements)
 583:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****     {
 584:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       const size_t __num_nodes = (__num_elements/ __deque_buf_size(sizeof(_Tp))
 585:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 				  + 1);
 586:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
 587:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,
 588:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 					   size_t(__num_nodes + 2));
 589:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       this->_M_impl._M_map = _M_allocate_map(this->_M_impl._M_map_size);
 590:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
 591:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       // For "small" maps (needing less than _M_map_size nodes), allocation
 592:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       // starts in the middle elements and grows outwards.  So nstart may be
 593:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       // the beginning of _M_map, but for small maps it may be as far in as
 594:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       // _M_map+3.
 595:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
 596:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       _Tp** __nstart = (this->_M_impl._M_map
 597:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 			+ (this->_M_impl._M_map_size - __num_nodes) / 2);
 598:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       _Tp** __nfinish = __nstart + __num_nodes;
 599:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
 600:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       __try
 601:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	{ _M_create_nodes(__nstart, __nfinish); }
 602:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       __catch(...)
 603:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	{
 604:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	  _M_deallocate_map(this->_M_impl._M_map, this->_M_impl._M_map_size);
 605:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	  this->_M_impl._M_map = 0;
 606:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	  this->_M_impl._M_map_size = 0;
 607:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	  __throw_exception_again;
 608:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	}
 609:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
 610:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       this->_M_impl._M_start._M_set_node(__nstart);
 611:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       this->_M_impl._M_finish._M_set_node(__nfinish - 1);
 612:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       this->_M_impl._M_start._M_cur = _M_impl._M_start._M_first;
 613:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
 614:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 					+ __num_elements
 615:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 					% __deque_buf_size(sizeof(_Tp)));
 616:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****     }
 617:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
 618:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****   template<typename _Tp, typename _Alloc>
 619:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****     void
 620:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****     _Deque_base<_Tp, _Alloc>::
 621:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****     _M_create_nodes(_Tp** __nstart, _Tp** __nfinish)
 622:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****     {
 623:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       _Tp** __cur;
 624:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       __try
 625:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	{
 626:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	  for (__cur = __nstart; __cur < __nfinish; ++__cur)
 627:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	    *__cur = this->_M_allocate_node();
 628:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	}
 629:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       __catch(...)
 630:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	{
 631:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	  _M_destroy_nodes(__nstart, __cur);
 632:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	  __throw_exception_again;
 633:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	}
 634:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****     }
 635:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
 636:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****   template<typename _Tp, typename _Alloc>
 637:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****     void
 638:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****     _Deque_base<_Tp, _Alloc>::
 639:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****     _M_destroy_nodes(_Tp** __nstart, _Tp** __nfinish)
 640:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****     {
 641:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       for (_Tp** __n = __nstart; __n < __nfinish; ++__n)
 918                             		.loc 5 641 0
 919 0012 47 A7                   		cmp	r10, r7
 920 0014 22 11                   		bgeu	.L99
 921 0016 EF 00                   		.balign 8,3,3
 922                             	.L101:
 923                             	.LBB502:
 924                             	.LBB503:
 925                             	.LBB504:
 926                             		.file 6 "c:\\progra~2\\gccfor~2.201\\rx-elf\\rx-elf\\rx-elf\\include\\c++\\4.8.0.201602-gnurx\\ext
   1:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\ext\new_allocator.h **** // Allocator that wraps operator new -*- C++ -*-
   2:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\ext\new_allocator.h **** 
   3:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\ext\new_allocator.h **** // Copyright (C) 2001-2013 Free Software Foundation, Inc.
   4:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\ext\new_allocator.h **** //
   5:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\ext\new_allocator.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\ext\new_allocator.h **** // software; you can redistribute it and/or modify it under the
   7:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\ext\new_allocator.h **** // terms of the GNU General Public License as published by the
   8:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\ext\new_allocator.h **** // Free Software Foundation; either version 3, or (at your option)
   9:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\ext\new_allocator.h **** // any later version.
  10:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\ext\new_allocator.h **** 
  11:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\ext\new_allocator.h **** // This library is distributed in the hope that it will be useful,
  12:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\ext\new_allocator.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\ext\new_allocator.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\ext\new_allocator.h **** // GNU General Public License for more details.
  15:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\ext\new_allocator.h **** 
  16:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\ext\new_allocator.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\ext\new_allocator.h **** // permissions described in the GCC Runtime Library Exception, version
  18:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\ext\new_allocator.h **** // 3.1, as published by the Free Software Foundation.
  19:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\ext\new_allocator.h **** 
  20:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\ext\new_allocator.h **** // You should have received a copy of the GNU General Public License and
  21:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\ext\new_allocator.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\ext\new_allocator.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\ext\new_allocator.h **** // <http://www.gnu.org/licenses/>.
  24:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\ext\new_allocator.h **** 
  25:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\ext\new_allocator.h **** /** @file ext/new_allocator.h
  26:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\ext\new_allocator.h ****  *  This file is a GNU extension to the Standard C++ Library.
  27:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\ext\new_allocator.h ****  */
  28:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\ext\new_allocator.h **** 
  29:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\ext\new_allocator.h **** #ifndef _NEW_ALLOCATOR_H
  30:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\ext\new_allocator.h **** #define _NEW_ALLOCATOR_H 1
  31:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\ext\new_allocator.h **** 
  32:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\ext\new_allocator.h **** #include <bits/c++config.h>
  33:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\ext\new_allocator.h **** #include <new>
  34:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\ext\new_allocator.h **** #include <bits/functexcept.h>
  35:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\ext\new_allocator.h **** #include <bits/move.h>
  36:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\ext\new_allocator.h **** #if __cplusplus >= 201103L
  37:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\ext\new_allocator.h **** #include <type_traits>
  38:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\ext\new_allocator.h **** #endif
  39:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\ext\new_allocator.h **** 
  40:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\ext\new_allocator.h **** namespace __gnu_cxx _GLIBCXX_VISIBILITY(default)
  41:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\ext\new_allocator.h **** {
  42:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\ext\new_allocator.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  43:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\ext\new_allocator.h **** 
  44:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\ext\new_allocator.h ****   using std::size_t;
  45:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\ext\new_allocator.h ****   using std::ptrdiff_t;
  46:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\ext\new_allocator.h **** 
  47:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\ext\new_allocator.h ****   /**
  48:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\ext\new_allocator.h ****    *  @brief  An allocator that uses global new, as per [20.4].
  49:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\ext\new_allocator.h ****    *  @ingroup allocators
  50:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\ext\new_allocator.h ****    *
  51:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\ext\new_allocator.h ****    *  This is precisely the allocator defined in the C++ Standard. 
  52:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\ext\new_allocator.h ****    *    - all allocation calls operator new
  53:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\ext\new_allocator.h ****    *    - all deallocation calls operator delete
  54:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\ext\new_allocator.h ****    *
  55:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\ext\new_allocator.h ****    *  @tparam  _Tp  Type of allocated object.
  56:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\ext\new_allocator.h ****    */
  57:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\ext\new_allocator.h ****   template<typename _Tp>
  58:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\ext\new_allocator.h ****     class new_allocator
  59:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\ext\new_allocator.h ****     {
  60:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\ext\new_allocator.h ****     public:
  61:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\ext\new_allocator.h ****       typedef size_t     size_type;
  62:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\ext\new_allocator.h ****       typedef ptrdiff_t  difference_type;
  63:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\ext\new_allocator.h ****       typedef _Tp*       pointer;
  64:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\ext\new_allocator.h ****       typedef const _Tp* const_pointer;
  65:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\ext\new_allocator.h ****       typedef _Tp&       reference;
  66:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\ext\new_allocator.h ****       typedef const _Tp& const_reference;
  67:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\ext\new_allocator.h ****       typedef _Tp        value_type;
  68:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\ext\new_allocator.h **** 
  69:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\ext\new_allocator.h ****       template<typename _Tp1>
  70:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\ext\new_allocator.h ****         struct rebind
  71:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\ext\new_allocator.h ****         { typedef new_allocator<_Tp1> other; };
  72:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\ext\new_allocator.h **** 
  73:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\ext\new_allocator.h **** #if __cplusplus >= 201103L
  74:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\ext\new_allocator.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
  75:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\ext\new_allocator.h ****       // 2103. propagate_on_container_move_assignment
  76:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\ext\new_allocator.h ****       typedef std::true_type propagate_on_container_move_assignment;
  77:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\ext\new_allocator.h **** #endif
  78:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\ext\new_allocator.h **** 
  79:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\ext\new_allocator.h ****       new_allocator() _GLIBCXX_USE_NOEXCEPT { }
  80:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\ext\new_allocator.h **** 
  81:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\ext\new_allocator.h ****       new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
  82:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\ext\new_allocator.h **** 
  83:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\ext\new_allocator.h ****       template<typename _Tp1>
  84:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\ext\new_allocator.h ****         new_allocator(const new_allocator<_Tp1>&) _GLIBCXX_USE_NOEXCEPT { }
  85:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\ext\new_allocator.h **** 
  86:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\ext\new_allocator.h ****       ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
  87:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\ext\new_allocator.h **** 
  88:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\ext\new_allocator.h ****       pointer
  89:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\ext\new_allocator.h ****       address(reference __x) const _GLIBCXX_NOEXCEPT
  90:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\ext\new_allocator.h ****       { return std::__addressof(__x); }
  91:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\ext\new_allocator.h **** 
  92:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\ext\new_allocator.h ****       const_pointer
  93:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\ext\new_allocator.h ****       address(const_reference __x) const _GLIBCXX_NOEXCEPT
  94:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\ext\new_allocator.h ****       { return std::__addressof(__x); }
  95:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\ext\new_allocator.h **** 
  96:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\ext\new_allocator.h ****       // NB: __n is permitted to be 0.  The C++ standard says nothing
  97:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\ext\new_allocator.h ****       // about what the return value is when __n == 0.
  98:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\ext\new_allocator.h ****       pointer
  99:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\ext\new_allocator.h ****       allocate(size_type __n, const void* = 0)
 100:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\ext\new_allocator.h ****       { 
 101:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\ext\new_allocator.h **** 	if (__n > this->max_size())
 102:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\ext\new_allocator.h **** 	  std::__throw_bad_alloc();
 103:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\ext\new_allocator.h **** 
 104:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\ext\new_allocator.h **** 	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 105:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\ext\new_allocator.h ****       }
 106:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\ext\new_allocator.h **** 
 107:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\ext\new_allocator.h ****       // __p is not permitted to be a null pointer.
 108:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\ext\new_allocator.h ****       void
 109:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\ext\new_allocator.h ****       deallocate(pointer __p, size_type)
 110:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\ext\new_allocator.h ****       { ::operator delete(__p); }
 927                             		.loc 6 110 0
 928 0018 FD 2A 71                		mov.L	[r7+], r1
 929 001b 05 00 00 00             		bsr	__ZdlPv
 930                             	.LBE504:
 931                             	.LBE503:
 932                             	.LBE502:
 933                             		.loc 5 641 0
 934 001f 47 7A                   		cmp	r7, r10
 935 0021 24 F7                   		bgtu	.L101
 936 0023 EC B1                   		mov.L	[r11], r1
 937                             		.balign 8,3,1
 938                             	.L99:
 939                             	.LBE501:
 940                             	.LBE500:
 941                             	.LBE499:
 942                             	.LBE498:
 943                             	.LBE497:
 944                             	.LBE496:
 945                             		.loc 4 1014 0
 946 0025 6F 7B                   		popm	r7-r11
 947                             	.LBB511:
 948                             	.LBB510:
 949                             	.LBB509:
 950                             	.LBB508:
 951                             	.LBB505:
 952                             	.LBB506:
 953                             	.LBB507:
 954                             		.loc 6 110 0
 955 0027 04 00 00 00             		bra	__ZdlPv
 956                             	.L97:
 957                             	.LBE507:
 958                             	.LBE506:
 959                             	.LBE505:
 960                             	.LBE508:
 961                             	.LBE509:
 962                             	.LBE510:
 963                             	.LBE511:
 964                             		.loc 4 1014 0
 965 002b 3F 7B 05                		rtsd	#20, r7-r11
 966                             	.LFE1072:
 968                             		.weak	__ZN9EventListD1Ev
 969                             		.set	__ZN9EventListD1Ev,__ZN9EventListD2Ev
 970 002e EF 00                   		.section	.rodata.str1.1
 971                             	.LC5:
 972 0023 3D 3D 3D 3D 6D 70 75 39 		.string	"====mpu9250======\n acc offset %d, %d, %d\n"
 972      32 35 30 3D 3D 3D 3D 3D 
 972      3D 0A 20 61 63 63 20 6F 
 972      66 66 73 65 74 20 25 64 
 972      2C 20 25 64 2C 20 25 64 
 973                             		.section	.text._ZN4Stop8calcDutyEv,"axG",@progbits,_ZN4Stop8calcDutyEv,comdat
 974                             		.weak	__ZN4Stop8calcDutyEv
 976                             	__ZN4Stop8calcDutyEv:
 977                             	.LFB1058:
 755:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         Vector2f duty(0.0,0.0);
 978                             		.loc 4 755 0
 979                             	.LVL61:
 980 0000 6E 7D                   		pushm	r7-r13
 981                             	.LCFI5:
 982 0002 71 00 F0                		add	#-16, r0
 983                             	.LCFI6:
 984                             	.LVL62:
 985                             	.LBB545:
 986                             	.LBB546:
 987                             	.LBB547:
  70:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\imu.hpp **** 		return instance;
 988                             		.loc 2 70 0
 989 0005 FB C2 00 00 00 00       		mov.L	#__ZGVZN7MPU925011getInstanceEvE8instance, r12
 990 000b 58 CA                   		movu.B	[r12], r10
 991                             	.LBE547:
 992                             	.LBE546:
 993                             	.LBE545:
 755:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         Vector2f duty(0.0,0.0);
 994                             		.loc 4 755 0
 995 000d EF 17                   		mov.L	r1, r7
 996                             	.LBB578:
 997                             	.LBB552:
 998                             	.LBB548:
  70:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\imu.hpp **** 		return instance;
 999                             		.loc 2 70 0
 1000 000f 61 0A                   		cmp	#0, r10
 1001 0011 3A CB 00                		beq	.L139
 1002                             	.LVL63:
 1003                             		.balign 8,3,1
 1004                             	.L105:
 1005                             	.LBE548:
 1006                             	.LBE552:
 762:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****             omega_x[ref_index] = imu.omega_raw[0];
 1007                             		.loc 4 762 0
 1008 0014 ED 79 03                		mov.L	12[r7], r9
 1009 0017 75 59 C7                		cmp	#0xc7, r9
 1010 001a 24 39                   		bgtu	.L107
 763:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****             omega_y[ref_index] = imu.omega_raw[1];
 1011                             		.loc 4 763 0
 1012 001c FB B2 00 00 00 00       		mov.L	#__ZZN7MPU925011getInstanceEvE8instance, r11
 1013 0022 DC B2                   		mov.W	[r11], r2
 1014 0024 FF 2A 99                		add	r9, r9, r10
 764:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****             omega_z[ref_index] = imu.omega_raw[2];
 1015                             		.loc 4 764 0
 1016 0027 DD B3 01                		mov.W	2[r11], r3
 765:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h **** 
 1017                             		.loc 4 765 0
 1018 002a DD B4 02                		mov.W	4[r11], r4
 767:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****             acc_y[ref_index] = imu.acc_raw[1];
 1019                             		.loc 4 767 0
 1020 002d DD BE 03                		mov.W	6[r11], r14
 768:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****             acc_z[ref_index] = imu.acc_raw[2];
 1021                             		.loc 4 768 0
 1022 0030 DD BD 04                		mov.W	8[r11], r13
 769:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h **** 
 1023                             		.loc 4 769 0
 1024 0033 DD BB 05                		mov.W	10[r11], r11
 1025 0036 4B 7A                   		add	r7, r10
 771:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         }
 1026                             		.loc 4 771 0
 1027 0038 62 19                   		add	#1, r9
 763:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****             omega_y[ref_index] = imu.omega_raw[1];
 1028                             		.loc 4 763 0
 1029 003a D7 A2 08                		mov.W	r2, 16[r10]
 764:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****             omega_z[ref_index] = imu.omega_raw[2];
 1030                             		.loc 4 764 0
 1031 003d D7 A3 D0                		mov.W	r3, 416[r10]
 765:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h **** 
 1032                             		.loc 4 765 0
 1033 0040 DB A4 98 01             		mov.W	r4, 816[r10]
 767:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****             acc_y[ref_index] = imu.acc_raw[1];
 1034                             		.loc 4 767 0
 1035 0044 DB AE 66 02             		mov.W	r14, 1228[r10]
 768:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****             acc_z[ref_index] = imu.acc_raw[2];
 1036                             		.loc 4 768 0
 1037 0048 DB AD 2E 03             		mov.W	r13, 1628[r10]
 769:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h **** 
 1038                             		.loc 4 769 0
 1039 004c DB AB F6 03             		mov.W	r11, 2028[r10]
 771:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         }
 1040                             		.loc 4 771 0
 1041 0050 E7 79 03                		mov.L	r9, 12[r7]
 1042                             		.balign 8,3,1
 1043                             	.L107:
 774:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****             setRefGyro();
 1044                             		.loc 4 774 0
 1045 0053 ED 7A 01                		mov.L	4[r7], r10
 1046 0056 75 5A C8                		cmp	#0xc8, r10
 1047 0059 3A FE 01                		beq	.L140
 1048                             		.balign 8,3,2
 1049                             	.L108:
 777:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****             setRefAcc();
 1050                             		.loc 4 777 0
 1051 005c 75 5A C9                		cmp	#0xc9, r10
 1052 005f 3A D1 00                		beq	.L141
 1053                             		.balign 8,3,5
 1054                             	.L115:
 1055                             	.LBB553:
 1056                             	.LBB554:
 123:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h ****         return instance;
 1057                             		.loc 3 123 0
 1058 0062 FB A2 00 00 00 00       		mov.L	#__ZGVZN6UMouse11getInstanceEvE8instance, r10
 1059 0068 58 AB                   		movu.B	[r10], r11
 1060 006a 61 0B                   		cmp	#0, r11
 1061 006c 3A 9A 00                		beq	.L142
 1062 006f 03                      		.balign 8,3,5
 1063                             	.L124:
 1064                             	.LBE554:
 1065                             	.LBE553:
 783:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         m.t_v = 0.0;
 1066                             		.loc 4 783 0
 1067 0070 FB A2 00 00 00 00       		mov.L	#__ZZN6UMouse11getInstanceEvE8instance, r10
 1068 0076 F8 A6 00                		mov.L	#0x0, [r10]
 784:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         m.t_x = 0.0;
 1069                             		.loc 4 784 0
 1070 0079 F9 A6 01 00             		mov.L	#0x0, 4[r10]
 785:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         m.accum_x =0.0;
 1071                             		.loc 4 785 0
 1072 007d F9 A6 02 00             		mov.L	#0x0, 8[r10]
 786:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         m.t_ang_a = 0.0;
 1073                             		.loc 4 786 0
 1074 0081 F9 A6 03 00             		mov.L	#0x0, 12[r10]
 787:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         m.t_ang_v = 0.0;
 1075                             		.loc 4 787 0
 1076 0085 F9 A6 04 00             		mov.L	#0x0, 16[r10]
 788:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         m.t_ang = 0.0;
 1077                             		.loc 4 788 0
 1078 0089 F9 A6 05 00             		mov.L	#0x0, 20[r10]
 789:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         m.accum_ang = 0.0;
 1079                             		.loc 4 789 0
 1080 008d F9 A6 06 00             		mov.L	#0x0, 24[r10]
 790:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h **** 
 1081                             		.loc 4 790 0
 1082 0091 F9 A6 07 00             		mov.L	#0x0, 28[r10]
 792:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         m.a_h = 0.0;
 1083                             		.loc 4 792 0
 1084 0095 F9 A6 18 00             		mov.L	#0x0, 96[r10]
 793:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h **** 
 1085                             		.loc 4 793 0
 1086 0099 F9 A6 19 00             		mov.L	#0x0, 100[r10]
 795:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         m.wall_I =0.0;
 1087                             		.loc 4 795 0
 1088 009d F9 A6 09 00             		mov.L	#0x0, 36[r10]
 796:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         m.wall_D =0.0;
 1089                             		.loc 4 796 0
 1090 00a1 F9 A6 0A 00             		mov.L	#0x0, 40[r10]
 797:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h **** 
 1091                             		.loc 4 797 0
 1092 00a5 F9 A6 0B 00             		mov.L	#0x0, 44[r10]
 799:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         m.v_I =0.0;
 1093                             		.loc 4 799 0
 1094 00a9 F9 A6 0C 00             		mov.L	#0x0, 48[r10]
 800:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         m.v_D = 0.0;
 1095                             		.loc 4 800 0
 1096 00ad F9 A6 0D 00             		mov.L	#0x0, 52[r10]
 801:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h **** 
 1097                             		.loc 4 801 0
 1098 00b1 F9 A6 0E 00             		mov.L	#0x0, 56[r10]
 803:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         m.ang_v_I = 0.0;
 1099                             		.loc 4 803 0
 1100 00b5 F9 A6 0F 00             		mov.L	#0x0, 60[r10]
 804:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         m.ang_v_D = 0.0;
 1101                             		.loc 4 804 0
 1102 00b9 F9 A6 10 00             		mov.L	#0x0, 64[r10]
 805:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h **** 
 1103                             		.loc 4 805 0
 1104 00bd F9 A6 11 00             		mov.L	#0x0, 68[r10]
 807:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         m.ang_I = 0.0;
 1105                             		.loc 4 807 0
 1106 00c1 F9 A6 12 00             		mov.L	#0x0, 72[r10]
 811:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         return duty;
 1107                             		.loc 4 811 0
 1108 00c5 ED 7B 01                		mov.L	4[r7], r11
 808:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         m.ang_D = 0.0;
 1109                             		.loc 4 808 0
 1110 00c8 F9 A6 13 00             		mov.L	#0x0, 76[r10]
 812:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****     };
 1111                             		.loc 4 812 0
 1112 00cc 66 01                   		mov.L	#0x0, r1
 809:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h **** 
 1113                             		.loc 4 809 0
 1114 00ce E7 A1 14                		mov.L	r1, 80[r10]
 811:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         return duty;
 1115                             		.loc 4 811 0
 1116 00d1 71 BA 01                		add	#1, r11, r10
 1117 00d4 E7 7A 01                		mov.L	r10, 4[r7]
 1118                             	.LBE578:
 813:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h **** 
 1119                             		.loc 4 813 0
 1120 00d7 EF 12                   		mov.L	r1, r2
 1121 00d9 3F 7D 0B                		rtsd	#44, r7-r13
 1122                             	.LVL64:
 1123                             	.L139:
 1124                             	.LBB579:
 1125                             	.LBB558:
 1126                             	.LBB549:
  70:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\imu.hpp **** 		return instance;
 1127                             		.loc 2 70 0
 1128 00dc EF C1                   		mov.L	r12, r1
 1129                             	.LVL65:
 1130 00de 05 00 00 00             		bsr	___cxa_guard_acquire
 1131                             	.LVL66:
 1132 00e2 61 01                   		cmp	#0, r1
 1133 00e4 3A 30 FF                		beq	.L105
 1134                             	.LVL67:
 1135                             	.LBE549:
 1136                             	.LBB550:
 1137                             	.LBB551:
 1138 00e7 EF C1                   		mov.L	r12, r1
 1139 00e9 05 00 00 00             		bsr	___cxa_guard_release
 1140                             	.LVL68:
 1141 00ed FB 12 00 00 00 00       		mov.L	#__ZN7MPU9250D1Ev, r1
 1142 00f3 FB 22 00 00 00 00       		mov.L	#__ZZN7MPU925011getInstanceEvE8instance, r2
 1143 00f9 FB 32 00 00 00 00       		mov.L	#___dso_handle, r3
 1144 00ff 05 00 00 00             		bsr	___cxa_atexit
 1145                             	.LVL69:
 1146 0103 38 11 FF                		bra	.L105
 1147                             	.LVL70:
 1148                             	.L142:
 1149                             	.LBE551:
 1150                             	.LBE550:
 1151                             	.LBE558:
 1152                             	.LBB559:
 1153                             	.LBB555:
 123:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h ****         return instance;
 1154                             		.loc 3 123 0
 1155 0106 EF A1                   		mov.L	r10, r1
 1156 0108 05 00 00 00             		bsr	___cxa_guard_acquire
 1157                             	.LVL71:
 1158 010c 61 01                   		cmp	#0, r1
 1159 010e 3A 62 FF                		beq	.L124
 1160                             	.LVL72:
 1161                             	.LBE555:
 1162                             	.LBB556:
 1163                             	.LBB557:
 1164 0111 EF A1                   		mov.L	r10, r1
 1165 0113 05 00 00 00             		bsr	___cxa_guard_release
 1166                             	.LVL73:
 1167 0117 FB 12 00 00 00 00       		mov.L	#__ZN6UMouseD1Ev, r1
 1168 011d FB 22 00 00 00 00       		mov.L	#__ZZN6UMouse11getInstanceEvE8instance, r2
 1169 0123 FB 32 00 00 00 00       		mov.L	#___dso_handle, r3
 1170 0129 05 00 00 00             		bsr	___cxa_atexit
 1171                             	.LVL74:
 1172 012d 38 43 FF                		bra	.L124
 1173                             	.LVL75:
 1174                             	.L141:
 1175                             	.LBE557:
 1176                             	.LBE556:
 1177                             	.LBE559:
 1178                             	.LBB560:
 1179                             	.LBB561:
 1180                             	.LBB562:
 1181                             	.LBB563:
  70:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\imu.hpp **** 		return instance;
 1182                             		.loc 2 70 0
 1183 0130 58 CA                   		movu.B	[r12], r10
 1184 0132 61 0A                   		cmp	#0, r10
 1185 0134 3A F1 00                		beq	.L143
 1186 0137 03                      		.balign 8,3,1
 1187                             	.L117:
 1188                             	.LBE563:
 1189                             	.LBE562:
 855:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         quickSort_int16(acc_x,0 ,ref_num -1);
 1190                             		.loc 4 855 0
 1191 0138 ED 7D 03                		mov.L	12[r7], r13
 1192                             	.LVL76:
 856:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         quickSort_int16(acc_y,0 ,ref_num -1);
 1193                             		.loc 4 856 0
 1194 013b 72 71 CC 04             		add	#0x4cc, r7, r1
 1195 013f FB BE FF FF 00          		mov.L	#0xffff, r11
 1196 0144 53 DB                   		and	r13, r11
 1197 0146 71 BA FF                		add	#-1, r11, r10
 1198 0149 66 02                   		mov.L	#0, r2
 1199 014b EF A3                   		mov.L	r10, r3
 1200 014d 05 00 00 00             		bsr	__Z15quickSort_int16Psmm
 1201                             	.LVL77:
 857:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         quickSort_int16(acc_z,0 ,ref_num -1);
 1202                             		.loc 4 857 0
 1203 0151 72 71 5C 06             		add	#0x65c, r7, r1
 1204 0155 66 02                   		mov.L	#0, r2
 1205 0157 EF A3                   		mov.L	r10, r3
 1206 0159 05 00 00 00             		bsr	__Z15quickSort_int16Psmm
 1207                             	.LVL78:
 858:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h **** 
 1208                             		.loc 4 858 0
 1209 015d 72 71 EC 07             		add	#0x7ec, r7, r1
 1210 0161 66 02                   		mov.L	#0, r2
 1211 0163 EF A3                   		mov.L	r10, r3
 1212 0165 05 00 00 00             		bsr	__Z15quickSort_int16Psmm
 1213                             	.LVL79:
 1214                             	.LBB567:
 860:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         {
 1215                             		.loc 4 860 0
 1216 0169 5F DD                   		movu.W	r13, r13
 1217                             	.LVL80:
 1218 016b 63 3B                   		mul	#3, r11
 1219 016d FD 82 DA                		shlr	#2, r13, r10
 1220                             	.LVL81:
 1221 0170 6A 2B                   		shar	#2, r11
 1222 0172 47 AB                   		cmp	r10, r11
 1223 0174 28 05 38 EB 01          		blt	.L144
 1224 0179 72 AE 66 02             		add	#0x266, r10, r14
 1225 017d 72 AF 2E 03             		add	#0x32e, r10, r15
 1226 0181 72 AA F6 03             		add	#0x3f6, r10
 1227                             	.LVL82:
 1228 0185 4B EE                   		add	r14, r14
 1229 0187 4B FF                   		add	r15, r15
 1230 0189 4B AA                   		add	r10, r10
 1231                             	.LVL83:
 1232 018b 72 7C CE 04             		add	#0x4ce, r7, r12
 1233 018f 4B BB                   		add	r11, r11
 1234 0191 EE 72 5F 02             		mov.L	2428[r7], r2
 1235 0195 EE 73 60 02             		mov.L	2432[r7], r3
 1236 0199 EE 74 61 02             		mov.L	2436[r7], r4
 1237 019d 4B 7E                   		add	r7, r14
 1238 019f 4B 7F                   		add	r7, r15
 1239 01a1 FF 25 A7                		add	r10, r7, r5
 1240 01a4 4B BC                   		add	r11, r12
 1241                             	.LVL84:
 1242 01a6 EF 00                   		.balign 8,3,5
 1243                             	.L122:
 862:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****             acc_y_sum += (float)(acc_y[i]);
 1244                             		.loc 4 862 0
 1245 01a8 FD 29 EB                		mov.W	[r14+], r11
 863:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****             acc_z_sum += (float)(acc_z[i]);
 1246                             		.loc 4 863 0
 1247 01ab FD 29 FA                		mov.W	[r15+], r10
 864:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         }
 1248                             		.loc 4 864 0
 1249 01ae FD 29 51                		mov.W	[r5+], r1
 862:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****             acc_y_sum += (float)(acc_y[i]);
 1250                             		.loc 4 862 0
 1251 01b1 FC 47 BB                		itof	r11, r11
 863:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****             acc_z_sum += (float)(acc_z[i]);
 1252                             		.loc 4 863 0
 1253 01b4 FC 47 AA                		itof	r10, r10
 864:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         }
 1254                             		.loc 4 864 0
 1255 01b7 FC 47 11                		itof	r1, r1
 862:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****             acc_y_sum += (float)(acc_y[i]);
 1256                             		.loc 4 862 0
 1257 01ba FC 8B B2                		fadd	r11, r2
 863:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****             acc_z_sum += (float)(acc_z[i]);
 1258                             		.loc 4 863 0
 1259 01bd FC 8B A3                		fadd	r10, r3
 864:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         }
 1260                             		.loc 4 864 0
 1261 01c0 FC 8B 14                		fadd	r1, r4
 860:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         {
 1262                             		.loc 4 860 0
 1263 01c3 47 CE                   		cmp	r12, r14
 1264 01c5 21 E3                   		bne	.L122
 1265 01c7 EB 72 5F 02             		mov.L	r2, 2428[r7]
 1266 01cb EB 73 60 02             		mov.L	r3, 2432[r7]
 1267 01cf EB 74 61 02             		mov.L	r4, 2436[r7]
 1268                             		.balign 8,3,2
 1269                             	.L120:
 1270                             	.LBE567:
 866:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         imu.acc_ref[1] = (int16_t)(acc_y_sum/(float)ref_num *2.0);
 1271                             		.loc 4 866 0
 1272 01d3 FC 57 DD                		utof	r13, r13
 1273 01d6 FC 93 D2                		fdiv	r13, r2
 1274 01d9 FC 8B 22                		fadd	r2, r2
 867:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         imu.acc_ref[2] = (int16_t)(acc_z_sum/(float)ref_num *2.0);
 1275                             		.loc 4 867 0
 1276 01dc FC 93 D3                		fdiv	r13, r3
 866:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         imu.acc_ref[1] = (int16_t)(acc_y_sum/(float)ref_num *2.0);
 1277                             		.loc 4 866 0
 1278 01df FB A2 00 00 00 00       		mov.L	#__ZZN7MPU925011getInstanceEvE8instance, r10
 1279 01e5 FC 97 2B                		ftoi	r2, r11
 867:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         imu.acc_ref[2] = (int16_t)(acc_z_sum/(float)ref_num *2.0);
 1280                             		.loc 4 867 0
 1281 01e8 FC 8B 33                		fadd	r3, r3
 868:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         myprintf3("====mpu9250======\n acc offset %d, %d, %d\n",imu.acc_ref[0],imu.acc_ref[1],imu.a
 1282                             		.loc 4 868 0
 1283 01eb FC 93 D4                		fdiv	r13, r4
 866:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         imu.acc_ref[1] = (int16_t)(acc_y_sum/(float)ref_num *2.0);
 1284                             		.loc 4 866 0
 1285 01ee D7 AB 0D                		mov.W	r11, 26[r10]
 867:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         imu.acc_ref[2] = (int16_t)(acc_z_sum/(float)ref_num *2.0);
 1286                             		.loc 4 867 0
 1287 01f1 FC 97 3B                		ftoi	r3, r11
 868:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         myprintf3("====mpu9250======\n acc offset %d, %d, %d\n",imu.acc_ref[0],imu.acc_ref[1],imu.a
 1288                             		.loc 4 868 0
 1289 01f4 FC 8B 44                		fadd	r4, r4
 867:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         imu.acc_ref[2] = (int16_t)(acc_z_sum/(float)ref_num *2.0);
 1290                             		.loc 4 867 0
 1291 01f7 D7 AB 0E                		mov.W	r11, 28[r10]
 868:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         myprintf3("====mpu9250======\n acc offset %d, %d, %d\n",imu.acc_ref[0],imu.acc_ref[1],imu.a
 1292                             		.loc 4 868 0
 1293 01fa FC 97 4B                		ftoi	r4, r11
 1294 01fd D7 AB 0F                		mov.W	r11, 30[r10]
 869:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h **** 
 1295                             		.loc 4 869 0
 1296 0200 DD AC 0D                		mov.W	26[r10], r12
 1297 0203 DD AB 0E                		mov.W	28[r10], r11
 1298 0206 DD AA 0F                		mov.W	30[r10], r10
 1299 0209 DF CC                   		mov.W	r12, r12
 1300 020b DF BB                   		mov.W	r11, r11
 1301 020d DF AA                   		mov.W	r10, r10
 1302 020f F8 02 23 00 00 00       		mov.L	#.LC5, [r0]
 1303 0215 E7 0C 01                		mov.L	r12, 4[r0]
 1304 0218 E7 0B 02                		mov.L	r11, 8[r0]
 1305 021b E7 0A 03                		mov.L	r10, 12[r0]
 1306 021e 05 00 00 00             		bsr	__Z9myprintf3PKcz
 1307                             	.LVL85:
 1308 0222 38 40 FE                		bra	.L115
 1309                             	.L143:
 1310                             	.LBB568:
 1311                             	.LBB564:
  70:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\imu.hpp **** 		return instance;
 1312                             		.loc 2 70 0
 1313 0225 FB 12 00 00 00 00       		mov.L	#__ZGVZN7MPU925011getInstanceEvE8instance, r1
 1314 022b 05 00 00 00             		bsr	___cxa_guard_acquire
 1315                             	.LVL86:
 1316 022f 61 01                   		cmp	#0, r1
 1317 0231 3A 07 FF                		beq	.L117
 1318                             	.LVL87:
 1319                             	.LBE564:
 1320                             	.LBB565:
 1321                             	.LBB566:
 1322 0234 FB 12 00 00 00 00       		mov.L	#__ZGVZN7MPU925011getInstanceEvE8instance, r1
 1323 023a 05 00 00 00             		bsr	___cxa_guard_release
 1324                             	.LVL88:
 1325 023e FB 12 00 00 00 00       		mov.L	#__ZN7MPU9250D1Ev, r1
 1326 0244 FB 22 00 00 00 00       		mov.L	#__ZZN7MPU925011getInstanceEvE8instance, r2
 1327 024a FB 32 00 00 00 00       		mov.L	#___dso_handle, r3
 1328 0250 05 00 00 00             		bsr	___cxa_atexit
 1329                             	.LVL89:
 1330 0254 38 E4 FE                		bra	.L117
 1331                             	.LVL90:
 1332                             	.L140:
 1333                             	.LBE566:
 1334                             	.LBE565:
 1335                             	.LBE568:
 1336                             	.LBE561:
 1337                             	.LBE560:
 1338                             	.LBB569:
 1339                             	.LBB570:
 1340                             	.LBB571:
 1341                             	.LBB572:
 1342 0257 58 CA                   		movu.B	[r12], r10
 1343 0259 61 0A                   		cmp	#0, r10
 1344 025b 3A CD 00                		beq	.L145
 1345 025e EF 00                   		.balign 8,3,4
 1346                             	.L109:
 1347 0260 FB BE FF FF 00          		mov.L	#0xffff, r11
 1348 0265 53 9B                   		and	r9, r11
 1349                             	.LBE572:
 1350                             	.LBE571:
 838:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         quickSort_int16(omega_y,0 ,ref_num -1);
 1351                             		.loc 4 838 0
 1352 0267 71 BA FF                		add	#-1, r11, r10
 1353 026a 71 71 10                		add	#16, r7, r1
 1354 026d 66 02                   		mov.L	#0, r2
 1355 026f EF A3                   		mov.L	r10, r3
 1356 0271 05 00 00 00             		bsr	__Z15quickSort_int16Psmm
 1357                             	.LVL91:
 839:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         quickSort_int16(omega_z,0 ,ref_num -1);
 1358                             		.loc 4 839 0
 1359 0275 72 71 A0 01             		add	#0x1a0, r7, r1
 1360 0279 66 02                   		mov.L	#0, r2
 1361 027b EF A3                   		mov.L	r10, r3
 1362 027d 05 00 00 00             		bsr	__Z15quickSort_int16Psmm
 1363                             	.LVL92:
 840:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h **** 
 1364                             		.loc 4 840 0
 1365 0281 72 71 30 03             		add	#0x330, r7, r1
 1366 0285 66 02                   		mov.L	#0, r2
 1367 0287 EF A3                   		mov.L	r10, r3
 1368 0289 05 00 00 00             		bsr	__Z15quickSort_int16Psmm
 1369                             	.LVL93:
 1370                             	.LBB576:
 842:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         {
 1371                             		.loc 4 842 0
 1372 028d 5F 9A                   		movu.W	r9, r10
 1373 028f 63 3B                   		mul	#3, r11
 1374 0291 68 2A                   		shlr	#2, r10
 1375 0293 6A 2B                   		shar	#2, r11
 1376                             	.LVL94:
 1377 0295 47 BA                   		cmp	r11, r10
 1378 0297 2B 05 38 D7 00          		bgt	.L146
 1379 029c 71 AE 08                		add	#8, r10, r14
 1380 029f 72 A2 D0 00             		add	#0xd0, r10, r2
 1381 02a3 72 AA 98 01             		add	#0x198, r10
 1382                             	.LVL95:
 1383 02a7 4B EE                   		add	r14, r14
 1384 02a9 4B 22                   		add	r2, r2
 1385 02ab FF 23 AA                		add	r10, r10, r3
 1386 02ae 71 71 12                		add	#18, r7, r1
 1387 02b1 FF 2D BB                		add	r11, r11, r13
 1388 02b4 EE 74 30 01             		mov.L	1216[r7], r4
 1389 02b8 EE 7B 31 01             		mov.L	1220[r7], r11
 1390 02bc EE 7A 32 01             		mov.L	1224[r7], r10
 1391                             	.LVL96:
 1392 02c0 4B 7E                   		add	r7, r14
 1393 02c2 4B 72                   		add	r7, r2
 1394 02c4 4B 73                   		add	r7, r3
 1395 02c6 4B 1D                   		add	r1, r13
 1396                             	.LVL97:
 1397                             		.balign 8,3,5
 1398                             	.L114:
 844:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****             omega_y_sum += (float)(omega_y[i]);
 1399                             		.loc 4 844 0
 1400 02c8 FD 29 EF                		mov.W	[r14+], r15
 845:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****             omega_z_sum += (float)(omega_z[i]);
 1401                             		.loc 4 845 0
 1402 02cb FD 29 25                		mov.W	[r2+], r5
 846:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         }
 1403                             		.loc 4 846 0
 1404 02ce FD 29 31                		mov.W	[r3+], r1
 844:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****             omega_y_sum += (float)(omega_y[i]);
 1405                             		.loc 4 844 0
 1406 02d1 FC 47 FF                		itof	r15, r15
 845:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****             omega_z_sum += (float)(omega_z[i]);
 1407                             		.loc 4 845 0
 1408 02d4 FC 47 55                		itof	r5, r5
 846:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         }
 1409                             		.loc 4 846 0
 1410 02d7 FC 47 11                		itof	r1, r1
 844:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****             omega_y_sum += (float)(omega_y[i]);
 1411                             		.loc 4 844 0
 1412 02da FC 8B F4                		fadd	r15, r4
 845:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****             omega_z_sum += (float)(omega_z[i]);
 1413                             		.loc 4 845 0
 1414 02dd FC 8B 5B                		fadd	r5, r11
 846:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         }
 1415                             		.loc 4 846 0
 1416 02e0 FC 8B 1A                		fadd	r1, r10
 842:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         {
 1417                             		.loc 4 842 0
 1418 02e3 47 DE                   		cmp	r13, r14
 1419 02e5 21 E3                   		bne	.L114
 1420 02e7 EB 74 30 01             		mov.L	r4, 1216[r7]
 1421 02eb EB 7B 31 01             		mov.L	r11, 1220[r7]
 1422 02ef EB 7A 32 01             		mov.L	r10, 1224[r7]
 1423                             		.balign 8,3,1
 1424                             	.L112:
 1425                             	.LBE576:
 848:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         imu.omega_ref[1] = (int16_t)(omega_y_sum/(float)ref_num *2.0);
 1426                             		.loc 4 848 0
 1427 02f3 5F 9E                   		movu.W	r9, r14
 1428 02f5 FC 57 EE                		utof	r14, r14
 1429 02f8 FC 93 E4                		fdiv	r14, r4
 1430 02fb FC 8B 44                		fadd	r4, r4
 849:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         imu.omega_ref[2] = (int16_t)(omega_z_sum/(float)ref_num *2.0);
 1431                             		.loc 4 849 0
 1432 02fe FC 93 EB                		fdiv	r14, r11
 848:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         imu.omega_ref[1] = (int16_t)(omega_y_sum/(float)ref_num *2.0);
 1433                             		.loc 4 848 0
 1434 0301 FB D2 00 00 00 00       		mov.L	#__ZZN7MPU925011getInstanceEvE8instance, r13
 1435 0307 FC 97 44                		ftoi	r4, r4
 849:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         imu.omega_ref[2] = (int16_t)(omega_z_sum/(float)ref_num *2.0);
 1436                             		.loc 4 849 0
 1437 030a FC 8B BB                		fadd	r11, r11
 850:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****     }
 1438                             		.loc 4 850 0
 1439 030d FC 93 EA                		fdiv	r14, r10
 848:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         imu.omega_ref[1] = (int16_t)(omega_y_sum/(float)ref_num *2.0);
 1440                             		.loc 4 848 0
 1441 0310 D7 D4 0A                		mov.W	r4, 20[r13]
 849:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         imu.omega_ref[2] = (int16_t)(omega_z_sum/(float)ref_num *2.0);
 1442                             		.loc 4 849 0
 1443 0313 FC 97 BB                		ftoi	r11, r11
 850:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****     }
 1444                             		.loc 4 850 0
 1445 0316 FC 8B AA                		fadd	r10, r10
 849:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         imu.omega_ref[2] = (int16_t)(omega_z_sum/(float)ref_num *2.0);
 1446                             		.loc 4 849 0
 1447 0319 D7 DB 0B                		mov.W	r11, 22[r13]
 850:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****     }
 1448                             		.loc 4 850 0
 1449 031c FC 97 AA                		ftoi	r10, r10
 1450 031f D7 DA 0C                		mov.W	r10, 24[r13]
 1451 0322 ED 7A 01                		mov.L	4[r7], r10
 1452 0325 38 37 FD                		bra	.L108
 1453                             	.LVL98:
 1454                             	.L145:
 1455                             	.LBB577:
 1456                             	.LBB573:
  70:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\imu.hpp **** 		return instance;
 1457                             		.loc 2 70 0
 1458 0328 FB 12 00 00 00 00       		mov.L	#__ZGVZN7MPU925011getInstanceEvE8instance, r1
 1459 032e 05 00 00 00             		bsr	___cxa_guard_acquire
 1460                             	.LVL99:
 1461 0332 61 01                   		cmp	#0, r1
 1462 0334 1F                      		bne	.L110
 1463 0335 ED 79 03                		mov.L	12[r7], r9
 1464 0338 38 28 FF                		bra	.L109
 1465                             	.L110:
 1466                             	.LVL100:
 1467                             	.LBE573:
 1468                             	.LBB574:
 1469                             	.LBB575:
 1470 033b FB 12 00 00 00 00       		mov.L	#__ZGVZN7MPU925011getInstanceEvE8instance, r1
 1471 0341 05 00 00 00             		bsr	___cxa_guard_release
 1472                             	.LVL101:
 1473 0345 FB 12 00 00 00 00       		mov.L	#__ZN7MPU9250D1Ev, r1
 1474 034b FB 22 00 00 00 00       		mov.L	#__ZZN7MPU925011getInstanceEvE8instance, r2
 1475 0351 FB 32 00 00 00 00       		mov.L	#___dso_handle, r3
 1476 0357 05 00 00 00             		bsr	___cxa_atexit
 1477                             	.LVL102:
 1478 035b ED 79 03                		mov.L	12[r7], r9
 1479 035e 38 02 FF                		bra	.L109
 1480                             	.LVL103:
 1481                             	.L144:
 1482 0361 EE 72 5F 02             		mov.L	2428[r7], r2
 1483 0365 EE 73 60 02             		mov.L	2432[r7], r3
 1484 0369 EE 74 61 02             		mov.L	2436[r7], r4
 1485 036d 38 66 FE                		bra	.L120
 1486                             	.LVL104:
 1487                             	.L146:
 1488 0370 EE 74 30 01             		mov.L	1216[r7], r4
 1489 0374 EE 7B 31 01             		mov.L	1220[r7], r11
 1490 0378 EE 7A 32 01             		mov.L	1224[r7], r10
 1491                             	.LVL105:
 1492 037c 38 77 FF                		bra	.L112
 1493                             	.LBE575:
 1494                             	.LBE574:
 1495                             	.LBE577:
 1496                             	.LBE570:
 1497                             	.LBE569:
 1498                             	.LBE579:
 1499                             	.LFE1058:
 1501                             		.global	___gxx_personality_sj0
 1502                             		.global	__Unwind_SjLj_Register
 1503                             		.global	_abort
 1504                             		.global	__Unwind_SjLj_Unregister
 1505 037f 03                      		.section	.text._ZNSt11_Deque_baseIP13BaseMoveEventSaIS1_EE17_M_initialize_mapEm,"axG",@progbits,_Z
 1506                             		.weak	__ZNSt11_Deque_baseIP13BaseMoveEventSaIS1_EE17_M_initialize_mapEm
 1508                             	__ZNSt11_Deque_baseIP13BaseMoveEventSaIS1_EE17_M_initialize_mapEm:
 1509                             	.LFB1137:
 581:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****     _M_initialize_map(size_t __num_elements)
 1510                             		.loc 5 581 0
 1511                             	.LVL106:
 1512 0000 6E 6A                   		pushm	r6-r10
 1513                             	.LCFI7:
 1514 0002 71 00 B8                		add	#0xffffffb8, r0
 1515                             	.LCFI8:
 581:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****     _M_initialize_map(size_t __num_elements)
 1516                             		.loc 5 581 0
 1517 0005 A3 89                   		mov.L	r1, 60[r0]
 1518 0007 A4 0A                   		mov.L	r2, 68[r0]
 1519 0009 EF 01                   		mov.L	r0, r1
 1520                             	.LVL107:
 1521 000b F9 02 06 00 00 00 00    		mov.L	#___gxx_personality_sj0, 24[r0]
 1522 0012 F9 02 07 00 00 00 00    		mov.L	#.LLSDA1137, 28[r0]
 1523 0019 A2 00                   		mov.L	r0, 32[r0]
 1524 001b F9 02 09 BF 00 00 00    		mov.L	#.L156, 36[r0]
 1525 0022 A2 80                   		mov.L	r0, 40[r0]
 1526 0024 05 00 00 00             		bsr	__Unwind_SjLj_Register
 1527                             	.LVL108:
 1528                             	.LBB606:
 585:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
 1529                             		.loc 5 585 0
 1530 0028 ED 0E 11                		mov.L	68[r0], r14
 1531 002b 68 7E                   		shlr	#7, r14
 588:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       this->_M_impl._M_map = _M_allocate_map(this->_M_impl._M_map_size);
 1532                             		.loc 5 588 0
 1533 002d 71 E1 03                		add	#3, r14, r1
 1534 0030 61 81                   		cmp	#8, r1
 1535 0032 22 04                   		bgeu 1f
 1536 0034 66 81                   		mov #8, r1
 1537                             	1:
 587:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 					   size_t(__num_nodes + 2));
 1538                             		.loc 5 587 0
 1539 0036 AB 8F                   		mov.L	60[r0], r7
 1540 0038 A0 79                   		mov.L	r1, 4[r7]
 1541                             	.LBB607:
 1542                             	.LBB608:
 1543                             	.LBB609:
 104:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\ext\new_allocator.h ****       }
 1544                             		.loc 6 104 0
 1545 003a F9 06 01 FF             		mov.L	#-1, 4[r0]
 1546 003e 6C 21                   		shll	#2, r1
 1547                             	.LBE609:
 1548                             	.LBE608:
 1549                             	.LBE607:
 585:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
 1550                             		.loc 5 585 0
 1551 0040 62 1E                   		add	#1, r14
 1552 0042 E7 0E 0D                		mov.L	r14, 52[r0]
 1553                             	.LVL109:
 1554                             	.LBB612:
 1555                             	.LBB611:
 1556                             	.LBB610:
 104:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\ext\new_allocator.h ****       }
 1557                             		.loc 6 104 0
 1558 0045 05 00 00 00             		bsr	__Znwm
 1559                             	.LVL110:
 1560                             	.LBE610:
 1561                             	.LBE611:
 1562                             	.LBE612:
 597:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       _Tp** __nfinish = __nstart + __num_nodes;
 1563                             		.loc 5 597 0
 1564 0049 A8 7C                   		mov.L	4[r7], r4
 598:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
 1565                             		.loc 5 598 0
 1566 004b ED 0E 0D                		mov.L	52[r0], r14
 1567 004e 6C 2E                   		shll	#2, r14
 597:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       _Tp** __nfinish = __nstart + __num_nodes;
 1568                             		.loc 5 597 0
 1569 0050 ED 0A 0D                		mov.L	52[r0], r10
 1570 0053 43 A4                   		sub	r10, r4
 1571 0055 68 14                   		shlr	#1, r4
 1572 0057 6C 24                   		shll	#2, r4
 1573 0059 4B 14                   		add	r1, r4
 1574 005b A4 04                   		mov.L	r4, 64[r0]
 1575                             	.LVL111:
 589:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
 1576                             		.loc 5 589 0
 1577 005d E3 71                   		mov.L	r1, [r7]
 598:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
 1578                             		.loc 5 598 0
 1579 005f 4B 4E                   		add	r4, r14
 1580 0061 E7 0E 0E                		mov.L	r14, 56[r0]
 1581                             	.LVL112:
 1582                             	.LBB613:
 1583                             	.LBB614:
 626:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	    *__cur = this->_M_allocate_node();
 1584                             		.loc 5 626 0
 1585 0064 47 E4                   		cmp	r14, r4
 1586 0066 22 1E                   		bgeu	.L148
 1587 0068 A3 0C                   		mov.L	r4, 52[r0]
 1588                             	.LVL113:
 1589                             		.balign 8,3,4
 1590                             	.L149:
 1591                             	.LBB615:
 1592                             	.LBB616:
 1593                             	.LBB617:
 104:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\ext\new_allocator.h ****       }
 1594                             		.loc 6 104 0
 1595 006a 3E 01 02                		mov.L	#2, 4[r0]
 1596 006d FB 1A 00 02             		mov.L	#0x200, r1
 1597 0071 05 00 00 00             		bsr	__Znwm
 1598                             	.LVL114:
 1599                             	.LBE617:
 1600                             	.LBE616:
 1601                             	.LBE615:
 627:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	}
 1602                             		.loc 5 627 0
 1603 0075 ED 0A 0D                		mov.L	52[r0], r10
 1604 0078 FD 22 A1                		mov.L	r1, [r10+]
 1605 007b E7 0A 0D                		mov.L	r10, 52[r0]
 1606                             	.LVL115:
 626:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	    *__cur = this->_M_allocate_node();
 1607                             		.loc 5 626 0
 1608 007e AB 87                   		mov.L	56[r0], r7
 1609 0080 47 A7                   		cmp	r10, r7
 1610 0082 24 E8                   		bgtu	.L149
 1611                             	.LVL116:
 1612                             		.balign 8,3,1
 1613                             	.L148:
 1614                             	.LBE614:
 1615                             	.LBE613:
 1616                             	.LBB625:
 1617                             	.LBB626:
 236:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	_M_first = *__new_node;
 1618                             		.loc 5 236 0
 1619 0084 AB 8F                   		mov.L	60[r0], r7
 1620 0086 E5 07 10 05             		mov.L	64[r0], 20[r7]
 237:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	_M_last = _M_first + difference_type(_S_buffer_size());
 1621                             		.loc 5 237 0
 1622 008a ED 0A 10                		mov.L	64[r0], r10
 1623 008d EC AE                   		mov.L	[r10], r14
 1624                             	.LBE626:
 1625                             	.LBE625:
 611:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       this->_M_impl._M_start._M_cur = _M_impl._M_start._M_first;
 1626                             		.loc 5 611 0
 1627 008f AB 84                   		mov.L	56[r0], r4
 1628 0091 60 44                   		sub	#4, r4
 1629                             	.LBB628:
 1630                             	.LBB627:
 238:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       }
 1631                             		.loc 5 238 0
 1632 0093 72 E3 00 02             		add	#0x200, r14, r3
 237:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	_M_last = _M_first + difference_type(_S_buffer_size());
 1633                             		.loc 5 237 0
 1634 0097 E7 7E 03                		mov.L	r14, 12[r7]
 1635                             	.LVL117:
 238:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       }
 1636                             		.loc 5 238 0
 1637 009a A1 73                   		mov.L	r3, 16[r7]
 1638                             	.LVL118:
 1639                             	.LBE627:
 1640                             	.LBE628:
 1641                             	.LBB629:
 1642                             	.LBB630:
 236:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	_M_first = *__new_node;
 1643                             		.loc 5 236 0
 1644 009c A2 7C                   		mov.L	r4, 36[r7]
 237:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	_M_last = _M_first + difference_type(_S_buffer_size());
 1645                             		.loc 5 237 0
 1646 009e EC 44                   		mov.L	[r4], r4
 1647                             	.LBE630:
 1648                             	.LBE629:
 614:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 					% __deque_buf_size(sizeof(_Tp)));
 1649                             		.loc 5 614 0
 1650 00a0 AC 0B                   		mov.L	68[r0], r3
 1651 00a2 75 23 7F                		and #0x7f, r3
 1652 00a5 6C 23                   		shll	#2, r3
 1653                             	.LBB633:
 1654                             	.LBB631:
 238:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       }
 1655                             		.loc 5 238 0
 1656 00a7 72 42 00 02             		add	#0x200, r4, r2
 1657                             	.LBE631:
 1658                             	.LBE633:
 614:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 					% __deque_buf_size(sizeof(_Tp)));
 1659                             		.loc 5 614 0
 1660 00ab 4B 43                   		add	r4, r3
 1661                             	.LBB634:
 1662                             	.LBB632:
 237:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	_M_last = _M_first + difference_type(_S_buffer_size());
 1663                             		.loc 5 237 0
 1664 00ad A1 FC                   		mov.L	r4, 28[r7]
 238:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       }
 1665                             		.loc 5 238 0
 1666 00af A2 72                   		mov.L	r2, 32[r7]
 1667                             	.LBE632:
 1668                             	.LBE634:
 612:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
 1669                             		.loc 5 612 0
 1670 00b1 E7 7E 02                		mov.L	r14, 8[r7]
 1671                             	.LVL119:
 613:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 					+ __num_elements
 1672                             		.loc 5 613 0
 1673 00b4 A1 F3                   		mov.L	r3, 24[r7]
 1674 00b6 EF 01                   		mov.L	r0, r1
 1675 00b8 05 00 00 00             		bsr	__Unwind_SjLj_Unregister
 1676                             	.LVL120:
 1677                             	.LBE606:
 616:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
 1678                             		.loc 5 616 0
 1679 00bc 3F 6A 17                		rtsd	#92, r6-r10
 1680                             	.LVL121:
 1681                             	.L156:
 1682 00bf E5 00 01 0E             		mov.L	4[r0], 56[r0]
 1683 00c3 E5 00 02 11             		mov.L	8[r0], 68[r0]
 1684 00c7 AB 87                   		mov.L	56[r0], r7
 1685 00c9 61 07                   		cmp	#0, r7
 1686 00cb 20 12                   		beq	.L157
 1687 00cd 60 17                   		sub	#1, r7
 1688 00cf A3 87                   		mov.L	r7, 56[r0]
 1689 00d1 20 42                   		beq	.L158
 1690 00d3 60 17                   		sub	#1, r7
 1691 00d5 A3 87                   		mov.L	r7, 56[r0]
 1692 00d7 20 17                   		beq	.L159
 1693 00d9 05 00 00 00             		bsr	_abort
 1694                             	.LVL122:
 1695                             	.L157:
 1696                             	.LBB640:
 602:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	{
 1697                             		.loc 5 602 0
 1698 00dd 3E 01 00                		mov.L	#0, 4[r0]
 1699 00e0 05 00 00 00             		bsr	___cxa_end_catch
 1700                             	.LVL123:
 1701 00e4 AC 09                   		mov.L	68[r0], r1
 1702 00e6 F9 06 01 FF             		mov.L	#-1, 4[r0]
 1703 00ea 05 00 00 00             		bsr	__Unwind_SjLj_Resume
 1704                             	.LVL124:
 1705                             	.L159:
 1706                             	.LBB635:
 1707                             	.LBB623:
 629:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	{
 1708                             		.loc 5 629 0
 1709 00ee E5 00 0E 01             		mov.L	56[r0], 4[r0]
 1710 00f2 05 00 00 00             		bsr	___cxa_end_catch
 1711                             	.LVL125:
 1712                             	.LBE623:
 1713                             	.LBE635:
 602:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	{
 1714                             		.loc 5 602 0
 1715 00f6 AC 09                   		mov.L	68[r0], r1
 1716 00f8 05 00 00 00             		bsr	___cxa_begin_catch
 1717                             	.LVL126:
 1718                             	.LBB636:
 1719                             	.LBB637:
 1720                             	.LBB638:
 1721                             		.loc 6 110 0
 1722 00fc ED 0A 0F                		mov.L	60[r0], r10
 1723 00ff EC A1                   		mov.L	[r10], r1
 1724 0101 05 00 00 00             		bsr	__ZdlPv
 1725                             	.LVL127:
 1726                             	.LBE638:
 1727                             	.LBE637:
 1728                             	.LBE636:
 605:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	  this->_M_impl._M_map_size = 0;
 1729                             		.loc 5 605 0
 1730 0105 E1 0A 0E                		mov.L	56[r0], [r10]
 606:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	  __throw_exception_again;
 1731                             		.loc 5 606 0
 1732 0108 E5 0A 0E 01             		mov.L	56[r0], 4[r10]
 607:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	}
 1733                             		.loc 5 607 0
 1734 010c 3E 01 01                		mov.L	#1, 4[r0]
 1735 010f 05 00 00 00             		bsr	___cxa_rethrow
 1736                             	.LVL128:
 1737                             	.L158:
 1738                             	.LBB639:
 1739                             	.LBB624:
 629:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	{
 1740                             		.loc 5 629 0
 1741 0113 AC 09                   		mov.L	68[r0], r1
 1742 0115 05 00 00 00             		bsr	___cxa_begin_catch
 1743                             	.LVL129:
 1744                             	.LBB618:
 1745                             	.LBB619:
 1746                             		.loc 5 641 0
 1747 0119 AC 07                   		mov.L	64[r0], r7
 1748 011b ED 0A 0D                		mov.L	52[r0], r10
 1749 011e 47 A7                   		cmp	r10, r7
 1750 0120 22 18                   		bgeu	.L153
 1751                             	.LVL130:
 1752                             		.balign 8,3,1
 1753                             	.L160:
 1754                             	.LBB620:
 1755                             	.LBB621:
 1756                             	.LBB622:
 1757                             		.loc 6 110 0
 1758 0122 AC 07                   		mov.L	64[r0], r7
 1759 0124 FD 2A 71                		mov.L	[r7+], r1
 1760 0127 A4 07                   		mov.L	r7, 64[r0]
 1761                             	.LVL131:
 1762 0129 05 00 00 00             		bsr	__ZdlPv
 1763                             	.LVL132:
 1764                             	.LBE622:
 1765                             	.LBE621:
 1766                             	.LBE620:
 1767                             		.loc 5 641 0
 1768 012d ED 0A 0D                		mov.L	52[r0], r10
 1769 0130 47 A7                   		cmp	r10, r7
 1770 0132 23 F0                   		bltu	.L160
 1771                             	.LVL133:
 1772 0134 76 10 01 00             		.balign 8,3,4
 1773                             	.L153:
 1774                             	.LBE619:
 1775                             	.LBE618:
 632:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	}
 1776                             		.loc 5 632 0
 1777 0138 3E 01 03                		mov.L	#3, 4[r0]
 1778 013b 05 00 00 00             		bsr	___cxa_rethrow
 1779                             	.LVL134:
 1780                             	.LBE624:
 1781                             	.LBE639:
 1782                             	.LBE640:
 1783                             	.LFE1137:
 1784                             		.section	.gcc_except_table._ZNSt11_Deque_baseIP13BaseMoveEventSaIS1_EE17_M_initialize_mapEm,"awG",
 1785                             		.balign 4
 1786                             	.LLSDA1137:
 1787 0000 FF                      		.byte	0xff
 1788 0001 00                      		.byte	0
 1789 0002 11                      		.uleb128 .LLSDATT1137-.LLSDATTD1137
 1790                             	.LLSDATTD1137:
 1791 0003 01                      		.byte	0x1
 1792 0004 06                      		.uleb128 .LLSDACSE1137-.LLSDACSB1137
 1793                             	.LLSDACSB1137:
 1794 0005 00                      		.uleb128 0
 1795 0006 00                      		.uleb128 0
 1796 0007 01                      		.uleb128 0x1
 1797 0008 01                      		.uleb128 0x1
 1798 0009 02                      		.uleb128 0x2
 1799 000a 03                      		.uleb128 0x3
 1800                             	.LLSDACSE1137:
 1801 000b 01                      		.byte	0x1
 1802 000c 00                      		.byte	0
 1803 000d 00                      		.byte	0
 1804 000e 7D                      		.byte	0x7d
 1805 000f 00                      		.balign 4
 1806 0010 00 00 00 00             		.long	0
 1807                             	.LLSDATT1137:
 1808                             		.section	.text._ZNSt11_Deque_baseIP13BaseMoveEventSaIS1_EE17_M_initialize_mapEm,"axG",@progbits,_Z
 1810 013f 03                      		.section	.text._ZNSt5dequeIP13BaseMoveEventSaIS1_EE17_M_reallocate_mapEmb,"axG",@progbits,_ZNSt5de
 1811                             		.weak	__ZNSt5dequeIP13BaseMoveEventSaIS1_EE17_M_reallocate_mapEmb
 1813                             	__ZNSt5dequeIP13BaseMoveEventSaIS1_EE17_M_reallocate_mapEmb:
 1814                             	.LFB1179:
 1815                             		.file 7 "c:\\progra~2\\gccfor~2.201\\rx-elf\\rx-elf\\rx-elf\\include\\c++\\4.8.0.201602-gnurx\\bit
   1:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** // Deque implementation (out of line) -*- C++ -*-
   2:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 
   3:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** // Copyright (C) 2001-2013 Free Software Foundation, Inc.
   4:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** //
   5:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** // software; you can redistribute it and/or modify it under the
   7:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** // terms of the GNU General Public License as published by the
   8:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** // Free Software Foundation; either version 3, or (at your option)
   9:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** // any later version.
  10:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 
  11:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** // This library is distributed in the hope that it will be useful,
  12:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** // GNU General Public License for more details.
  15:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 
  16:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** // Under Section 7 of GPL version 3, you are granted additional
  17:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** // permissions described in the GCC Runtime Library Exception, version
  18:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** // 3.1, as published by the Free Software Foundation.
  19:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 
  20:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** // You should have received a copy of the GNU General Public License and
  21:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** // a copy of the GCC Runtime Library Exception along with this program;
  22:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** // <http://www.gnu.org/licenses/>.
  24:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 
  25:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** /*
  26:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****  *
  27:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****  * Copyright (c) 1994
  28:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****  * Hewlett-Packard Company
  29:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****  *
  30:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****  * Permission to use, copy, modify, distribute and sell this software
  31:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****  * and its documentation for any purpose is hereby granted without fee,
  32:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****  * provided that the above copyright notice appear in all copies and
  33:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****  * that both that copyright notice and this permission notice appear
  34:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****  * in supporting documentation.  Hewlett-Packard Company makes no
  35:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****  * representations about the suitability of this software for any
  36:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****  * purpose.  It is provided "as is" without express or implied warranty.
  37:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****  *
  38:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****  *
  39:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****  * Copyright (c) 1997
  40:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****  * Silicon Graphics Computer Systems, Inc.
  41:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****  *
  42:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****  * Permission to use, copy, modify, distribute and sell this software
  43:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****  * and its documentation for any purpose is hereby granted without fee,
  44:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****  * provided that the above copyright notice appear in all copies and
  45:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****  * that both that copyright notice and this permission notice appear
  46:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****  * in supporting documentation.  Silicon Graphics makes no
  47:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****  * representations about the suitability of this software for any
  48:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****  * purpose.  It is provided "as is" without express or implied warranty.
  49:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****  */
  50:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 
  51:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** /** @file bits/deque.tcc
  52:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****  *  This is an internal header file, included by other library headers.
  53:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****  *  Do not attempt to use it directly. @headername{deque}
  54:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****  */
  55:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 
  56:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** #ifndef _DEQUE_TCC
  57:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** #define _DEQUE_TCC 1
  58:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 
  59:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** namespace std _GLIBCXX_VISIBILITY(default)
  60:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** {
  61:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** _GLIBCXX_BEGIN_NAMESPACE_CONTAINER
  62:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 
  63:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** #if __cplusplus >= 201103L
  64:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****   template <typename _Tp, typename _Alloc>
  65:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****     void
  66:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****     deque<_Tp, _Alloc>::
  67:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****     _M_default_initialize()
  68:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****     {
  69:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****       _Map_pointer __cur;
  70:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****       __try
  71:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****         {
  72:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****           for (__cur = this->_M_impl._M_start._M_node;
  73:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	       __cur < this->_M_impl._M_finish._M_node;
  74:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	       ++__cur)
  75:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****             std::__uninitialized_default_a(*__cur, *__cur + _S_buffer_size(),
  76:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 					   _M_get_Tp_allocator());
  77:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****           std::__uninitialized_default_a(this->_M_impl._M_finish._M_first,
  78:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 					 this->_M_impl._M_finish._M_cur,
  79:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 					 _M_get_Tp_allocator());
  80:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****         }
  81:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****       __catch(...)
  82:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****         {
  83:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****           std::_Destroy(this->_M_impl._M_start, iterator(*__cur, __cur),
  84:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 			_M_get_Tp_allocator());
  85:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****           __throw_exception_again;
  86:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****         }
  87:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****     }
  88:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** #endif
  89:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 
  90:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****   template <typename _Tp, typename _Alloc>
  91:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****     deque<_Tp, _Alloc>&
  92:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****     deque<_Tp, _Alloc>::
  93:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****     operator=(const deque& __x)
  94:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****     {
  95:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****       const size_type __len = size();
  96:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****       if (&__x != this)
  97:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	{
  98:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	  if (__len >= __x.size())
  99:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	    _M_erase_at_end(std::copy(__x.begin(), __x.end(),
 100:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 				      this->_M_impl._M_start));
 101:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	  else
 102:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	    {
 103:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	      const_iterator __mid = __x.begin() + difference_type(__len);
 104:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	      std::copy(__x.begin(), __mid, this->_M_impl._M_start);
 105:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	      insert(this->_M_impl._M_finish, __mid, __x.end());
 106:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	    }
 107:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	}
 108:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****       return *this;
 109:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****     }
 110:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 
 111:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** #if __cplusplus >= 201103L
 112:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****   template<typename _Tp, typename _Alloc>
 113:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****     template<typename... _Args>
 114:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****       void
 115:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****       deque<_Tp, _Alloc>::
 116:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****       emplace_front(_Args&&... __args)
 117:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****       {
 118:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	if (this->_M_impl._M_start._M_cur != this->_M_impl._M_start._M_first)
 119:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	  {
 120:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	    this->_M_impl.construct(this->_M_impl._M_start._M_cur - 1,
 121:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 				    std::forward<_Args>(__args)...);
 122:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	    --this->_M_impl._M_start._M_cur;
 123:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	  }
 124:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	else
 125:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	  _M_push_front_aux(std::forward<_Args>(__args)...);
 126:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****       }
 127:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 
 128:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****   template<typename _Tp, typename _Alloc>
 129:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****     template<typename... _Args>
 130:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****       void
 131:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****       deque<_Tp, _Alloc>::
 132:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****       emplace_back(_Args&&... __args)
 133:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****       {
 134:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	if (this->_M_impl._M_finish._M_cur
 135:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	    != this->_M_impl._M_finish._M_last - 1)
 136:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	  {
 137:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	    this->_M_impl.construct(this->_M_impl._M_finish._M_cur,
 138:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 				    std::forward<_Args>(__args)...);
 139:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	    ++this->_M_impl._M_finish._M_cur;
 140:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	  }
 141:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	else
 142:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	  _M_push_back_aux(std::forward<_Args>(__args)...);
 143:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****       }
 144:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** #endif
 145:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 
 146:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****   template <typename _Tp, typename _Alloc>
 147:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****     typename deque<_Tp, _Alloc>::iterator
 148:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****     deque<_Tp, _Alloc>::
 149:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****     insert(iterator __position, const value_type& __x)
 150:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****     {
 151:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****       if (__position._M_cur == this->_M_impl._M_start._M_cur)
 152:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	{
 153:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	  push_front(__x);
 154:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	  return this->_M_impl._M_start;
 155:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	}
 156:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****       else if (__position._M_cur == this->_M_impl._M_finish._M_cur)
 157:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	{
 158:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	  push_back(__x);
 159:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	  iterator __tmp = this->_M_impl._M_finish;
 160:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	  --__tmp;
 161:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	  return __tmp;
 162:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	}
 163:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****       else
 164:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****         return _M_insert_aux(__position, __x);
 165:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****     }
 166:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 
 167:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** #if __cplusplus >= 201103L
 168:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****   template<typename _Tp, typename _Alloc>
 169:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****     template<typename... _Args>
 170:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****       typename deque<_Tp, _Alloc>::iterator
 171:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****       deque<_Tp, _Alloc>::
 172:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****       emplace(iterator __position, _Args&&... __args)
 173:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****       {
 174:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	if (__position._M_cur == this->_M_impl._M_start._M_cur)
 175:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	  {
 176:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	    emplace_front(std::forward<_Args>(__args)...);
 177:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	    return this->_M_impl._M_start;
 178:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	  }
 179:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	else if (__position._M_cur == this->_M_impl._M_finish._M_cur)
 180:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	  {
 181:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	    emplace_back(std::forward<_Args>(__args)...);
 182:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	    iterator __tmp = this->_M_impl._M_finish;
 183:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	    --__tmp;
 184:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	    return __tmp;
 185:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	  }
 186:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	else
 187:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	  return _M_insert_aux(__position, std::forward<_Args>(__args)...);
 188:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****       }
 189:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** #endif
 190:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 
 191:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****   template <typename _Tp, typename _Alloc>
 192:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****     typename deque<_Tp, _Alloc>::iterator
 193:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****     deque<_Tp, _Alloc>::
 194:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****     erase(iterator __position)
 195:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****     {
 196:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****       iterator __next = __position;
 197:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****       ++__next;
 198:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****       const difference_type __index = __position - begin();
 199:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****       if (static_cast<size_type>(__index) < (size() >> 1))
 200:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	{
 201:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	  if (__position != begin())
 202:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	    _GLIBCXX_MOVE_BACKWARD3(begin(), __position, __next);
 203:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	  pop_front();
 204:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	}
 205:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****       else
 206:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	{
 207:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	  if (__next != end())
 208:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	    _GLIBCXX_MOVE3(__next, end(), __position);
 209:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	  pop_back();
 210:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	}
 211:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****       return begin() + __index;
 212:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****     }
 213:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 
 214:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****   template <typename _Tp, typename _Alloc>
 215:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****     typename deque<_Tp, _Alloc>::iterator
 216:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****     deque<_Tp, _Alloc>::
 217:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****     erase(iterator __first, iterator __last)
 218:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****     {
 219:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****       if (__first == __last)
 220:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	return __first;
 221:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****       else if (__first == begin() && __last == end())
 222:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	{
 223:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	  clear();
 224:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	  return end();
 225:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	}
 226:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****       else
 227:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	{
 228:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	  const difference_type __n = __last - __first;
 229:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	  const difference_type __elems_before = __first - begin();
 230:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	  if (static_cast<size_type>(__elems_before) <= (size() - __n) / 2)
 231:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	    {
 232:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	      if (__first != begin())
 233:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 		_GLIBCXX_MOVE_BACKWARD3(begin(), __first, __last);
 234:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	      _M_erase_at_begin(begin() + __n);
 235:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	    }
 236:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	  else
 237:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	    {
 238:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	      if (__last != end())
 239:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 		_GLIBCXX_MOVE3(__last, end(), __first);
 240:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	      _M_erase_at_end(end() - __n);
 241:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	    }
 242:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	  return begin() + __elems_before;
 243:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	}
 244:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****     }
 245:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 
 246:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****   template <typename _Tp, class _Alloc>
 247:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****     template <typename _InputIterator>
 248:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****       void
 249:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****       deque<_Tp, _Alloc>::
 250:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****       _M_assign_aux(_InputIterator __first, _InputIterator __last,
 251:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 		    std::input_iterator_tag)
 252:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****       {
 253:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****         iterator __cur = begin();
 254:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****         for (; __first != __last && __cur != end(); ++__cur, ++__first)
 255:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****           *__cur = *__first;
 256:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****         if (__first == __last)
 257:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****           _M_erase_at_end(__cur);
 258:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****         else
 259:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****           insert(end(), __first, __last);
 260:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****       }
 261:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 
 262:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****   template <typename _Tp, typename _Alloc>
 263:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****     void
 264:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****     deque<_Tp, _Alloc>::
 265:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****     _M_fill_insert(iterator __pos, size_type __n, const value_type& __x)
 266:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****     {
 267:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****       if (__pos._M_cur == this->_M_impl._M_start._M_cur)
 268:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	{
 269:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	  iterator __new_start = _M_reserve_elements_at_front(__n);
 270:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	  __try
 271:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	    {
 272:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	      std::__uninitialized_fill_a(__new_start, this->_M_impl._M_start,
 273:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 					  __x, _M_get_Tp_allocator());
 274:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	      this->_M_impl._M_start = __new_start;
 275:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	    }
 276:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	  __catch(...)
 277:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	    {
 278:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	      _M_destroy_nodes(__new_start._M_node,
 279:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 			       this->_M_impl._M_start._M_node);
 280:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	      __throw_exception_again;
 281:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	    }
 282:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	}
 283:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****       else if (__pos._M_cur == this->_M_impl._M_finish._M_cur)
 284:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	{
 285:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	  iterator __new_finish = _M_reserve_elements_at_back(__n);
 286:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	  __try
 287:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	    {
 288:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	      std::__uninitialized_fill_a(this->_M_impl._M_finish,
 289:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 					  __new_finish, __x,
 290:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 					  _M_get_Tp_allocator());
 291:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	      this->_M_impl._M_finish = __new_finish;
 292:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	    }
 293:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	  __catch(...)
 294:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	    {
 295:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	      _M_destroy_nodes(this->_M_impl._M_finish._M_node + 1,
 296:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 			       __new_finish._M_node + 1);
 297:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	      __throw_exception_again;
 298:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	    }
 299:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	}
 300:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****       else
 301:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****         _M_insert_aux(__pos, __n, __x);
 302:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****     }
 303:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 
 304:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** #if __cplusplus >= 201103L
 305:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****   template <typename _Tp, typename _Alloc>
 306:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****     void
 307:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****     deque<_Tp, _Alloc>::
 308:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****     _M_default_append(size_type __n)
 309:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****     {
 310:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****       if (__n)
 311:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	{
 312:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	  iterator __new_finish = _M_reserve_elements_at_back(__n);
 313:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	  __try
 314:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	    {
 315:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	      std::__uninitialized_default_a(this->_M_impl._M_finish,
 316:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 					     __new_finish,
 317:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 					     _M_get_Tp_allocator());
 318:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	      this->_M_impl._M_finish = __new_finish;
 319:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	    }
 320:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	  __catch(...)
 321:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	    {
 322:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	      _M_destroy_nodes(this->_M_impl._M_finish._M_node + 1,
 323:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 			       __new_finish._M_node + 1);
 324:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	      __throw_exception_again;
 325:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	    }
 326:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	}
 327:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****     }
 328:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 
 329:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****   template <typename _Tp, typename _Alloc>
 330:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****     bool
 331:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****     deque<_Tp, _Alloc>::
 332:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****     _M_shrink_to_fit()
 333:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****     {
 334:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****       const difference_type __front_capacity
 335:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	= (this->_M_impl._M_start._M_cur - this->_M_impl._M_start._M_first);
 336:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****       if (__front_capacity == 0)
 337:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	return false;
 338:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 
 339:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****       const difference_type __back_capacity
 340:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	= (this->_M_impl._M_finish._M_last - this->_M_impl._M_finish._M_cur);
 341:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****       if (__front_capacity + __back_capacity < _S_buffer_size())
 342:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	return false;
 343:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 
 344:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****       return std::__shrink_to_fit_aux<deque>::_S_do_it(*this);
 345:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****     }
 346:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** #endif
 347:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 
 348:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****   template <typename _Tp, typename _Alloc>
 349:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****     void
 350:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****     deque<_Tp, _Alloc>::
 351:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****     _M_fill_initialize(const value_type& __value)
 352:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****     {
 353:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****       _Map_pointer __cur;
 354:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****       __try
 355:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****         {
 356:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****           for (__cur = this->_M_impl._M_start._M_node;
 357:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	       __cur < this->_M_impl._M_finish._M_node;
 358:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	       ++__cur)
 359:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****             std::__uninitialized_fill_a(*__cur, *__cur + _S_buffer_size(),
 360:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 					__value, _M_get_Tp_allocator());
 361:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****           std::__uninitialized_fill_a(this->_M_impl._M_finish._M_first,
 362:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 				      this->_M_impl._M_finish._M_cur,
 363:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 				      __value, _M_get_Tp_allocator());
 364:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****         }
 365:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****       __catch(...)
 366:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****         {
 367:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****           std::_Destroy(this->_M_impl._M_start, iterator(*__cur, __cur),
 368:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 			_M_get_Tp_allocator());
 369:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****           __throw_exception_again;
 370:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****         }
 371:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****     }
 372:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 
 373:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****   template <typename _Tp, typename _Alloc>
 374:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****     template <typename _InputIterator>
 375:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****       void
 376:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****       deque<_Tp, _Alloc>::
 377:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****       _M_range_initialize(_InputIterator __first, _InputIterator __last,
 378:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****                           std::input_iterator_tag)
 379:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****       {
 380:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****         this->_M_initialize_map(0);
 381:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****         __try
 382:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****           {
 383:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****             for (; __first != __last; ++__first)
 384:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** #if __cplusplus >= 201103L
 385:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	      emplace_back(*__first);
 386:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** #else
 387:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****               push_back(*__first);
 388:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** #endif
 389:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****           }
 390:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****         __catch(...)
 391:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****           {
 392:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****             clear();
 393:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****             __throw_exception_again;
 394:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****           }
 395:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****       }
 396:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 
 397:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****   template <typename _Tp, typename _Alloc>
 398:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****     template <typename _ForwardIterator>
 399:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****       void
 400:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****       deque<_Tp, _Alloc>::
 401:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****       _M_range_initialize(_ForwardIterator __first, _ForwardIterator __last,
 402:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****                           std::forward_iterator_tag)
 403:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****       {
 404:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****         const size_type __n = std::distance(__first, __last);
 405:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****         this->_M_initialize_map(__n);
 406:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 
 407:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****         _Map_pointer __cur_node;
 408:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****         __try
 409:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****           {
 410:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****             for (__cur_node = this->_M_impl._M_start._M_node;
 411:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****                  __cur_node < this->_M_impl._M_finish._M_node;
 412:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****                  ++__cur_node)
 413:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	      {
 414:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 		_ForwardIterator __mid = __first;
 415:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 		std::advance(__mid, _S_buffer_size());
 416:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 		std::__uninitialized_copy_a(__first, __mid, *__cur_node,
 417:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 					    _M_get_Tp_allocator());
 418:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 		__first = __mid;
 419:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	      }
 420:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****             std::__uninitialized_copy_a(__first, __last,
 421:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 					this->_M_impl._M_finish._M_first,
 422:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 					_M_get_Tp_allocator());
 423:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****           }
 424:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****         __catch(...)
 425:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****           {
 426:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****             std::_Destroy(this->_M_impl._M_start,
 427:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 			  iterator(*__cur_node, __cur_node),
 428:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 			  _M_get_Tp_allocator());
 429:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****             __throw_exception_again;
 430:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****           }
 431:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****       }
 432:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 
 433:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****   // Called only if _M_impl._M_finish._M_cur == _M_impl._M_finish._M_last - 1.
 434:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****   template<typename _Tp, typename _Alloc>
 435:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** #if __cplusplus >= 201103L
 436:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****     template<typename... _Args>
 437:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****       void
 438:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****       deque<_Tp, _Alloc>::
 439:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****       _M_push_back_aux(_Args&&... __args)
 440:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** #else
 441:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****       void
 442:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****       deque<_Tp, _Alloc>::
 443:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****       _M_push_back_aux(const value_type& __t)
 444:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** #endif
 445:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****       {
 446:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	_M_reserve_map_at_back();
 447:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	*(this->_M_impl._M_finish._M_node + 1) = this->_M_allocate_node();
 448:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	__try
 449:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	  {
 450:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** #if __cplusplus >= 201103L
 451:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	    this->_M_impl.construct(this->_M_impl._M_finish._M_cur,
 452:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 				    std::forward<_Args>(__args)...);
 453:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** #else
 454:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	    this->_M_impl.construct(this->_M_impl._M_finish._M_cur, __t);
 455:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** #endif
 456:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	    this->_M_impl._M_finish._M_set_node(this->_M_impl._M_finish._M_node
 457:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 						+ 1);
 458:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	    this->_M_impl._M_finish._M_cur = this->_M_impl._M_finish._M_first;
 459:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	  }
 460:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	__catch(...)
 461:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	  {
 462:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	    _M_deallocate_node(*(this->_M_impl._M_finish._M_node + 1));
 463:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	    __throw_exception_again;
 464:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	  }
 465:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****       }
 466:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 
 467:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****   // Called only if _M_impl._M_start._M_cur == _M_impl._M_start._M_first.
 468:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****   template<typename _Tp, typename _Alloc>
 469:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** #if __cplusplus >= 201103L
 470:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****     template<typename... _Args>
 471:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****       void
 472:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****       deque<_Tp, _Alloc>::
 473:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****       _M_push_front_aux(_Args&&... __args)
 474:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** #else
 475:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****       void
 476:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****       deque<_Tp, _Alloc>::
 477:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****       _M_push_front_aux(const value_type& __t)
 478:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** #endif
 479:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****       {
 480:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	_M_reserve_map_at_front();
 481:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	*(this->_M_impl._M_start._M_node - 1) = this->_M_allocate_node();
 482:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	__try
 483:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	  {
 484:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	    this->_M_impl._M_start._M_set_node(this->_M_impl._M_start._M_node
 485:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 					       - 1);
 486:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	    this->_M_impl._M_start._M_cur = this->_M_impl._M_start._M_last - 1;
 487:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** #if __cplusplus >= 201103L
 488:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	    this->_M_impl.construct(this->_M_impl._M_start._M_cur,
 489:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 				    std::forward<_Args>(__args)...);
 490:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** #else
 491:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	    this->_M_impl.construct(this->_M_impl._M_start._M_cur, __t);
 492:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** #endif
 493:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	  }
 494:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	__catch(...)
 495:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	  {
 496:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	    ++this->_M_impl._M_start;
 497:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	    _M_deallocate_node(*(this->_M_impl._M_start._M_node - 1));
 498:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	    __throw_exception_again;
 499:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	  }
 500:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****       }
 501:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 
 502:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****   // Called only if _M_impl._M_finish._M_cur == _M_impl._M_finish._M_first.
 503:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****   template <typename _Tp, typename _Alloc>
 504:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****     void deque<_Tp, _Alloc>::
 505:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****     _M_pop_back_aux()
 506:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****     {
 507:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****       _M_deallocate_node(this->_M_impl._M_finish._M_first);
 508:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****       this->_M_impl._M_finish._M_set_node(this->_M_impl._M_finish._M_node - 1);
 509:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****       this->_M_impl._M_finish._M_cur = this->_M_impl._M_finish._M_last - 1;
 510:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****       this->_M_impl.destroy(this->_M_impl._M_finish._M_cur);
 511:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****     }
 512:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 
 513:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****   // Called only if _M_impl._M_start._M_cur == _M_impl._M_start._M_last - 1.
 514:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****   // Note that if the deque has at least one element (a precondition for this
 515:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****   // member function), and if
 516:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****   //   _M_impl._M_start._M_cur == _M_impl._M_start._M_last,
 517:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****   // then the deque must have at least two nodes.
 518:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****   template <typename _Tp, typename _Alloc>
 519:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****     void deque<_Tp, _Alloc>::
 520:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****     _M_pop_front_aux()
 521:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****     {
 522:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****       this->_M_impl.destroy(this->_M_impl._M_start._M_cur);
 523:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****       _M_deallocate_node(this->_M_impl._M_start._M_first);
 524:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****       this->_M_impl._M_start._M_set_node(this->_M_impl._M_start._M_node + 1);
 525:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****       this->_M_impl._M_start._M_cur = this->_M_impl._M_start._M_first;
 526:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****     }
 527:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 
 528:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****   template <typename _Tp, typename _Alloc>
 529:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****     template <typename _InputIterator>
 530:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****       void
 531:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****       deque<_Tp, _Alloc>::
 532:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****       _M_range_insert_aux(iterator __pos,
 533:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****                           _InputIterator __first, _InputIterator __last,
 534:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****                           std::input_iterator_tag)
 535:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****       { std::copy(__first, __last, std::inserter(*this, __pos)); }
 536:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 
 537:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****   template <typename _Tp, typename _Alloc>
 538:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****     template <typename _ForwardIterator>
 539:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****       void
 540:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****       deque<_Tp, _Alloc>::
 541:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****       _M_range_insert_aux(iterator __pos,
 542:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****                           _ForwardIterator __first, _ForwardIterator __last,
 543:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****                           std::forward_iterator_tag)
 544:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****       {
 545:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****         const size_type __n = std::distance(__first, __last);
 546:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****         if (__pos._M_cur == this->_M_impl._M_start._M_cur)
 547:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	  {
 548:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	    iterator __new_start = _M_reserve_elements_at_front(__n);
 549:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	    __try
 550:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	      {
 551:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 		std::__uninitialized_copy_a(__first, __last, __new_start,
 552:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 					    _M_get_Tp_allocator());
 553:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 		this->_M_impl._M_start = __new_start;
 554:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	      }
 555:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	    __catch(...)
 556:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	      {
 557:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 		_M_destroy_nodes(__new_start._M_node,
 558:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 				 this->_M_impl._M_start._M_node);
 559:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 		__throw_exception_again;
 560:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	      }
 561:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	  }
 562:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****         else if (__pos._M_cur == this->_M_impl._M_finish._M_cur)
 563:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	  {
 564:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	    iterator __new_finish = _M_reserve_elements_at_back(__n);
 565:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	    __try
 566:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	      {
 567:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 		std::__uninitialized_copy_a(__first, __last,
 568:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 					    this->_M_impl._M_finish,
 569:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 					    _M_get_Tp_allocator());
 570:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 		this->_M_impl._M_finish = __new_finish;
 571:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	      }
 572:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	    __catch(...)
 573:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	      {
 574:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 		_M_destroy_nodes(this->_M_impl._M_finish._M_node + 1,
 575:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 				 __new_finish._M_node + 1);
 576:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 		__throw_exception_again;
 577:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	      }
 578:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	  }
 579:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****         else
 580:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****           _M_insert_aux(__pos, __first, __last, __n);
 581:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****       }
 582:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 
 583:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****   template<typename _Tp, typename _Alloc>
 584:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** #if __cplusplus >= 201103L
 585:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****     template<typename... _Args>
 586:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****       typename deque<_Tp, _Alloc>::iterator
 587:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****       deque<_Tp, _Alloc>::
 588:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****       _M_insert_aux(iterator __pos, _Args&&... __args)
 589:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****       {
 590:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	value_type __x_copy(std::forward<_Args>(__args)...); // XXX copy
 591:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** #else
 592:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****     typename deque<_Tp, _Alloc>::iterator
 593:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****       deque<_Tp, _Alloc>::
 594:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****       _M_insert_aux(iterator __pos, const value_type& __x)
 595:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****       {
 596:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	value_type __x_copy = __x; // XXX copy
 597:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** #endif
 598:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	difference_type __index = __pos - this->_M_impl._M_start;
 599:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	if (static_cast<size_type>(__index) < size() / 2)
 600:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	  {
 601:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	    push_front(_GLIBCXX_MOVE(front()));
 602:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	    iterator __front1 = this->_M_impl._M_start;
 603:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	    ++__front1;
 604:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	    iterator __front2 = __front1;
 605:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	    ++__front2;
 606:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	    __pos = this->_M_impl._M_start + __index;
 607:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	    iterator __pos1 = __pos;
 608:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	    ++__pos1;
 609:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	    _GLIBCXX_MOVE3(__front2, __pos1, __front1);
 610:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	  }
 611:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	else
 612:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	  {
 613:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	    push_back(_GLIBCXX_MOVE(back()));
 614:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	    iterator __back1 = this->_M_impl._M_finish;
 615:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	    --__back1;
 616:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	    iterator __back2 = __back1;
 617:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	    --__back2;
 618:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	    __pos = this->_M_impl._M_start + __index;
 619:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	    _GLIBCXX_MOVE_BACKWARD3(__pos, __back2, __back1);
 620:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	  }
 621:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	*__pos = _GLIBCXX_MOVE(__x_copy);
 622:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	return __pos;
 623:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****       }
 624:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 
 625:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****   template <typename _Tp, typename _Alloc>
 626:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****     void
 627:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****     deque<_Tp, _Alloc>::
 628:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****     _M_insert_aux(iterator __pos, size_type __n, const value_type& __x)
 629:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****     {
 630:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****       const difference_type __elems_before = __pos - this->_M_impl._M_start;
 631:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****       const size_type __length = this->size();
 632:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****       value_type __x_copy = __x;
 633:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****       if (__elems_before < difference_type(__length / 2))
 634:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	{
 635:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	  iterator __new_start = _M_reserve_elements_at_front(__n);
 636:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	  iterator __old_start = this->_M_impl._M_start;
 637:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	  __pos = this->_M_impl._M_start + __elems_before;
 638:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	  __try
 639:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	    {
 640:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	      if (__elems_before >= difference_type(__n))
 641:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 		{
 642:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 		  iterator __start_n = (this->_M_impl._M_start
 643:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 					+ difference_type(__n));
 644:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 		  std::__uninitialized_move_a(this->_M_impl._M_start,
 645:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 					      __start_n, __new_start,
 646:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 					      _M_get_Tp_allocator());
 647:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 		  this->_M_impl._M_start = __new_start;
 648:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 		  _GLIBCXX_MOVE3(__start_n, __pos, __old_start);
 649:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 		  std::fill(__pos - difference_type(__n), __pos, __x_copy);
 650:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 		}
 651:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	      else
 652:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 		{
 653:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 		  std::__uninitialized_move_fill(this->_M_impl._M_start,
 654:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 						 __pos, __new_start,
 655:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 						 this->_M_impl._M_start,
 656:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 						 __x_copy,
 657:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 						 _M_get_Tp_allocator());
 658:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 		  this->_M_impl._M_start = __new_start;
 659:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 		  std::fill(__old_start, __pos, __x_copy);
 660:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 		}
 661:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	    }
 662:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	  __catch(...)
 663:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	    {
 664:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	      _M_destroy_nodes(__new_start._M_node,
 665:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 			       this->_M_impl._M_start._M_node);
 666:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	      __throw_exception_again;
 667:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	    }
 668:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	}
 669:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****       else
 670:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	{
 671:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	  iterator __new_finish = _M_reserve_elements_at_back(__n);
 672:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	  iterator __old_finish = this->_M_impl._M_finish;
 673:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	  const difference_type __elems_after =
 674:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	    difference_type(__length) - __elems_before;
 675:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	  __pos = this->_M_impl._M_finish - __elems_after;
 676:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	  __try
 677:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	    {
 678:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	      if (__elems_after > difference_type(__n))
 679:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 		{
 680:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 		  iterator __finish_n = (this->_M_impl._M_finish
 681:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 					 - difference_type(__n));
 682:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 		  std::__uninitialized_move_a(__finish_n,
 683:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 					      this->_M_impl._M_finish,
 684:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 					      this->_M_impl._M_finish,
 685:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 					      _M_get_Tp_allocator());
 686:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 		  this->_M_impl._M_finish = __new_finish;
 687:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 		  _GLIBCXX_MOVE_BACKWARD3(__pos, __finish_n, __old_finish);
 688:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 		  std::fill(__pos, __pos + difference_type(__n), __x_copy);
 689:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 		}
 690:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	      else
 691:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 		{
 692:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 		  std::__uninitialized_fill_move(this->_M_impl._M_finish,
 693:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 						 __pos + difference_type(__n),
 694:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 						 __x_copy, __pos,
 695:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 						 this->_M_impl._M_finish,
 696:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 						 _M_get_Tp_allocator());
 697:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 		  this->_M_impl._M_finish = __new_finish;
 698:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 		  std::fill(__pos, __old_finish, __x_copy);
 699:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 		}
 700:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	    }
 701:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	  __catch(...)
 702:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	    {
 703:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	      _M_destroy_nodes(this->_M_impl._M_finish._M_node + 1,
 704:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 			       __new_finish._M_node + 1);
 705:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	      __throw_exception_again;
 706:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	    }
 707:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	}
 708:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****     }
 709:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 
 710:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****   template <typename _Tp, typename _Alloc>
 711:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****     template <typename _ForwardIterator>
 712:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****       void
 713:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****       deque<_Tp, _Alloc>::
 714:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****       _M_insert_aux(iterator __pos,
 715:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****                     _ForwardIterator __first, _ForwardIterator __last,
 716:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****                     size_type __n)
 717:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****       {
 718:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****         const difference_type __elemsbefore = __pos - this->_M_impl._M_start;
 719:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****         const size_type __length = size();
 720:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****         if (static_cast<size_type>(__elemsbefore) < __length / 2)
 721:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	  {
 722:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	    iterator __new_start = _M_reserve_elements_at_front(__n);
 723:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	    iterator __old_start = this->_M_impl._M_start;
 724:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	    __pos = this->_M_impl._M_start + __elemsbefore;
 725:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	    __try
 726:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	      {
 727:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 		if (__elemsbefore >= difference_type(__n))
 728:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 		  {
 729:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 		    iterator __start_n = (this->_M_impl._M_start
 730:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 					  + difference_type(__n));
 731:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 		    std::__uninitialized_move_a(this->_M_impl._M_start,
 732:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 						__start_n, __new_start,
 733:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 						_M_get_Tp_allocator());
 734:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 		    this->_M_impl._M_start = __new_start;
 735:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 		    _GLIBCXX_MOVE3(__start_n, __pos, __old_start);
 736:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 		    std::copy(__first, __last, __pos - difference_type(__n));
 737:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 		  }
 738:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 		else
 739:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 		  {
 740:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 		    _ForwardIterator __mid = __first;
 741:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 		    std::advance(__mid, difference_type(__n) - __elemsbefore);
 742:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 		    std::__uninitialized_move_copy(this->_M_impl._M_start,
 743:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 						   __pos, __first, __mid,
 744:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 						   __new_start,
 745:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 						   _M_get_Tp_allocator());
 746:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 		    this->_M_impl._M_start = __new_start;
 747:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 		    std::copy(__mid, __last, __old_start);
 748:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 		  }
 749:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	      }
 750:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	    __catch(...)
 751:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	      {
 752:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 		_M_destroy_nodes(__new_start._M_node,
 753:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 				 this->_M_impl._M_start._M_node);
 754:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 		__throw_exception_again;
 755:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	      }
 756:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	  }
 757:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****         else
 758:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****         {
 759:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****           iterator __new_finish = _M_reserve_elements_at_back(__n);
 760:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****           iterator __old_finish = this->_M_impl._M_finish;
 761:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****           const difference_type __elemsafter =
 762:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****             difference_type(__length) - __elemsbefore;
 763:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****           __pos = this->_M_impl._M_finish - __elemsafter;
 764:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****           __try
 765:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****             {
 766:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****               if (__elemsafter > difference_type(__n))
 767:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 		{
 768:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 		  iterator __finish_n = (this->_M_impl._M_finish
 769:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 					 - difference_type(__n));
 770:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 		  std::__uninitialized_move_a(__finish_n,
 771:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 					      this->_M_impl._M_finish,
 772:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 					      this->_M_impl._M_finish,
 773:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 					      _M_get_Tp_allocator());
 774:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 		  this->_M_impl._M_finish = __new_finish;
 775:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 		  _GLIBCXX_MOVE_BACKWARD3(__pos, __finish_n, __old_finish);
 776:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 		  std::copy(__first, __last, __pos);
 777:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 		}
 778:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****               else
 779:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 		{
 780:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 		  _ForwardIterator __mid = __first;
 781:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 		  std::advance(__mid, __elemsafter);
 782:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 		  std::__uninitialized_copy_move(__mid, __last, __pos,
 783:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 						 this->_M_impl._M_finish,
 784:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 						 this->_M_impl._M_finish,
 785:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 						 _M_get_Tp_allocator());
 786:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 		  this->_M_impl._M_finish = __new_finish;
 787:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 		  std::copy(__first, __mid, __pos);
 788:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 		}
 789:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****             }
 790:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****           __catch(...)
 791:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****             {
 792:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****               _M_destroy_nodes(this->_M_impl._M_finish._M_node + 1,
 793:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 			       __new_finish._M_node + 1);
 794:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****               __throw_exception_again;
 795:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****             }
 796:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****         }
 797:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****       }
 798:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 
 799:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****    template<typename _Tp, typename _Alloc>
 800:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****      void
 801:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****      deque<_Tp, _Alloc>::
 802:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****      _M_destroy_data_aux(iterator __first, iterator __last)
 803:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****      {
 804:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****        for (_Map_pointer __node = __first._M_node + 1;
 805:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	    __node < __last._M_node; ++__node)
 806:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	 std::_Destroy(*__node, *__node + _S_buffer_size(),
 807:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 		       _M_get_Tp_allocator());
 808:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 
 809:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****        if (__first._M_node != __last._M_node)
 810:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	 {
 811:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	   std::_Destroy(__first._M_cur, __first._M_last,
 812:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 			 _M_get_Tp_allocator());
 813:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	   std::_Destroy(__last._M_first, __last._M_cur,
 814:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 			 _M_get_Tp_allocator());
 815:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	 }
 816:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****        else
 817:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	 std::_Destroy(__first._M_cur, __last._M_cur,
 818:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 		       _M_get_Tp_allocator());
 819:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****      }
 820:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 
 821:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****   template <typename _Tp, typename _Alloc>
 822:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****     void
 823:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****     deque<_Tp, _Alloc>::
 824:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****     _M_new_elements_at_front(size_type __new_elems)
 825:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****     {
 826:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****       if (this->max_size() - this->size() < __new_elems)
 827:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	__throw_length_error(__N("deque::_M_new_elements_at_front"));
 828:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 
 829:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****       const size_type __new_nodes = ((__new_elems + _S_buffer_size() - 1)
 830:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 				     / _S_buffer_size());
 831:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****       _M_reserve_map_at_front(__new_nodes);
 832:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****       size_type __i;
 833:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****       __try
 834:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****         {
 835:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****           for (__i = 1; __i <= __new_nodes; ++__i)
 836:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****             *(this->_M_impl._M_start._M_node - __i) = this->_M_allocate_node();
 837:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****         }
 838:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****       __catch(...)
 839:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****         {
 840:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****           for (size_type __j = 1; __j < __i; ++__j)
 841:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****             _M_deallocate_node(*(this->_M_impl._M_start._M_node - __j));
 842:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****           __throw_exception_again;
 843:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****         }
 844:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****     }
 845:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 
 846:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****   template <typename _Tp, typename _Alloc>
 847:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****     void
 848:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****     deque<_Tp, _Alloc>::
 849:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****     _M_new_elements_at_back(size_type __new_elems)
 850:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****     {
 851:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****       if (this->max_size() - this->size() < __new_elems)
 852:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	__throw_length_error(__N("deque::_M_new_elements_at_back"));
 853:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 
 854:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****       const size_type __new_nodes = ((__new_elems + _S_buffer_size() - 1)
 855:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 				     / _S_buffer_size());
 856:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****       _M_reserve_map_at_back(__new_nodes);
 857:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****       size_type __i;
 858:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****       __try
 859:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****         {
 860:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****           for (__i = 1; __i <= __new_nodes; ++__i)
 861:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****             *(this->_M_impl._M_finish._M_node + __i) = this->_M_allocate_node();
 862:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****         }
 863:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****       __catch(...)
 864:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****         {
 865:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****           for (size_type __j = 1; __j < __i; ++__j)
 866:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****             _M_deallocate_node(*(this->_M_impl._M_finish._M_node + __j));
 867:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****           __throw_exception_again;
 868:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****         }
 869:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****     }
 870:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 
 871:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****   template <typename _Tp, typename _Alloc>
 872:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****     void
 873:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****     deque<_Tp, _Alloc>::
 1816                             		.loc 7 873 0
 1817                             	.LVL135:
 1818 0000 6E 6D                   		pushm	r6-r13
 1819                             	.LCFI9:
 1820                             		.loc 7 873 0
 1821 0002 EF 17                   		mov.L	r1, r7
 1822                             	.LBB678:
 874:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****     _M_reallocate_map(size_type __nodes_to_add, bool __add_at_front)
 875:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****     {
 876:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****       const size_type __old_num_nodes
 877:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	= this->_M_impl._M_finish._M_node - this->_M_impl._M_start._M_node + 1;
 1823                             		.loc 7 877 0
 1824 0004 AA 19                   		mov.L	36[r1], r1
 1825                             	.LVL136:
 1826 0006 A9 7C                   		mov.L	20[r7], r4
 1827                             	.LBE678:
 873:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****     _M_reallocate_map(size_type __nodes_to_add, bool __add_at_front)
 1828                             		.loc 7 873 0
 1829 0008 EF 2C                   		mov.L	r2, r12
 1830                             	.LBB753:
 1831                             		.loc 7 877 0
 1832 000a FF 0D 41                		sub	r4, r1, r13
 1833 000d 6A 2D                   		shar	#2, r13
 1834 000f 62 1D                   		add	#1, r13
 1835                             	.LVL137:
 878:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****       const size_type __new_num_nodes = __old_num_nodes + __nodes_to_add;
 1836                             		.loc 7 878 0
 1837 0011 FF 2B 2D                		add	r2, r13, r11
 1838                             	.LVL138:
 1839                             	.LBB679:
 879:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 
 880:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****       _Map_pointer __new_nstart;
 881:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****       if (this->_M_impl._M_map_size > 2 * __new_num_nodes)
 1840                             		.loc 7 881 0
 1841 0014 ED 7E 01                		mov.L	4[r7], r14
 1842 0017 FF 2A BB                		add	r11, r11, r10
 1843                             	.LBE679:
 1844                             	.LBE753:
 873:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****     _M_reallocate_map(size_type __nodes_to_add, bool __add_at_front)
 1845                             		.loc 7 873 0
 1846 001a CF 39                   		mov.B	r3, r9
 1847                             	.LBB754:
 1848                             	.LBB745:
 1849                             		.loc 7 881 0
 1850 001c 47 AE                   		cmp	r10, r14
 1851 001e 25 2C                   		bleu	.L164
 882:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	{
 883:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 884:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 					 - __new_num_nodes) / 2
 885:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	                 + (__add_at_front ? __nodes_to_add : 0);
 1852                             		.loc 7 885 0
 1853 0020 FF 0B BE                		sub	r11, r14, r11
 1854                             	.LVL139:
 1855 0023 68 1B                   		shlr	#1, r11
 1856 0025 5B 39                   		movu.B	r3, r9
 1857 0027 EC 7A                   		mov.L	[r7], r10
 1858 0029 6C 2B                   		shll	#2, r11
 1859 002b 61 09                   		cmp	#0, r9
 1860 002d 14                      		beq	.L165
 1861                             		.loc 7 885 0 is_stmt 0 discriminator 1
 1862 002e FD C2 29                		shll	#2, r2, r9
 1863                             		.balign 8,3,1
 1864                             	.L165:
 1865                             		.loc 7 885 0 discriminator 3
 1866 0031 4B B9                   		add	r11, r9
 883:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 					 - __new_num_nodes) / 2
 1867                             		.loc 7 883 0 is_stmt 1 discriminator 3
 1868 0033 4B 9A                   		add	r9, r10
 1869                             	.LVL140:
 886:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	  if (__new_nstart < this->_M_impl._M_start._M_node)
 887:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	    std::copy(this->_M_impl._M_start._M_node,
 888:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 		      this->_M_impl._M_finish._M_node + 1,
 889:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 		      __new_nstart);
 1870                             		.loc 7 889 0 discriminator 3
 1871 0035 71 13 04                		add	#4, r1, r3
 1872                             	.LVL141:
 1873                             	.LBB680:
 1874                             	.LBB681:
 1875                             	.LBB682:
 1876                             	.LBB683:
 1877                             	.LBB684:
 1878                             	.LBB685:
 1879                             		.file 8 "c:\\progra~2\\gccfor~2.201\\rx-elf\\rx-elf\\rx-elf\\include\\c++\\4.8.0.201602-gnurx\\bit
   1:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** // Core algorithmic facilities -*- C++ -*-
   2:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** 
   3:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** // Copyright (C) 2001-2013 Free Software Foundation, Inc.
   4:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** //
   5:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** // software; you can redistribute it and/or modify it under the
   7:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** // terms of the GNU General Public License as published by the
   8:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** // Free Software Foundation; either version 3, or (at your option)
   9:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** // any later version.
  10:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** 
  11:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** // This library is distributed in the hope that it will be useful,
  12:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** // GNU General Public License for more details.
  15:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** 
  16:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** // permissions described in the GCC Runtime Library Exception, version
  18:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** // 3.1, as published by the Free Software Foundation.
  19:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** 
  20:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** // You should have received a copy of the GNU General Public License and
  21:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** // <http://www.gnu.org/licenses/>.
  24:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** 
  25:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** /*
  26:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****  *
  27:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****  * Copyright (c) 1994
  28:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****  * Hewlett-Packard Company
  29:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****  *
  30:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****  * Permission to use, copy, modify, distribute and sell this software
  31:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****  * and its documentation for any purpose is hereby granted without fee,
  32:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****  * provided that the above copyright notice appear in all copies and
  33:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****  * that both that copyright notice and this permission notice appear
  34:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****  * in supporting documentation.  Hewlett-Packard Company makes no
  35:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****  * representations about the suitability of this software for any
  36:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  37:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****  *
  38:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****  *
  39:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****  * Copyright (c) 1996-1998
  40:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****  * Silicon Graphics Computer Systems, Inc.
  41:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****  *
  42:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****  * Permission to use, copy, modify, distribute and sell this software
  43:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****  * and its documentation for any purpose is hereby granted without fee,
  44:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****  * provided that the above copyright notice appear in all copies and
  45:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****  * that both that copyright notice and this permission notice appear
  46:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****  * in supporting documentation.  Silicon Graphics makes no
  47:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****  * representations about the suitability of this software for any
  48:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  49:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****  */
  50:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** 
  51:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** /** @file bits/stl_algobase.h
  52:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****  *  This is an internal header file, included by other library headers.
  53:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****  *  Do not attempt to use it directly. @headername{algorithm}
  54:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****  */
  55:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** 
  56:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** #ifndef _STL_ALGOBASE_H
  57:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** #define _STL_ALGOBASE_H 1
  58:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** 
  59:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** #include <bits/c++config.h>
  60:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** #include <bits/functexcept.h>
  61:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** #include <bits/cpp_type_traits.h>
  62:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** #include <ext/type_traits.h>
  63:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** #include <ext/numeric_traits.h>
  64:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** #include <bits/stl_pair.h>
  65:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** #include <bits/stl_iterator_base_types.h>
  66:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** #include <bits/stl_iterator_base_funcs.h>
  67:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** #include <bits/stl_iterator.h>
  68:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** #include <bits/concept_check.h>
  69:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** #include <debug/debug.h>
  70:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** #include <bits/move.h> // For std::swap and _GLIBCXX_MOVE
  71:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** 
  72:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** namespace std _GLIBCXX_VISIBILITY(default)
  73:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** {
  74:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  75:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** 
  76:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** #if __cplusplus < 201103L
  77:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****   // See http://gcc.gnu.org/ml/libstdc++/2004-08/msg00167.html: in a
  78:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****   // nutshell, we are partially implementing the resolution of DR 187,
  79:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****   // when it's safe, i.e., the value_types are equal.
  80:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****   template<bool _BoolType>
  81:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****     struct __iter_swap
  82:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****     {
  83:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****       template<typename _ForwardIterator1, typename _ForwardIterator2>
  84:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****         static void
  85:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****         iter_swap(_ForwardIterator1 __a, _ForwardIterator2 __b)
  86:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****         {
  87:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****           typedef typename iterator_traits<_ForwardIterator1>::value_type
  88:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****             _ValueType1;
  89:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****           _ValueType1 __tmp = _GLIBCXX_MOVE(*__a);
  90:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****           *__a = _GLIBCXX_MOVE(*__b);
  91:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****           *__b = _GLIBCXX_MOVE(__tmp);
  92:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** 	}
  93:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****     };
  94:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** 
  95:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****   template<>
  96:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****     struct __iter_swap<true>
  97:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****     {
  98:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****       template<typename _ForwardIterator1, typename _ForwardIterator2>
  99:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****         static void 
 100:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****         iter_swap(_ForwardIterator1 __a, _ForwardIterator2 __b)
 101:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****         {
 102:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****           swap(*__a, *__b);
 103:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****         }
 104:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****     };
 105:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** #endif
 106:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** 
 107:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****   /**
 108:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****    *  @brief Swaps the contents of two iterators.
 109:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****    *  @ingroup mutating_algorithms
 110:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****    *  @param  __a  An iterator.
 111:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****    *  @param  __b  Another iterator.
 112:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****    *  @return   Nothing.
 113:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****    *
 114:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****    *  This function swaps the values pointed to by two iterators, not the
 115:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****    *  iterators themselves.
 116:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****   */
 117:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****   template<typename _ForwardIterator1, typename _ForwardIterator2>
 118:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****     inline void
 119:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****     iter_swap(_ForwardIterator1 __a, _ForwardIterator2 __b)
 120:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****     {
 121:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****       // concept requirements
 122:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****       __glibcxx_function_requires(_Mutable_ForwardIteratorConcept<
 123:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** 				  _ForwardIterator1>)
 124:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****       __glibcxx_function_requires(_Mutable_ForwardIteratorConcept<
 125:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** 				  _ForwardIterator2>)
 126:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** 
 127:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** #if __cplusplus < 201103L
 128:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****       typedef typename iterator_traits<_ForwardIterator1>::value_type
 129:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** 	_ValueType1;
 130:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****       typedef typename iterator_traits<_ForwardIterator2>::value_type
 131:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** 	_ValueType2;
 132:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** 
 133:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****       __glibcxx_function_requires(_ConvertibleConcept<_ValueType1,
 134:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** 				  _ValueType2>)
 135:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****       __glibcxx_function_requires(_ConvertibleConcept<_ValueType2,
 136:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** 				  _ValueType1>)
 137:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** 
 138:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****       typedef typename iterator_traits<_ForwardIterator1>::reference
 139:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** 	_ReferenceType1;
 140:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****       typedef typename iterator_traits<_ForwardIterator2>::reference
 141:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** 	_ReferenceType2;
 142:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****       std::__iter_swap<__are_same<_ValueType1, _ValueType2>::__value
 143:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** 	&& __are_same<_ValueType1&, _ReferenceType1>::__value
 144:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** 	&& __are_same<_ValueType2&, _ReferenceType2>::__value>::
 145:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** 	iter_swap(__a, __b);
 146:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** #else
 147:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****       swap(*__a, *__b);
 148:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** #endif
 149:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****     }
 150:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** 
 151:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****   /**
 152:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****    *  @brief Swap the elements of two sequences.
 153:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****    *  @ingroup mutating_algorithms
 154:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****    *  @param  __first1  A forward iterator.
 155:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****    *  @param  __last1   A forward iterator.
 156:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****    *  @param  __first2  A forward iterator.
 157:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****    *  @return   An iterator equal to @p first2+(last1-first1).
 158:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****    *
 159:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****    *  Swaps each element in the range @p [first1,last1) with the
 160:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****    *  corresponding element in the range @p [first2,(last1-first1)).
 161:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****    *  The ranges must not overlap.
 162:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****   */
 163:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****   template<typename _ForwardIterator1, typename _ForwardIterator2>
 164:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****     _ForwardIterator2
 165:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****     swap_ranges(_ForwardIterator1 __first1, _ForwardIterator1 __last1,
 166:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** 		_ForwardIterator2 __first2)
 167:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****     {
 168:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****       // concept requirements
 169:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****       __glibcxx_function_requires(_Mutable_ForwardIteratorConcept<
 170:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** 				  _ForwardIterator1>)
 171:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****       __glibcxx_function_requires(_Mutable_ForwardIteratorConcept<
 172:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** 				  _ForwardIterator2>)
 173:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****       __glibcxx_requires_valid_range(__first1, __last1);
 174:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** 
 175:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****       for (; __first1 != __last1; ++__first1, ++__first2)
 176:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** 	std::iter_swap(__first1, __first2);
 177:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****       return __first2;
 178:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****     }
 179:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** 
 180:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****   /**
 181:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****    *  @brief This does what you think it does.
 182:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****    *  @ingroup sorting_algorithms
 183:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****    *  @param  __a  A thing of arbitrary type.
 184:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****    *  @param  __b  Another thing of arbitrary type.
 185:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****    *  @return   The lesser of the parameters.
 186:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****    *
 187:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****    *  This is the simple classic generic implementation.  It will work on
 188:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****    *  temporary expressions, since they are only evaluated once, unlike a
 189:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****    *  preprocessor macro.
 190:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****   */
 191:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****   template<typename _Tp>
 192:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****     inline const _Tp&
 193:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****     min(const _Tp& __a, const _Tp& __b)
 194:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****     {
 195:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****       // concept requirements
 196:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****       __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
 197:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****       //return __b < __a ? __b : __a;
 198:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****       if (__b < __a)
 199:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** 	return __b;
 200:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****       return __a;
 201:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****     }
 202:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** 
 203:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****   /**
 204:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****    *  @brief This does what you think it does.
 205:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****    *  @ingroup sorting_algorithms
 206:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****    *  @param  __a  A thing of arbitrary type.
 207:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****    *  @param  __b  Another thing of arbitrary type.
 208:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****    *  @return   The greater of the parameters.
 209:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****    *
 210:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****    *  This is the simple classic generic implementation.  It will work on
 211:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****    *  temporary expressions, since they are only evaluated once, unlike a
 212:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****    *  preprocessor macro.
 213:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****   */
 214:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****   template<typename _Tp>
 215:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****     inline const _Tp&
 216:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****     max(const _Tp& __a, const _Tp& __b)
 217:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****     {
 218:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****       // concept requirements
 219:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****       __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
 220:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****       //return  __a < __b ? __b : __a;
 221:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****       if (__a < __b)
 222:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** 	return __b;
 223:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****       return __a;
 224:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****     }
 225:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** 
 226:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****   /**
 227:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****    *  @brief This does what you think it does.
 228:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****    *  @ingroup sorting_algorithms
 229:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****    *  @param  __a  A thing of arbitrary type.
 230:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****    *  @param  __b  Another thing of arbitrary type.
 231:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****    *  @param  __comp  A @link comparison_functors comparison functor@endlink.
 232:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****    *  @return   The lesser of the parameters.
 233:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****    *
 234:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****    *  This will work on temporary expressions, since they are only evaluated
 235:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****    *  once, unlike a preprocessor macro.
 236:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****   */
 237:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****   template<typename _Tp, typename _Compare>
 238:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****     inline const _Tp&
 239:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****     min(const _Tp& __a, const _Tp& __b, _Compare __comp)
 240:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****     {
 241:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****       //return __comp(__b, __a) ? __b : __a;
 242:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****       if (__comp(__b, __a))
 243:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** 	return __b;
 244:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****       return __a;
 245:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****     }
 246:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** 
 247:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****   /**
 248:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****    *  @brief This does what you think it does.
 249:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****    *  @ingroup sorting_algorithms
 250:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****    *  @param  __a  A thing of arbitrary type.
 251:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****    *  @param  __b  Another thing of arbitrary type.
 252:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****    *  @param  __comp  A @link comparison_functors comparison functor@endlink.
 253:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****    *  @return   The greater of the parameters.
 254:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****    *
 255:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****    *  This will work on temporary expressions, since they are only evaluated
 256:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****    *  once, unlike a preprocessor macro.
 257:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****   */
 258:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****   template<typename _Tp, typename _Compare>
 259:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****     inline const _Tp&
 260:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****     max(const _Tp& __a, const _Tp& __b, _Compare __comp)
 261:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****     {
 262:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****       //return __comp(__a, __b) ? __b : __a;
 263:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****       if (__comp(__a, __b))
 264:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** 	return __b;
 265:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****       return __a;
 266:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****     }
 267:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** 
 268:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****   // If _Iterator is a __normal_iterator return its base (a plain pointer,
 269:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****   // normally) otherwise return it untouched.  See copy, fill, ... 
 270:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****   template<typename _Iterator>
 271:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****     struct _Niter_base
 272:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****     : _Iter_base<_Iterator, __is_normal_iterator<_Iterator>::__value>
 273:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****     { };
 274:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** 
 275:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****   template<typename _Iterator>
 276:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****     inline typename _Niter_base<_Iterator>::iterator_type
 277:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****     __niter_base(_Iterator __it)
 278:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****     { return std::_Niter_base<_Iterator>::_S_base(__it); }
 279:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** 
 280:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****   // Likewise, for move_iterator.
 281:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****   template<typename _Iterator>
 282:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****     struct _Miter_base
 283:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****     : _Iter_base<_Iterator, __is_move_iterator<_Iterator>::__value>
 284:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****     { };
 285:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** 
 286:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****   template<typename _Iterator>
 287:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****     inline typename _Miter_base<_Iterator>::iterator_type
 288:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****     __miter_base(_Iterator __it)
 289:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****     { return std::_Miter_base<_Iterator>::_S_base(__it); }
 290:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** 
 291:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****   // All of these auxiliary structs serve two purposes.  (1) Replace
 292:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****   // calls to copy with memmove whenever possible.  (Memmove, not memcpy,
 293:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****   // because the input and output ranges are permitted to overlap.)
 294:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****   // (2) If we're using random access iterators, then write the loop as
 295:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****   // a for loop with an explicit count.
 296:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** 
 297:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****   template<bool, bool, typename>
 298:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****     struct __copy_move
 299:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****     {
 300:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****       template<typename _II, typename _OI>
 301:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****         static _OI
 302:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****         __copy_m(_II __first, _II __last, _OI __result)
 303:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****         {
 304:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** 	  for (; __first != __last; ++__result, ++__first)
 305:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** 	    *__result = *__first;
 306:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** 	  return __result;
 307:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** 	}
 308:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****     };
 309:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** 
 310:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** #if __cplusplus >= 201103L
 311:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****   template<typename _Category>
 312:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****     struct __copy_move<true, false, _Category>
 313:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****     {
 314:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****       template<typename _II, typename _OI>
 315:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****         static _OI
 316:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****         __copy_m(_II __first, _II __last, _OI __result)
 317:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****         {
 318:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** 	  for (; __first != __last; ++__result, ++__first)
 319:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** 	    *__result = std::move(*__first);
 320:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** 	  return __result;
 321:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** 	}
 322:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****     };
 323:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** #endif
 324:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** 
 325:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****   template<>
 326:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****     struct __copy_move<false, false, random_access_iterator_tag>
 327:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****     {
 328:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****       template<typename _II, typename _OI>
 329:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****         static _OI
 330:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****         __copy_m(_II __first, _II __last, _OI __result)
 331:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****         { 
 332:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** 	  typedef typename iterator_traits<_II>::difference_type _Distance;
 333:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** 	  for(_Distance __n = __last - __first; __n > 0; --__n)
 334:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** 	    {
 335:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** 	      *__result = *__first;
 336:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** 	      ++__first;
 337:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** 	      ++__result;
 338:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** 	    }
 339:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** 	  return __result;
 340:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** 	}
 341:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****     };
 342:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** 
 343:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** #if __cplusplus >= 201103L
 344:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****   template<>
 345:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****     struct __copy_move<true, false, random_access_iterator_tag>
 346:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****     {
 347:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****       template<typename _II, typename _OI>
 348:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****         static _OI
 349:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****         __copy_m(_II __first, _II __last, _OI __result)
 350:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****         { 
 351:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** 	  typedef typename iterator_traits<_II>::difference_type _Distance;
 352:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** 	  for(_Distance __n = __last - __first; __n > 0; --__n)
 353:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** 	    {
 354:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** 	      *__result = std::move(*__first);
 355:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** 	      ++__first;
 356:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** 	      ++__result;
 357:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** 	    }
 358:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** 	  return __result;
 359:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** 	}
 360:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****     };
 361:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** #endif
 362:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** 
 363:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****   template<bool _IsMove>
 364:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****     struct __copy_move<_IsMove, true, random_access_iterator_tag>
 365:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****     {
 366:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****       template<typename _Tp>
 367:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****         static _Tp*
 368:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****         __copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 369:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****         {
 370:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** 	  const ptrdiff_t _Num = __last - __first;
 1880                             		.loc 8 370 0 discriminator 3
 1881 0038 43 43                   		sub	r4, r3
 1882                             	.LBE685:
 1883                             	.LBE684:
 1884                             	.LBE683:
 1885                             	.LBE682:
 1886                             	.LBE681:
 1887                             	.LBE680:
 886:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	  if (__new_nstart < this->_M_impl._M_start._M_node)
 1888                             		.loc 7 886 0 discriminator 3
 1889 003a 47 A4                   		cmp	r10, r4
 1890 003c 24 05 38 87 00          		bleu	.L166
 1891                             	.LVL142:
 1892                             	.LBB696:
 1893                             	.LBB694:
 1894                             	.LBB692:
 1895                             	.LBB690:
 1896                             	.LBB688:
 1897                             	.LBB686:
 1898                             		.loc 8 370 0
 1899 0041 6A 23                   		shar	#2, r3
 1900                             	.LVL143:
 371:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** 	  if (_Num)
 1901                             		.loc 8 371 0
 1902 0043 3B 99 00                		bne	.L167
 1903 0046 6C 2D                   		shll	#2, r13
 1904                             	.LVL144:
 1905 0048 2E 58                   		bra	.L168
 1906                             	.LVL145:
 1907                             	.L164:
 1908                             	.LBE686:
 1909                             	.LBE688:
 1910                             	.LBE690:
 1911                             	.LBE692:
 1912                             	.LBE694:
 1913                             	.LBE696:
 1914                             	.LBB697:
 890:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	  else
 891:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	    std::copy_backward(this->_M_impl._M_start._M_node,
 892:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 			       this->_M_impl._M_finish._M_node + 1,
 893:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 			       __new_nstart + __old_num_nodes);
 894:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	}
 895:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****       else
 896:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	{
 897:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	  size_type __new_map_size = this->_M_impl._M_map_size
 898:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	                             + std::max(this->_M_impl._M_map_size,
 899:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 						__nodes_to_add) + 2;
 1915                             		.loc 7 899 0
 1916 004a 71 E8 02                		add	#2, r14, r8
 1917 004d 47 E2                   		cmp	r14, r2
 1918 004f 23 04                   		bltu 1f
 1919 0051 EF 2E                   		mov r2, r14
 1920                             	1:
 1921 0053 4B E8                   		add	r14, r8
 1922                             	.LVL146:
 1923                             	.LBB698:
 1924                             	.LBB699:
 1925                             	.LBB700:
 101:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\ext\new_allocator.h **** 	  std::__throw_bad_alloc();
 1926                             		.loc 6 101 0
 1927 0055 74 08 FF FF FF 3F       		cmp	#0x3fffffff, r8
 1928 005b 25 05 38 8D 00          		bgtu	.L182
 104:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\ext\new_allocator.h ****       }
 1929                             		.loc 6 104 0
 1930 0060 FD C2 81                		shll	#2, r8, r1
 1931 0063 05 00 00 00             		bsr	__Znwm
 1932                             	.LVL147:
 1933 0067 EF 16                   		mov.L	r1, r6
 1934                             	.LBE700:
 1935                             	.LBE699:
 1936                             	.LBE698:
 900:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 
 901:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	  _Map_pointer __new_map = this->_M_allocate_map(__new_map_size);
 902:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
 903:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	                 + (__add_at_front ? __nodes_to_add : 0);
 1937                             		.loc 7 903 0
 1938 0069 FF 0B B8                		sub	r11, r8, r11
 1939                             	.LVL148:
 1940 006c 68 1B                   		shlr	#1, r11
 1941 006e 5B 99                   		movu.B	r9, r9
 1942 0070 6C 2B                   		shll	#2, r11
 1943 0072 61 09                   		cmp	#0, r9
 1944 0074 14                      		beq	.L170
 1945                             		.loc 7 903 0 is_stmt 0 discriminator 1
 1946 0075 FD C2 C9                		shll	#2, r12, r9
 1947                             	.LVL149:
 1948                             		.balign 8,3,1
 1949                             	.L170:
 904:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	  std::copy(this->_M_impl._M_start._M_node,
 905:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 		    this->_M_impl._M_finish._M_node + 1,
 906:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 		    __new_nstart);
 1950                             		.loc 7 906 0 is_stmt 1 discriminator 3
 1951 0078 AA 7B                   		mov.L	36[r7], r3
 1952 007a A9 7A                   		mov.L	20[r7], r2
 1953 007c 62 43                   		add	#4, r3
 1954                             	.LBB703:
 1955                             	.LBB704:
 1956                             	.LBB705:
 1957                             	.LBB706:
 1958                             	.LBB707:
 1959                             	.LBB708:
 370:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** 	  if (_Num)
 1960                             		.loc 8 370 0 discriminator 3
 1961 007e 43 23                   		sub	r2, r3
 1962                             	.LBE708:
 1963                             	.LBE707:
 1964                             	.LBE706:
 1965                             	.LBE705:
 1966                             	.LBE704:
 1967                             	.LBE703:
 903:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	  std::copy(this->_M_impl._M_start._M_node,
 1968                             		.loc 7 903 0 discriminator 3
 1969 0080 FF 2A B9                		add	r11, r9, r10
 1970                             	.LBB719:
 1971                             	.LBB717:
 1972                             	.LBB715:
 1973                             	.LBB713:
 1974                             	.LBB711:
 1975                             	.LBB709:
 370:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** 	  if (_Num)
 1976                             		.loc 8 370 0 discriminator 3
 1977 0083 6A 23                   		shar	#2, r3
 1978                             	.LBE709:
 1979                             	.LBE711:
 1980                             	.LBE713:
 1981                             	.LBE715:
 1982                             	.LBE717:
 1983                             	.LBE719:
 902:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	                 + (__add_at_front ? __nodes_to_add : 0);
 1984                             		.loc 7 902 0 discriminator 3
 1985 0085 4B 6A                   		add	r6, r10
 1986                             	.LVL150:
 1987                             	.LBB720:
 1988                             	.LBB718:
 1989                             	.LBB716:
 1990                             	.LBB714:
 1991                             	.LBB712:
 1992                             	.LBB710:
 1993                             		.loc 8 371 0 discriminator 3
 1994 0087 61 03                   		cmp	#0, r3
 1995 0089 11                      		beq	.L171
 372:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** 	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 1996                             		.loc 8 372 0
 1997 008a EF A1                   		mov.L	r10, r1
 1998 008c 6C 23                   		shll	#2, r3
 1999                             	.LVL151:
 2000 008e 05 00 00 00             		bsr	_memmove
 2001                             	.LVL152:
 2002                             		.balign 8,3,1
 2003                             	.L171:
 2004                             	.LBE710:
 2005                             	.LBE712:
 2006                             	.LBE714:
 2007                             	.LBE716:
 2008                             	.LBE718:
 2009                             	.LBE720:
 2010                             	.LBB721:
 2011                             	.LBB722:
 2012                             	.LBB723:
 2013                             		.loc 6 110 0
 2014 0092 EC 71                   		mov.L	[r7], r1
 2015 0094 6C 2D                   		shll	#2, r13
 2016                             	.LVL153:
 2017 0096 05 00 00 00             		bsr	__ZdlPv
 2018                             	.LVL154:
 2019                             	.LBE723:
 2020                             	.LBE722:
 2021                             	.LBE721:
 907:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	  _M_deallocate_map(this->_M_impl._M_map, this->_M_impl._M_map_size);
 908:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 
 909:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	  this->_M_impl._M_map = __new_map;
 2022                             		.loc 7 909 0
 2023 009a E3 76                   		mov.L	r6, [r7]
 910:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	  this->_M_impl._M_map_size = __new_map_size;
 2024                             		.loc 7 910 0
 2025 009c E7 78 01                		mov.L	r8, 4[r7]
 2026                             	.LVL155:
 2027 009f 03                      		.balign 8,3,5
 2028                             	.L168:
 2029                             	.LBE697:
 2030                             	.LBE745:
 2031                             	.LBB746:
 2032                             	.LBB747:
 236:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	_M_first = *__new_node;
 2033                             		.loc 5 236 0
 2034 00a0 E7 7A 05                		mov.L	r10, 20[r7]
 237:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	_M_last = _M_first + difference_type(_S_buffer_size());
 2035                             		.loc 5 237 0
 2036 00a3 EC AB                   		mov.L	[r10], r11
 2037                             	.LBE747:
 2038                             	.LBE746:
 911:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	}
 912:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 
 913:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****       this->_M_impl._M_start._M_set_node(__new_nstart);
 914:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****       this->_M_impl._M_finish._M_set_node(__new_nstart + __old_num_nodes - 1);
 2039                             		.loc 7 914 0
 2040 00a5 60 4D                   		sub	#4, r13
 2041 00a7 4B DA                   		add	r13, r10
 2042                             	.LVL156:
 2043                             	.LBB749:
 2044                             	.LBB748:
 238:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       }
 2045                             		.loc 5 238 0
 2046 00a9 72 BC 00 02             		add	#0x200, r11, r12
 2047                             	.LVL157:
 237:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	_M_last = _M_first + difference_type(_S_buffer_size());
 2048                             		.loc 5 237 0
 2049 00ad E7 7B 03                		mov.L	r11, 12[r7]
 2050                             	.LVL158:
 238:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       }
 2051                             		.loc 5 238 0
 2052 00b0 E7 7C 04                		mov.L	r12, 16[r7]
 2053                             	.LVL159:
 2054                             	.LBE748:
 2055                             	.LBE749:
 2056                             	.LBB750:
 2057                             	.LBB751:
 236:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	_M_first = *__new_node;
 2058                             		.loc 5 236 0
 2059 00b3 E7 7A 09                		mov.L	r10, 36[r7]
 237:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	_M_last = _M_first + difference_type(_S_buffer_size());
 2060                             		.loc 5 237 0
 2061 00b6 EC AA                   		mov.L	[r10], r10
 2062                             	.LVL160:
 238:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       }
 2063                             		.loc 5 238 0
 2064 00b8 72 AB 00 02             		add	#0x200, r10, r11
 237:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	_M_last = _M_first + difference_type(_S_buffer_size());
 2065                             		.loc 5 237 0
 2066 00bc E7 7A 07                		mov.L	r10, 28[r7]
 238:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       }
 2067                             		.loc 5 238 0
 2068 00bf E7 7B 08                		mov.L	r11, 32[r7]
 2069                             	.LBE751:
 2070                             	.LBE750:
 2071                             	.LBE754:
 915:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****     }
 2072                             		.loc 7 915 0
 2073 00c2 3F 6D 08                		rtsd	#32, r6-r13
 2074                             	.LVL161:
 2075                             	.L166:
 2076                             	.LBB755:
 2077                             	.LBB752:
 2078                             	.LBB725:
 2079                             	.LBB726:
 2080                             	.LBB727:
 2081                             	.LBB728:
 2082                             	.LBB729:
 2083                             	.LBB730:
 373:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** 	  return __result + _Num;
 374:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** 	}
 375:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****     };
 376:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** 
 377:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****   template<bool _IsMove, typename _II, typename _OI>
 378:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****     inline _OI
 379:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****     __copy_move_a(_II __first, _II __last, _OI __result)
 380:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****     {
 381:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****       typedef typename iterator_traits<_II>::value_type _ValueTypeI;
 382:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****       typedef typename iterator_traits<_OI>::value_type _ValueTypeO;
 383:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****       typedef typename iterator_traits<_II>::iterator_category _Category;
 384:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****       const bool __simple = (__is_trivial(_ValueTypeI)
 385:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** 	                     && __is_pointer<_II>::__value
 386:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** 	                     && __is_pointer<_OI>::__value
 387:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** 			     && __are_same<_ValueTypeI, _ValueTypeO>::__value);
 388:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** 
 389:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****       return std::__copy_move<_IsMove, __simple,
 390:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** 	                      _Category>::__copy_m(__first, __last, __result);
 391:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****     }
 392:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** 
 393:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****   // Helpers for streambuf iterators (either istream or ostream).
 394:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****   // NB: avoid including <iosfwd>, relatively large.
 395:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****   template<typename _CharT>
 396:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****     struct char_traits;
 397:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** 
 398:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****   template<typename _CharT, typename _Traits>
 399:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****     class istreambuf_iterator;
 400:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** 
 401:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****   template<typename _CharT, typename _Traits>
 402:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****     class ostreambuf_iterator;
 403:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** 
 404:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****   template<bool _IsMove, typename _CharT>
 405:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****     typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value, 
 406:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** 	     ostreambuf_iterator<_CharT, char_traits<_CharT> > >::__type
 407:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****     __copy_move_a2(_CharT*, _CharT*,
 408:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** 		   ostreambuf_iterator<_CharT, char_traits<_CharT> >);
 409:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** 
 410:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****   template<bool _IsMove, typename _CharT>
 411:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****     typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value, 
 412:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** 	     ostreambuf_iterator<_CharT, char_traits<_CharT> > >::__type
 413:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****     __copy_move_a2(const _CharT*, const _CharT*,
 414:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** 		   ostreambuf_iterator<_CharT, char_traits<_CharT> >);
 415:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** 
 416:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****   template<bool _IsMove, typename _CharT>
 417:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****     typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value,
 418:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** 				    _CharT*>::__type
 419:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****     __copy_move_a2(istreambuf_iterator<_CharT, char_traits<_CharT> >,
 420:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** 		   istreambuf_iterator<_CharT, char_traits<_CharT> >, _CharT*);
 421:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** 
 422:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****   template<bool _IsMove, typename _II, typename _OI>
 423:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****     inline _OI
 424:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****     __copy_move_a2(_II __first, _II __last, _OI __result)
 425:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****     {
 426:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****       return _OI(std::__copy_move_a<_IsMove>(std::__niter_base(__first),
 427:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** 					     std::__niter_base(__last),
 428:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** 					     std::__niter_base(__result)));
 429:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****     }
 430:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** 
 431:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****   /**
 432:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****    *  @brief Copies the range [first,last) into result.
 433:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****    *  @ingroup mutating_algorithms
 434:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****    *  @param  __first  An input iterator.
 435:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****    *  @param  __last   An input iterator.
 436:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****    *  @param  __result An output iterator.
 437:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****    *  @return   result + (first - last)
 438:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****    *
 439:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****    *  This inline function will boil down to a call to @c memmove whenever
 440:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****    *  possible.  Failing that, if random access iterators are passed, then the
 441:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****    *  loop count will be known (and therefore a candidate for compiler
 442:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****    *  optimizations such as unrolling).  Result may not be contained within
 443:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****    *  [first,last); the copy_backward function should be used instead.
 444:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****    *
 445:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****    *  Note that the end of the output range is permitted to be contained
 446:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****    *  within [first,last).
 447:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****   */
 448:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****   template<typename _II, typename _OI>
 449:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****     inline _OI
 450:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****     copy(_II __first, _II __last, _OI __result)
 451:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****     {
 452:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****       // concept requirements
 453:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****       __glibcxx_function_requires(_InputIteratorConcept<_II>)
 454:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****       __glibcxx_function_requires(_OutputIteratorConcept<_OI,
 455:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** 	    typename iterator_traits<_II>::value_type>)
 456:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****       __glibcxx_requires_valid_range(__first, __last);
 457:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** 
 458:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****       return (std::__copy_move_a2<__is_move_iterator<_II>::__value>
 459:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** 	      (std::__miter_base(__first), std::__miter_base(__last),
 460:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** 	       __result));
 461:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****     }
 462:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** 
 463:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** #if __cplusplus >= 201103L
 464:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****   /**
 465:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****    *  @brief Moves the range [first,last) into result.
 466:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****    *  @ingroup mutating_algorithms
 467:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****    *  @param  __first  An input iterator.
 468:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****    *  @param  __last   An input iterator.
 469:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****    *  @param  __result An output iterator.
 470:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****    *  @return   result + (first - last)
 471:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****    *
 472:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****    *  This inline function will boil down to a call to @c memmove whenever
 473:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****    *  possible.  Failing that, if random access iterators are passed, then the
 474:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****    *  loop count will be known (and therefore a candidate for compiler
 475:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****    *  optimizations such as unrolling).  Result may not be contained within
 476:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****    *  [first,last); the move_backward function should be used instead.
 477:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****    *
 478:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****    *  Note that the end of the output range is permitted to be contained
 479:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****    *  within [first,last).
 480:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****   */
 481:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****   template<typename _II, typename _OI>
 482:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****     inline _OI
 483:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****     move(_II __first, _II __last, _OI __result)
 484:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****     {
 485:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****       // concept requirements
 486:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****       __glibcxx_function_requires(_InputIteratorConcept<_II>)
 487:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****       __glibcxx_function_requires(_OutputIteratorConcept<_OI,
 488:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** 	    typename iterator_traits<_II>::value_type>)
 489:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****       __glibcxx_requires_valid_range(__first, __last);
 490:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** 
 491:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****       return std::__copy_move_a2<true>(std::__miter_base(__first),
 492:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** 				       std::__miter_base(__last), __result);
 493:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****     }
 494:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** 
 495:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** #define _GLIBCXX_MOVE3(_Tp, _Up, _Vp) std::move(_Tp, _Up, _Vp)
 496:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** #else
 497:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** #define _GLIBCXX_MOVE3(_Tp, _Up, _Vp) std::copy(_Tp, _Up, _Vp)
 498:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** #endif
 499:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** 
 500:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****   template<bool, bool, typename>
 501:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****     struct __copy_move_backward
 502:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****     {
 503:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****       template<typename _BI1, typename _BI2>
 504:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****         static _BI2
 505:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****         __copy_move_b(_BI1 __first, _BI1 __last, _BI2 __result)
 506:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****         {
 507:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** 	  while (__first != __last)
 508:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** 	    *--__result = *--__last;
 509:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** 	  return __result;
 510:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** 	}
 511:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****     };
 512:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** 
 513:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** #if __cplusplus >= 201103L
 514:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****   template<typename _Category>
 515:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****     struct __copy_move_backward<true, false, _Category>
 516:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****     {
 517:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****       template<typename _BI1, typename _BI2>
 518:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****         static _BI2
 519:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****         __copy_move_b(_BI1 __first, _BI1 __last, _BI2 __result)
 520:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****         {
 521:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** 	  while (__first != __last)
 522:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** 	    *--__result = std::move(*--__last);
 523:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** 	  return __result;
 524:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** 	}
 525:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****     };
 526:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** #endif
 527:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** 
 528:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****   template<>
 529:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****     struct __copy_move_backward<false, false, random_access_iterator_tag>
 530:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****     {
 531:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****       template<typename _BI1, typename _BI2>
 532:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****         static _BI2
 533:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****         __copy_move_b(_BI1 __first, _BI1 __last, _BI2 __result)
 534:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****         {
 535:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** 	  typename iterator_traits<_BI1>::difference_type __n;
 536:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** 	  for (__n = __last - __first; __n > 0; --__n)
 537:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** 	    *--__result = *--__last;
 538:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** 	  return __result;
 539:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** 	}
 540:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****     };
 541:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** 
 542:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** #if __cplusplus >= 201103L
 543:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****   template<>
 544:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****     struct __copy_move_backward<true, false, random_access_iterator_tag>
 545:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****     {
 546:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****       template<typename _BI1, typename _BI2>
 547:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****         static _BI2
 548:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****         __copy_move_b(_BI1 __first, _BI1 __last, _BI2 __result)
 549:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****         {
 550:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** 	  typename iterator_traits<_BI1>::difference_type __n;
 551:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** 	  for (__n = __last - __first; __n > 0; --__n)
 552:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** 	    *--__result = std::move(*--__last);
 553:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** 	  return __result;
 554:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** 	}
 555:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****     };
 556:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** #endif
 557:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** 
 558:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****   template<bool _IsMove>
 559:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****     struct __copy_move_backward<_IsMove, true, random_access_iterator_tag>
 560:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****     {
 561:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****       template<typename _Tp>
 562:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****         static _Tp*
 563:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****         __copy_move_b(const _Tp* __first, const _Tp* __last, _Tp* __result)
 564:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****         {
 565:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** 	  const ptrdiff_t _Num = __last - __first;
 2084                             		.loc 8 565 0
 2085 00c5 6A 23                   		shar	#2, r3
 2086                             	.LBE730:
 2087                             	.LBE729:
 2088                             	.LBE728:
 2089                             	.LBE727:
 2090                             	.LBE726:
 2091                             	.LBE725:
 893:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	}
 2092                             		.loc 7 893 0
 2093 00c7 6C 2D                   		shll	#2, r13
 2094                             	.LVL162:
 2095                             	.LBB741:
 2096                             	.LBB739:
 2097                             	.LBB737:
 2098                             	.LBB735:
 2099                             	.LBB733:
 2100                             	.LBB731:
 566:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** 	  if (_Num)
 2101                             		.loc 8 566 0
 2102 00c9 61 03                   		cmp	#0, r3
 2103 00cb 20 D5                   		beq	.L168
 567:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** 	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
 2104                             		.loc 8 567 0
 2105 00cd 6C 23                   		shll	#2, r3
 2106                             	.LVL163:
 2107                             	.LBE731:
 2108                             	.LBE733:
 2109                             	.LBE735:
 2110                             	.LBE737:
 2111                             	.LBE739:
 2112                             	.LBE741:
 893:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	}
 2113                             		.loc 7 893 0
 2114 00cf FF 21 DA                		add	r13, r10, r1
 2115                             	.LVL164:
 2116                             	.LBB742:
 2117                             	.LBB740:
 2118                             	.LBB738:
 2119                             	.LBB736:
 2120                             	.LBB734:
 2121                             	.LBB732:
 2122                             		.loc 8 567 0
 2123 00d2 43 31                   		sub	r3, r1
 2124                             	.LVL165:
 2125 00d4 EF 42                   		mov.L	r4, r2
 2126                             	.LVL166:
 2127 00d6 05 00 00 00             		bsr	_memmove
 2128                             	.LVL167:
 2129 00da 2E C6                   		bra	.L168
 2130                             	.LVL168:
 2131                             	.L167:
 2132                             	.LBE732:
 2133                             	.LBE734:
 2134                             	.LBE736:
 2135                             	.LBE738:
 2136                             	.LBE740:
 2137                             	.LBE742:
 2138                             	.LBB743:
 2139                             	.LBB695:
 2140                             	.LBB693:
 2141                             	.LBB691:
 2142                             	.LBB689:
 2143                             	.LBB687:
 372:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** 	  return __result + _Num;
 2144                             		.loc 8 372 0
 2145 00dc EF A1                   		mov.L	r10, r1
 2146 00de EF 42                   		mov.L	r4, r2
 2147                             	.LVL169:
 2148 00e0 6C 23                   		shll	#2, r3
 2149                             	.LVL170:
 2150 00e2 05 00 00 00             		bsr	_memmove
 2151                             	.LVL171:
 2152 00e6 6C 2D                   		shll	#2, r13
 2153                             	.LVL172:
 2154 00e8 2E B8                   		bra	.L168
 2155                             	.LVL173:
 2156                             	.L182:
 2157                             	.LBE687:
 2158                             	.LBE689:
 2159                             	.LBE691:
 2160                             	.LBE693:
 2161                             	.LBE695:
 2162                             	.LBE743:
 2163                             	.LBB744:
 2164                             	.LBB724:
 2165                             	.LBB702:
 2166                             	.LBB701:
 102:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\ext\new_allocator.h **** 
 2167                             		.loc 6 102 0
 2168 00ea 05 00 00 00             		bsr	__ZSt17__throw_bad_allocv
 2169                             	.LVL174:
 2170                             	.LBE701:
 2171                             	.LBE702:
 2172                             	.LBE724:
 2173                             	.LBE744:
 2174                             	.LBE752:
 2175                             	.LBE755:
 2176                             	.LFE1179:
 2178 00ee EF 00                   		.section	.rodata.str1.1
 2179                             	.LC6:
 2180 004d 42 20 6D 6F 64 65 0A 00 		.string	"B mode\n"
 2181                             	.LC7:
 2182 0055 54 72 61 70 65 0A 00    		.string	"Trape\n"
 2183                             	.LC8:
 2184 005c 73 65 6C 65 63 74 21 20 		.string	"select! \n"
 2184      0A 00 
 2185                             		.section P,"ax"
 2186                             		.global	__Z6mode_Bv
 2188                             	__Z6mode_Bv:
 2189                             	.LFB1077:
 2190                             		.file 9 "../src/mode/mode_B.cpp"
   1:../src/mode/mode_B.cpp **** /*
   2:../src/mode/mode_B.cpp ****  * mode_B.cpp
   3:../src/mode/mode_B.cpp ****  *
   4:../src/mode/mode_B.cpp ****  *  Created on: 2017/02/25
   5:../src/mode/mode_B.cpp ****  *      Author: ryota
   6:../src/mode/mode_B.cpp ****  */
   7:../src/mode/mode_B.cpp **** 
   8:../src/mode/mode_B.cpp **** #include <stdint.h>
   9:../src/mode/mode_B.cpp **** #include "mode_B.h"
  10:../src/mode/mode_B.cpp **** #include "tactsw.h"
  11:../src/mode/mode_B.cpp **** #include "timer.h"
  12:../src/mode/mode_B.cpp **** #include "fcled.h"
  13:../src/mode/mode_B.cpp **** #include "sound.h"
  14:../src/mode/mode_B.cpp **** #include "uart.hpp"
  15:../src/mode/mode_B.cpp **** #include "gamepad.h"
  16:../src/mode/mode_B.cpp **** #include "mouse.h"
  17:../src/mode/mode_B.cpp **** #include "imu.hpp"
  18:../src/mode/mode_B.cpp **** 
  19:../src/mode/mode_B.cpp **** //Eigen
  20:../src/mode/mode_B.cpp **** //#include <Core>
  21:../src/mode/mode_B.cpp **** //#include <Geometry>
  22:../src/mode/mode_B.cpp **** 
  23:../src/mode/mode_B.cpp **** #include "moveEvent.h"
  24:../src/mode/mode_B.cpp **** 
  25:../src/mode/mode_B.cpp **** void mode_B(){
 2191                             		.loc 9 25 0
 2192 0000 6E 6D                   		pushm	r6-r13
 2193                             	.LCFI10:
 2194 0002 71 00 94                		add	#0xffffff94, r0
 2195                             	.LCFI11:
 2196 0005 71 01 2C                		add	#44, r0, r1
 2197 0008 F9 02 11 00 00 00 00    		mov.L	#___gxx_personality_sj0, 68[r0]
 2198 000f F9 02 12 00 00 00 00    		mov.L	#.LLSDA1077, 72[r0]
 2199 0016 66 43                   		mov.L	#4, r3
 2200 0018 4B 03                   		add	r0, r3
 2201 001a A4 8B                   		mov.L	r3, 76[r0]
 2202 001c F9 02 14 E4 07 00 00    		mov.L	#.L244, 80[r0]
 2203 0023 A5 08                   		mov.L	r0, 84[r0]
 2204 0025 05 00 00 00             		bsr	__Unwind_SjLj_Register
 2205                             	.LVL175:
 2206                             	.LBB980:
  26:../src/mode/mode_B.cpp ****     myprintf3("B mode\n");
 2207                             		.loc 9 26 0
 2208 0029 F8 02 4D 00 00 00       		mov.L	#.LC6, [r0]
 2209 002f F9 06 0C FF             		mov.L	#-1, 48[r0]
 2210 0033 05 00 00 00             		bsr	__Z9myprintf3PKcz
 2211                             	.LVL176:
 2212                             	.LBB981:
 2213                             	.LBB982:
 976:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         return instance;
 2214                             		.loc 4 976 0
 2215 0037 FB 12 00 00 00 00       		mov.L	#__ZGVZN9EventList11getInstanceEvE8instance, r1
 2216 003d 58 17                   		movu.B	[r1], r7
 2217 003f A6 0F                   		mov.L	r7, 100[r0]
 2218 0041 61 07                   		cmp	#0, r7
 2219 0043 3A 2C 03                		beq	.L302
 2220                             	.L307:
 2221 0046 F9 02 19 00 00 00 00    		mov.L	#__ZZN9EventList11getInstanceEvE8instance, 100[r0]
 2222 004d FC 13 00                		.balign 8,3,4
 2223                             	.L189:
 2224                             	.LBE982:
 2225                             	.LBE981:
  27:../src/mode/mode_B.cpp **** 
  28:../src/mode/mode_B.cpp ****     EventList &events = EventList::getInstance();
  29:../src/mode/mode_B.cpp **** 
  30:../src/mode/mode_B.cpp ****     //MPU9250::getInstance().calibOmegaOffset(200);
  31:../src/mode/mode_B.cpp **** 
  32:../src/mode/mode_B.cpp ****     events.push(new Stop(500));
 2226                             		.loc 9 32 0
 2227 0050 F9 06 0C FF             		mov.L	#-1, 48[r0]
 2228 0054 FB 1A 88 09             		mov.L	#0x988, r1
 2229 0058 05 00 00 00             		bsr	__Znwm
 2230                             	.LVL177:
 2231 005c A6 01                   		mov.L	r1, 96[r0]
 2232                             	.LVL178:
 2233                             	.LBB1065:
 2234                             	.LBB1066:
 2235                             	.LBB1067:
 2236                             	.LBB1068:
 642:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	_M_deallocate_node(*__n);
 643:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****     }
 644:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
 645:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****   /**
 646:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****    *  @brief  A standard container using fixed-size memory allocation and
 647:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****    *  constant-time manipulation of elements at either end.
 648:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****    *
 649:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****    *  @ingroup sequences
 650:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****    *
 651:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****    *  @tparam _Tp  Type of element.
 652:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****    *  @tparam _Alloc  Allocator type, defaults to allocator<_Tp>.
 653:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****    *
 654:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****    *  Meets the requirements of a <a href="tables.html#65">container</a>, a
 655:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****    *  <a href="tables.html#66">reversible container</a>, and a
 656:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****    *  <a href="tables.html#67">sequence</a>, including the
 657:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****    *  <a href="tables.html#68">optional sequence requirements</a>.
 658:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****    *
 659:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****    *  In previous HP/SGI versions of deque, there was an extra template
 660:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****    *  parameter so users could control the node size.  This extension turned
 661:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****    *  out to violate the C++ standard (it can be detected using template
 662:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****    *  template parameters), and it was removed.
 663:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****    *
 664:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****    *  Here's how a deque<Tp> manages memory.  Each deque has 4 members:
 665:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****    *
 666:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****    *  - Tp**        _M_map
 667:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****    *  - size_t      _M_map_size
 668:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****    *  - iterator    _M_start, _M_finish
 669:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****    *
 670:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****    *  map_size is at least 8.  %map is an array of map_size
 671:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****    *  pointers-to-@a nodes.  (The name %map has nothing to do with the
 672:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****    *  std::map class, and @b nodes should not be confused with
 673:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****    *  std::list's usage of @a node.)
 674:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****    *
 675:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****    *  A @a node has no specific type name as such, but it is referred
 676:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****    *  to as @a node in this file.  It is a simple array-of-Tp.  If Tp
 677:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****    *  is very large, there will be one Tp element per node (i.e., an
 678:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****    *  @a array of one).  For non-huge Tp's, node size is inversely
 679:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****    *  related to Tp size: the larger the Tp, the fewer Tp's will fit
 680:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****    *  in a node.  The goal here is to keep the total size of a node
 681:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****    *  relatively small and constant over different Tp's, to improve
 682:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****    *  allocator efficiency.
 683:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****    *
 684:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****    *  Not every pointer in the %map array will point to a node.  If
 685:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****    *  the initial number of elements in the deque is small, the
 686:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****    *  /middle/ %map pointers will be valid, and the ones at the edges
 687:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****    *  will be unused.  This same situation will arise as the %map
 688:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****    *  grows: available %map pointers, if any, will be on the ends.  As
 689:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****    *  new nodes are created, only a subset of the %map's pointers need
 690:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****    *  to be copied @a outward.
 691:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****    *
 692:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****    *  Class invariants:
 693:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****    * - For any nonsingular iterator i:
 694:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****    *    - i.node points to a member of the %map array.  (Yes, you read that
 695:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****    *      correctly:  i.node does not actually point to a node.)  The member of
 696:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****    *      the %map array is what actually points to the node.
 697:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****    *    - i.first == *(i.node)    (This points to the node (first Tp element).)
 698:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****    *    - i.last  == i.first + node_size
 699:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****    *    - i.cur is a pointer in the range [i.first, i.last).  NOTE:
 700:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****    *      the implication of this is that i.cur is always a dereferenceable
 701:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****    *      pointer, even if i is a past-the-end iterator.
 702:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****    * - Start and Finish are always nonsingular iterators.  NOTE: this
 703:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****    * means that an empty deque must have one node, a deque with <N
 704:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****    * elements (where N is the node buffer size) must have one node, a
 705:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****    * deque with N through (2N-1) elements must have two nodes, etc.
 706:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****    * - For every node other than start.node and finish.node, every
 707:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****    * element in the node is an initialized object.  If start.node ==
 708:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****    * finish.node, then [start.cur, finish.cur) are initialized
 709:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****    * objects, and the elements outside that range are uninitialized
 710:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****    * storage.  Otherwise, [start.cur, start.last) and [finish.first,
 711:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****    * finish.cur) are initialized objects, and [start.first, start.cur)
 712:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****    * and [finish.cur, finish.last) are uninitialized storage.
 713:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****    * - [%map, %map + map_size) is a valid, non-empty range.
 714:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****    * - [start.node, finish.node] is a valid range contained within
 715:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****    *   [%map, %map + map_size).
 716:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****    * - A pointer in the range [%map, %map + map_size) points to an allocated
 717:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****    *   node if and only if the pointer is in the range
 718:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****    *   [start.node, finish.node].
 719:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****    *
 720:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****    *  Here's the magic:  nothing in deque is @b aware of the discontiguous
 721:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****    *  storage!
 722:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****    *
 723:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****    *  The memory setup and layout occurs in the parent, _Base, and the iterator
 724:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****    *  class is entirely responsible for @a leaping from one node to the next.
 725:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****    *  All the implementation routines for deque itself work only through the
 726:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****    *  start and finish iterators.  This keeps the routines simple and sane,
 727:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****    *  and we can use other standard algorithms as well.
 728:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****   */
 729:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****   template<typename _Tp, typename _Alloc = std::allocator<_Tp> >
 730:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****     class deque : protected _Deque_base<_Tp, _Alloc>
 731:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****     {
 732:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       // concept requirements
 733:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       typedef typename _Alloc::value_type        _Alloc_value_type;
 734:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       __glibcxx_class_requires(_Tp, _SGIAssignableConcept)
 735:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       __glibcxx_class_requires2(_Tp, _Alloc_value_type, _SameTypeConcept)
 736:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
 737:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       typedef _Deque_base<_Tp, _Alloc>           _Base;
 738:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       typedef typename _Base::_Tp_alloc_type	 _Tp_alloc_type;
 739:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
 740:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****     public:
 741:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       typedef _Tp                                        value_type;
 742:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       typedef typename _Tp_alloc_type::pointer           pointer;
 743:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       typedef typename _Tp_alloc_type::const_pointer     const_pointer;
 744:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       typedef typename _Tp_alloc_type::reference         reference;
 745:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       typedef typename _Tp_alloc_type::const_reference   const_reference;
 746:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       typedef typename _Base::iterator                   iterator;
 747:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       typedef typename _Base::const_iterator             const_iterator;
 748:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       typedef std::reverse_iterator<const_iterator>      const_reverse_iterator;
 749:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       typedef std::reverse_iterator<iterator>            reverse_iterator;
 750:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       typedef size_t                             size_type;
 751:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       typedef ptrdiff_t                          difference_type;
 752:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       typedef _Alloc                             allocator_type;
 753:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
 754:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****     protected:
 755:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       typedef pointer*                           _Map_pointer;
 756:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
 757:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       static size_t _S_buffer_size()
 758:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       { return __deque_buf_size(sizeof(_Tp)); }
 759:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
 760:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       // Functions controlling memory layout, and nothing else.
 761:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       using _Base::_M_initialize_map;
 762:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       using _Base::_M_create_nodes;
 763:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       using _Base::_M_destroy_nodes;
 764:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       using _Base::_M_allocate_node;
 765:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       using _Base::_M_deallocate_node;
 766:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       using _Base::_M_allocate_map;
 767:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       using _Base::_M_deallocate_map;
 768:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       using _Base::_M_get_Tp_allocator;
 769:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
 770:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       /** 
 771:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  A total of four data members accumulated down the hierarchy.
 772:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  May be accessed via _M_impl.*
 773:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        */
 774:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       using _Base::_M_impl;
 775:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
 776:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****     public:
 777:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       // [23.2.1.1] construct/copy/destroy
 778:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       // (assign() and get_allocator() are also listed in this section)
 779:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       /**
 780:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  @brief  Default constructor creates no elements.
 781:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        */
 782:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       deque()
 783:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       : _Base() { }
 784:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
 785:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       /**
 786:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  @brief  Creates a %deque with no elements.
 787:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  @param  __a  An allocator object.
 788:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        */
 789:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       explicit
 790:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       deque(const allocator_type& __a)
 791:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       : _Base(__a, 0) { }
 792:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
 793:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** #if __cplusplus >= 201103L
 794:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       /**
 795:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  @brief  Creates a %deque with default constructed elements.
 796:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  @param  __n  The number of elements to initially create.
 797:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *
 798:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  This constructor fills the %deque with @a n default
 799:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  constructed elements.
 800:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        */
 801:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       explicit
 802:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       deque(size_type __n)
 803:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       : _Base(__n)
 804:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       { _M_default_initialize(); }
 805:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
 806:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       /**
 807:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  @brief  Creates a %deque with copies of an exemplar element.
 808:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  @param  __n  The number of elements to initially create.
 809:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  @param  __value  An element to copy.
 810:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  @param  __a  An allocator.
 811:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *
 812:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  This constructor fills the %deque with @a __n copies of @a __value.
 813:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        */
 814:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       deque(size_type __n, const value_type& __value,
 815:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	    const allocator_type& __a = allocator_type())
 816:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       : _Base(__a, __n)
 817:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       { _M_fill_initialize(__value); }
 818:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** #else
 819:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       /**
 820:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  @brief  Creates a %deque with copies of an exemplar element.
 821:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  @param  __n  The number of elements to initially create.
 822:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  @param  __value  An element to copy.
 823:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  @param  __a  An allocator.
 824:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *
 825:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  This constructor fills the %deque with @a __n copies of @a __value.
 826:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        */
 827:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       explicit
 828:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       deque(size_type __n, const value_type& __value = value_type(),
 829:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	    const allocator_type& __a = allocator_type())
 830:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       : _Base(__a, __n)
 831:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       { _M_fill_initialize(__value); }
 832:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** #endif
 833:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
 834:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       /**
 835:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  @brief  %Deque copy constructor.
 836:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  @param  __x  A %deque of identical element and allocator types.
 837:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *
 838:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  The newly-created %deque uses a copy of the allocation object used
 839:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  by @a __x.
 840:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        */
 841:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       deque(const deque& __x)
 842:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       : _Base(__x._M_get_Tp_allocator(), __x.size())
 843:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       { std::__uninitialized_copy_a(__x.begin(), __x.end(), 
 844:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 				    this->_M_impl._M_start,
 845:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 				    _M_get_Tp_allocator()); }
 846:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
 847:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** #if __cplusplus >= 201103L
 848:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       /**
 849:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  @brief  %Deque move constructor.
 850:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  @param  __x  A %deque of identical element and allocator types.
 851:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *
 852:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  The newly-created %deque contains the exact contents of @a __x.
 853:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  The contents of @a __x are a valid, but unspecified %deque.
 854:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        */
 855:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       deque(deque&& __x)
 856:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       : _Base(std::move(__x)) { }
 857:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
 858:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       /**
 859:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  @brief  Builds a %deque from an initializer list.
 860:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  @param  __l  An initializer_list.
 861:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  @param  __a  An allocator object.
 862:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *
 863:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  Create a %deque consisting of copies of the elements in the
 864:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  initializer_list @a __l.
 865:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *
 866:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  This will call the element type's copy constructor N times
 867:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  (where N is __l.size()) and do no memory reallocation.
 868:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        */
 869:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       deque(initializer_list<value_type> __l,
 870:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	    const allocator_type& __a = allocator_type())
 871:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       : _Base(__a)
 872:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       {
 873:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	_M_range_initialize(__l.begin(), __l.end(),
 874:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 			    random_access_iterator_tag());
 875:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       }
 876:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** #endif
 877:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
 878:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       /**
 879:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  @brief  Builds a %deque from a range.
 880:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  @param  __first  An input iterator.
 881:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  @param  __last  An input iterator.
 882:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  @param  __a  An allocator object.
 883:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *
 884:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  Create a %deque consisting of copies of the elements from [__first,
 885:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  __last).
 886:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *
 887:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  If the iterators are forward, bidirectional, or random-access, then
 888:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  this will call the elements' copy constructor N times (where N is
 889:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  distance(__first,__last)) and do no memory reallocation.  But if only
 890:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  input iterators are used, then this will do at most 2N calls to the
 891:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  copy constructor, and logN memory reallocations.
 892:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        */
 893:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** #if __cplusplus >= 201103L
 894:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       template<typename _InputIterator,
 895:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	       typename = std::_RequireInputIter<_InputIterator>>
 896:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****         deque(_InputIterator __first, _InputIterator __last,
 897:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	      const allocator_type& __a = allocator_type())
 898:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	: _Base(__a)
 899:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****         { _M_initialize_dispatch(__first, __last, __false_type()); }
 900:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** #else
 901:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       template<typename _InputIterator>
 902:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****         deque(_InputIterator __first, _InputIterator __last,
 903:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	      const allocator_type& __a = allocator_type())
 904:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	: _Base(__a)
 905:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****         {
 906:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	  // Check whether it's an integral type.  If so, it's not an iterator.
 907:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	  typedef typename std::__is_integer<_InputIterator>::__type _Integral;
 908:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	  _M_initialize_dispatch(__first, __last, _Integral());
 909:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	}
 910:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** #endif
 911:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
 912:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       /**
 913:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  The dtor only erases the elements, and note that if the elements
 914:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  themselves are pointers, the pointed-to memory is not touched in any
 915:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  way.  Managing the pointer is the user's responsibility.
 916:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        */
 917:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       ~deque() _GLIBCXX_NOEXCEPT
 918:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       { _M_destroy_data(begin(), end(), _M_get_Tp_allocator()); }
 919:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
 920:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       /**
 921:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  @brief  %Deque assignment operator.
 922:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  @param  __x  A %deque of identical element and allocator types.
 923:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *
 924:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  All the elements of @a x are copied, but unlike the copy constructor,
 925:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  the allocator object is not copied.
 926:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        */
 927:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       deque&
 928:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       operator=(const deque& __x);
 929:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
 930:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** #if __cplusplus >= 201103L
 931:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       /**
 932:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  @brief  %Deque move assignment operator.
 933:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  @param  __x  A %deque of identical element and allocator types.
 934:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *
 935:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  The contents of @a __x are moved into this deque (without copying).
 936:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  @a __x is a valid, but unspecified %deque.
 937:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        */
 938:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       deque&
 939:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       operator=(deque&& __x)
 940:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       {
 941:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	// NB: DR 1204.
 942:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	// NB: DR 675.
 943:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	this->clear();
 944:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	this->swap(__x);
 945:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	return *this;
 946:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       }
 947:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
 948:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       /**
 949:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  @brief  Assigns an initializer list to a %deque.
 950:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  @param  __l  An initializer_list.
 951:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *
 952:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  This function fills a %deque with copies of the elements in the
 953:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  initializer_list @a __l.
 954:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *
 955:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  Note that the assignment completely changes the %deque and that the
 956:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  resulting %deque's size is the same as the number of elements
 957:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  assigned.  Old data may be lost.
 958:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        */
 959:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       deque&
 960:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       operator=(initializer_list<value_type> __l)
 961:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       {
 962:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	this->assign(__l.begin(), __l.end());
 963:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	return *this;
 964:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       }
 965:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** #endif
 966:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
 967:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       /**
 968:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  @brief  Assigns a given value to a %deque.
 969:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  @param  __n  Number of elements to be assigned.
 970:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  @param  __val  Value to be assigned.
 971:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *
 972:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  This function fills a %deque with @a n copies of the given
 973:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  value.  Note that the assignment completely changes the
 974:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  %deque and that the resulting %deque's size is the same as
 975:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  the number of elements assigned.  Old data may be lost.
 976:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        */
 977:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       void
 978:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       assign(size_type __n, const value_type& __val)
 979:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       { _M_fill_assign(__n, __val); }
 980:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
 981:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       /**
 982:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  @brief  Assigns a range to a %deque.
 983:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  @param  __first  An input iterator.
 984:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  @param  __last   An input iterator.
 985:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *
 986:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  This function fills a %deque with copies of the elements in the
 987:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  range [__first,__last).
 988:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *
 989:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  Note that the assignment completely changes the %deque and that the
 990:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  resulting %deque's size is the same as the number of elements
 991:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  assigned.  Old data may be lost.
 992:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        */
 993:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** #if __cplusplus >= 201103L
 994:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       template<typename _InputIterator,
 995:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	       typename = std::_RequireInputIter<_InputIterator>>
 996:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****         void
 997:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****         assign(_InputIterator __first, _InputIterator __last)
 998:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****         { _M_assign_dispatch(__first, __last, __false_type()); }
 999:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** #else
1000:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       template<typename _InputIterator>
1001:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****         void
1002:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****         assign(_InputIterator __first, _InputIterator __last)
1003:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****         {
1004:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	  typedef typename std::__is_integer<_InputIterator>::__type _Integral;
1005:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	  _M_assign_dispatch(__first, __last, _Integral());
1006:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	}
1007:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** #endif
1008:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
1009:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** #if __cplusplus >= 201103L
1010:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       /**
1011:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  @brief  Assigns an initializer list to a %deque.
1012:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  @param  __l  An initializer_list.
1013:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *
1014:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  This function fills a %deque with copies of the elements in the
1015:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  initializer_list @a __l.
1016:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *
1017:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  Note that the assignment completely changes the %deque and that the
1018:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  resulting %deque's size is the same as the number of elements
1019:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  assigned.  Old data may be lost.
1020:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        */
1021:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       void
1022:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       assign(initializer_list<value_type> __l)
1023:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       { this->assign(__l.begin(), __l.end()); }
1024:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** #endif
1025:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
1026:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       /// Get a copy of the memory allocation object.
1027:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       allocator_type
1028:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       get_allocator() const _GLIBCXX_NOEXCEPT
1029:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       { return _Base::get_allocator(); }
1030:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
1031:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       // iterators
1032:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       /**
1033:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  Returns a read/write iterator that points to the first element in the
1034:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  %deque.  Iteration is done in ordinary element order.
1035:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        */
1036:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       iterator
1037:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       begin() _GLIBCXX_NOEXCEPT
1038:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       { return this->_M_impl._M_start; }
1039:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
1040:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       /**
1041:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  Returns a read-only (constant) iterator that points to the first
1042:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  element in the %deque.  Iteration is done in ordinary element order.
1043:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        */
1044:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       const_iterator
1045:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       begin() const _GLIBCXX_NOEXCEPT
1046:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       { return this->_M_impl._M_start; }
1047:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
1048:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       /**
1049:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  Returns a read/write iterator that points one past the last
1050:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  element in the %deque.  Iteration is done in ordinary
1051:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  element order.
1052:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        */
1053:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       iterator
1054:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       end() _GLIBCXX_NOEXCEPT
1055:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       { return this->_M_impl._M_finish; }
1056:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
1057:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       /**
1058:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  Returns a read-only (constant) iterator that points one past
1059:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  the last element in the %deque.  Iteration is done in
1060:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  ordinary element order.
1061:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        */
1062:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       const_iterator
1063:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       end() const _GLIBCXX_NOEXCEPT
1064:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       { return this->_M_impl._M_finish; }
1065:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
1066:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       /**
1067:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  Returns a read/write reverse iterator that points to the
1068:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  last element in the %deque.  Iteration is done in reverse
1069:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  element order.
1070:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        */
1071:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       reverse_iterator
1072:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       rbegin() _GLIBCXX_NOEXCEPT
1073:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       { return reverse_iterator(this->_M_impl._M_finish); }
1074:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
1075:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       /**
1076:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  Returns a read-only (constant) reverse iterator that points
1077:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  to the last element in the %deque.  Iteration is done in
1078:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  reverse element order.
1079:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        */
1080:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       const_reverse_iterator
1081:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       rbegin() const _GLIBCXX_NOEXCEPT
1082:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       { return const_reverse_iterator(this->_M_impl._M_finish); }
1083:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
1084:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       /**
1085:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  Returns a read/write reverse iterator that points to one
1086:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  before the first element in the %deque.  Iteration is done
1087:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  in reverse element order.
1088:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        */
1089:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       reverse_iterator
1090:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       rend() _GLIBCXX_NOEXCEPT
1091:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       { return reverse_iterator(this->_M_impl._M_start); }
1092:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
1093:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       /**
1094:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  Returns a read-only (constant) reverse iterator that points
1095:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  to one before the first element in the %deque.  Iteration is
1096:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  done in reverse element order.
1097:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        */
1098:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       const_reverse_iterator
1099:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       rend() const _GLIBCXX_NOEXCEPT
1100:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       { return const_reverse_iterator(this->_M_impl._M_start); }
1101:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
1102:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** #if __cplusplus >= 201103L
1103:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       /**
1104:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  Returns a read-only (constant) iterator that points to the first
1105:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  element in the %deque.  Iteration is done in ordinary element order.
1106:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        */
1107:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       const_iterator
1108:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       cbegin() const noexcept
1109:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       { return this->_M_impl._M_start; }
1110:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
1111:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       /**
1112:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  Returns a read-only (constant) iterator that points one past
1113:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  the last element in the %deque.  Iteration is done in
1114:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  ordinary element order.
1115:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        */
1116:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       const_iterator
1117:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       cend() const noexcept
1118:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       { return this->_M_impl._M_finish; }
1119:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
1120:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       /**
1121:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  Returns a read-only (constant) reverse iterator that points
1122:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  to the last element in the %deque.  Iteration is done in
1123:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  reverse element order.
1124:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        */
1125:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       const_reverse_iterator
1126:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       crbegin() const noexcept
1127:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       { return const_reverse_iterator(this->_M_impl._M_finish); }
1128:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
1129:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       /**
1130:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  Returns a read-only (constant) reverse iterator that points
1131:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  to one before the first element in the %deque.  Iteration is
1132:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  done in reverse element order.
1133:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        */
1134:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       const_reverse_iterator
1135:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       crend() const noexcept
1136:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       { return const_reverse_iterator(this->_M_impl._M_start); }
1137:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** #endif
1138:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
1139:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       // [23.2.1.2] capacity
1140:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       /**  Returns the number of elements in the %deque.  */
1141:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       size_type
1142:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       size() const _GLIBCXX_NOEXCEPT
1143:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       { return this->_M_impl._M_finish - this->_M_impl._M_start; }
1144:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
1145:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       /**  Returns the size() of the largest possible %deque.  */
1146:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       size_type
1147:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       max_size() const _GLIBCXX_NOEXCEPT
1148:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       { return _M_get_Tp_allocator().max_size(); }
1149:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
1150:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** #if __cplusplus >= 201103L
1151:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       /**
1152:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  @brief  Resizes the %deque to the specified number of elements.
1153:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  @param  __new_size  Number of elements the %deque should contain.
1154:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *
1155:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  This function will %resize the %deque to the specified
1156:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  number of elements.  If the number is smaller than the
1157:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  %deque's current size the %deque is truncated, otherwise
1158:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  default constructed elements are appended.
1159:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        */
1160:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       void
1161:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       resize(size_type __new_size)
1162:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       {
1163:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	const size_type __len = size();
1164:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	if (__new_size > __len)
1165:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	  _M_default_append(__new_size - __len);
1166:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	else if (__new_size < __len)
1167:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	  _M_erase_at_end(this->_M_impl._M_start
1168:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 			  + difference_type(__new_size));
1169:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       }
1170:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
1171:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       /**
1172:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  @brief  Resizes the %deque to the specified number of elements.
1173:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  @param  __new_size  Number of elements the %deque should contain.
1174:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  @param  __x  Data with which new elements should be populated.
1175:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *
1176:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  This function will %resize the %deque to the specified
1177:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  number of elements.  If the number is smaller than the
1178:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  %deque's current size the %deque is truncated, otherwise the
1179:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  %deque is extended and new elements are populated with given
1180:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  data.
1181:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        */
1182:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       void
1183:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       resize(size_type __new_size, const value_type& __x)
1184:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       {
1185:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	const size_type __len = size();
1186:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	if (__new_size > __len)
1187:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	  insert(this->_M_impl._M_finish, __new_size - __len, __x);
1188:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	else if (__new_size < __len)
1189:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	  _M_erase_at_end(this->_M_impl._M_start
1190:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 			  + difference_type(__new_size));
1191:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       }
1192:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** #else
1193:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       /**
1194:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  @brief  Resizes the %deque to the specified number of elements.
1195:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  @param  __new_size  Number of elements the %deque should contain.
1196:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  @param  __x  Data with which new elements should be populated.
1197:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *
1198:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  This function will %resize the %deque to the specified
1199:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  number of elements.  If the number is smaller than the
1200:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  %deque's current size the %deque is truncated, otherwise the
1201:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  %deque is extended and new elements are populated with given
1202:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  data.
1203:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        */
1204:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       void
1205:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       resize(size_type __new_size, value_type __x = value_type())
1206:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       {
1207:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	const size_type __len = size();
1208:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	if (__new_size > __len)
1209:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	  insert(this->_M_impl._M_finish, __new_size - __len, __x);
1210:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	else if (__new_size < __len)
1211:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	  _M_erase_at_end(this->_M_impl._M_start
1212:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 			  + difference_type(__new_size));
1213:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       }
1214:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** #endif
1215:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
1216:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** #if __cplusplus >= 201103L
1217:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       /**  A non-binding request to reduce memory use.  */
1218:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       void
1219:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       shrink_to_fit()
1220:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       { _M_shrink_to_fit(); }
1221:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** #endif
1222:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
1223:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       /**
1224:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  Returns true if the %deque is empty.  (Thus begin() would
1225:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  equal end().)
1226:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        */
1227:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       bool
1228:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       empty() const _GLIBCXX_NOEXCEPT
1229:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       { return this->_M_impl._M_finish == this->_M_impl._M_start; }
1230:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
1231:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       // element access
1232:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       /**
1233:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  @brief Subscript access to the data contained in the %deque.
1234:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  @param __n The index of the element for which data should be
1235:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  accessed.
1236:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  @return  Read/write reference to data.
1237:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *
1238:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  This operator allows for easy, array-style, data access.
1239:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  Note that data access with this operator is unchecked and
1240:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  out_of_range lookups are not defined. (For checked lookups
1241:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  see at().)
1242:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        */
1243:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       reference
1244:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       operator[](size_type __n)
1245:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       { return this->_M_impl._M_start[difference_type(__n)]; }
1246:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
1247:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       /**
1248:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  @brief Subscript access to the data contained in the %deque.
1249:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  @param __n The index of the element for which data should be
1250:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  accessed.
1251:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  @return  Read-only (constant) reference to data.
1252:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *
1253:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  This operator allows for easy, array-style, data access.
1254:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  Note that data access with this operator is unchecked and
1255:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  out_of_range lookups are not defined. (For checked lookups
1256:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  see at().)
1257:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        */
1258:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       const_reference
1259:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       operator[](size_type __n) const
1260:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       { return this->_M_impl._M_start[difference_type(__n)]; }
1261:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
1262:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****     protected:
1263:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       /// Safety check used only from at().
1264:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       void
1265:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       _M_range_check(size_type __n) const
1266:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       {
1267:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	if (__n >= this->size())
1268:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	  __throw_out_of_range(__N("deque::_M_range_check"));
1269:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       }
1270:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
1271:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****     public:
1272:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       /**
1273:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  @brief  Provides access to the data contained in the %deque.
1274:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  @param __n The index of the element for which data should be
1275:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  accessed.
1276:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  @return  Read/write reference to data.
1277:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  @throw  std::out_of_range  If @a __n is an invalid index.
1278:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *
1279:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  This function provides for safer data access.  The parameter
1280:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  is first checked that it is in the range of the deque.  The
1281:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  function throws out_of_range if the check fails.
1282:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        */
1283:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       reference
1284:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       at(size_type __n)
1285:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       {
1286:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	_M_range_check(__n);
1287:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	return (*this)[__n];
1288:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       }
1289:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
1290:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       /**
1291:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  @brief  Provides access to the data contained in the %deque.
1292:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  @param __n The index of the element for which data should be
1293:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  accessed.
1294:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  @return  Read-only (constant) reference to data.
1295:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  @throw  std::out_of_range  If @a __n is an invalid index.
1296:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *
1297:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  This function provides for safer data access.  The parameter is first
1298:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  checked that it is in the range of the deque.  The function throws
1299:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  out_of_range if the check fails.
1300:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        */
1301:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       const_reference
1302:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       at(size_type __n) const
1303:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       {
1304:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	_M_range_check(__n);
1305:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	return (*this)[__n];
1306:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       }
1307:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
1308:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       /**
1309:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  Returns a read/write reference to the data at the first
1310:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  element of the %deque.
1311:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        */
1312:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       reference
1313:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       front()
1314:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       { return *begin(); }
1315:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
1316:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       /**
1317:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  Returns a read-only (constant) reference to the data at the first
1318:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  element of the %deque.
1319:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        */
1320:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       const_reference
1321:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       front() const
1322:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       { return *begin(); }
1323:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
1324:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       /**
1325:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  Returns a read/write reference to the data at the last element of the
1326:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  %deque.
1327:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        */
1328:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       reference
1329:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       back()
1330:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       {
1331:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	iterator __tmp = end();
1332:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	--__tmp;
1333:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	return *__tmp;
1334:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       }
1335:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
1336:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       /**
1337:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  Returns a read-only (constant) reference to the data at the last
1338:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  element of the %deque.
1339:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        */
1340:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       const_reference
1341:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       back() const
1342:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       {
1343:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	const_iterator __tmp = end();
1344:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	--__tmp;
1345:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	return *__tmp;
1346:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       }
1347:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
1348:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       // [23.2.1.2] modifiers
1349:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       /**
1350:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  @brief  Add data to the front of the %deque.
1351:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  @param  __x  Data to be added.
1352:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *
1353:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  This is a typical stack operation.  The function creates an
1354:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  element at the front of the %deque and assigns the given
1355:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  data to it.  Due to the nature of a %deque this operation
1356:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  can be done in constant time.
1357:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        */
1358:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       void
1359:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       push_front(const value_type& __x)
1360:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       {
1361:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	if (this->_M_impl._M_start._M_cur != this->_M_impl._M_start._M_first)
1362:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	  {
1363:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	    this->_M_impl.construct(this->_M_impl._M_start._M_cur - 1, __x);
1364:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	    --this->_M_impl._M_start._M_cur;
1365:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	  }
1366:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	else
1367:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	  _M_push_front_aux(__x);
1368:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       }
1369:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
1370:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** #if __cplusplus >= 201103L
1371:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       void
1372:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       push_front(value_type&& __x)
1373:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       { emplace_front(std::move(__x)); }
1374:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
1375:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       template<typename... _Args>
1376:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****         void
1377:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****         emplace_front(_Args&&... __args);
1378:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** #endif
1379:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
1380:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       /**
1381:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  @brief  Add data to the end of the %deque.
1382:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  @param  __x  Data to be added.
1383:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *
1384:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  This is a typical stack operation.  The function creates an
1385:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  element at the end of the %deque and assigns the given data
1386:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  to it.  Due to the nature of a %deque this operation can be
1387:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  done in constant time.
1388:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        */
1389:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       void
1390:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       push_back(const value_type& __x)
1391:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       {
1392:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	if (this->_M_impl._M_finish._M_cur
1393:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	    != this->_M_impl._M_finish._M_last - 1)
 2237                             		.loc 5 1393 0
 2238 005e AE 0F                   		mov.L	100[r0], r7
 2239 0060 AA 74                   		mov.L	32[r7], r4
1392:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	    != this->_M_impl._M_finish._M_last - 1)
 2240                             		.loc 5 1392 0
 2241 0062 ED 7E 06                		mov.L	24[r7], r14
 2242                             	.LBE1068:
 2243                             	.LBE1067:
 2244                             	.LBE1066:
 2245                             	.LBE1065:
 2246                             	.LBB1095:
 2247                             	.LBB1096:
 745:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         count_end = stop_ms;
 2248                             		.loc 4 745 0
 2249 0065 F8 12 00 00 00 00       		mov.L	#__ZTV4Stop+8, [r1]
 2250 006b 3E 11 00                		mov.L	#0, 4[r1]
 2251 006e 3E 13 00                		mov.L	#0, 12[r1]
 2252 0071 FA 16 30 01 00          		mov.L	#0x0, 1216[r1]
 2253 0076 FA 16 31 01 00          		mov.L	#0x0, 1220[r1]
 2254 007b FA 16 32 01 00          		mov.L	#0x0, 1224[r1]
 2255 0080 FA 16 5F 02 00          		mov.L	#0x0, 2428[r1]
 2256 0085 FA 16 60 02 00          		mov.L	#0x0, 2432[r1]
 2257 008a FA 16 61 02 00          		mov.L	#0x0, 2436[r1]
 746:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****     }
 2258                             		.loc 4 746 0
 2259 008f F9 1A 02 F4 01          		mov.L	#0x1f4, 8[r1]
 2260                             	.LVL179:
 2261                             	.LBE1096:
 2262                             	.LBE1095:
 2263                             	.LBB1097:
 2264                             	.LBB1092:
 2265                             	.LBB1089:
 2266                             	.LBB1086:
 2267                             		.loc 5 1393 0
 2268 0094 60 44                   		sub	#4, r4
1392:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	    != this->_M_impl._M_finish._M_last - 1)
 2269                             		.loc 5 1392 0
 2270 0096 47 4E                   		cmp	r4, r14
 2271 0098 3A 93 04                		beq	.L308
 2272                             	.LVL180:
 2273                             	.LBB1069:
 2274                             	.LBB1070:
 111:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\ext\new_allocator.h **** 
 112:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\ext\new_allocator.h ****       size_type
 113:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\ext\new_allocator.h ****       max_size() const _GLIBCXX_USE_NOEXCEPT
 114:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\ext\new_allocator.h ****       { return size_t(-1) / sizeof(_Tp); }
 115:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\ext\new_allocator.h **** 
 116:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\ext\new_allocator.h **** #if __cplusplus >= 201103L
 117:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\ext\new_allocator.h ****       template<typename _Up, typename... _Args>
 118:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\ext\new_allocator.h ****         void
 119:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\ext\new_allocator.h ****         construct(_Up* __p, _Args&&... __args)
 120:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\ext\new_allocator.h **** 	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 2275                             		.loc 6 120 0
 2276 009b 61 0E                   		cmp	#0, r14
 2277 009d 20 0D                   		beq	.L198
 2278 009f E1 0E 18                		mov.L	96[r0], [r14]
 2279 00a2 FB B2 00 00 00 00       		mov.L	#__ZZN9EventList11getInstanceEvE8instance+24, r11
 2280 00a8 EC BE                   		mov.L	[r11], r14
 2281                             	.LVL181:
 2282                             		.balign 8,3,1
 2283                             	.L198:
 2284                             	.LBE1070:
 2285                             	.LBE1069:
1394:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	  {
1395:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	    this->_M_impl.construct(this->_M_impl._M_finish._M_cur, __x);
1396:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	    ++this->_M_impl._M_finish._M_cur;
 2286                             		.loc 5 1396 0
 2287 00aa 62 4E                   		add	#4, r14
 2288 00ac ED 0C 19                		mov.L	100[r0], r12
 2289 00af E7 CE 06                		mov.L	r14, 24[r12]
 2290                             	.LVL182:
 2291                             		.balign 8,3,4
 2292                             	.L199:
 2293                             	.LBE1086:
 2294                             	.LBE1089:
 2295                             	.LBE1092:
 2296                             	.LBE1097:
  33:../src/mode/mode_B.cpp **** /*
  34:../src/mode/mode_B.cpp ****     events.push(new SimplePivotTurn(90.0));
  35:../src/mode/mode_B.cpp ****     events.push(new Stop(1500));
  36:../src/mode/mode_B.cpp ****     events.push(new Stop(500));
  37:../src/mode/mode_B.cpp **** 
  38:../src/mode/mode_B.cpp **** 
  39:../src/mode/mode_B.cpp ****     events.push(new SimplePivotTurn(-90.0));
  40:../src/mode/mode_B.cpp ****     events.push(new Stop(1500));
  41:../src/mode/mode_B.cpp ****     events.push(new Stop(500));
  42:../src/mode/mode_B.cpp **** */
  43:../src/mode/mode_B.cpp ****     events.push(new SimpleTrape(0.18*4));
 2297                             		.loc 9 43 0
 2298 00b2 F9 06 0C FF             		mov.L	#-1, 48[r0]
 2299 00b6 75 41 84                		mov.L	#0x84, r1
 2300 00b9 05 00 00 00             		bsr	__Znwm
 2301                             	.LVL183:
 2302 00bd A6 01                   		mov.L	r1, 96[r0]
 2303                             	.LVL184:
 2304                             	.LBB1098:
 2305                             	.LBB1099:
 538:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         target_a = 1.0;
 2306                             		.loc 4 538 0
 2307 00bf F9 12 1D EC 51 38 3F    		mov.L	#0x3f3851ec, 116[r1]
 539:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h **** 
 2308                             		.loc 4 539 0
 2309 00c6 F9 12 06 00 00 80 3F    		mov.L	#0x3f800000, 24[r1]
 541:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         target_ang_v = 0.0;
 2310                             		.loc 4 541 0
 2311 00cd 3E 11 00                		mov.L	#0x0, 4[r1]
 542:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         target_ang_a = 0.0;
 2312                             		.loc 4 542 0
 2313 00d0 3E 12 00                		mov.L	#0x0, 8[r1]
 543:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         accum_ang = 0.0;
 2314                             		.loc 4 543 0
 2315 00d3 3E 13 00                		mov.L	#0x0, 12[r1]
 544:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h **** 
 2316                             		.loc 4 544 0
 2317 00d6 3E 9E 00                		mov.L	#0x0, 120[r1]
 546:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         error_int_ang = 0.0;
 2318                             		.loc 4 546 0
 2319 00d9 3E 90 00                		mov.L	#0x0, 64[r1]
 547:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         error_ang_pre = 0.0;
 2320                             		.loc 4 547 0
 2321 00dc 3E 91 00                		mov.L	#0x0, 68[r1]
 548:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         error_d_ang = 0.0;
 2322                             		.loc 4 548 0
 2323 00df 3E 92 00                		mov.L	#0x0, 72[r1]
 549:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h **** 
 2324                             		.loc 4 549 0
 2325 00e2 3E 93 00                		mov.L	#0x0, 76[r1]
 551:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         Ki_ang = 0.0;
 2326                             		.loc 4 551 0
 2327 00e5 3E 17 00                		mov.L	#0x0, 28[r1]
 552:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         Kd_ang = 0.0;//0.001;
 2328                             		.loc 4 552 0
 2329 00e8 3E 18 00                		mov.L	#0x0, 32[r1]
 553:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h **** 
 2330                             		.loc 4 553 0
 2331 00eb 3E 19 00                		mov.L	#0x0, 36[r1]
 555:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         error_int_ang_v = 0.0;
 2332                             		.loc 4 555 0
 2333 00ee 3E 94 00                		mov.L	#0x0, 80[r1]
 556:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         error_ang_v_pre = 0.0;
 2334                             		.loc 4 556 0
 2335 00f1 3E 95 00                		mov.L	#0x0, 84[r1]
 557:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         error_d_ang_v = 0.0;
 2336                             		.loc 4 557 0
 2337 00f4 3E 96 00                		mov.L	#0x0, 88[r1]
 558:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h **** 
 2338                             		.loc 4 558 0
 2339 00f7 3E 97 00                		mov.L	#0x0, 92[r1]
 561:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         Ki_ang_v = 0.0004;
 2340                             		.loc 4 561 0
 2341 00fa F9 12 0A 52 49 9D 3A    		mov.L	#0x3a9d4952, 40[r1]
 562:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         Kd_ang_v = 0.0;//0.001;
 2342                             		.loc 4 562 0
 2343 0101 F9 12 0B 17 B7 D1 39    		mov.L	#0x39d1b717, 44[r1]
 563:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h **** 
 2344                             		.loc 4 563 0
 2345 0108 3E 1C 00                		mov.L	#0x0, 48[r1]
 566:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         accum_v = 0.0;
 2346                             		.loc 4 566 0
 2347 010b 3E 15 00                		mov.L	#0x0, 20[r1]
 567:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         error_v = 0.0;
 2348                             		.loc 4 567 0
 2349 010e 3E 9F 00                		mov.L	#0x0, 124[r1]
 568:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         error_int_v = 0.0;
 2350                             		.loc 4 568 0
 2351 0111 3E 98 00                		mov.L	#0x0, 96[r1]
 569:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         error_v_pre = 0.0;
 2352                             		.loc 4 569 0
 2353 0114 3E 99 00                		mov.L	#0x0, 100[r1]
 570:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         error_d_v = 0.0;
 2354                             		.loc 4 570 0
 2355 0117 3E 9B 00                		mov.L	#0x0, 108[r1]
 571:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         Kp_v = 0.01;
 2356                             		.loc 4 571 0
 2357 011a 3E 9A 00                		mov.L	#0x0, 104[r1]
 572:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         Ki_v = 0.001;
 2358                             		.loc 4 572 0
 2359 011d F9 12 0D 0A D7 23 3C    		mov.L	#0x3c23d70a, 52[r1]
 573:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         Kd_v = 0.001;
 2360                             		.loc 4 573 0
 2361 0124 F9 12 0E 6F 12 83 3A    		mov.L	#0x3a83126f, 56[r1]
 537:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         end_x = x;
 2362                             		.loc 4 537 0
 2363 012b F8 12 00 00 00 00       		mov.L	#__ZTV11SimpleTrape+8, [r1]
 574:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         myprintf3("Trape\n");
 2364                             		.loc 4 574 0
 2365 0131 F9 12 0F 6F 12 83 3A    		mov.L	#0x3a83126f, 60[r1]
 575:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h **** 
 2366                             		.loc 4 575 0
 2367 0138 F8 02 55 00 00 00       		mov.L	#.LC7, [r0]
 2368 013e 3E 0C 01                		mov.L	#1, 48[r0]
 2369 0141 05 00 00 00             		bsr	__Z9myprintf3PKcz
 2370                             	.LVL185:
 2371                             	.LBE1099:
 2372                             	.LBE1098:
 2373                             	.LBB1101:
 2374                             	.LBB1102:
 2375                             	.LBB1103:
 2376                             	.LBB1104:
1393:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	  {
 2377                             		.loc 5 1393 0
 2378 0145 AE 0F                   		mov.L	100[r0], r7
 2379 0147 AA 74                   		mov.L	32[r7], r4
1392:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	    != this->_M_impl._M_finish._M_last - 1)
 2380                             		.loc 5 1392 0
 2381 0149 ED 7E 06                		mov.L	24[r7], r14
 2382                             	.LBE1104:
 2383                             	.LBE1103:
 2384                             	.LBE1102:
 2385                             	.LBE1101:
 2386                             	.LBB1131:
 2387                             	.LBB1100:
 577:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****     };
 2388                             		.loc 4 577 0
 2389 014c ED 0A 18                		mov.L	96[r0], r10
 2390 014f F9 A4 80 00             		mov.B	#0, 128[r10]
 2391                             	.LVL186:
 2392                             	.LBE1100:
 2393                             	.LBE1131:
 2394                             	.LBB1132:
 2395                             	.LBB1128:
 2396                             	.LBB1125:
 2397                             	.LBB1122:
1393:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	  {
 2398                             		.loc 5 1393 0
 2399 0153 60 44                   		sub	#4, r4
1392:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	    != this->_M_impl._M_finish._M_last - 1)
 2400                             		.loc 5 1392 0
 2401 0155 47 4E                   		cmp	r4, r14
 2402 0157 3A 30 04                		beq	.L202
 2403                             	.LVL187:
 2404                             	.LBB1105:
 2405                             	.LBB1106:
 2406                             		.loc 6 120 0
 2407 015a 61 0E                   		cmp	#0, r14
 2408 015c 20 0C                   		beq	.L203
 2409 015e E3 EA                   		mov.L	r10, [r14]
 2410 0160 FB B2 00 00 00 00       		mov.L	#__ZZN9EventList11getInstanceEvE8instance+24, r11
 2411 0166 EC BE                   		mov.L	[r11], r14
 2412                             	.LVL188:
 2413                             		.balign 8,3,1
 2414                             	.L203:
 2415                             	.LBE1106:
 2416                             	.LBE1105:
 2417                             		.loc 5 1396 0
 2418 0168 62 4E                   		add	#4, r14
 2419 016a ED 0C 19                		mov.L	100[r0], r12
 2420 016d E7 CE 06                		mov.L	r14, 24[r12]
 2421                             	.LVL189:
 2422                             		.balign 8,3,4
 2423                             	.L204:
 2424                             	.LBE1122:
 2425                             	.LBE1125:
 2426                             	.LBE1128:
 2427                             	.LBE1132:
  44:../src/mode/mode_B.cpp **** 
  45:../src/mode/mode_B.cpp **** //    events.push(new SimplePivotTurn(180.0));
  46:../src/mode/mode_B.cpp ****     events.push(new Stop(1500));
 2428                             		.loc 9 46 0 discriminator 1
 2429 0170 F9 06 0C FF             		mov.L	#-1, 48[r0]
 2430 0174 FB 1A 88 09             		mov.L	#0x988, r1
 2431 0178 05 00 00 00             		bsr	__Znwm
 2432                             	.LVL190:
 2433 017c A6 01                   		mov.L	r1, 96[r0]
 2434                             	.LVL191:
 2435                             	.LBB1133:
 2436                             	.LBB1134:
 2437                             	.LBB1135:
 2438                             	.LBB1136:
1393:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	  {
 2439                             		.loc 5 1393 0 discriminator 1
 2440 017e AE 0B                   		mov.L	100[r0], r3
 2441 0180 AA 34                   		mov.L	32[r3], r4
1392:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	    != this->_M_impl._M_finish._M_last - 1)
 2442                             		.loc 5 1392 0 discriminator 1
 2443 0182 ED 3E 06                		mov.L	24[r3], r14
 2444                             	.LBE1136:
 2445                             	.LBE1135:
 2446                             	.LBE1134:
 2447                             	.LBE1133:
 2448                             	.LBB1163:
 2449                             	.LBB1164:
 745:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         count_end = stop_ms;
 2450                             		.loc 4 745 0 discriminator 1
 2451 0185 F8 12 00 00 00 00       		mov.L	#__ZTV4Stop+8, [r1]
 2452 018b 3E 11 00                		mov.L	#0, 4[r1]
 2453 018e 3E 13 00                		mov.L	#0, 12[r1]
 2454 0191 FA 16 30 01 00          		mov.L	#0x0, 1216[r1]
 2455 0196 FA 16 31 01 00          		mov.L	#0x0, 1220[r1]
 2456 019b FA 16 32 01 00          		mov.L	#0x0, 1224[r1]
 2457 01a0 FA 16 5F 02 00          		mov.L	#0x0, 2428[r1]
 2458 01a5 FA 16 60 02 00          		mov.L	#0x0, 2432[r1]
 2459 01aa FA 16 61 02 00          		mov.L	#0x0, 2436[r1]
 746:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****     }
 2460                             		.loc 4 746 0 discriminator 1
 2461 01af F9 1A 02 DC 05          		mov.L	#0x5dc, 8[r1]
 2462                             	.LVL192:
 2463                             	.LBE1164:
 2464                             	.LBE1163:
 2465                             	.LBB1165:
 2466                             	.LBB1160:
 2467                             	.LBB1157:
 2468                             	.LBB1154:
1393:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	  {
 2469                             		.loc 5 1393 0 discriminator 1
 2470 01b4 60 44                   		sub	#4, r4
1392:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	    != this->_M_impl._M_finish._M_last - 1)
 2471                             		.loc 5 1392 0 discriminator 1
 2472 01b6 47 4E                   		cmp	r4, r14
 2473 01b8 3A 2C 04                		beq	.L207
 2474                             	.LVL193:
 2475                             	.LBB1137:
 2476                             	.LBB1138:
 2477                             		.loc 6 120 0
 2478 01bb 61 0E                   		cmp	#0, r14
 2479 01bd 20 0C                   		beq	.L208
 2480 01bf E3 E1                   		mov.L	r1, [r14]
 2481 01c1 FB A2 00 00 00 00       		mov.L	#__ZZN9EventList11getInstanceEvE8instance+24, r10
 2482 01c7 EC AE                   		mov.L	[r10], r14
 2483                             	.LVL194:
 2484                             		.balign 8,3,1
 2485                             	.L208:
 2486                             	.LBE1138:
 2487                             	.LBE1137:
 2488                             		.loc 5 1396 0
 2489 01c9 62 4E                   		add	#4, r14
 2490 01cb ED 0B 19                		mov.L	100[r0], r11
 2491 01ce E7 BE 06                		mov.L	r14, 24[r11]
 2492                             	.LVL195:
 2493                             		.balign 8,3,4
 2494                             	.L209:
 2495                             	.LBE1154:
 2496                             	.LBE1157:
 2497                             	.LBE1160:
 2498                             	.LBE1165:
  47:../src/mode/mode_B.cpp ****     events.push(new Stop(500));
 2499                             		.loc 9 47 0 discriminator 1
 2500 01d1 F9 06 0C FF             		mov.L	#-1, 48[r0]
 2501 01d5 FB 1A 88 09             		mov.L	#0x988, r1
 2502 01d9 05 00 00 00             		bsr	__Znwm
 2503                             	.LVL196:
 2504 01dd A6 01                   		mov.L	r1, 96[r0]
 2505                             	.LVL197:
 2506                             	.LBB1166:
 2507                             	.LBB1167:
 2508                             	.LBB1168:
 2509                             	.LBB1169:
1393:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	  {
 2510                             		.loc 5 1393 0 discriminator 1
 2511 01df ED 0C 19                		mov.L	100[r0], r12
 2512 01e2 ED C4 08                		mov.L	32[r12], r4
1392:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	    != this->_M_impl._M_finish._M_last - 1)
 2513                             		.loc 5 1392 0 discriminator 1
 2514 01e5 ED CE 06                		mov.L	24[r12], r14
 2515                             	.LBE1169:
 2516                             	.LBE1168:
 2517                             	.LBE1167:
 2518                             	.LBE1166:
 2519                             	.LBB1196:
 2520                             	.LBB1197:
 745:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         count_end = stop_ms;
 2521                             		.loc 4 745 0 discriminator 1
 2522 01e8 F8 12 00 00 00 00       		mov.L	#__ZTV4Stop+8, [r1]
 2523 01ee 3E 11 00                		mov.L	#0, 4[r1]
 2524 01f1 3E 13 00                		mov.L	#0, 12[r1]
 2525 01f4 FA 16 30 01 00          		mov.L	#0x0, 1216[r1]
 2526 01f9 FA 16 31 01 00          		mov.L	#0x0, 1220[r1]
 2527 01fe FA 16 32 01 00          		mov.L	#0x0, 1224[r1]
 2528 0203 FA 16 5F 02 00          		mov.L	#0x0, 2428[r1]
 2529 0208 FA 16 60 02 00          		mov.L	#0x0, 2432[r1]
 2530 020d FA 16 61 02 00          		mov.L	#0x0, 2436[r1]
 746:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****     }
 2531                             		.loc 4 746 0 discriminator 1
 2532 0212 F9 1A 02 F4 01          		mov.L	#0x1f4, 8[r1]
 2533                             	.LVL198:
 2534                             	.LBE1197:
 2535                             	.LBE1196:
 2536                             	.LBB1198:
 2537                             	.LBB1193:
 2538                             	.LBB1190:
 2539                             	.LBB1187:
1393:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	  {
 2540                             		.loc 5 1393 0 discriminator 1
 2541 0217 60 44                   		sub	#4, r4
1392:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	    != this->_M_impl._M_finish._M_last - 1)
 2542                             		.loc 5 1392 0 discriminator 1
 2543 0219 47 4E                   		cmp	r4, r14
 2544 021b 3A 27 04                		beq	.L212
 2545                             	.LVL199:
 2546                             	.LBB1170:
 2547                             	.LBB1171:
 2548                             		.loc 6 120 0
 2549 021e 61 0E                   		cmp	#0, r14
 2550 0220 20 0C                   		beq	.L213
 2551 0222 E3 E1                   		mov.L	r1, [r14]
 2552 0224 FB 72 00 00 00 00       		mov.L	#__ZZN9EventList11getInstanceEvE8instance+24, r7
 2553 022a EC 7E                   		mov.L	[r7], r14
 2554                             	.LVL200:
 2555                             		.balign 8,3,1
 2556                             	.L213:
 2557                             	.LBE1171:
 2558                             	.LBE1170:
 2559                             		.loc 5 1396 0
 2560 022c 62 4E                   		add	#4, r14
 2561 022e ED 0A 19                		mov.L	100[r0], r10
 2562 0231 E7 AE 06                		mov.L	r14, 24[r10]
 2563                             	.LVL201:
 2564 0234 76 10 01 00             		.balign 8,3,4
 2565                             	.L214:
 2566                             	.LBE1187:
 2567                             	.LBE1190:
 2568                             	.LBE1193:
 2569                             	.LBE1198:
  48:../src/mode/mode_B.cpp **** 
  49:../src/mode/mode_B.cpp **** //    events.push(new SimpleTrape(0.18*4));
  50:../src/mode/mode_B.cpp **** 
  51:../src/mode/mode_B.cpp **** //    events.push(new SimplePivotTurn(-180.0));
  52:../src/mode/mode_B.cpp ****     events.push(new Stop(1500));
 2570                             		.loc 9 52 0 discriminator 1
 2571 0238 F9 06 0C FF             		mov.L	#-1, 48[r0]
 2572 023c FB 1A 88 09             		mov.L	#0x988, r1
 2573 0240 05 00 00 00             		bsr	__Znwm
 2574                             	.LVL202:
 2575 0244 A6 01                   		mov.L	r1, 96[r0]
 2576                             	.LVL203:
 2577                             	.LBB1199:
 2578                             	.LBB1200:
 2579                             	.LBB1201:
 2580                             	.LBB1202:
1393:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	  {
 2581                             		.loc 5 1393 0 discriminator 1
 2582 0246 ED 0C 19                		mov.L	100[r0], r12
 2583 0249 ED C4 08                		mov.L	32[r12], r4
1392:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	    != this->_M_impl._M_finish._M_last - 1)
 2584                             		.loc 5 1392 0 discriminator 1
 2585 024c ED CE 06                		mov.L	24[r12], r14
 2586                             	.LBE1202:
 2587                             	.LBE1201:
 2588                             	.LBE1200:
 2589                             	.LBE1199:
 2590                             	.LBB1229:
 2591                             	.LBB1230:
 745:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         count_end = stop_ms;
 2592                             		.loc 4 745 0 discriminator 1
 2593 024f F8 12 00 00 00 00       		mov.L	#__ZTV4Stop+8, [r1]
 2594 0255 3E 11 00                		mov.L	#0, 4[r1]
 2595 0258 3E 13 00                		mov.L	#0, 12[r1]
 2596 025b FA 16 30 01 00          		mov.L	#0x0, 1216[r1]
 2597 0260 FA 16 31 01 00          		mov.L	#0x0, 1220[r1]
 2598 0265 FA 16 32 01 00          		mov.L	#0x0, 1224[r1]
 2599 026a FA 16 5F 02 00          		mov.L	#0x0, 2428[r1]
 2600 026f FA 16 60 02 00          		mov.L	#0x0, 2432[r1]
 2601 0274 FA 16 61 02 00          		mov.L	#0x0, 2436[r1]
 746:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****     }
 2602                             		.loc 4 746 0 discriminator 1
 2603 0279 F9 1A 02 DC 05          		mov.L	#0x5dc, 8[r1]
 2604                             	.LVL204:
 2605                             	.LBE1230:
 2606                             	.LBE1229:
 2607                             	.LBB1231:
 2608                             	.LBB1226:
 2609                             	.LBB1223:
 2610                             	.LBB1220:
1393:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	  {
 2611                             		.loc 5 1393 0 discriminator 1
 2612 027e 60 44                   		sub	#4, r4
1392:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	    != this->_M_impl._M_finish._M_last - 1)
 2613                             		.loc 5 1392 0 discriminator 1
 2614 0280 47 4E                   		cmp	r4, r14
 2615 0282 3A 1D 04                		beq	.L217
 2616                             	.LVL205:
 2617                             	.LBB1203:
 2618                             	.LBB1204:
 2619                             		.loc 6 120 0
 2620 0285 61 0E                   		cmp	#0, r14
 2621 0287 20 0C                   		beq	.L218
 2622 0289 E3 E1                   		mov.L	r1, [r14]
 2623 028b FB 72 00 00 00 00       		mov.L	#__ZZN9EventList11getInstanceEvE8instance+24, r7
 2624 0291 EC 7E                   		mov.L	[r7], r14
 2625                             	.LVL206:
 2626                             		.balign 8,3,1
 2627                             	.L218:
 2628                             	.LBE1204:
 2629                             	.LBE1203:
 2630                             		.loc 5 1396 0
 2631 0293 62 4E                   		add	#4, r14
 2632 0295 ED 0A 19                		mov.L	100[r0], r10
 2633 0298 E7 AE 06                		mov.L	r14, 24[r10]
 2634                             	.LVL207:
 2635                             		.balign 8,3,4
 2636                             	.L219:
 2637                             	.LBE1220:
 2638                             	.LBE1223:
 2639                             	.LBE1226:
 2640                             	.LBE1231:
  53:../src/mode/mode_B.cpp ****     events.push(new Stop(500));
 2641                             		.loc 9 53 0 discriminator 1
 2642 029b F9 06 0C FF             		mov.L	#-1, 48[r0]
 2643 029f FB 1A 88 09             		mov.L	#0x988, r1
 2644 02a3 05 00 00 00             		bsr	__Znwm
 2645                             	.LVL208:
 2646 02a7 A6 01                   		mov.L	r1, 96[r0]
 2647                             	.LVL209:
 2648                             	.LBB1232:
 2649                             	.LBB1233:
 2650                             	.LBB1234:
 2651                             	.LBB1235:
1393:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	  {
 2652                             		.loc 5 1393 0 discriminator 1
 2653 02a9 ED 0C 19                		mov.L	100[r0], r12
 2654 02ac ED C4 08                		mov.L	32[r12], r4
1392:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	    != this->_M_impl._M_finish._M_last - 1)
 2655                             		.loc 5 1392 0 discriminator 1
 2656 02af ED CE 06                		mov.L	24[r12], r14
 2657                             	.LBE1235:
 2658                             	.LBE1234:
 2659                             	.LBE1233:
 2660                             	.LBE1232:
 2661                             	.LBB1262:
 2662                             	.LBB1263:
 745:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         count_end = stop_ms;
 2663                             		.loc 4 745 0 discriminator 1
 2664 02b2 F8 12 00 00 00 00       		mov.L	#__ZTV4Stop+8, [r1]
 2665 02b8 3E 11 00                		mov.L	#0, 4[r1]
 2666 02bb 3E 13 00                		mov.L	#0, 12[r1]
 2667 02be FA 16 30 01 00          		mov.L	#0x0, 1216[r1]
 2668 02c3 FA 16 31 01 00          		mov.L	#0x0, 1220[r1]
 2669 02c8 FA 16 32 01 00          		mov.L	#0x0, 1224[r1]
 2670 02cd FA 16 5F 02 00          		mov.L	#0x0, 2428[r1]
 2671 02d2 FA 16 60 02 00          		mov.L	#0x0, 2432[r1]
 2672 02d7 FA 16 61 02 00          		mov.L	#0x0, 2436[r1]
 746:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****     }
 2673                             		.loc 4 746 0 discriminator 1
 2674 02dc F9 1A 02 F4 01          		mov.L	#0x1f4, 8[r1]
 2675                             	.LVL210:
 2676                             	.LBE1263:
 2677                             	.LBE1262:
 2678                             	.LBB1264:
 2679                             	.LBB1259:
 2680                             	.LBB1256:
 2681                             	.LBB1253:
1393:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	  {
 2682                             		.loc 5 1393 0 discriminator 1
 2683 02e1 60 44                   		sub	#4, r4
1392:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	    != this->_M_impl._M_finish._M_last - 1)
 2684                             		.loc 5 1392 0 discriminator 1
 2685 02e3 47 4E                   		cmp	r4, r14
 2686 02e5 3A 18 04                		beq	.L222
 2687                             	.LVL211:
 2688                             	.LBB1236:
 2689                             	.LBB1237:
 2690                             		.loc 6 120 0
 2691 02e8 61 0E                   		cmp	#0, r14
 2692 02ea 20 0C                   		beq	.L223
 2693 02ec E3 E1                   		mov.L	r1, [r14]
 2694 02ee FB 72 00 00 00 00       		mov.L	#__ZZN9EventList11getInstanceEvE8instance+24, r7
 2695 02f4 EC 7E                   		mov.L	[r7], r14
 2696                             	.LVL212:
 2697                             		.balign 8,3,1
 2698                             	.L223:
 2699                             	.LBE1237:
 2700                             	.LBE1236:
 2701                             		.loc 5 1396 0
 2702 02f6 62 4E                   		add	#4, r14
 2703 02f8 ED 0A 19                		mov.L	100[r0], r10
 2704 02fb E7 AE 06                		mov.L	r14, 24[r10]
 2705                             	.LVL213:
 2706 02fe EF 00                   		.balign 8,3,5
 2707                             	.L224:
 2708                             	.LBE1253:
 2709                             	.LBE1256:
 2710                             	.LBE1259:
 2711                             	.LBE1264:
 2712                             	.LBB1265:
 2713                             	.LBB1266:
  29:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\gamepad.h ****         return instance;
 2714                             		.loc 1 29 0
 2715 0300 FB C2 00 00 00 00       		mov.L	#__ZGVZN7Gamepad11getInstanceEvE8instance, r12
 2716 0306 58 CC                   		movu.B	[r12], r12
 2717 0308 E7 0C 19                		mov.L	r12, 100[r0]
 2718 030b 61 0C                   		cmp	#0, r12
 2719 030d 3A C0 01                		beq	.L227
 2720 0310 F9 02 18 00 00 00 00    		mov.L	#__ZZN7Gamepad11getInstanceEvE8instance, 96[r0]
 2721                             	.LVL214:
 2722 0317 03                      		.balign 8,3,5
 2723                             	.L228:
 2724                             	.LBE1266:
 2725                             	.LBE1265:
 2726                             	.LBB1274:
 2727                             	.LBB1275:
 123:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h ****         return instance;
 2728                             		.loc 3 123 0
 2729 0318 FB A2 00 00 00 00       		mov.L	#__ZGVZN6UMouse11getInstanceEvE8instance, r10
 2730 031e 58 AE                   		movu.B	[r10], r14
 2731 0320 61 0E                   		cmp	#0, r14
 2732 0322 3A 81 01                		beq	.L309
 2733 0325 FC 13 00                		.balign 8,3,4
 2734                             	.L233:
 2735                             	.LBE1275:
 2736                             	.LBE1274:
  54:../src/mode/mode_B.cpp **** 
  55:../src/mode/mode_B.cpp **** 
  56:../src/mode/mode_B.cpp ****     Gamepad &gamepad = Gamepad::getInstance();
  57:../src/mode/mode_B.cpp ****     UMouse  &mouse   = UMouse::getInstance();
  58:../src/mode/mode_B.cpp ****     while(1){
  59:../src/mode/mode_B.cpp ****         waitmsec(100);
 2737                             		.loc 9 59 0
 2738 0328 F9 06 0C FF             		mov.L	#-1, 48[r0]
 2739 032c 75 41 64                		mov.L	#0x64, r1
 2740 032f 05 00 00 00             		bsr	__Z8waitmsecm
 2741                             	.LVL215:
  60:../src/mode/mode_B.cpp **** 
  61:../src/mode/mode_B.cpp ****         if (gamepad.B > 100 && gamepad.B < 200 ) {
 2742                             		.loc 9 61 0
 2743 0333 ED 0B 18                		mov.L	96[r0], r11
 2744 0336 ED BE 03                		mov.L	12[r11], r14
 2745 0339 75 5E 64                		cmp	#0x64, r14
 2746 033c 25 EC                   		bleu	.L233
 2747                             		.loc 9 61 0 is_stmt 0 discriminator 1
 2748 033e FB C2 00 00 00 00       		mov.L	#__ZZN7Gamepad11getInstanceEvE8instance+12, r12
 2749 0344 EC CE                   		mov.L	[r12], r14
 2750 0346 75 5E C7                		cmp	#0xc7, r14
 2751 0349 24 DF                   		bgtu	.L233
  62:../src/mode/mode_B.cpp ****                     SEB();
 2752                             		.loc 9 62 0 is_stmt 1
 2753 034b F9 06 0C FF             		mov.L	#-1, 48[r0]
 2754 034f 05 00 00 00             		bsr	__Z3SEBv
 2755                             	.LVL216:
  63:../src/mode/mode_B.cpp ****                     myprintf3("select! \n");
 2756                             		.loc 9 63 0
 2757 0353 F8 02 5C 00 00 00       		mov.L	#.LC8, [r0]
 2758 0359 05 00 00 00             		bsr	__Z9myprintf3PKcz
 2759                             	.LVL217:
  64:../src/mode/mode_B.cpp ****                     waitmsec(1000);
 2760                             		.loc 9 64 0
 2761 035d FB 1A E8 03             		mov.L	#0x3e8, r1
 2762 0361 05 00 00 00             		bsr	__Z8waitmsecm
 2763                             	.LVL218:
 2764 0365 71 01 2C                		add	#44, r0, r1
 2765 0368 05 00 00 00             		bsr	__Unwind_SjLj_Unregister
 2766                             	.LVL219:
 2767                             	.LBE980:
  65:../src/mode/mode_B.cpp ****                     return;
  66:../src/mode/mode_B.cpp ****                 }
  67:../src/mode/mode_B.cpp **** 
  68:../src/mode/mode_B.cpp ****     }
  69:../src/mode/mode_B.cpp **** 
  70:../src/mode/mode_B.cpp **** };
 2768                             		.loc 9 70 0
 2769 036c 3F 6D 23                		rtsd	#140, r6-r13
 2770                             	.LVL220:
 2771                             	.L302:
 2772                             	.LBB1296:
 2773                             	.LBB1279:
 2774                             	.LBB1062:
 976:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         return instance;
 2775                             		.loc 4 976 0
 2776 036f 05 00 00 00             		bsr	___cxa_guard_acquire
 2777                             	.LVL221:
 2778 0373 61 01                   		cmp	#0, r1
 2779 0375 3A D1 FC                		beq	.L307
 2780                             	.LVL222:
 2781                             	.LBB983:
 2782                             	.LBB984:
 2783                             	.LBB985:
 2784                             	.LBB986:
 2785                             	.LBB987:
 2786                             	.LBB988:
 2787                             	.LBB989:
 2788                             	.LBB990:
 502:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	{ }
 2789                             		.loc 5 502 0
 2790 0378 E5 00 19 01             		mov.L	100[r0], 4[r0]
 2791 037c E5 00 19 02             		mov.L	100[r0], 8[r0]
 2792                             	.LVL223:
 2793                             	.LBB991:
 2794                             	.LBB992:
 133:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
 2795                             		.loc 5 133 0
 2796 0380 E5 00 19 03             		mov.L	100[r0], 12[r0]
 2797 0384 E5 00 19 04             		mov.L	100[r0], 16[r0]
 2798 0388 E5 00 19 05             		mov.L	100[r0], 20[r0]
 2799 038c E5 00 19 06             		mov.L	100[r0], 24[r0]
 2800                             	.LVL224:
 2801                             	.LBE992:
 2802                             	.LBE991:
 2803                             	.LBB993:
 2804                             	.LBB994:
 2805 0390 E5 00 19 07             		mov.L	100[r0], 28[r0]
 2806 0394 E5 00 19 08             		mov.L	100[r0], 32[r0]
 2807 0398 E5 00 19 09             		mov.L	100[r0], 36[r0]
 2808 039c E5 00 19 0A             		mov.L	100[r0], 40[r0]
 2809                             	.LBE994:
 2810                             	.LBE993:
 2811                             	.LBE990:
 2812                             	.LBE989:
 453:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
 2813                             		.loc 5 453 0
 2814 03a0 3E 0C 02                		mov.L	#2, 48[r0]
 2815 03a3 66 41                   		mov.L	#4, r1
 2816 03a5 4B 01                   		add	r0, r1
 2817                             	.LVL225:
 2818 03a7 AE 0A                   		mov.L	100[r0], r2
 2819 03a9 05 00 00 00             		bsr	__ZNSt11_Deque_baseIP13BaseMoveEventSaIS1_EE17_M_initialize_mapEm
 2820                             	.LVL226:
 2821                             	.LBE988:
 2822                             	.LBE987:
 2823                             	.LBE986:
 2824                             	.LBE985:
 2825                             	.LBB995:
 2826                             	.LBB996:
 2827                             	.LBB997:
 2828                             	.LBB998:
 2829                             	.LBB999:
 2830                             	.LBB1000:
 513:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	{ }
 2831                             		.loc 5 513 0
 2832 03ad F9 02 19 00 00 00 00    		mov.L	#__ZZN9EventList11getInstanceEvE8instance, 100[r0]
 2833 03b4 ED 0A 19                		mov.L	100[r0], r10
 2834 03b7 F8 A6 00                		mov.L	#0, [r10]
 2835 03ba F9 A6 01 00             		mov.L	#0, 4[r10]
 2836                             	.LVL227:
 2837                             	.LBB1001:
 2838                             	.LBB1002:
 133:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
 2839                             		.loc 5 133 0
 2840 03be F9 A6 02 00             		mov.L	#0, 8[r10]
 2841 03c2 F9 A6 03 00             		mov.L	#0, 12[r10]
 2842 03c6 F9 A6 04 00             		mov.L	#0, 16[r10]
 2843 03ca F9 A6 05 00             		mov.L	#0, 20[r10]
 2844                             	.LVL228:
 2845                             	.LBE1002:
 2846                             	.LBE1001:
 2847                             	.LBB1003:
 2848                             	.LBB1004:
 2849 03ce F9 A6 06 00             		mov.L	#0, 24[r10]
 2850 03d2 F9 A6 07 00             		mov.L	#0, 28[r10]
 2851 03d6 F9 A6 08 00             		mov.L	#0, 32[r10]
 2852 03da F9 A6 09 00             		mov.L	#0, 36[r10]
 2853                             	.LBE1004:
 2854                             	.LBE1003:
 2855                             	.LBE1000:
 2856                             	.LBE999:
 471:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	if (__x._M_impl._M_map)
 2857                             		.loc 5 471 0
 2858 03de 3E 0C 03                		mov.L	#3, 48[r0]
 2859 03e1 EF A1                   		mov.L	r10, r1
 2860 03e3 66 02                   		mov.L	#0, r2
 2861 03e5 05 00 00 00             		bsr	__ZNSt11_Deque_baseIP13BaseMoveEventSaIS1_EE17_M_initialize_mapEm
 2862                             	.LVL229:
 472:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	  {
 2863                             		.loc 5 472 0
 2864 03e9 ED 0E 01                		mov.L	4[r0], r14
 2865 03ec 61 0E                   		cmp	#0, r14
 2866 03ee 3A 92 00                		beq	.L185
 2867                             	.LVL230:
 2868                             	.LBB1005:
 2869                             	.LBB1006:
 2870                             	.LBB1007:
 2871                             	.LBB1008:
 137:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
 2872                             		.loc 5 137 0
 2873 03f1 ED AD 02                		mov.L	8[r10], r13
 2874                             	.LVL231:
 2875 03f4 ED AC 03                		mov.L	12[r10], r12
 2876                             	.LVL232:
 2877 03f7 ED AB 04                		mov.L	16[r10], r11
 2878                             	.LVL233:
 2879 03fa ED A4 05                		mov.L	20[r10], r4
 2880                             	.LVL234:
 2881                             	.LBE1008:
 2882                             	.LBE1007:
 2883                             		.file 10 "c:\\progra~2\\gccfor~2.201\\rx-elf\\rx-elf\\rx-elf\\include\\c++\\4.8.0.201602-gnurx\\bi
   1:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\move.h **** // Move, forward and identity for C++0x + swap -*- C++ -*-
   2:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\move.h **** 
   3:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\move.h **** // Copyright (C) 2007-2013 Free Software Foundation, Inc.
   4:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\move.h **** //
   5:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\move.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\move.h **** // software; you can redistribute it and/or modify it under the
   7:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\move.h **** // terms of the GNU General Public License as published by the
   8:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\move.h **** // Free Software Foundation; either version 3, or (at your option)
   9:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\move.h **** // any later version.
  10:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\move.h **** 
  11:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\move.h **** // This library is distributed in the hope that it will be useful,
  12:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\move.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\move.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\move.h **** // GNU General Public License for more details.
  15:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\move.h **** 
  16:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\move.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\move.h **** // permissions described in the GCC Runtime Library Exception, version
  18:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\move.h **** // 3.1, as published by the Free Software Foundation.
  19:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\move.h **** 
  20:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\move.h **** // You should have received a copy of the GNU General Public License and
  21:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\move.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\move.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\move.h **** // <http://www.gnu.org/licenses/>.
  24:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\move.h **** 
  25:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\move.h **** /** @file bits/move.h
  26:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\move.h ****  *  This is an internal header file, included by other library headers.
  27:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\move.h ****  *  Do not attempt to use it directly. @headername{utility}
  28:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\move.h ****  */
  29:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\move.h **** 
  30:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\move.h **** #ifndef _MOVE_H
  31:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\move.h **** #define _MOVE_H 1
  32:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\move.h **** 
  33:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\move.h **** #include <bits/c++config.h>
  34:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\move.h **** #include <bits/concept_check.h>
  35:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\move.h **** 
  36:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\move.h **** namespace std _GLIBCXX_VISIBILITY(default)
  37:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\move.h **** {
  38:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\move.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  39:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\move.h **** 
  40:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\move.h ****   // Used, in C++03 mode too, by allocators, etc.
  41:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\move.h ****   /**
  42:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\move.h ****    *  @brief Same as C++11 std::addressof
  43:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\move.h ****    *  @ingroup utilities
  44:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\move.h ****    */
  45:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\move.h ****   template<typename _Tp>
  46:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\move.h ****     inline _Tp*
  47:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\move.h ****     __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
  48:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\move.h ****     {
  49:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\move.h ****       return reinterpret_cast<_Tp*>
  50:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\move.h **** 	(&const_cast<char&>(reinterpret_cast<const volatile char&>(__r)));
  51:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\move.h ****     }
  52:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\move.h **** 
  53:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\move.h **** _GLIBCXX_END_NAMESPACE_VERSION
  54:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\move.h **** } // namespace
  55:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\move.h **** 
  56:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\move.h **** #if __cplusplus >= 201103L
  57:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\move.h **** #include <type_traits> // Brings in std::declval too.
  58:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\move.h **** 
  59:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\move.h **** namespace std _GLIBCXX_VISIBILITY(default)
  60:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\move.h **** {
  61:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\move.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  62:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\move.h **** 
  63:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\move.h ****   /**
  64:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\move.h ****    *  @addtogroup utilities
  65:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\move.h ****    *  @{
  66:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\move.h ****    */
  67:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\move.h **** 
  68:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\move.h ****   /**
  69:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\move.h ****    *  @brief  Forward an lvalue.
  70:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\move.h ****    *  @return The parameter cast to the specified type.
  71:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\move.h ****    *
  72:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\move.h ****    *  This function is used to implement "perfect forwarding".
  73:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\move.h ****    */
  74:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\move.h ****   template<typename _Tp>
  75:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\move.h ****     constexpr _Tp&&
  76:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\move.h ****     forward(typename std::remove_reference<_Tp>::type& __t) noexcept
  77:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\move.h ****     { return static_cast<_Tp&&>(__t); }
  78:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\move.h **** 
  79:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\move.h ****   /**
  80:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\move.h ****    *  @brief  Forward an rvalue.
  81:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\move.h ****    *  @return The parameter cast to the specified type.
  82:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\move.h ****    *
  83:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\move.h ****    *  This function is used to implement "perfect forwarding".
  84:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\move.h ****    */
  85:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\move.h ****   template<typename _Tp>
  86:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\move.h ****     constexpr _Tp&&
  87:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\move.h ****     forward(typename std::remove_reference<_Tp>::type&& __t) noexcept
  88:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\move.h ****     {
  89:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\move.h ****       static_assert(!std::is_lvalue_reference<_Tp>::value, "template argument"
  90:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\move.h **** 		    " substituting _Tp is an lvalue reference type");
  91:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\move.h ****       return static_cast<_Tp&&>(__t);
  92:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\move.h ****     }
  93:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\move.h **** 
  94:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\move.h ****   /**
  95:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\move.h ****    *  @brief  Convert a value to an rvalue.
  96:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\move.h ****    *  @param  __t  A thing of arbitrary type.
  97:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\move.h ****    *  @return The parameter cast to an rvalue-reference to allow moving it.
  98:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\move.h ****   */
  99:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\move.h ****   template<typename _Tp>
 100:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\move.h ****     constexpr typename std::remove_reference<_Tp>::type&&
 101:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\move.h ****     move(_Tp&& __t) noexcept
 102:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\move.h ****     { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 103:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\move.h **** 
 104:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\move.h **** 
 105:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\move.h ****   template<typename _Tp>
 106:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\move.h ****     struct __move_if_noexcept_cond
 107:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\move.h ****     : public __and_<__not_<is_nothrow_move_constructible<_Tp>>,
 108:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\move.h ****                     is_copy_constructible<_Tp>>::type { };
 109:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\move.h **** 
 110:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\move.h ****   /**
 111:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\move.h ****    *  @brief  Conditionally convert a value to an rvalue.
 112:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\move.h ****    *  @param  __x  A thing of arbitrary type.
 113:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\move.h ****    *  @return The parameter, possibly cast to an rvalue-reference.
 114:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\move.h ****    *
 115:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\move.h ****    *  Same as std::move unless the type's move constructor could throw and the
 116:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\move.h ****    *  type is copyable, in which case an lvalue-reference is returned instead.
 117:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\move.h ****    */
 118:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\move.h ****   template<typename _Tp>
 119:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\move.h ****     inline constexpr typename
 120:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\move.h ****     conditional<__move_if_noexcept_cond<_Tp>::value, const _Tp&, _Tp&&>::type
 121:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\move.h ****     move_if_noexcept(_Tp& __x) noexcept
 122:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\move.h ****     { return std::move(__x); }
 123:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\move.h **** 
 124:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\move.h ****   // declval, from type_traits.
 125:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\move.h **** 
 126:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\move.h ****   /**
 127:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\move.h ****    *  @brief Returns the actual address of the object or function
 128:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\move.h ****    *         referenced by r, even in the presence of an overloaded
 129:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\move.h ****    *         operator&.
 130:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\move.h ****    *  @param  __r  Reference to an object or function.
 131:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\move.h ****    *  @return   The actual address.
 132:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\move.h ****   */
 133:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\move.h ****   template<typename _Tp>
 134:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\move.h ****     inline _Tp*
 135:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\move.h ****     addressof(_Tp& __r) noexcept
 136:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\move.h ****     { return std::__addressof(__r); }
 137:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\move.h **** 
 138:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\move.h ****   /// @} group utilities
 139:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\move.h **** _GLIBCXX_END_NAMESPACE_VERSION
 140:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\move.h **** } // namespace
 141:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\move.h **** 
 142:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\move.h **** #define _GLIBCXX_MOVE(__val) std::move(__val)
 143:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\move.h **** #define _GLIBCXX_FORWARD(_Tp, __val) std::forward<_Tp>(__val)
 144:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\move.h **** #else
 145:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\move.h **** #define _GLIBCXX_MOVE(__val) (__val)
 146:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\move.h **** #define _GLIBCXX_FORWARD(_Tp, __val) (__val)
 147:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\move.h **** #endif
 148:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\move.h **** 
 149:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\move.h **** namespace std _GLIBCXX_VISIBILITY(default)
 150:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\move.h **** {
 151:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\move.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
 152:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\move.h **** 
 153:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\move.h ****   /**
 154:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\move.h ****    *  @addtogroup utilities
 155:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\move.h ****    *  @{
 156:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\move.h ****    */
 157:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\move.h **** 
 158:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\move.h ****   /**
 159:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\move.h ****    *  @brief Swaps two values.
 160:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\move.h ****    *  @param  __a  A thing of arbitrary type.
 161:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\move.h ****    *  @param  __b  Another thing of arbitrary type.
 162:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\move.h ****    *  @return   Nothing.
 163:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\move.h ****   */
 164:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\move.h ****   template<typename _Tp>
 165:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\move.h ****     inline void
 166:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\move.h ****     swap(_Tp& __a, _Tp& __b)
 167:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\move.h **** #if __cplusplus >= 201103L
 168:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\move.h ****     noexcept(__and_<is_nothrow_move_constructible<_Tp>,
 169:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\move.h **** 	            is_nothrow_move_assignable<_Tp>>::value)
 170:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\move.h **** #endif
 171:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\move.h ****     {
 172:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\move.h ****       // concept requirements
 173:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\move.h ****       __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
 174:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\move.h **** 
 175:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\move.h ****       _Tp __tmp = _GLIBCXX_MOVE(__a);
 176:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\move.h ****       __a = _GLIBCXX_MOVE(__b);
 2884                             		.loc 10 176 0
 2885 03fd FB 12 00 00 00 00       		mov.L	#__ZZN9EventList11getInstanceEvE8instance+8, r1
 2886                             	.LVL235:
 2887 0403 71 02 0C                		add	#12, r0, r2
 2888                             	.LVL236:
 2889 0406 75 43 10                		mov.L	#16, r3
 2890 0409 7F 8F                   		smovf
 2891                             	.LVL237:
 2892                             	.LBE1006:
 2893                             	.LBE1005:
 2894                             	.LBB1010:
 2895                             	.LBB1011:
 2896                             	.LBB1012:
 2897                             	.LBB1013:
 137:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
 2898                             		.loc 5 137 0
 2899 040b AE 0B                   		mov.L	100[r0], r3
 2900 040d ED 3A 06                		mov.L	24[r3], r10
 2901 0410 A9 BF                   		mov.L	28[r3], r7
 2902 0412 ED 3F 08                		mov.L	32[r3], r15
 2903 0415 AA 3D                   		mov.L	36[r3], r5
 2904                             	.LBE1013:
 2905                             	.LBE1012:
 2906                             		.loc 10 176 0
 2907 0417 FB 12 00 00 00 00       		mov.L	#__ZZN9EventList11getInstanceEvE8instance+24, r1
 2908 041d 71 02 1C                		add	#28, r0, r2
 2909 0420 75 43 10                		mov.L	#16, r3
 2910                             	.LBE1011:
 2911                             	.LBE1010:
 2912                             	.LBB1017:
 2913                             	.LBB1009:
 177:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\move.h ****       __b = _GLIBCXX_MOVE(__tmp);
 2914                             		.loc 10 177 0
 2915 0423 E7 0D 03                		mov.L	r13, 12[r0]
 2916 0426 E7 0C 04                		mov.L	r12, 16[r0]
 2917 0429 E7 0B 05                		mov.L	r11, 20[r0]
 2918 042c A1 84                   		mov.L	r4, 24[r0]
 2919                             	.LVL238:
 2920                             	.LBE1009:
 2921                             	.LBE1017:
 2922                             	.LBB1018:
 2923                             	.LBB1014:
 176:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\move.h ****       __b = _GLIBCXX_MOVE(__tmp);
 2924                             		.loc 10 176 0
 2925 042e 7F 8F                   		smovf
 2926                             	.LVL239:
 2927                             	.LBE1014:
 2928                             	.LBE1018:
 2929                             	.LBB1019:
 2930                             	.LBB1020:
 175:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\move.h ****       __a = _GLIBCXX_MOVE(__b);
 2931                             		.loc 10 175 0
 2932 0430 ED 0B 19                		mov.L	100[r0], r11
 2933 0433 EC B4                   		mov.L	[r11], r4
 2934                             	.LBE1020:
 2935                             	.LBE1019:
 2936                             	.LBB1022:
 2937                             	.LBB1023:
 2938 0435 ED BB 01                		mov.L	4[r11], r11
 2939                             	.LBE1023:
 2940                             	.LBE1022:
 2941                             	.LBB1026:
 2942                             	.LBB1015:
 2943                             		.loc 10 177 0
 2944 0438 E7 0A 07                		mov.L	r10, 28[r0]
 2945                             	.LBE1015:
 2946                             	.LBE1026:
 2947                             	.LBB1027:
 2948                             	.LBB1024:
 176:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\move.h ****       __b = _GLIBCXX_MOVE(__tmp);
 2949                             		.loc 10 176 0
 2950 043b ED 0C 19                		mov.L	100[r0], r12
 2951 043e E5 0C 02 01             		mov.L	8[r0], 4[r12]
 2952                             	.LBE1024:
 2953                             	.LBE1027:
 2954                             	.LBB1028:
 2955                             	.LBB1016:
 2956                             		.loc 10 177 0
 2957 0442 A2 07                   		mov.L	r7, 32[r0]
 2958 0444 E7 0F 09                		mov.L	r15, 36[r0]
 2959 0447 A2 85                   		mov.L	r5, 40[r0]
 2960                             	.LVL240:
 2961                             	.LBE1016:
 2962                             	.LBE1028:
 2963                             	.LBB1029:
 2964                             	.LBB1021:
 176:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\move.h ****       __b = _GLIBCXX_MOVE(__tmp);
 2965                             		.loc 10 176 0
 2966 0449 E3 CE                   		mov.L	r14, [r12]
 2967                             	.LVL241:
 2968                             		.loc 10 177 0
 2969 044b A0 0C                   		mov.L	r4, 4[r0]
 2970                             	.LVL242:
 2971                             	.LBE1021:
 2972                             	.LBE1029:
 2973                             	.LBB1030:
 2974                             	.LBB1025:
 2975 044d E7 0B 02                		mov.L	r11, 8[r0]
 2976                             	.LVL243:
 2977                             	.LBE1025:
 2978                             	.LBE1030:
 2979                             	.LBE998:
 2980                             	.LBE997:
 2981                             	.LBE996:
 2982                             	.LBE995:
 2983                             	.LBB1031:
 2984                             	.LBB1032:
 2985                             	.LBB1033:
 563:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	{
 2986                             		.loc 5 563 0
 2987 0450 61 04                   		cmp	#0, r4
 2988 0452 20 2E                   		beq	.L185
 566:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	  _M_deallocate_map(this->_M_impl._M_map, this->_M_impl._M_map_size);
 2989                             		.loc 5 566 0
 2990 0454 E5 00 06 18             		mov.L	24[r0], 96[r0]
 2991 0458 62 45                   		add	#4, r5
 2992                             	.LVL244:
 2993 045a A6 85                   		mov.L	r5, 104[r0]
 2994                             	.LVL245:
 2995                             	.LBB1034:
 2996                             	.LBB1035:
 641:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	_M_deallocate_node(*__n);
 2997                             		.loc 5 641 0
 2998 045c AE 03                   		mov.L	96[r0], r3
 2999 045e 47 53                   		cmp	r5, r3
 3000 0460 23 05 38 7D 03          		bgeu	.L237
 3001                             	.LVL246:
 3002                             		.balign 8,3,1
 3003                             	.L188:
 3004                             	.LBB1036:
 3005                             	.LBB1037:
 3006                             	.LBB1038:
 110:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\ext\new_allocator.h **** 
 3007                             		.loc 6 110 0
 3008 0465 AE 07                   		mov.L	96[r0], r7
 3009 0467 FD 2A 71                		mov.L	[r7+], r1
 3010 046a A6 07                   		mov.L	r7, 96[r0]
 3011                             	.LVL247:
 3012 046c 05 00 00 00             		bsr	__ZdlPv
 3013                             	.LVL248:
 3014                             	.LBE1038:
 3015                             	.LBE1037:
 3016                             	.LBE1036:
 641:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	_M_deallocate_node(*__n);
 3017                             		.loc 5 641 0
 3018 0470 ED 0A 1A                		mov.L	104[r0], r10
 3019 0473 47 7A                   		cmp	r7, r10
 3020 0475 24 F0                   		bgtu	.L188
 3021 0477 A8 09                   		mov.L	4[r0], r1
 3022                             	.LVL249:
 3023                             		.balign 8,3,3
 3024                             	.L186:
 3025                             	.LBE1035:
 3026                             	.LBE1034:
 3027                             	.LBB1040:
 3028                             	.LBB1041:
 3029                             	.LBB1042:
 110:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\ext\new_allocator.h **** 
 3030                             		.loc 6 110 0
 3031 0479 05 00 00 00             		bsr	__ZdlPv
 3032                             	.LVL250:
 3033 047d FC 13 00                		.balign 8,3,5
 3034                             	.L185:
 3035                             	.LBE1042:
 3036                             	.LBE1041:
 3037                             	.LBE1040:
 3038                             	.LBE1033:
 3039                             	.LBE1032:
 3040                             	.LBE1031:
 3041                             	.LBE984:
 3042                             	.LBE983:
 976:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         return instance;
 3043                             		.loc 4 976 0
 3044 0480 FB 12 00 00 00 00       		mov.L	#__ZGVZN9EventList11getInstanceEvE8instance, r1
 3045 0486 05 00 00 00             		bsr	___cxa_guard_release
 3046                             	.LVL251:
 3047 048a FB 22 00 00 00 00       		mov.L	#__ZZN9EventList11getInstanceEvE8instance, r2
 3048 0490 FB 32 00 00 00 00       		mov.L	#___dso_handle, r3
 3049 0496 FB 12 00 00 00 00       		mov.L	#__ZN9EventListD1Ev, r1
 3050 049c 05 00 00 00             		bsr	___cxa_atexit
 3051                             	.LVL252:
 3052 04a0 38 B0 FB                		bra	.L189
 3053                             	.LVL253:
 3054                             	.L309:
 3055                             	.LBE1062:
 3056                             	.LBE1279:
 3057                             	.LBB1280:
 3058                             	.LBB1276:
 123:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h ****         return instance;
 3059                             		.loc 3 123 0
 3060 04a3 EF A1                   		mov.L	r10, r1
 3061 04a5 05 00 00 00             		bsr	___cxa_guard_acquire
 3062                             	.LVL254:
 3063 04a9 61 01                   		cmp	#0, r1
 3064 04ab 3A 7D FE                		beq	.L233
 3065                             	.LVL255:
 3066                             	.LBE1276:
 3067                             	.LBB1277:
 3068                             	.LBB1278:
 3069 04ae EF A1                   		mov.L	r10, r1
 3070 04b0 05 00 00 00             		bsr	___cxa_guard_release
 3071                             	.LVL256:
 3072 04b4 FB 12 00 00 00 00       		mov.L	#__ZN6UMouseD1Ev, r1
 3073 04ba FB 22 00 00 00 00       		mov.L	#__ZZN6UMouse11getInstanceEvE8instance, r2
 3074 04c0 FB 32 00 00 00 00       		mov.L	#___dso_handle, r3
 3075 04c6 05 00 00 00             		bsr	___cxa_atexit
 3076                             	.LVL257:
 3077 04ca 38 5E FE                		bra	.L233
 3078                             	.LVL258:
 3079                             	.L227:
 3080                             	.LBE1278:
 3081                             	.LBE1277:
 3082                             	.LBE1280:
 3083                             	.LBB1281:
 3084                             	.LBB1273:
  29:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\gamepad.h ****         return instance;
 3085                             		.loc 1 29 0
 3086 04cd FB 12 00 00 00 00       		mov.L	#__ZGVZN7Gamepad11getInstanceEvE8instance, r1
 3087 04d3 05 00 00 00             		bsr	___cxa_guard_acquire
 3088                             	.LVL259:
 3089                             	.LBB1267:
 3090                             	.LBB1268:
 104:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\gamepad.h ****         cross_y = 0;
 3091                             		.loc 1 104 0
 3092 04d7 F9 02 18 00 00 00 00    		mov.L	#__ZZN7Gamepad11getInstanceEvE8instance, 96[r0]
 3093                             	.LVL260:
 3094                             	.LBE1268:
 3095                             	.LBE1267:
  29:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\gamepad.h ****         return instance;
 3096                             		.loc 1 29 0
 3097 04de 61 01                   		cmp	#0, r1
 3098 04e0 3A 38 FE                		beq	.L228
 3099                             	.LVL261:
 3100                             	.LBB1271:
 3101                             	.LBB1269:
 104:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\gamepad.h ****         cross_y = 0;
 3102                             		.loc 1 104 0
 3103 04e3 AE 0F                   		mov.L	100[r0], r7
 3104 04e5 AE 03                   		mov.L	96[r0], r3
 3105 04e7 C3 37                   		mov.B	r7, [r3]
 105:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\gamepad.h ****         L3D_x = 0;
 3106                             		.loc 1 105 0
 3107 04e9 80 3F                   		mov.B	r7, 1[r3]
 106:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\gamepad.h ****         R3D_x = 0;
 3108                             		.loc 1 106 0
 3109 04eb 80 B7                   		mov.B	r7, 2[r3]
 107:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\gamepad.h ****         R3D_y = 0;
 3110                             		.loc 1 107 0
 3111 04ed 81 37                   		mov.B	r7, 4[r3]
 108:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\gamepad.h ****         RT = 0;
 3112                             		.loc 1 108 0
 3113 04ef 81 3F                   		mov.B	r7, 5[r3]
 109:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\gamepad.h ****         LT = 0;
 3114                             		.loc 1 109 0
 3115 04f1 81 B7                   		mov.B	r7, 6[r3]
 110:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\gamepad.h ****         A  = 0;
 3116                             		.loc 1 110 0
 3117 04f3 81 BF                   		mov.B	r7, 7[r3]
 111:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\gamepad.h ****         B  = 0;
 3118                             		.loc 1 111 0
 3119 04f5 A0 B7                   		mov.L	r7, 8[r3]
 112:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\gamepad.h ****         Y  = 0;
 3120                             		.loc 1 112 0
 3121 04f7 A0 BF                   		mov.L	r7, 12[r3]
 113:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\gamepad.h ****         X  = 0;
 3122                             		.loc 1 113 0
 3123 04f9 A1 37                   		mov.L	r7, 16[r3]
 114:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\gamepad.h ****         RB = 0;
 3124                             		.loc 1 114 0
 3125 04fb A1 3F                   		mov.L	r7, 20[r3]
 115:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\gamepad.h ****         LB = 0;
 3126                             		.loc 1 115 0
 3127 04fd A1 B7                   		mov.L	r7, 24[r3]
 116:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\gamepad.h ****         BACK = 0;
 3128                             		.loc 1 116 0
 3129 04ff A1 BF                   		mov.L	r7, 28[r3]
 117:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\gamepad.h ****         START = 0;
 3130                             		.loc 1 117 0
 3131 0501 A2 37                   		mov.L	r7, 32[r3]
 3132                             	.LBE1269:
 3133                             	.LBE1271:
  29:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\gamepad.h ****         return instance;
 3134                             		.loc 1 29 0
 3135 0503 FB 12 00 00 00 00       		mov.L	#__ZGVZN7Gamepad11getInstanceEvE8instance, r1
 3136                             	.LBB1272:
 3137                             	.LBB1270:
 118:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\gamepad.h ****         conStatus = false;
 3138                             		.loc 1 118 0
 3139 0509 A2 3F                   		mov.L	r7, 36[r3]
 119:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\gamepad.h ****         preRecieveTime = 0;
 3140                             		.loc 1 119 0
 3141 050b C7 37 38                		mov.B	r7, 56[r3]
 120:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\gamepad.h ****     };
 3142                             		.loc 1 120 0
 3143 050e A3 BF                   		mov.L	r7, 60[r3]
 3144 0510 A4 37                   		mov.L	r7, 64[r3]
 3145                             	.LBE1270:
 3146                             	.LBE1272:
  29:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\gamepad.h ****         return instance;
 3147                             		.loc 1 29 0
 3148 0512 05 00 00 00             		bsr	___cxa_guard_release
 3149                             	.LVL262:
 3150 0516 FB 12 00 00 00 00       		mov.L	#__ZN7GamepadD1Ev, r1
 3151 051c AE 02                   		mov.L	96[r0], r2
 3152 051e FB 32 00 00 00 00       		mov.L	#___dso_handle, r3
 3153 0524 05 00 00 00             		bsr	___cxa_atexit
 3154                             	.LVL263:
 3155 0528 38 F0 FD                		bra	.L228
 3156                             	.LVL264:
 3157                             	.L308:
 3158                             	.LBE1273:
 3159                             	.LBE1281:
 3160                             	.LBB1282:
 3161                             	.LBB1093:
 3162                             	.LBB1090:
 3163                             	.LBB1087:
 3164                             	.LBB1071:
 3165                             	.LBB1072:
 3166                             	.LBB1073:
 3167                             	.LBB1074:
1397:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	  }
1398:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	else
1399:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	  _M_push_back_aux(__x);
1400:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       }
1401:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
1402:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** #if __cplusplus >= 201103L
1403:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       void
1404:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       push_back(value_type&& __x)
1405:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       { emplace_back(std::move(__x)); }
1406:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
1407:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       template<typename... _Args>
1408:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****         void
1409:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****         emplace_back(_Args&&... __args);
1410:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** #endif
1411:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
1412:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       /**
1413:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  @brief  Removes first element.
1414:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *
1415:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  This is a typical stack operation.  It shrinks the %deque by one.
1416:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *
1417:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  Note that no data is returned, and if the first element's data is
1418:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  needed, it should be retrieved before pop_front() is called.
1419:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        */
1420:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       void
1421:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       pop_front()
1422:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       {
1423:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	if (this->_M_impl._M_start._M_cur
1424:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	    != this->_M_impl._M_start._M_last - 1)
1425:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	  {
1426:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	    this->_M_impl.destroy(this->_M_impl._M_start._M_cur);
1427:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	    ++this->_M_impl._M_start._M_cur;
1428:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	  }
1429:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	else
1430:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	  _M_pop_front_aux();
1431:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       }
1432:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
1433:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       /**
1434:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  @brief  Removes last element.
1435:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *
1436:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  This is a typical stack operation.  It shrinks the %deque by one.
1437:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *
1438:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  Note that no data is returned, and if the last element's data is
1439:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  needed, it should be retrieved before pop_back() is called.
1440:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        */
1441:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       void
1442:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       pop_back()
1443:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       {
1444:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	if (this->_M_impl._M_finish._M_cur
1445:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	    != this->_M_impl._M_finish._M_first)
1446:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	  {
1447:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	    --this->_M_impl._M_finish._M_cur;
1448:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	    this->_M_impl.destroy(this->_M_impl._M_finish._M_cur);
1449:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	  }
1450:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	else
1451:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	  _M_pop_back_aux();
1452:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       }
1453:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
1454:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** #if __cplusplus >= 201103L
1455:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       /**
1456:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  @brief  Inserts an object in %deque before specified iterator.
1457:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  @param  __position  An iterator into the %deque.
1458:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  @param  __args  Arguments.
1459:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  @return  An iterator that points to the inserted data.
1460:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *
1461:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  This function will insert an object of type T constructed
1462:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  with T(std::forward<Args>(args)...) before the specified location.
1463:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        */
1464:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       template<typename... _Args>
1465:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****         iterator
1466:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****         emplace(iterator __position, _Args&&... __args);
1467:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** #endif
1468:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
1469:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       /**
1470:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  @brief  Inserts given value into %deque before specified iterator.
1471:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  @param  __position  An iterator into the %deque.
1472:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  @param  __x  Data to be inserted.
1473:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  @return  An iterator that points to the inserted data.
1474:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *
1475:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  This function will insert a copy of the given value before the
1476:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  specified location.
1477:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        */
1478:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       iterator
1479:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       insert(iterator __position, const value_type& __x);
1480:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
1481:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** #if __cplusplus >= 201103L
1482:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       /**
1483:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  @brief  Inserts given rvalue into %deque before specified iterator.
1484:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  @param  __position  An iterator into the %deque.
1485:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  @param  __x  Data to be inserted.
1486:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  @return  An iterator that points to the inserted data.
1487:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *
1488:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  This function will insert a copy of the given rvalue before the
1489:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  specified location.
1490:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        */
1491:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       iterator
1492:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       insert(iterator __position, value_type&& __x)
1493:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       { return emplace(__position, std::move(__x)); }
1494:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
1495:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       /**
1496:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  @brief  Inserts an initializer list into the %deque.
1497:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  @param  __p  An iterator into the %deque.
1498:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  @param  __l  An initializer_list.
1499:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *
1500:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  This function will insert copies of the data in the
1501:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  initializer_list @a __l into the %deque before the location
1502:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  specified by @a __p.  This is known as <em>list insert</em>.
1503:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        */
1504:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       void
1505:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       insert(iterator __p, initializer_list<value_type> __l)
1506:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       { this->insert(__p, __l.begin(), __l.end()); }
1507:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** #endif
1508:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
1509:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       /**
1510:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  @brief  Inserts a number of copies of given data into the %deque.
1511:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  @param  __position  An iterator into the %deque.
1512:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  @param  __n  Number of elements to be inserted.
1513:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  @param  __x  Data to be inserted.
1514:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *
1515:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  This function will insert a specified number of copies of the given
1516:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  data before the location specified by @a __position.
1517:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        */
1518:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       void
1519:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       insert(iterator __position, size_type __n, const value_type& __x)
1520:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       { _M_fill_insert(__position, __n, __x); }
1521:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
1522:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       /**
1523:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  @brief  Inserts a range into the %deque.
1524:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  @param  __position  An iterator into the %deque.
1525:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  @param  __first  An input iterator.
1526:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  @param  __last   An input iterator.
1527:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *
1528:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  This function will insert copies of the data in the range
1529:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  [__first,__last) into the %deque before the location specified
1530:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  by @a __position.  This is known as <em>range insert</em>.
1531:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        */
1532:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** #if __cplusplus >= 201103L
1533:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       template<typename _InputIterator,
1534:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	       typename = std::_RequireInputIter<_InputIterator>>
1535:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****         void
1536:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****         insert(iterator __position, _InputIterator __first,
1537:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	       _InputIterator __last)
1538:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****         { _M_insert_dispatch(__position, __first, __last, __false_type()); }
1539:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** #else
1540:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       template<typename _InputIterator>
1541:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****         void
1542:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****         insert(iterator __position, _InputIterator __first,
1543:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	       _InputIterator __last)
1544:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****         {
1545:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	  // Check whether it's an integral type.  If so, it's not an iterator.
1546:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	  typedef typename std::__is_integer<_InputIterator>::__type _Integral;
1547:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	  _M_insert_dispatch(__position, __first, __last, _Integral());
1548:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	}
1549:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** #endif
1550:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
1551:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       /**
1552:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  @brief  Remove element at given position.
1553:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  @param  __position  Iterator pointing to element to be erased.
1554:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  @return  An iterator pointing to the next element (or end()).
1555:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *
1556:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  This function will erase the element at the given position and thus
1557:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  shorten the %deque by one.
1558:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *
1559:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  The user is cautioned that
1560:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  this function only erases the element, and that if the element is
1561:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  itself a pointer, the pointed-to memory is not touched in any way.
1562:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  Managing the pointer is the user's responsibility.
1563:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        */
1564:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       iterator
1565:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       erase(iterator __position);
1566:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
1567:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       /**
1568:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  @brief  Remove a range of elements.
1569:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  @param  __first  Iterator pointing to the first element to be erased.
1570:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  @param  __last  Iterator pointing to one past the last element to be
1571:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *                erased.
1572:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  @return  An iterator pointing to the element pointed to by @a last
1573:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *           prior to erasing (or end()).
1574:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *
1575:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  This function will erase the elements in the range
1576:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  [__first,__last) and shorten the %deque accordingly.
1577:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *
1578:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  The user is cautioned that
1579:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  this function only erases the elements, and that if the elements
1580:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  themselves are pointers, the pointed-to memory is not touched in any
1581:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  way.  Managing the pointer is the user's responsibility.
1582:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        */
1583:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       iterator
1584:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       erase(iterator __first, iterator __last);
1585:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
1586:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       /**
1587:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  @brief  Swaps data with another %deque.
1588:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  @param  __x  A %deque of the same element and allocator types.
1589:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *
1590:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  This exchanges the elements between two deques in constant time.
1591:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  (Four pointers, so it should be quite fast.)
1592:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  Note that the global std::swap() function is specialized such that
1593:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  std::swap(d1,d2) will feed to this function.
1594:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        */
1595:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       void
1596:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       swap(deque& __x)
1597:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       {
1598:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	std::swap(this->_M_impl._M_start, __x._M_impl._M_start);
1599:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	std::swap(this->_M_impl._M_finish, __x._M_impl._M_finish);
1600:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	std::swap(this->_M_impl._M_map, __x._M_impl._M_map);
1601:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	std::swap(this->_M_impl._M_map_size, __x._M_impl._M_map_size);
1602:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
1603:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	// _GLIBCXX_RESOLVE_LIB_DEFECTS
1604:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	// 431. Swapping containers with unequal allocators.
1605:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	std::__alloc_swap<_Tp_alloc_type>::_S_do_it(_M_get_Tp_allocator(),
1606:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 						    __x._M_get_Tp_allocator());
1607:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       }
1608:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
1609:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       /**
1610:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  Erases all the elements.  Note that this function only erases the
1611:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  elements, and that if the elements themselves are pointers, the
1612:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  pointed-to memory is not touched in any way.  Managing the pointer is
1613:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  the user's responsibility.
1614:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        */
1615:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       void
1616:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       clear() _GLIBCXX_NOEXCEPT
1617:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       { _M_erase_at_end(begin()); }
1618:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
1619:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****     protected:
1620:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       // Internal constructor functions follow.
1621:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
1622:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       // called by the range constructor to implement [23.1.1]/9
1623:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
1624:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
1625:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       // 438. Ambiguity in the "do the right thing" clause
1626:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       template<typename _Integer>
1627:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****         void
1628:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****         _M_initialize_dispatch(_Integer __n, _Integer __x, __true_type)
1629:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****         {
1630:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	  _M_initialize_map(static_cast<size_type>(__n));
1631:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	  _M_fill_initialize(__x);
1632:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	}
1633:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
1634:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       // called by the range constructor to implement [23.1.1]/9
1635:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       template<typename _InputIterator>
1636:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****         void
1637:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****         _M_initialize_dispatch(_InputIterator __first, _InputIterator __last,
1638:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 			       __false_type)
1639:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****         {
1640:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	  typedef typename std::iterator_traits<_InputIterator>::
1641:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	    iterator_category _IterCategory;
1642:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	  _M_range_initialize(__first, __last, _IterCategory());
1643:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	}
1644:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
1645:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       // called by the second initialize_dispatch above
1646:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       //@{
1647:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       /**
1648:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  @brief Fills the deque with whatever is in [first,last).
1649:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  @param  __first  An input iterator.
1650:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  @param  __last  An input iterator.
1651:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  @return   Nothing.
1652:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *
1653:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  If the iterators are actually forward iterators (or better), then the
1654:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  memory layout can be done all at once.  Else we move forward using
1655:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  push_back on each value from the iterator.
1656:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        */
1657:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       template<typename _InputIterator>
1658:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****         void
1659:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****         _M_range_initialize(_InputIterator __first, _InputIterator __last,
1660:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 			    std::input_iterator_tag);
1661:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
1662:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       // called by the second initialize_dispatch above
1663:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       template<typename _ForwardIterator>
1664:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****         void
1665:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****         _M_range_initialize(_ForwardIterator __first, _ForwardIterator __last,
1666:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 			    std::forward_iterator_tag);
1667:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       //@}
1668:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
1669:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       /**
1670:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  @brief Fills the %deque with copies of value.
1671:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  @param  __value  Initial value.
1672:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  @return   Nothing.
1673:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  @pre _M_start and _M_finish have already been initialized,
1674:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  but none of the %deque's elements have yet been constructed.
1675:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *
1676:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  This function is called only when the user provides an explicit size
1677:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  (with or without an explicit exemplar value).
1678:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        */
1679:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       void
1680:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       _M_fill_initialize(const value_type& __value);
1681:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
1682:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** #if __cplusplus >= 201103L
1683:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       // called by deque(n).
1684:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       void
1685:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       _M_default_initialize();
1686:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** #endif
1687:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
1688:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       // Internal assign functions follow.  The *_aux functions do the actual
1689:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       // assignment work for the range versions.
1690:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
1691:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       // called by the range assign to implement [23.1.1]/9
1692:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
1693:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
1694:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       // 438. Ambiguity in the "do the right thing" clause
1695:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       template<typename _Integer>
1696:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****         void
1697:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****         _M_assign_dispatch(_Integer __n, _Integer __val, __true_type)
1698:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****         { _M_fill_assign(__n, __val); }
1699:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
1700:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       // called by the range assign to implement [23.1.1]/9
1701:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       template<typename _InputIterator>
1702:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****         void
1703:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****         _M_assign_dispatch(_InputIterator __first, _InputIterator __last,
1704:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 			   __false_type)
1705:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****         {
1706:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	  typedef typename std::iterator_traits<_InputIterator>::
1707:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	    iterator_category _IterCategory;
1708:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	  _M_assign_aux(__first, __last, _IterCategory());
1709:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	}
1710:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
1711:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       // called by the second assign_dispatch above
1712:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       template<typename _InputIterator>
1713:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****         void
1714:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****         _M_assign_aux(_InputIterator __first, _InputIterator __last,
1715:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 		      std::input_iterator_tag);
1716:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
1717:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       // called by the second assign_dispatch above
1718:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       template<typename _ForwardIterator>
1719:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****         void
1720:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****         _M_assign_aux(_ForwardIterator __first, _ForwardIterator __last,
1721:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 		      std::forward_iterator_tag)
1722:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****         {
1723:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	  const size_type __len = std::distance(__first, __last);
1724:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	  if (__len > size())
1725:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	    {
1726:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	      _ForwardIterator __mid = __first;
1727:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	      std::advance(__mid, size());
1728:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	      std::copy(__first, __mid, begin());
1729:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	      insert(end(), __mid, __last);
1730:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	    }
1731:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	  else
1732:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	    _M_erase_at_end(std::copy(__first, __last, begin()));
1733:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	}
1734:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
1735:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       // Called by assign(n,t), and the range assign when it turns out
1736:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       // to be the same thing.
1737:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       void
1738:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       _M_fill_assign(size_type __n, const value_type& __val)
1739:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       {
1740:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	if (__n > size())
1741:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	  {
1742:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	    std::fill(begin(), end(), __val);
1743:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	    insert(end(), __n - size(), __val);
1744:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	  }
1745:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	else
1746:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	  {
1747:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	    _M_erase_at_end(begin() + difference_type(__n));
1748:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	    std::fill(begin(), end(), __val);
1749:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	  }
1750:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       }
1751:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
1752:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       //@{
1753:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       /// Helper functions for push_* and pop_*.
1754:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** #if __cplusplus < 201103L
1755:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       void _M_push_back_aux(const value_type&);
1756:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
1757:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       void _M_push_front_aux(const value_type&);
1758:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** #else
1759:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       template<typename... _Args>
1760:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****         void _M_push_back_aux(_Args&&... __args);
1761:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
1762:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       template<typename... _Args>
1763:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****         void _M_push_front_aux(_Args&&... __args);
1764:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** #endif
1765:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
1766:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       void _M_pop_back_aux();
1767:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
1768:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       void _M_pop_front_aux();
1769:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       //@}
1770:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
1771:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       // Internal insert functions follow.  The *_aux functions do the actual
1772:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       // insertion work when all shortcuts fail.
1773:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
1774:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       // called by the range insert to implement [23.1.1]/9
1775:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
1776:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
1777:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       // 438. Ambiguity in the "do the right thing" clause
1778:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       template<typename _Integer>
1779:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****         void
1780:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****         _M_insert_dispatch(iterator __pos,
1781:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 			   _Integer __n, _Integer __x, __true_type)
1782:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****         { _M_fill_insert(__pos, __n, __x); }
1783:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
1784:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       // called by the range insert to implement [23.1.1]/9
1785:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       template<typename _InputIterator>
1786:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****         void
1787:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****         _M_insert_dispatch(iterator __pos,
1788:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 			   _InputIterator __first, _InputIterator __last,
1789:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 			   __false_type)
1790:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****         {
1791:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	  typedef typename std::iterator_traits<_InputIterator>::
1792:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	    iterator_category _IterCategory;
1793:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****           _M_range_insert_aux(__pos, __first, __last, _IterCategory());
1794:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	}
1795:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
1796:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       // called by the second insert_dispatch above
1797:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       template<typename _InputIterator>
1798:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****         void
1799:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****         _M_range_insert_aux(iterator __pos, _InputIterator __first,
1800:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 			    _InputIterator __last, std::input_iterator_tag);
1801:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
1802:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       // called by the second insert_dispatch above
1803:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       template<typename _ForwardIterator>
1804:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****         void
1805:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****         _M_range_insert_aux(iterator __pos, _ForwardIterator __first,
1806:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 			    _ForwardIterator __last, std::forward_iterator_tag);
1807:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
1808:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       // Called by insert(p,n,x), and the range insert when it turns out to be
1809:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       // the same thing.  Can use fill functions in optimal situations,
1810:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       // otherwise passes off to insert_aux(p,n,x).
1811:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       void
1812:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       _M_fill_insert(iterator __pos, size_type __n, const value_type& __x);
1813:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
1814:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       // called by insert(p,x)
1815:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** #if __cplusplus < 201103L
1816:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       iterator
1817:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       _M_insert_aux(iterator __pos, const value_type& __x);
1818:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** #else
1819:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       template<typename... _Args>
1820:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****         iterator
1821:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****         _M_insert_aux(iterator __pos, _Args&&... __args);
1822:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** #endif
1823:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
1824:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       // called by insert(p,n,x) via fill_insert
1825:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       void
1826:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       _M_insert_aux(iterator __pos, size_type __n, const value_type& __x);
1827:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
1828:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       // called by range_insert_aux for forward iterators
1829:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       template<typename _ForwardIterator>
1830:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****         void
1831:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****         _M_insert_aux(iterator __pos,
1832:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 		      _ForwardIterator __first, _ForwardIterator __last,
1833:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 		      size_type __n);
1834:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
1835:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
1836:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       // Internal erase functions follow.
1837:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
1838:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       void
1839:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       _M_destroy_data_aux(iterator __first, iterator __last);
1840:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
1841:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       // Called by ~deque().
1842:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       // NB: Doesn't deallocate the nodes.
1843:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       template<typename _Alloc1>
1844:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****         void
1845:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****         _M_destroy_data(iterator __first, iterator __last, const _Alloc1&)
1846:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****         { _M_destroy_data_aux(__first, __last); }
1847:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
1848:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       void
1849:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       _M_destroy_data(iterator __first, iterator __last,
1850:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 		      const std::allocator<_Tp>&)
1851:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       {
1852:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	if (!__has_trivial_destructor(value_type))
1853:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	  _M_destroy_data_aux(__first, __last);
1854:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       }
1855:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
1856:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       // Called by erase(q1, q2).
1857:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       void
1858:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       _M_erase_at_begin(iterator __pos)
1859:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       {
1860:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	_M_destroy_data(begin(), __pos, _M_get_Tp_allocator());
1861:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	_M_destroy_nodes(this->_M_impl._M_start._M_node, __pos._M_node);
1862:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	this->_M_impl._M_start = __pos;
1863:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       }
1864:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
1865:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       // Called by erase(q1, q2), resize(), clear(), _M_assign_aux,
1866:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       // _M_fill_assign, operator=.
1867:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       void
1868:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       _M_erase_at_end(iterator __pos)
1869:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       {
1870:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	_M_destroy_data(__pos, end(), _M_get_Tp_allocator());
1871:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	_M_destroy_nodes(__pos._M_node + 1,
1872:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 			 this->_M_impl._M_finish._M_node + 1);
1873:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	this->_M_impl._M_finish = __pos;
1874:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       }
1875:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
1876:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** #if __cplusplus >= 201103L
1877:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       // Called by resize(sz).
1878:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       void
1879:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       _M_default_append(size_type __n);
1880:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
1881:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       bool
1882:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       _M_shrink_to_fit();
1883:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** #endif
1884:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
1885:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       //@{
1886:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       /// Memory-handling helpers for the previous internal insert functions.
1887:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       iterator
1888:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       _M_reserve_elements_at_front(size_type __n)
1889:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       {
1890:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	const size_type __vacancies = this->_M_impl._M_start._M_cur
1891:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	                              - this->_M_impl._M_start._M_first;
1892:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	if (__n > __vacancies)
1893:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	  _M_new_elements_at_front(__n - __vacancies);
1894:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	return this->_M_impl._M_start - difference_type(__n);
1895:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       }
1896:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
1897:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       iterator
1898:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       _M_reserve_elements_at_back(size_type __n)
1899:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       {
1900:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	const size_type __vacancies = (this->_M_impl._M_finish._M_last
1901:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 				       - this->_M_impl._M_finish._M_cur) - 1;
1902:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	if (__n > __vacancies)
1903:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	  _M_new_elements_at_back(__n - __vacancies);
1904:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	return this->_M_impl._M_finish + difference_type(__n);
1905:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       }
1906:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
1907:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       void
1908:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       _M_new_elements_at_front(size_type __new_elements);
1909:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
1910:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       void
1911:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       _M_new_elements_at_back(size_type __new_elements);
1912:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       //@}
1913:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
1914:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
1915:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       //@{
1916:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       /**
1917:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  @brief Memory-handling helpers for the major %map.
1918:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *
1919:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  Makes sure the _M_map has space for new nodes.  Does not
1920:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  actually add the nodes.  Can invalidate _M_map pointers.
1921:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  (And consequently, %deque iterators.)
1922:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        */
1923:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       void
1924:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       _M_reserve_map_at_back(size_type __nodes_to_add = 1)
1925:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       {
1926:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
 3168                             		.loc 5 1926 0
 3169 052b FB 32 00 00 00 00       		mov.L	#__ZZN9EventList11getInstanceEvE8instance, r3
 3170 0531 ED 3A 09                		mov.L	36[r3], r10
 3171 0534 EC 37                   		mov.L	[r3], r7
 3172 0536 FF 07 7A                		sub	r7, r10, r7
 3173 0539 6A 27                   		shar	#2, r7
 3174 053b 7E 17                   		neg	r7
 3175 053d 06 89 37 01             		add	4[r3].L, r7
 3176 0541 61 17                   		cmp	#1, r7
 3177 0543 24 05 38 2C 02          		bleu	.L310
 3178 0548 E7 0A 1A                		mov.L	r10, 104[r0]
 3179                             	.LVL265:
 3180                             		.balign 8,3,4
 3181                             	.L200:
 3182                             	.LBE1074:
 3183                             	.LBE1073:
 3184                             	.LBB1076:
 3185                             	.LBB1077:
 3186                             	.LBB1078:
 104:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\ext\new_allocator.h ****       }
 3187                             		.loc 6 104 0
 3188 054b F9 06 0C FF             		mov.L	#-1, 48[r0]
 3189 054f FB 1A 00 02             		mov.L	#0x200, r1
 3190 0553 05 00 00 00             		bsr	__Znwm
 3191                             	.LVL266:
 3192                             	.LBE1078:
 3193                             	.LBE1077:
 3194                             	.LBE1076:
 447:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	__try
 3195                             		.loc 7 447 0
 3196 0557 ED 0A 1A                		mov.L	104[r0], r10
 3197 055a E7 A1 01                		mov.L	r1, 4[r10]
 451:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 				    std::forward<_Args>(__args)...);
 3198                             		.loc 7 451 0
 3199 055d ED 0B 19                		mov.L	100[r0], r11
 3200 0560 ED B7 06                		mov.L	24[r11], r7
 3201                             	.LVL267:
 3202                             	.LBB1079:
 3203                             	.LBB1080:
 3204                             		.loc 6 120 0
 3205 0563 61 07                   		cmp	#0, r7
 3206 0565 14                      		beq	.L201
 3207 0566 E1 07 18                		mov.L	96[r0], [r7]
 3208                             		.balign 8,3,1
 3209                             	.L201:
 3210                             	.LBE1080:
 3211                             	.LBE1079:
 456:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 						+ 1);
 3212                             		.loc 7 456 0
 3213 0569 ED 0C 19                		mov.L	100[r0], r12
 3214 056c ED C7 09                		mov.L	36[r12], r7
 3215                             	.LVL268:
 3216 056f 71 7A 04                		add	#4, r7, r10
 3217                             	.LVL269:
 3218                             	.LBB1081:
 3219                             	.LBB1082:
 236:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	_M_first = *__new_node;
 3220                             		.loc 5 236 0
 3221 0572 E7 CA 09                		mov.L	r10, 36[r12]
 237:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	_M_last = _M_first + difference_type(_S_buffer_size());
 3222                             		.loc 5 237 0
 3223 0575 A8 7F                   		mov.L	4[r7], r7
 238:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       }
 3224                             		.loc 5 238 0
 3225 0577 72 7A 00 02             		add	#0x200, r7, r10
 3226                             	.LVL270:
 237:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	_M_last = _M_first + difference_type(_S_buffer_size());
 3227                             		.loc 5 237 0
 3228 057b E7 C7 07                		mov.L	r7, 28[r12]
 3229                             	.LVL271:
 238:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       }
 3230                             		.loc 5 238 0
 3231 057e E7 CA 08                		mov.L	r10, 32[r12]
 3232                             	.LBE1082:
 3233                             	.LBE1081:
 458:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	  }
 3234                             		.loc 7 458 0
 3235 0581 E7 C7 06                		mov.L	r7, 24[r12]
 3236 0584 38 2E FB                		bra	.L199
 3237                             	.LVL272:
 3238                             	.L202:
 3239                             	.LBE1072:
 3240                             	.LBE1071:
 3241                             	.LBE1087:
 3242                             	.LBE1090:
 3243                             	.LBE1093:
 3244                             	.LBE1282:
 3245                             	.LBB1283:
 3246                             	.LBB1129:
 3247                             	.LBB1126:
 3248                             	.LBB1123:
 3249                             	.LBB1107:
 3250                             	.LBB1108:
 3251                             	.LBB1109:
 3252                             	.LBB1110:
 3253                             		.loc 5 1926 0
 3254 0587 FB 32 00 00 00 00       		mov.L	#__ZZN9EventList11getInstanceEvE8instance, r3
 3255 058d ED 3A 09                		mov.L	36[r3], r10
 3256                             	.LVL273:
 3257 0590 EC 37                   		mov.L	[r3], r7
 3258 0592 FF 07 7A                		sub	r7, r10, r7
 3259 0595 6A 27                   		shar	#2, r7
 3260 0597 7E 17                   		neg	r7
 3261 0599 06 89 37 01             		add	4[r3].L, r7
 3262 059d 61 17                   		cmp	#1, r7
 3263 059f 24 05 38 B6 01          		bleu	.L311
 3264 05a4 E7 0A 1A                		mov.L	r10, 104[r0]
 3265 05a7 03                      		.balign 8,3,4
 3266                             	.L205:
 3267                             	.LVL274:
 3268                             	.LBE1110:
 3269                             	.LBE1109:
 3270                             	.LBB1112:
 3271                             	.LBB1113:
 3272                             	.LBB1114:
 104:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\ext\new_allocator.h ****       }
 3273                             		.loc 6 104 0
 3274 05a8 F9 06 0C FF             		mov.L	#-1, 48[r0]
 3275 05ac FB 1A 00 02             		mov.L	#0x200, r1
 3276 05b0 05 00 00 00             		bsr	__Znwm
 3277                             	.LVL275:
 3278                             	.LBE1114:
 3279                             	.LBE1113:
 3280                             	.LBE1112:
 447:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	__try
 3281                             		.loc 7 447 0
 3282 05b4 ED 0A 1A                		mov.L	104[r0], r10
 3283 05b7 E7 A1 01                		mov.L	r1, 4[r10]
 451:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 				    std::forward<_Args>(__args)...);
 3284                             		.loc 7 451 0
 3285 05ba ED 0B 19                		mov.L	100[r0], r11
 3286 05bd ED B7 06                		mov.L	24[r11], r7
 3287                             	.LVL276:
 3288                             	.LBB1115:
 3289                             	.LBB1116:
 3290                             		.loc 6 120 0
 3291 05c0 61 07                   		cmp	#0, r7
 3292 05c2 14                      		beq	.L206
 3293 05c3 E1 07 18                		mov.L	96[r0], [r7]
 3294                             		.balign 8,3,1
 3295                             	.L206:
 3296                             	.LBE1116:
 3297                             	.LBE1115:
 456:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 						+ 1);
 3298                             		.loc 7 456 0
 3299 05c6 ED 0C 19                		mov.L	100[r0], r12
 3300 05c9 ED C7 09                		mov.L	36[r12], r7
 3301                             	.LVL277:
 3302 05cc 71 7A 04                		add	#4, r7, r10
 3303                             	.LVL278:
 3304                             	.LBB1117:
 3305                             	.LBB1118:
 236:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	_M_first = *__new_node;
 3306                             		.loc 5 236 0
 3307 05cf E7 CA 09                		mov.L	r10, 36[r12]
 237:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	_M_last = _M_first + difference_type(_S_buffer_size());
 3308                             		.loc 5 237 0
 3309 05d2 A8 7F                   		mov.L	4[r7], r7
 238:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       }
 3310                             		.loc 5 238 0
 3311 05d4 72 7A 00 02             		add	#0x200, r7, r10
 3312                             	.LVL279:
 237:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	_M_last = _M_first + difference_type(_S_buffer_size());
 3313                             		.loc 5 237 0
 3314 05d8 E7 C7 07                		mov.L	r7, 28[r12]
 3315                             	.LVL280:
 238:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       }
 3316                             		.loc 5 238 0
 3317 05db E7 CA 08                		mov.L	r10, 32[r12]
 3318                             	.LBE1118:
 3319                             	.LBE1117:
 458:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	  }
 3320                             		.loc 7 458 0
 3321 05de E7 C7 06                		mov.L	r7, 24[r12]
 3322 05e1 38 8F FB                		bra	.L204
 3323                             	.LVL281:
 3324                             	.L207:
 3325                             	.LBE1108:
 3326                             	.LBE1107:
 3327                             	.LBE1123:
 3328                             	.LBE1126:
 3329                             	.LBE1129:
 3330                             	.LBE1283:
 3331                             	.LBB1284:
 3332                             	.LBB1161:
 3333                             	.LBB1158:
 3334                             	.LBB1155:
 3335                             	.LBB1139:
 3336                             	.LBB1140:
 3337                             	.LBB1141:
 3338                             	.LBB1142:
 3339                             		.loc 5 1926 0
 3340 05e4 FB C2 00 00 00 00       		mov.L	#__ZZN9EventList11getInstanceEvE8instance, r12
 3341 05ea ED CA 09                		mov.L	36[r12], r10
 3342 05ed EC C7                   		mov.L	[r12], r7
 3343 05ef FF 07 7A                		sub	r7, r10, r7
 3344 05f2 6A 27                   		shar	#2, r7
 3345 05f4 7E 17                   		neg	r7
 3346 05f6 06 89 C7 01             		add	4[r12].L, r7
 3347 05fa 61 17                   		cmp	#1, r7
 3348 05fc 24 05 38 CC 01          		bleu	.L312
 3349 0601 E7 0A 1A                		mov.L	r10, 104[r0]
 3350                             	.LVL282:
 3351 0604 76 10 01 00             		.balign 8,3,4
 3352                             	.L210:
 3353                             	.LBE1142:
 3354                             	.LBE1141:
 3355                             	.LBB1144:
 3356                             	.LBB1145:
 3357                             	.LBB1146:
 104:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\ext\new_allocator.h ****       }
 3358                             		.loc 6 104 0
 3359 0608 F9 06 0C FF             		mov.L	#-1, 48[r0]
 3360 060c FB 1A 00 02             		mov.L	#0x200, r1
 3361 0610 05 00 00 00             		bsr	__Znwm
 3362                             	.LVL283:
 3363                             	.LBE1146:
 3364                             	.LBE1145:
 3365                             	.LBE1144:
 447:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	__try
 3366                             		.loc 7 447 0
 3367 0614 AE 83                   		mov.L	104[r0], r3
 3368 0616 A0 39                   		mov.L	r1, 4[r3]
 451:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 				    std::forward<_Args>(__args)...);
 3369                             		.loc 7 451 0
 3370 0618 ED 0A 19                		mov.L	100[r0], r10
 3371 061b ED A7 06                		mov.L	24[r10], r7
 3372                             	.LVL284:
 3373                             	.LBB1147:
 3374                             	.LBB1148:
 3375                             		.loc 6 120 0
 3376 061e 61 07                   		cmp	#0, r7
 3377 0620 14                      		beq	.L211
 3378 0621 E1 07 18                		mov.L	96[r0], [r7]
 3379                             		.balign 8,3,1
 3380                             	.L211:
 3381                             	.LBE1148:
 3382                             	.LBE1147:
 456:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 						+ 1);
 3383                             		.loc 7 456 0
 3384 0624 ED 0B 19                		mov.L	100[r0], r11
 3385 0627 ED B7 09                		mov.L	36[r11], r7
 3386                             	.LVL285:
 3387 062a 71 7A 04                		add	#4, r7, r10
 3388                             	.LVL286:
 3389                             	.LBB1149:
 3390                             	.LBB1150:
 236:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	_M_first = *__new_node;
 3391                             		.loc 5 236 0
 3392 062d E7 BA 09                		mov.L	r10, 36[r11]
 237:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	_M_last = _M_first + difference_type(_S_buffer_size());
 3393                             		.loc 5 237 0
 3394 0630 A8 7F                   		mov.L	4[r7], r7
 238:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       }
 3395                             		.loc 5 238 0
 3396 0632 72 7A 00 02             		add	#0x200, r7, r10
 3397                             	.LVL287:
 237:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	_M_last = _M_first + difference_type(_S_buffer_size());
 3398                             		.loc 5 237 0
 3399 0636 E7 B7 07                		mov.L	r7, 28[r11]
 3400                             	.LVL288:
 238:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       }
 3401                             		.loc 5 238 0
 3402 0639 E7 BA 08                		mov.L	r10, 32[r11]
 3403                             	.LBE1150:
 3404                             	.LBE1149:
 458:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	  }
 3405                             		.loc 7 458 0
 3406 063c E7 B7 06                		mov.L	r7, 24[r11]
 3407 063f 38 92 FB                		bra	.L209
 3408                             	.LVL289:
 3409                             	.L212:
 3410                             	.LBE1140:
 3411                             	.LBE1139:
 3412                             	.LBE1155:
 3413                             	.LBE1158:
 3414                             	.LBE1161:
 3415                             	.LBE1284:
 3416                             	.LBB1285:
 3417                             	.LBB1194:
 3418                             	.LBB1191:
 3419                             	.LBB1188:
 3420                             	.LBB1172:
 3421                             	.LBB1173:
 3422                             	.LBB1174:
 3423                             	.LBB1175:
 3424                             		.loc 5 1926 0
 3425 0642 FB B2 00 00 00 00       		mov.L	#__ZZN9EventList11getInstanceEvE8instance, r11
 3426 0648 ED BA 09                		mov.L	36[r11], r10
 3427 064b EC B7                   		mov.L	[r11], r7
 3428 064d FF 07 7A                		sub	r7, r10, r7
 3429 0650 6A 27                   		shar	#2, r7
 3430 0652 7E 17                   		neg	r7
 3431 0654 06 89 B7 01             		add	4[r11].L, r7
 3432 0658 61 17                   		cmp	#1, r7
 3433 065a 24 05 38 59 01          		bleu	.L313
 3434 065f E7 0A 1A                		mov.L	r10, 104[r0]
 3435                             	.LVL290:
 3436                             		.balign 8,3,4
 3437                             	.L215:
 3438                             	.LBE1175:
 3439                             	.LBE1174:
 3440                             	.LBB1177:
 3441                             	.LBB1178:
 3442                             	.LBB1179:
 104:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\ext\new_allocator.h ****       }
 3443                             		.loc 6 104 0
 3444 0662 F9 06 0C FF             		mov.L	#-1, 48[r0]
 3445 0666 FB 1A 00 02             		mov.L	#0x200, r1
 3446 066a 05 00 00 00             		bsr	__Znwm
 3447                             	.LVL291:
 3448                             	.LBE1179:
 3449                             	.LBE1178:
 3450                             	.LBE1177:
 447:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	__try
 3451                             		.loc 7 447 0
 3452 066e ED 0C 1A                		mov.L	104[r0], r12
 3453 0671 E7 C1 01                		mov.L	r1, 4[r12]
 451:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 				    std::forward<_Args>(__args)...);
 3454                             		.loc 7 451 0
 3455 0674 AE 0B                   		mov.L	100[r0], r3
 3456 0676 A9 B7                   		mov.L	24[r3], r7
 3457                             	.LVL292:
 3458                             	.LBB1180:
 3459                             	.LBB1181:
 3460                             		.loc 6 120 0
 3461 0678 61 07                   		cmp	#0, r7
 3462 067a 14                      		beq	.L216
 3463 067b E1 07 18                		mov.L	96[r0], [r7]
 3464                             		.balign 8,3,1
 3465                             	.L216:
 3466                             	.LBE1181:
 3467                             	.LBE1180:
 456:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 						+ 1);
 3468                             		.loc 7 456 0
 3469 067e ED 0A 19                		mov.L	100[r0], r10
 3470 0681 ED A7 09                		mov.L	36[r10], r7
 3471                             	.LVL293:
 3472 0684 71 7A 04                		add	#4, r7, r10
 3473                             	.LVL294:
 3474                             	.LBB1182:
 3475                             	.LBB1183:
 236:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	_M_first = *__new_node;
 3476                             		.loc 5 236 0
 3477 0687 ED 0B 19                		mov.L	100[r0], r11
 3478 068a E7 BA 09                		mov.L	r10, 36[r11]
 237:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	_M_last = _M_first + difference_type(_S_buffer_size());
 3479                             		.loc 5 237 0
 3480 068d A8 7F                   		mov.L	4[r7], r7
 238:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       }
 3481                             		.loc 5 238 0
 3482 068f 72 7A 00 02             		add	#0x200, r7, r10
 3483                             	.LVL295:
 237:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	_M_last = _M_first + difference_type(_S_buffer_size());
 3484                             		.loc 5 237 0
 3485 0693 E7 B7 07                		mov.L	r7, 28[r11]
 3486                             	.LVL296:
 238:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       }
 3487                             		.loc 5 238 0
 3488 0696 E7 BA 08                		mov.L	r10, 32[r11]
 3489                             	.LBE1183:
 3490                             	.LBE1182:
 458:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	  }
 3491                             		.loc 7 458 0
 3492 0699 E7 B7 06                		mov.L	r7, 24[r11]
 3493 069c 38 9C FB                		bra	.L214
 3494                             	.LVL297:
 3495                             	.L217:
 3496                             	.LBE1173:
 3497                             	.LBE1172:
 3498                             	.LBE1188:
 3499                             	.LBE1191:
 3500                             	.LBE1194:
 3501                             	.LBE1285:
 3502                             	.LBB1286:
 3503                             	.LBB1227:
 3504                             	.LBB1224:
 3505                             	.LBB1221:
 3506                             	.LBB1205:
 3507                             	.LBB1206:
 3508                             	.LBB1207:
 3509                             	.LBB1208:
 3510                             		.loc 5 1926 0
 3511 069f FB B2 00 00 00 00       		mov.L	#__ZZN9EventList11getInstanceEvE8instance, r11
 3512 06a5 ED BA 09                		mov.L	36[r11], r10
 3513 06a8 EC B7                   		mov.L	[r11], r7
 3514 06aa FF 07 7A                		sub	r7, r10, r7
 3515 06ad 6A 27                   		shar	#2, r7
 3516 06af 7E 17                   		neg	r7
 3517 06b1 06 89 B7 01             		add	4[r11].L, r7
 3518 06b5 61 17                   		cmp	#1, r7
 3519 06b7 24 05 38 E7 00          		bleu	.L314
 3520 06bc E7 0A 1A                		mov.L	r10, 104[r0]
 3521                             	.LVL298:
 3522 06bf 03                      		.balign 8,3,4
 3523                             	.L220:
 3524                             	.LBE1208:
 3525                             	.LBE1207:
 3526                             	.LBB1210:
 3527                             	.LBB1211:
 3528                             	.LBB1212:
 104:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\ext\new_allocator.h ****       }
 3529                             		.loc 6 104 0
 3530 06c0 F9 06 0C FF             		mov.L	#-1, 48[r0]
 3531 06c4 FB 1A 00 02             		mov.L	#0x200, r1
 3532 06c8 05 00 00 00             		bsr	__Znwm
 3533                             	.LVL299:
 3534                             	.LBE1212:
 3535                             	.LBE1211:
 3536                             	.LBE1210:
 447:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	__try
 3537                             		.loc 7 447 0
 3538 06cc ED 0C 1A                		mov.L	104[r0], r12
 3539 06cf E7 C1 01                		mov.L	r1, 4[r12]
 451:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 				    std::forward<_Args>(__args)...);
 3540                             		.loc 7 451 0
 3541 06d2 AE 0B                   		mov.L	100[r0], r3
 3542 06d4 A9 B7                   		mov.L	24[r3], r7
 3543                             	.LVL300:
 3544                             	.LBB1213:
 3545                             	.LBB1214:
 3546                             		.loc 6 120 0
 3547 06d6 61 07                   		cmp	#0, r7
 3548 06d8 14                      		beq	.L221
 3549 06d9 E1 07 18                		mov.L	96[r0], [r7]
 3550                             		.balign 8,3,1
 3551                             	.L221:
 3552                             	.LBE1214:
 3553                             	.LBE1213:
 456:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 						+ 1);
 3554                             		.loc 7 456 0
 3555 06dc ED 0A 19                		mov.L	100[r0], r10
 3556 06df ED A7 09                		mov.L	36[r10], r7
 3557                             	.LVL301:
 3558 06e2 71 7A 04                		add	#4, r7, r10
 3559                             	.LVL302:
 3560                             	.LBB1215:
 3561                             	.LBB1216:
 236:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	_M_first = *__new_node;
 3562                             		.loc 5 236 0
 3563 06e5 ED 0B 19                		mov.L	100[r0], r11
 3564 06e8 E7 BA 09                		mov.L	r10, 36[r11]
 237:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	_M_last = _M_first + difference_type(_S_buffer_size());
 3565                             		.loc 5 237 0
 3566 06eb A8 7F                   		mov.L	4[r7], r7
 238:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       }
 3567                             		.loc 5 238 0
 3568 06ed 72 7A 00 02             		add	#0x200, r7, r10
 3569                             	.LVL303:
 237:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	_M_last = _M_first + difference_type(_S_buffer_size());
 3570                             		.loc 5 237 0
 3571 06f1 E7 B7 07                		mov.L	r7, 28[r11]
 3572                             	.LVL304:
 238:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       }
 3573                             		.loc 5 238 0
 3574 06f4 E7 BA 08                		mov.L	r10, 32[r11]
 3575                             	.LBE1216:
 3576                             	.LBE1215:
 458:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	  }
 3577                             		.loc 7 458 0
 3578 06f7 E7 B7 06                		mov.L	r7, 24[r11]
 3579 06fa 38 A1 FB                		bra	.L219
 3580                             	.LVL305:
 3581                             	.L222:
 3582                             	.LBE1206:
 3583                             	.LBE1205:
 3584                             	.LBE1221:
 3585                             	.LBE1224:
 3586                             	.LBE1227:
 3587                             	.LBE1286:
 3588                             	.LBB1287:
 3589                             	.LBB1260:
 3590                             	.LBB1257:
 3591                             	.LBB1254:
 3592                             	.LBB1238:
 3593                             	.LBB1239:
 3594                             	.LBB1240:
 3595                             	.LBB1241:
 3596                             		.loc 5 1926 0
 3597 06fd FB B2 00 00 00 00       		mov.L	#__ZZN9EventList11getInstanceEvE8instance, r11
 3598 0703 ED BA 09                		mov.L	36[r11], r10
 3599 0706 EC B7                   		mov.L	[r11], r7
 3600 0708 FF 07 7A                		sub	r7, r10, r7
 3601 070b 6A 27                   		shar	#2, r7
 3602 070d 7E 17                   		neg	r7
 3603 070f 06 89 B7 01             		add	4[r11].L, r7
 3604 0713 61 17                   		cmp	#1, r7
 3605 0715 25 76                   		bleu	.L315
 3606 0717 E7 0A 1A                		mov.L	r10, 104[r0]
 3607                             	.LVL306:
 3608                             		.balign 8,3,4
 3609                             	.L225:
 3610                             	.LBE1241:
 3611                             	.LBE1240:
 3612                             	.LBB1243:
 3613                             	.LBB1244:
 3614                             	.LBB1245:
 104:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\ext\new_allocator.h ****       }
 3615                             		.loc 6 104 0
 3616 071a F9 06 0C FF             		mov.L	#-1, 48[r0]
 3617 071e FB 1A 00 02             		mov.L	#0x200, r1
 3618 0722 05 00 00 00             		bsr	__Znwm
 3619                             	.LVL307:
 3620                             	.LBE1245:
 3621                             	.LBE1244:
 3622                             	.LBE1243:
 447:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	__try
 3623                             		.loc 7 447 0
 3624 0726 ED 0C 1A                		mov.L	104[r0], r12
 3625 0729 E7 C1 01                		mov.L	r1, 4[r12]
 451:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 				    std::forward<_Args>(__args)...);
 3626                             		.loc 7 451 0
 3627 072c AE 0B                   		mov.L	100[r0], r3
 3628 072e A9 B7                   		mov.L	24[r3], r7
 3629                             	.LVL308:
 3630                             	.LBB1246:
 3631                             	.LBB1247:
 3632                             		.loc 6 120 0
 3633 0730 61 07                   		cmp	#0, r7
 3634 0732 14                      		beq	.L226
 3635 0733 E1 07 18                		mov.L	96[r0], [r7]
 3636                             		.balign 8,3,1
 3637                             	.L226:
 3638                             	.LBE1247:
 3639                             	.LBE1246:
 456:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 						+ 1);
 3640                             		.loc 7 456 0
 3641 0736 ED 0A 19                		mov.L	100[r0], r10
 3642 0739 ED A7 09                		mov.L	36[r10], r7
 3643                             	.LVL309:
 3644 073c 71 7A 04                		add	#4, r7, r10
 3645                             	.LVL310:
 3646                             	.LBB1248:
 3647                             	.LBB1249:
 236:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	_M_first = *__new_node;
 3648                             		.loc 5 236 0
 3649 073f ED 0B 19                		mov.L	100[r0], r11
 3650 0742 E7 BA 09                		mov.L	r10, 36[r11]
 237:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	_M_last = _M_first + difference_type(_S_buffer_size());
 3651                             		.loc 5 237 0
 3652 0745 A8 7F                   		mov.L	4[r7], r7
 238:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       }
 3653                             		.loc 5 238 0
 3654 0747 72 7A 00 02             		add	#0x200, r7, r10
 3655                             	.LVL311:
 237:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	_M_last = _M_first + difference_type(_S_buffer_size());
 3656                             		.loc 5 237 0
 3657 074b E7 B7 07                		mov.L	r7, 28[r11]
 3658                             	.LVL312:
 238:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       }
 3659                             		.loc 5 238 0
 3660 074e E7 BA 08                		mov.L	r10, 32[r11]
 3661                             	.LBE1249:
 3662                             	.LBE1248:
 458:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	  }
 3663                             		.loc 7 458 0
 3664 0751 E7 B7 06                		mov.L	r7, 24[r11]
 3665 0754 38 AC FB                		bra	.L224
 3666                             	.LVL313:
 3667                             	.L311:
 3668                             	.LBE1239:
 3669                             	.LBE1238:
 3670                             	.LBE1254:
 3671                             	.LBE1257:
 3672                             	.LBE1260:
 3673                             	.LBE1287:
 3674                             	.LBB1288:
 3675                             	.LBB1130:
 3676                             	.LBB1127:
 3677                             	.LBB1124:
 3678                             	.LBB1121:
 3679                             	.LBB1120:
 3680                             	.LBB1119:
 3681                             	.LBB1111:
1927:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	    - (this->_M_impl._M_finish._M_node - this->_M_impl._M_map))
1928:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	  _M_reallocate_map(__nodes_to_add, false);
 3682                             		.loc 5 1928 0
 3683 0757 F9 06 0C FF             		mov.L	#-1, 48[r0]
 3684 075b EF 31                   		mov.L	r3, r1
 3685 075d 66 12                   		mov.L	#1, r2
 3686 075f 66 03                   		mov	#0, r3
 3687 0761 05 00 00 00             		bsr	__ZNSt5dequeIP13BaseMoveEventSaIS1_EE17_M_reallocate_mapEmb
 3688                             	.LVL314:
 3689 0765 FB 72 00 00 00 00       		mov.L	#__ZZN9EventList11getInstanceEvE8instance+36, r7
 3690 076b E4 70 1A                		mov.L	[r7], 104[r0]
 3691 076e 38 3A FE                		bra	.L205
 3692                             	.LVL315:
 3693                             	.L310:
 3694                             	.LBE1111:
 3695                             	.LBE1119:
 3696                             	.LBE1120:
 3697                             	.LBE1121:
 3698                             	.LBE1124:
 3699                             	.LBE1127:
 3700                             	.LBE1130:
 3701                             	.LBE1288:
 3702                             	.LBB1289:
 3703                             	.LBB1094:
 3704                             	.LBB1091:
 3705                             	.LBB1088:
 3706                             	.LBB1085:
 3707                             	.LBB1084:
 3708                             	.LBB1083:
 3709                             	.LBB1075:
 3710 0771 F9 06 0C FF             		mov.L	#-1, 48[r0]
 3711 0775 EF 31                   		mov.L	r3, r1
 3712                             	.LVL316:
 3713 0777 66 12                   		mov.L	#1, r2
 3714 0779 66 03                   		mov	#0, r3
 3715 077b 05 00 00 00             		bsr	__ZNSt5dequeIP13BaseMoveEventSaIS1_EE17_M_reallocate_mapEmb
 3716                             	.LVL317:
 3717 077f FB 72 00 00 00 00       		mov.L	#__ZZN9EventList11getInstanceEvE8instance+36, r7
 3718 0785 E4 70 1A                		mov.L	[r7], 104[r0]
 3719 0788 38 C3 FD                		bra	.L200
 3720                             	.LVL318:
 3721                             	.L315:
 3722                             	.LBE1075:
 3723                             	.LBE1083:
 3724                             	.LBE1084:
 3725                             	.LBE1085:
 3726                             	.LBE1088:
 3727                             	.LBE1091:
 3728                             	.LBE1094:
 3729                             	.LBE1289:
 3730                             	.LBB1290:
 3731                             	.LBB1261:
 3732                             	.LBB1258:
 3733                             	.LBB1255:
 3734                             	.LBB1252:
 3735                             	.LBB1251:
 3736                             	.LBB1250:
 3737                             	.LBB1242:
 3738 078b F9 06 0C FF             		mov.L	#-1, 48[r0]
 3739 078f EF B1                   		mov.L	r11, r1
 3740                             	.LVL319:
 3741 0791 66 12                   		mov.L	#1, r2
 3742 0793 66 03                   		mov	#0, r3
 3743 0795 05 00 00 00             		bsr	__ZNSt5dequeIP13BaseMoveEventSaIS1_EE17_M_reallocate_mapEmb
 3744                             	.LVL320:
 3745 0799 E5 B0 09 1A             		mov.L	36[r11], 104[r0]
 3746 079d 38 7D FF                		bra	.L225
 3747                             	.LVL321:
 3748                             	.L314:
 3749                             	.LBE1242:
 3750                             	.LBE1250:
 3751                             	.LBE1251:
 3752                             	.LBE1252:
 3753                             	.LBE1255:
 3754                             	.LBE1258:
 3755                             	.LBE1261:
 3756                             	.LBE1290:
 3757                             	.LBB1291:
 3758                             	.LBB1228:
 3759                             	.LBB1225:
 3760                             	.LBB1222:
 3761                             	.LBB1219:
 3762                             	.LBB1218:
 3763                             	.LBB1217:
 3764                             	.LBB1209:
 3765 07a0 F9 06 0C FF             		mov.L	#-1, 48[r0]
 3766 07a4 EF B1                   		mov.L	r11, r1
 3767                             	.LVL322:
 3768 07a6 66 12                   		mov.L	#1, r2
 3769 07a8 66 03                   		mov	#0, r3
 3770 07aa 05 00 00 00             		bsr	__ZNSt5dequeIP13BaseMoveEventSaIS1_EE17_M_reallocate_mapEmb
 3771                             	.LVL323:
 3772 07ae E5 B0 09 1A             		mov.L	36[r11], 104[r0]
 3773 07b2 38 0E FF                		bra	.L220
 3774                             	.LVL324:
 3775                             	.L313:
 3776                             	.LBE1209:
 3777                             	.LBE1217:
 3778                             	.LBE1218:
 3779                             	.LBE1219:
 3780                             	.LBE1222:
 3781                             	.LBE1225:
 3782                             	.LBE1228:
 3783                             	.LBE1291:
 3784                             	.LBB1292:
 3785                             	.LBB1195:
 3786                             	.LBB1192:
 3787                             	.LBB1189:
 3788                             	.LBB1186:
 3789                             	.LBB1185:
 3790                             	.LBB1184:
 3791                             	.LBB1176:
 3792 07b5 F9 06 0C FF             		mov.L	#-1, 48[r0]
 3793 07b9 EF B1                   		mov.L	r11, r1
 3794                             	.LVL325:
 3795 07bb 66 12                   		mov.L	#1, r2
 3796 07bd 66 03                   		mov	#0, r3
 3797 07bf 05 00 00 00             		bsr	__ZNSt5dequeIP13BaseMoveEventSaIS1_EE17_M_reallocate_mapEmb
 3798                             	.LVL326:
 3799 07c3 E5 B0 09 1A             		mov.L	36[r11], 104[r0]
 3800 07c7 38 9B FE                		bra	.L215
 3801                             	.LVL327:
 3802                             	.L312:
 3803                             	.LBE1176:
 3804                             	.LBE1184:
 3805                             	.LBE1185:
 3806                             	.LBE1186:
 3807                             	.LBE1189:
 3808                             	.LBE1192:
 3809                             	.LBE1195:
 3810                             	.LBE1292:
 3811                             	.LBB1293:
 3812                             	.LBB1162:
 3813                             	.LBB1159:
 3814                             	.LBB1156:
 3815                             	.LBB1153:
 3816                             	.LBB1152:
 3817                             	.LBB1151:
 3818                             	.LBB1143:
 3819 07ca F9 06 0C FF             		mov.L	#-1, 48[r0]
 3820 07ce EF C1                   		mov.L	r12, r1
 3821                             	.LVL328:
 3822 07d0 66 12                   		mov.L	#1, r2
 3823 07d2 66 03                   		mov	#0, r3
 3824 07d4 05 00 00 00             		bsr	__ZNSt5dequeIP13BaseMoveEventSaIS1_EE17_M_reallocate_mapEmb
 3825                             	.LVL329:
 3826 07d8 E5 C0 09 1A             		mov.L	36[r12], 104[r0]
 3827 07dc 38 2C FE                		bra	.L210
 3828                             	.LVL330:
 3829                             	.L237:
 3830                             	.LBE1143:
 3831                             	.LBE1151:
 3832                             	.LBE1152:
 3833                             	.LBE1153:
 3834                             	.LBE1156:
 3835                             	.LBE1159:
 3836                             	.LBE1162:
 3837                             	.LBE1293:
 3838                             	.LBB1294:
 3839                             	.LBB1063:
 3840                             	.LBB1060:
 3841                             	.LBB1058:
 3842                             	.LBB1046:
 3843                             	.LBB1045:
 3844                             	.LBB1044:
 3845                             	.LBB1043:
 3846                             	.LBB1039:
 641:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	_M_deallocate_node(*__n);
 3847                             		.loc 5 641 0
 3848 07df EF 41                   		mov.L	r4, r1
 3849 07e1 38 98 FC                		bra	.L186
 3850                             	.LVL331:
 3851                             	.L244:
 3852 07e4 AB 07                   		mov.L	48[r0], r7
 3853 07e6 E5 00 0D 1A             		mov.L	52[r0], 104[r0]
 3854 07ea 61 07                   		cmp	#0, r7
 3855 07ec 20 0E                   		beq	.L245
 3856 07ee 60 17                   		sub	#1, r7
 3857 07f0 20 50                   		beq	.L195
 3858 07f2 61 17                   		cmp	#1, r7
 3859 07f4 20 16                   		beq	.L247
 3860 07f6 05 00 00 00             		bsr	_abort
 3861                             	.LVL332:
 3862                             	.L245:
 3863                             	.LBE1039:
 3864                             	.LBE1043:
 3865                             	.LBE1044:
 3866                             	.LBE1045:
 3867                             	.LBE1046:
 3868                             	.LBE1058:
 3869                             	.LBE1060:
 3870                             	.LBE1063:
 3871                             	.LBE1294:
  43:../src/mode/mode_B.cpp **** 
 3872                             		.loc 9 43 0
 3873 07fa AE 01                   		mov.L	96[r0], r1
 3874 07fc 05 00 00 00             		bsr	__ZdlPv
 3875                             	.LVL333:
 3876 0800 AE 81                   		mov.L	104[r0], r1
 3877 0802 F9 06 0C FF             		mov.L	#-1, 48[r0]
 3878 0806 05 00 00 00             		bsr	__Unwind_SjLj_Resume
 3879                             	.LVL334:
 3880                             	.L247:
 3881                             	.LBB1295:
 3882                             	.LBB1064:
 3883                             	.LBB1061:
 3884                             	.LBB1059:
 3885                             	.LBB1047:
 3886                             	.LBB1048:
 3887                             	.LBB1049:
 563:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	{
 3888                             		.loc 5 563 0
 3889 080a A8 09                   		mov.L	4[r0], r1
 3890 080c 61 01                   		cmp	#0, r1
 3891 080e 20 32                   		beq	.L195
 566:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	  _M_deallocate_map(this->_M_impl._M_map, this->_M_impl._M_map_size);
 3892                             		.loc 5 566 0
 3893 0810 E5 00 06 18             		mov.L	24[r0], 96[r0]
 3894 0814 AA 87                   		mov.L	40[r0], r7
 3895 0816 62 47                   		add	#4, r7
 3896 0818 A6 0F                   		mov.L	r7, 100[r0]
 3897                             	.LVL335:
 3898                             	.LBB1050:
 3899                             	.LBB1051:
 641:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	_M_deallocate_node(*__n);
 3900                             		.loc 5 641 0
 3901 081a ED 0B 18                		mov.L	96[r0], r11
 3902 081d 47 7B                   		cmp	r7, r11
 3903 081f 22 19                   		bgeu	.L192
 3904                             	.LVL336:
 3905                             		.balign 8,3,1
 3906                             	.L194:
 3907                             	.LBB1052:
 3908                             	.LBB1053:
 3909                             	.LBB1054:
 110:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\ext\new_allocator.h **** 
 3910                             		.loc 6 110 0
 3911 0821 ED 0C 18                		mov.L	96[r0], r12
 3912 0824 FD 2A C1                		mov.L	[r12+], r1
 3913 0827 E7 0C 18                		mov.L	r12, 96[r0]
 3914                             	.LVL337:
 3915 082a 05 00 00 00             		bsr	__ZdlPv
 3916                             	.LVL338:
 3917                             	.LBE1054:
 3918                             	.LBE1053:
 3919                             	.LBE1052:
 641:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	_M_deallocate_node(*__n);
 3920                             		.loc 5 641 0
 3921 082e AE 0B                   		mov.L	100[r0], r3
 3922 0830 47 C3                   		cmp	r12, r3
 3923 0832 24 EF                   		bgtu	.L194
 3924 0834 A8 09                   		mov.L	4[r0], r1
 3925                             	.LVL339:
 3926 0836 EF 00                   		.balign 8,3,3
 3927                             	.L192:
 3928                             	.LBE1051:
 3929                             	.LBE1050:
 3930                             	.LBB1055:
 3931                             	.LBB1056:
 3932                             	.LBB1057:
 110:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\ext\new_allocator.h **** 
 3933                             		.loc 6 110 0
 3934 0838 05 00 00 00             		bsr	__ZdlPv
 3935                             	.LVL340:
 3936 083c 76 10 01 00             		.balign 8,3,5
 3937                             	.L195:
 3938                             	.LBE1057:
 3939                             	.LBE1056:
 3940                             	.LBE1055:
 3941                             	.LBE1049:
 3942                             	.LBE1048:
 3943                             	.LBE1047:
 3944                             	.LBE1059:
 3945                             	.LBE1061:
 976:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\moveEvent.h ****         return instance;
 3946                             		.loc 4 976 0
 3947 0840 FB 12 00 00 00 00       		mov.L	#__ZGVZN9EventList11getInstanceEvE8instance, r1
 3948 0846 05 00 00 00             		bsr	___cxa_guard_abort
 3949                             	.LVL341:
 3950 084a AE 81                   		mov.L	104[r0], r1
 3951 084c F9 06 0C FF             		mov.L	#-1, 48[r0]
 3952 0850 05 00 00 00             		bsr	__Unwind_SjLj_Resume
 3953                             	.LVL342:
 3954                             	.LBE1064:
 3955                             	.LBE1295:
 3956                             	.LBE1296:
 3957                             	.LFE1077:
 3958                             		.section	.gcc_except_table,"aw",@progbits
 3959                             	.LLSDA1077:
 3960 0000 FF                      		.byte	0xff
 3961 0001 FF                      		.byte	0xff
 3962 0002 01                      		.byte	0x1
 3963 0003 06                      		.uleb128 .LLSDACSE1077-.LLSDACSB1077
 3964                             	.LLSDACSB1077:
 3965 0004 00                      		.uleb128 0
 3966 0005 00                      		.uleb128 0
 3967 0006 01                      		.uleb128 0x1
 3968 0007 00                      		.uleb128 0
 3969 0008 02                      		.uleb128 0x2
 3970 0009 00                      		.uleb128 0
 3971                             	.LLSDACSE1077:
 3972                             		.section P,"ax"
 3974                             		.weak	__ZZN7Gamepad11getInstanceEvE8instance
 3975                             		.section	.bss._ZZN7Gamepad11getInstanceEvE8instance,"awG",@nobits,_ZZN7Gamepad11getInstanceEvE8ins
 3976                             		.balign 4
 3979                             	__ZZN7Gamepad11getInstanceEvE8instance:
 3980 0000 00 00 00 00 00 00 00 00 		.zero	68
 3980      00 00 00 00 00 00 00 00 
 3980      00 00 00 00 00 00 00 00 
 3980      00 00 00 00 00 00 00 00 
 3980      00 00 00 00 00 00 00 00 
 3981                             		.weak	__ZZN9EventList11getInstanceEvE8instance
 3982                             		.section	.bss._ZZN9EventList11getInstanceEvE8instance,"awG",@nobits,_ZZN9EventList11getInstanceEvE
 3983                             		.balign 4
 3986                             	__ZZN9EventList11getInstanceEvE8instance:
 3987 0000 00 00 00 00 00 00 00 00 		.zero	40
 3987      00 00 00 00 00 00 00 00 
 3987      00 00 00 00 00 00 00 00 
 3987      00 00 00 00 00 00 00 00 
 3987      00 00 00 00 00 00 00 00 
 3988                             		.weak	__ZZN11SimpleTrape5isEndEvE10time_count
 3989                             		.section	.bss._ZZN11SimpleTrape5isEndEvE10time_count,"awG",@nobits,_ZZN11SimpleTrape5isEndEvE10tim
 3990                             		.balign 4
 3993                             	__ZZN11SimpleTrape5isEndEvE10time_count:
 3994 0000 00 00 00 00             		.zero	4
 3995                             		.weak	__ZZN6UMouse11getInstanceEvE8instance
 3996                             		.section	.bss._ZZN6UMouse11getInstanceEvE8instance,"awG",@nobits,_ZZN6UMouse11getInstanceEvE8insta
 3997                             		.balign 4
 4000                             	__ZZN6UMouse11getInstanceEvE8instance:
 4001 0000 00 00 00 00 00 00 00 00 		.zero	2456
 4001      00 00 00 00 00 00 00 00 
 4001      00 00 00 00 00 00 00 00 
 4001      00 00 00 00 00 00 00 00 
 4001      00 00 00 00 00 00 00 00 
 4002                             		.weak	__ZZN7MPU925011getInstanceEvE8instance
 4003                             		.section	.bss._ZZN7MPU925011getInstanceEvE8instance,"awG",@nobits,_ZZN7MPU925011getInstanceEvE8ins
 4004                             		.balign 4
 4007                             	__ZZN7MPU925011getInstanceEvE8instance:
 4008 0000 00 00 00 00 00 00 00 00 		.zero	100
 4008      00 00 00 00 00 00 00 00 
 4008      00 00 00 00 00 00 00 00 
 4008      00 00 00 00 00 00 00 00 
 4008      00 00 00 00 00 00 00 00 
 4009                             		.weak	__ZTI13BaseMoveEvent
 4010                             		.section	.rodata._ZTI13BaseMoveEvent,"aG",@progbits,_ZTI13BaseMoveEvent,comdat
 4011                             		.balign 4
 4014                             	__ZTI13BaseMoveEvent:
 4015 0000 00 00 00 00             		.long	__ZTVN10__cxxabiv117__class_type_infoE+8
 4016 0004 00 00 00 00             		.long	__ZTS13BaseMoveEvent
 4017                             		.weak	__ZTS13BaseMoveEvent
 4018                             		.section	.rodata._ZTS13BaseMoveEvent,"aG",@progbits,_ZTS13BaseMoveEvent,comdat
 4021                             	__ZTS13BaseMoveEvent:
 4022 0000 31 33 42 61 73 65 4D 6F 		.string	"13BaseMoveEvent"
 4022      76 65 45 76 65 6E 74 00 
 4023                             		.weak	__ZTI11SimpleTrape
 4024                             		.section	.rodata._ZTI11SimpleTrape,"aG",@progbits,_ZTI11SimpleTrape,comdat
 4025                             		.balign 4
 4028                             	__ZTI11SimpleTrape:
 4029 0000 00 00 00 00             		.long	__ZTVN10__cxxabiv120__si_class_type_infoE+8
 4030 0004 00 00 00 00             		.long	__ZTS11SimpleTrape
 4031 0008 00 00 00 00             		.long	__ZTI13BaseMoveEvent
 4032                             		.weak	__ZTS11SimpleTrape
 4033                             		.section	.rodata._ZTS11SimpleTrape,"aG",@progbits,_ZTS11SimpleTrape,comdat
 4036                             	__ZTS11SimpleTrape:
 4037 0000 31 31 53 69 6D 70 6C 65 		.string	"11SimpleTrape"
 4037      54 72 61 70 65 00 
 4038                             		.weak	__ZTI4Stop
 4039                             		.section	.rodata._ZTI4Stop,"aG",@progbits,_ZTI4Stop,comdat
 4040                             		.balign 4
 4043                             	__ZTI4Stop:
 4044 0000 00 00 00 00             		.long	__ZTVN10__cxxabiv120__si_class_type_infoE+8
 4045 0004 00 00 00 00             		.long	__ZTS4Stop
 4046 0008 00 00 00 00             		.long	__ZTI13BaseMoveEvent
 4047                             		.weak	__ZTS4Stop
 4048                             		.section	.rodata._ZTS4Stop,"aG",@progbits,_ZTS4Stop,comdat
 4051                             	__ZTS4Stop:
 4052 0000 34 53 74 6F 70 00       		.string	"4Stop"
 4053                             		.weak	__ZTV13BaseMoveEvent
 4054                             		.section	.rodata._ZTV13BaseMoveEvent,"aG",@progbits,_ZTV13BaseMoveEvent,comdat
 4055                             		.balign 4
 4058                             	__ZTV13BaseMoveEvent:
 4059 0000 00 00 00 00             		.long	0
 4060 0004 00 00 00 00             		.long	__ZTI13BaseMoveEvent
 4061 0008 00 00 00 00             		.long	___cxa_pure_virtual
 4062 000c 00 00 00 00             		.long	___cxa_pure_virtual
 4063                             		.weak	__ZTV11SimpleTrape
 4064                             		.section	.rodata._ZTV11SimpleTrape,"aG",@progbits,_ZTV11SimpleTrape,comdat
 4065                             		.balign 4
 4068                             	__ZTV11SimpleTrape:
 4069 0000 00 00 00 00             		.long	0
 4070 0004 00 00 00 00             		.long	__ZTI11SimpleTrape
 4071 0008 00 00 00 00             		.long	__ZN11SimpleTrape5isEndEv
 4072 000c 00 00 00 00             		.long	__ZN11SimpleTrape8calcDutyEv
 4073                             		.weak	__ZTV4Stop
 4074                             		.section	.rodata._ZTV4Stop,"aG",@progbits,_ZTV4Stop,comdat
 4075                             		.balign 4
 4078                             	__ZTV4Stop:
 4079 0000 00 00 00 00             		.long	0
 4080 0004 00 00 00 00             		.long	__ZTI4Stop
 4081 0008 00 00 00 00             		.long	__ZN4Stop5isEndEv
 4082 000c 00 00 00 00             		.long	__ZN4Stop8calcDutyEv
 4083                             		.weak	__ZGVZN9EventList11getInstanceEvE8instance
 4084                             		.section	.bss._ZGVZN9EventList11getInstanceEvE8instance,"awG",@nobits,_ZGVZN9EventList11getInstanc
 4085                             		.balign 4
 4088                             	__ZGVZN9EventList11getInstanceEvE8instance:
 4089 0000 00 00 00 00 00 00 00 00 		.zero	8
 4090                             		.weak	__ZGVZN6UMouse11getInstanceEvE8instance
 4091                             		.section	.bss._ZGVZN6UMouse11getInstanceEvE8instance,"awG",@nobits,_ZGVZN6UMouse11getInstanceEvE8i
 4092                             		.balign 4
 4095                             	__ZGVZN6UMouse11getInstanceEvE8instance:
 4096 0000 00 00 00 00 00 00 00 00 		.zero	8
 4097                             		.weak	__ZGVZN7MPU925011getInstanceEvE8instance
 4098                             		.section	.bss._ZGVZN7MPU925011getInstanceEvE8instance,"awG",@nobits,_ZGVZN7MPU925011getInstanceEvE
 4099                             		.balign 4
 4102                             	__ZGVZN7MPU925011getInstanceEvE8instance:
 4103 0000 00 00 00 00 00 00 00 00 		.zero	8
 4104                             		.weak	__ZGVZN7Gamepad11getInstanceEvE8instance
 4105                             		.section	.bss._ZGVZN7Gamepad11getInstanceEvE8instance,"awG",@nobits,_ZGVZN7Gamepad11getInstanceEvE
 4106                             		.balign 4
 4109                             	__ZGVZN7Gamepad11getInstanceEvE8instance:
 4110 0000 00 00 00 00 00 00 00 00 		.zero	8
 4355                             	.Letext0:
 4356                             		.file 11 "c:\\progra~2\\gccfor~2.201\\rx-elf\\rx-elf\\rx-elf\\include\\machine\\_default_types.h"
 4357                             		.file 12 "c:\\progra~2\\gccfor~2.201\\rx-elf\\rx-elf\\rx-elf\\include\\stdint.h"
 4358                             		.file 13 "C:\\Users\\ryota\\e2_studio\\workspace\\umouse\\src\\umouse_object/maze.h"
 4359                             		.file 14 "c:\\progra~2\\gccfor~2.201\\rx-elf\\rx-elf\\rx-elf\\include\\c++\\4.8.0.201602-gnurx\\ty
 4360                             		.file 15 "c:\\progra~2\\gccfor~2.201\\rx-elf\\rx-elf\\rx-elf\\include\\c++\\4.8.0.201602-gnurx\\rx
 4361                             		.file 16 "c:\\progra~2\\gccfor~2.201\\rx-elf\\rx-elf\\rx-elf\\include\\c++\\4.8.0.201602-gnurx\\bi
 4362                             		.file 17 "c:\\progra~2\\gccfor~2.201\\rx-elf\\rx-elf\\rx-elf\\include\\c++\\4.8.0.201602-gnurx\\in
 4363                             		.file 18 "c:\\progra~2\\gccfor~2.201\\rx-elf\\rx-elf\\rx-elf\\include\\c++\\4.8.0.201602-gnurx\\bi
 4364                             		.file 19 "c:\\progra~2\\gccfor~2.201\\rx-elf\\rx-elf\\rx-elf\\include\\c++\\4.8.0.201602-gnurx\\bi
 4365                             		.file 20 "c:\\progra~2\\gccfor~2.201\\rx-elf\\rx-elf\\rx-elf\\include\\c++\\4.8.0.201602-gnurx\\bi
 4366                             		.file 21 "c:\\progra~2\\gccfor~2.201\\rx-elf\\rx-elf\\rx-elf\\include\\c++\\4.8.0.201602-gnurx\\ex
 4367                             		.file 22 "c:\\progra~2\\gccfor~2.201\\rx-elf\\rx-elf\\rx-elf\\include\\c++\\4.8.0.201602-gnurx\\de
 4368                             		.file 23 "c:\\progra~2\\gccfor~2.201\\rx-elf\\rx-elf\\rx-elf\\include\\c++\\4.8.0.201602-gnurx\\ne
 4369                             		.file 24 "C:\\Users\\ryota\\e2_studio\\workspace\\umouse\\src\\umouse_object/sound.h"
 4370                             		.file 25 "C:\\Users\\ryota\\e2_studio\\workspace\\umouse\\src\\peripheral/timer.h"
 4371                             		.file 26 "C:\\Users\\ryota\\e2_studio\\workspace\\umouse\\src\\peripheral/uart.hpp"
 4372                             		.file 27 "C:\\Users\\ryota\\e2_studio\\workspace\\umouse\\src\\utility/myUtil.h"
 4373                             		.file 28 "<built-in>"
 4374                             		.file 29 "c:\\progra~2\\gccfor~2.201\\rx-elf\\rx-elf\\rx-elf\\include\\c++\\4.8.0.201602-gnurx\\bi
 4375                             		.file 30 "c:\\progra~2\\gccfor~2.201\\rx-elf\\rx-elf\\rx-elf\\include\\c++\\4.8.0.201602-gnurx\\bi
