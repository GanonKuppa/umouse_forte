   1                             		.file	"uart.cpp"
   2                             		.section P,"ax"
   3                             	.Ltext0:
   4                             		.section	.text._ZN9Icm20608GD2Ev,"axG",@progbits,_ZN9Icm20608GD5Ev,comdat
   5                             		.weak	__ZN9Icm20608GD2Ev
   7                             	__ZN9Icm20608GD2Ev:
   8                             	.LFB5:
   9                             		.file 1 "C:\\Users\\ryota\\e2_studio\\workspace\\umouse\\src\\umouse_object/imu.hpp"
   1:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\imu.hpp **** #ifndef IMU_H
   2:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\imu.hpp **** #define IMU_H
   3:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\imu.hpp **** 
   4:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\imu.hpp **** #include <stdint.h>
   5:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\imu.hpp **** 
   6:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\imu.hpp **** class Icm20608G{
   7:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\imu.hpp **** 
   8:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\imu.hpp **** public:
   9:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\imu.hpp **** 	volatile int16_t omega_raw[3];
  10:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\imu.hpp **** 	volatile int16_t acc_raw[3];
  11:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\imu.hpp **** 	volatile int16_t temp_raw;
  12:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\imu.hpp **** 
  13:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\imu.hpp **** 	volatile int16_t omega_ref[3];
  14:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\imu.hpp **** 	volatile int16_t acc_ref[3];
  15:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\imu.hpp **** 
  16:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\imu.hpp **** 	volatile int16_t omega_c[3];
  17:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\imu.hpp **** 	volatile int16_t acc_c[3];
  18:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\imu.hpp **** 	volatile int16_t mag_c[3];
  19:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\imu.hpp **** 
  20:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\imu.hpp **** 	volatile float omega_f[3];
  21:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\imu.hpp **** 	volatile float acc_f[3];
  22:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\imu.hpp **** 	volatile float mag_f[3];
  23:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\imu.hpp **** 	volatile float temp_f;
  24:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\imu.hpp **** 
  25:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\imu.hpp **** 	static Icm20608G& getInstance(){
  26:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\imu.hpp **** 		static Icm20608G instance;
  27:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\imu.hpp **** 		return instance;
  28:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\imu.hpp **** 	}
  29:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\imu.hpp **** 
  30:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\imu.hpp **** 
  31:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\imu.hpp **** 	uint8_t whoAmI(void);
  32:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\imu.hpp **** 	void init();
  33:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\imu.hpp ****     void update();
  34:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\imu.hpp **** 	void calibOmegaOffset();
  35:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\imu.hpp ****     void writeReg(uint8_t adress, uint8_t data);
  36:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\imu.hpp ****     uint8_t readReg(uint8_t adress);
  37:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\imu.hpp **** 
  38:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\imu.hpp **** private:
  39:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\imu.hpp **** 	Icm20608G(void){};
  40:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\imu.hpp **** 	~Icm20608G(void){};
  10                             		.loc 1 40 0
  11                             	.LVL0:
  12 0000 02                      		rts
  13                             	.LFE5:
  15                             		.weak	__ZN9Icm20608GD1Ev
  16                             		.set	__ZN9Icm20608GD1Ev,__ZN9Icm20608GD2Ev
  17                             		.section	.text._ZN7MPU9250D2Ev,"axG",@progbits,_ZN7MPU9250D5Ev,comdat
  18                             		.weak	__ZN7MPU9250D2Ev
  20                             	__ZN7MPU9250D2Ev:
  21                             	.LFB15:
  41:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\imu.hpp **** 	Icm20608G(Icm20608G&){};
  42:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\imu.hpp **** 
  43:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\imu.hpp **** };
  44:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\imu.hpp **** 
  45:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\imu.hpp **** 
  46:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\imu.hpp **** 
  47:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\imu.hpp **** 
  48:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\imu.hpp **** class MPU9250{
  49:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\imu.hpp **** public:
  50:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\imu.hpp ****     volatile int16_t omega_raw[3];
  51:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\imu.hpp ****     volatile int16_t acc_raw[3];
  52:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\imu.hpp ****     volatile int16_t mag_raw[3];
  53:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\imu.hpp ****     volatile int16_t temp_raw;
  54:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\imu.hpp **** 
  55:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\imu.hpp ****     volatile int16_t omega_ref[3];
  56:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\imu.hpp ****     volatile int16_t acc_ref[3];
  57:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\imu.hpp ****     volatile int16_t mag_ref[3];
  58:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\imu.hpp **** 
  59:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\imu.hpp ****     volatile int16_t omega_c[3];
  60:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\imu.hpp ****     volatile int16_t acc_c[3];
  61:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\imu.hpp ****     volatile int16_t mag_c[3];
  62:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\imu.hpp **** 
  63:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\imu.hpp ****     volatile float omega_f[3];
  64:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\imu.hpp ****     volatile float acc_f[3];
  65:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\imu.hpp ****     volatile float mag_f[3];
  66:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\imu.hpp ****     volatile float temp_f;
  67:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\imu.hpp ****     volatile uint8_t Asa[3];
  68:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\imu.hpp **** 
  69:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\imu.hpp **** 	static MPU9250& getInstance(){
  70:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\imu.hpp **** 		static MPU9250 instance;
  71:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\imu.hpp **** 		return instance;
  72:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\imu.hpp **** 	};
  73:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\imu.hpp **** 
  74:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\imu.hpp **** 	uint8_t whoAmI();
  75:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\imu.hpp **** 	void init();
  76:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\imu.hpp **** 	void update();
  77:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\imu.hpp **** 	void writeReg(uint8_t adress, uint8_t data);
  78:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\imu.hpp **** 	uint8_t readReg(uint8_t adress);
  79:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\imu.hpp **** 	void calibOmegaOffset(uint32_t ref_num);
  80:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\imu.hpp **** 	void calibAccOffset(uint32_t ref_num);
  81:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\imu.hpp **** private:
  82:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\imu.hpp **** 	MPU9250(){};
  83:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\imu.hpp **** 	~MPU9250(){};
  22                             		.loc 1 83 0
  23                             	.LVL1:
  24 0000 02                      		rts
  25                             	.LFE15:
  27                             		.weak	__ZN7MPU9250D1Ev
  28                             		.set	__ZN7MPU9250D1Ev,__ZN7MPU9250D2Ev
  29                             		.section	.text._ZN6TactSwD2Ev,"axG",@progbits,_ZN6TactSwD5Ev,comdat
  30                             		.weak	__ZN6TactSwD2Ev
  32                             	__ZN6TactSwD2Ev:
  33                             	.LFB27:
  34                             		.file 2 "C:\\Users\\ryota\\e2_studio\\workspace\\umouse\\src\\robot_object/tactsw.h"
   1:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\tactsw.h **** #ifndef TACTSW_H
   2:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\tactsw.h **** #define TACTSW_H
   3:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\tactsw.h **** 
   4:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\tactsw.h **** #include "iodefine.h"
   5:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\tactsw.h **** #include "stdint.h"
   6:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\tactsw.h **** 
   7:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\tactsw.h **** class TactSw{
   8:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\tactsw.h **** private:
   9:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\tactsw.h **** 	uint16_t on_time_msec;
  10:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\tactsw.h ****     TactSw(){on_time_msec = 0;};
  11:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\tactsw.h ****     TactSw(TactSw&){on_time_msec = 0;};
  12:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\tactsw.h ****     ~TactSw(){};
  35                             		.loc 2 12 0
  36                             	.LVL2:
  37 0000 02                      		rts
  38                             	.LFE27:
  40                             		.weak	__ZN6TactSwD1Ev
  41                             		.set	__ZN6TactSwD1Ev,__ZN6TactSwD2Ev
  42                             		.section	.text._ZN6UMouseD2Ev,"axG",@progbits,_ZN6UMouseD5Ev,comdat
  43                             		.weak	__ZN6UMouseD2Ev
  45                             	__ZN6UMouseD2Ev:
  46                             	.LFB75:
  47                             		.file 3 "C:\\Users\\ryota\\e2_studio\\workspace\\umouse\\src\\robot_object/mouse.h"
   1:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h **** #ifndef MOUSE_H
   2:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h **** #define MOUSE_H
   3:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h **** 
   4:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h **** 
   5:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h **** #include "stdint.h"
   6:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h **** #include "iodefine.h"
   7:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h **** #include "maze.h"
   8:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h **** #include "pwm.h"
   9:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h **** #include "machineParameters.h"
  10:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h **** #include "myUtil.h"
  11:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h **** #include "math.h"
  12:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h **** #include "imu.hpp"
  13:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h **** #include <math.h>
  14:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h **** 
  15:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h **** //#include <Core>
  16:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h **** //#include <Geometry>
  17:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h **** //using namespace Eigen;
  18:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h **** //#define EIGEN_DONT_VECTORIZE
  19:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h **** //#define EIGEN_DISABLE_UNALIGNED_ARRAY_ASSERT
  20:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h **** 
  21:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h **** 
  22:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h **** 
  23:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h **** enum direction_e {
  24:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h ****     E = 0, NE, N, NW, W, SW, S, SE
  25:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h **** };
  26:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h **** 
  27:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h **** template <typename T>
  28:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h **** class Coor2D {
  29:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h ****     T x;
  30:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h ****     T y;
  31:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h **** };
  32:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h **** 
  33:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h **** class Vector2f {
  34:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h **** public:
  35:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h ****     float x;
  36:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h ****     float y;
  37:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h **** 
  38:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h ****     Vector2f(float x_0, float y_0){
  39:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h ****         x = x_0;
  40:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h ****         y = y_0;
  41:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h ****     }
  42:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h **** 
  43:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h ****     float operator [](int n){
  44:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h ****         if(n == 0) return x;
  45:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h ****         if(n == 1) return y;
  46:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h ****         return 0.0;
  47:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h ****     }
  48:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h **** 
  49:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h **** };
  50:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h **** 
  51:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h **** 
  52:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h **** class UMouse {
  53:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h **** public:
  54:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h ****     // -32768 から 32767
  55:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h **** 
  56:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h **** 
  57:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h ****     volatile float t_a;       //event側で更新     x 1000
  58:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h ****     volatile float t_v;       //event側で更新     x 3000
  59:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h ****     volatile float t_x;       //event側で更新     x 3000
  60:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h ****     volatile float accum_x;   //event側で更新     x 3000
  61:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h **** 
  62:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h ****     volatile float t_ang_a;   //event側で更新    x 100
  63:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h ****     volatile float t_ang_v;   //event側で更新    x 100
  64:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h ****     volatile float t_ang;   //event側で更新    x 100
  65:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h ****     volatile float accum_ang; //event側で更新    x 100
  66:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h ****     volatile float gyro_ang_v;// -2000deg/secから+2000deg/sec
  67:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h **** 
  68:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h ****     volatile float wall_P;    //event側で更新  -10.0から10.0   x 3000
  69:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h ****     volatile float wall_I;    //event側で更新  -10.0から10.0   x 3000
  70:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h ****     volatile float wall_D;    //event側で更新  -10.0から10.0   x 3000
  71:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h **** 
  72:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h ****     volatile float v_P;       //event側で更新  -10.0から10.0   x 3000
  73:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h ****     volatile float v_I;       //event側で更新  -10.0から10.0   x 3000
  74:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h ****     volatile float v_D;       //event側で更新  -10.0から10.0   x 3000
  75:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h **** 
  76:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h ****     volatile float ang_v_P;   //event側で更新  -10.0から10.0   x 3000
  77:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h ****     volatile float ang_v_I;   //event側で更新  -10.0から10.0   x 3000
  78:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h ****     volatile float ang_v_D;   //event側で更新  -10.0から10.0   x 3000
  79:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h **** 
  80:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h ****     volatile float ang_P;     //event側で更新  -10.0から10.0   x 3000
  81:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h ****     volatile float ang_I;     //event側で更新  -10.0から10.0   x 3000
  82:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h ****     volatile float ang_D;     //event側で更新  -10.0から10.0   x 3000
  83:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h **** 
  84:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h ****     volatile float v_FF;      //event側で更新  -1.0から1.0     x 3000
  85:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h ****     volatile float ang_FF;    //event側で更新  -1.0から1.0     x 3000
  86:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h **** 
  87:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h ****     volatile float v;
  88:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h ****     volatile float a_v; //前方向加速度 x1000
  89:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h ****     volatile float a_h; //横方向加速度 x1000
  90:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h **** 
  91:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h ****     volatile float duty_L;
  92:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h ****     volatile float duty_R;
  93:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h **** 
  94:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h ****     volatile direction_e direction;
  95:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h ****     volatile Coor2D<float> ab_position;
  96:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h ****     volatile Coor2D<uint16_t> coor;
  97:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h ****     volatile Coor2D<uint16_t> start;
  98:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h ****     volatile Coor2D<uint16_t> goal;
  99:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h **** 
 100:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h ****     volatile float ang;
 101:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h ****     volatile float ang_v;
 102:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h ****     volatile float ang_a;
 103:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h **** 
 104:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h ****     volatile Coor2D <float> v_g;
 105:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h ****     volatile Coor2D <float> x_g;
 106:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h ****     volatile Coor2D <float> a_g;
 107:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h **** 
 108:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h ****     volatile Maze maze;
 109:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h ****     volatile Maze mazeBuf[5];
 110:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h **** 
 111:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h ****     volatile float v_enc_R;
 112:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h ****     volatile float v_enc_L;
 113:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h **** 
 114:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h ****     volatile float v_enc;
 115:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h ****     volatile float v_acc;
 116:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h **** 
 117:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h ****     volatile float ang_gyro;
 118:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h ****     volatile float ang_mag;
 119:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h **** 
 120:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h ****     volatile float Vcc;
 121:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h **** 
 122:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h ****     static UMouse& getInstance() {
 123:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h ****         static UMouse instance;
 124:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h ****         return instance;
 125:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h ****     };
 126:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h **** 
 127:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h ****     void update(){
 128:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h ****         static uint16_t R_ENC_pre;
 129:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h ****         static uint16_t L_ENC_pre;
 130:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h ****         static uint16_t R_ENC_now;
 131:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h ****         static uint16_t L_ENC_now;
 132:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h **** 
 133:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h ****         //**************エンコーダ値の読み取り************************//
 134:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h **** 
 135:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h ****         R_ENC_pre = R_ENC_now;
 136:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h ****         L_ENC_pre = L_ENC_now;
 137:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h ****         R_ENC_now = MTU1.TCNT;
 138:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h ****         L_ENC_now = MTU2.TCNT;
 139:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h **** 
 140:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h ****         int32_t count_diff_R = (int32_t)(R_ENC_now - R_ENC_pre);
 141:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h ****         int32_t count_diff_L = (int32_t)(L_ENC_now - L_ENC_pre);
 142:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h ****         //オーバーフロー対策
 143:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h ****         if( count_diff_R > 32768 )  count_diff_R -= 65536;
 144:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h ****         if( count_diff_R < -32768 ) count_diff_R += 65536;
 145:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h ****         if( count_diff_L > 32768 )  count_diff_L -= 65536;
 146:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h ****         if( count_diff_L < -32768 ) count_diff_L += 65536;
 147:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h **** 
 148:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h ****         //エンコーダより計測された速度
 149:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h ****         v_enc_R = (PI* DIA_TIRE / GEAR_RATIO * (float)(count_diff_R)/512.0)/ DELTA_T;
 150:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h ****         v_enc_L = (PI* DIA_TIRE / GEAR_RATIO * (float)(count_diff_L)/512.0)/ DELTA_T;
 151:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h ****         //v_enc = (v_enc_R + v_enc_L) * 0.5;
 152:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h ****         MPU9250 &imu = MPU9250::getInstance();
 153:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h ****         float omega = DEG2RAD(imu.omega_f[2]);
 154:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h ****         v_enc = sqrtf( constrainL(
 155:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h ****                                    0.5 * (  v_enc_R * v_enc_R
 156:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h ****                                    + v_enc_L * v_enc_L
 157:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h ****                                    - 0.5 * omega * omega * TREAD * TREAD)
 158:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h ****                                    ,0.0)
 159:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h ****         );
 160:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h ****         //角速度をセット
 161:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h ****         gyro_ang_v = MPU9250::getInstance().omega_f[2];
 162:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h ****         //電圧の算出
 163:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h ****         Vcc = 15.1 / 5.1 * (S12AD.ADDR0) * 3.3 / 4096;
 164:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h ****         //加速度センサから遠心力を除去
 165:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h ****         float r = 0.0564717;  // 9mm 55.75mm
 166:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h ****         float theta = DEG2RAD(9.17042483);
 167:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h ****         float c_force = r * DEG2RAD(gyro_ang_v) * DEG2RAD(gyro_ang_v);
 168:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h ****         a_v = MPU9250::getInstance().acc_f[1] + c_force * cosf(theta);
 169:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h ****         a_h = MPU9250::getInstance().acc_f[0] + c_force * sinf(theta);
 170:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h **** 
 171:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h ****     }
 172:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h **** 
 173:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h ****     void setDuty(float duty_l, float duty_r){
 174:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h ****         setDuty_L(duty_l);
 175:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h ****         setDuty_R(duty_r);
 176:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h ****     }
 177:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h **** 
 178:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h ****     void setDuty_R(float duty){
 179:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h ****         duty_R = duty;
 180:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h **** 
 181:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h ****         if(duty == 0.0){
 182:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h ****             PORT1.PODR.BIT.B3 = 0;
 183:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h ****             PORT1.PODR.BIT.B2 = 0;
 184:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h ****         }
 185:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h ****         else if(duty > 0){
 186:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h ****             PORT1.PODR.BIT.B3 = 0;
 187:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h ****             PORT1.PODR.BIT.B2 = 1;
 188:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h ****         }
 189:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h ****         else{
 190:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h ****             PORT1.PODR.BIT.B3 = 1;
 191:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h ****             PORT1.PODR.BIT.B2 = 0;
 192:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h ****         }
 193:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h ****         setDutyMTU3(ABS(duty));
 194:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h ****     };
 195:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h ****     void setDuty_L(float duty){
 196:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h ****         duty_L = duty;
 197:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h **** 
 198:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h ****         if(duty == 0.0){
 199:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h ****             PORT2.PODR.BIT.B0 = 0;
 200:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h ****             PORT1.PODR.BIT.B7 = 0;
 201:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h ****         }
 202:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h ****         else if(duty > 0){
 203:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h ****             PORT2.PODR.BIT.B0 = 1;
 204:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h ****             PORT1.PODR.BIT.B7 = 0;
 205:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h ****         }
 206:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h ****         else{
 207:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h ****             PORT2.PODR.BIT.B0 = 0;
 208:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h ****             PORT1.PODR.BIT.B7 = 1;
 209:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h ****         }
 210:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h ****         setDutyMTU4(ABS(duty));
 211:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h ****     };
 212:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h **** 
 213:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h **** 
 214:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h **** private:
 215:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h ****     UMouse() {};
 216:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h ****     ~UMouse() {};
  48                             		.loc 3 216 0
  49                             	.LVL3:
  50 0000 02                      		rts
  51                             	.LFE75:
  53                             		.weak	__ZN6UMouseD1Ev
  54                             		.set	__ZN6UMouseD1Ev,__ZN6UMouseD2Ev
  55                             		.section	.text._ZN7GamepadD2Ev,"axG",@progbits,_ZN7GamepadD5Ev,comdat
  56                             		.weak	__ZN7GamepadD2Ev
  58                             	__ZN7GamepadD2Ev:
  59                             	.LFB629:
  60                             		.file 4 "C:\\Users\\ryota\\e2_studio\\workspace\\umouse\\src\\robot_object/gamepad.h"
   1:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\gamepad.h **** 
   2:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\gamepad.h **** #ifndef GAMEPAD_H
   3:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\gamepad.h **** #define GAMEPAD_H
   4:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\gamepad.h **** 
   5:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\gamepad.h **** #include <stdint.h>
   6:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\gamepad.h **** #include "timer.h"
   7:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\gamepad.h **** 
   8:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\gamepad.h **** class Gamepad{
   9:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\gamepad.h **** public:
  10:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\gamepad.h ****     volatile int8_t cross_x;
  11:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\gamepad.h ****     volatile int8_t cross_y;
  12:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\gamepad.h ****     volatile int8_t L3D_x;
  13:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\gamepad.h ****     volatile int8_t L3D_y;
  14:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\gamepad.h ****     volatile int8_t R3D_x;
  15:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\gamepad.h ****     volatile int8_t R3D_y;
  16:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\gamepad.h ****     volatile uint8_t RT;
  17:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\gamepad.h ****     volatile uint8_t LT;
  18:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\gamepad.h ****     volatile uint32_t A;
  19:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\gamepad.h ****     volatile uint32_t B;
  20:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\gamepad.h ****     volatile uint32_t Y;
  21:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\gamepad.h ****     volatile uint32_t X;
  22:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\gamepad.h ****     volatile uint32_t RB;
  23:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\gamepad.h ****     volatile uint32_t LB;
  24:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\gamepad.h ****     volatile uint32_t BACK;
  25:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\gamepad.h ****     volatile uint32_t START;
  26:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\gamepad.h ****     volatile uint8_t receiveCommand[16];
  27:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\gamepad.h **** 
  28:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\gamepad.h ****     static Gamepad& getInstance(){
  29:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\gamepad.h ****         static Gamepad instance;
  30:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\gamepad.h ****         return instance;
  31:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\gamepad.h ****     }
  32:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\gamepad.h **** 
  33:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\gamepad.h ****     bool isConnecting(){
  34:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\gamepad.h ****         if(getElapsedMsec() - preRecieveTime < 200){
  35:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\gamepad.h ****             return true;
  36:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\gamepad.h ****         }
  37:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\gamepad.h ****         else{
  38:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\gamepad.h ****             return false;
  39:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\gamepad.h ****         }
  40:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\gamepad.h **** 
  41:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\gamepad.h ****     };
  42:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\gamepad.h **** 
  43:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\gamepad.h ****     void updateCommand(uint8_t *command){
  44:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\gamepad.h ****         if(command[3] == 254 && command[4] == 253){
  45:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\gamepad.h ****             preRecieveTime = getElapsedMsec();
  46:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\gamepad.h ****             for(uint8_t i=0;i<16; i++){
  47:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\gamepad.h ****                 receiveCommand[i] = command[i];
  48:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\gamepad.h ****             }
  49:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\gamepad.h ****         }
  50:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\gamepad.h ****     };
  51:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\gamepad.h **** 
  52:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\gamepad.h ****     //1msec毎に呼ぶこと
  53:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\gamepad.h ****     void update(){
  54:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\gamepad.h ****        volatile uint8_t *command = receiveCommand;
  55:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\gamepad.h ****        if((command[6] & 0x01) == 1) A++;
  56:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\gamepad.h ****        else A = 0;
  57:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\gamepad.h ****        if(((command[6] & 0x02) >> 1) == 1) B++;
  58:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\gamepad.h ****        else B = 0;
  59:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\gamepad.h ****        if(((command[6] & 0x04) >> 2) == 1) X++;
  60:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\gamepad.h ****        else X= 0;
  61:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\gamepad.h ****        if(((command[6] & 0x08) >> 3) == 1) Y++;
  62:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\gamepad.h ****        else Y = 0;
  63:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\gamepad.h ****        if(((command[6] & 0x10) >> 4) == 1) RB++;
  64:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\gamepad.h ****        else RB = 0;
  65:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\gamepad.h ****        if(((command[6] & 0x20) >> 5) == 1) LB++;
  66:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\gamepad.h ****        else LB = 0;
  67:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\gamepad.h ****        if(((command[6] & 0x40) >> 6) == 1) BACK++;
  68:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\gamepad.h ****        else BACK = 0;
  69:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\gamepad.h ****        if(((command[6] & 0x80) >> 7) == 1) START++;
  70:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\gamepad.h ****        else START = 0;
  71:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\gamepad.h ****        RT = command[7];
  72:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\gamepad.h ****        LT = command[8];
  73:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\gamepad.h ****        cross_x = command[9]  - 128;
  74:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\gamepad.h ****        cross_y = command[10] - 128;
  75:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\gamepad.h ****        R3D_x = command[11] - 128;
  76:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\gamepad.h ****        R3D_y = command[12] - 128;
  77:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\gamepad.h ****        L3D_x = command[13] - 128;
  78:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\gamepad.h ****        L3D_y = command[14] - 128;
  79:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\gamepad.h **** 
  80:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\gamepad.h ****        if(isConnecting() == false){
  81:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\gamepad.h ****            A = 0;
  82:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\gamepad.h ****            B = 0;
  83:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\gamepad.h ****            X = 0;
  84:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\gamepad.h ****            Y = 0;
  85:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\gamepad.h ****            RB = 0;
  86:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\gamepad.h ****            LB = 0;
  87:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\gamepad.h ****            BACK = 0;
  88:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\gamepad.h ****            START = 0;
  89:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\gamepad.h ****            RT = 0;
  90:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\gamepad.h ****            LT = 0;
  91:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\gamepad.h ****            cross_x = 0;
  92:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\gamepad.h ****            cross_y = 0;
  93:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\gamepad.h ****            R3D_x = 0;
  94:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\gamepad.h ****            R3D_y = 0;
  95:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\gamepad.h ****            L3D_x = 0;
  96:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\gamepad.h ****            L3D_y = 0;
  97:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\gamepad.h ****        }
  98:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\gamepad.h **** 
  99:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\gamepad.h ****     };
 100:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\gamepad.h **** private:
 101:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\gamepad.h ****     bool conStatus;
 102:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\gamepad.h ****     uint64_t preRecieveTime;
 103:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\gamepad.h ****     Gamepad(){
 104:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\gamepad.h ****         cross_x = 0;
 105:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\gamepad.h ****         cross_y = 0;
 106:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\gamepad.h ****         L3D_x = 0;
 107:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\gamepad.h ****         R3D_x = 0;
 108:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\gamepad.h ****         R3D_y = 0;
 109:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\gamepad.h ****         RT = 0;
 110:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\gamepad.h ****         LT = 0;
 111:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\gamepad.h ****         A  = 0;
 112:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\gamepad.h ****         B  = 0;
 113:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\gamepad.h ****         Y  = 0;
 114:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\gamepad.h ****         X  = 0;
 115:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\gamepad.h ****         RB = 0;
 116:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\gamepad.h ****         LB = 0;
 117:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\gamepad.h ****         BACK = 0;
 118:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\gamepad.h ****         START = 0;
 119:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\gamepad.h ****         conStatus = false;
 120:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\gamepad.h ****         preRecieveTime = 0;
 121:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\gamepad.h ****     };
 122:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\gamepad.h ****     ~Gamepad(){};
  61                             		.loc 4 122 0
  62                             	.LVL4:
  63 0000 02                      		rts
  64                             	.LFE629:
  66                             		.weak	__ZN7GamepadD1Ev
  67                             		.set	__ZN7GamepadD1Ev,__ZN7GamepadD2Ev
  68                             		.global	___gxx_personality_sj0
  69                             		.global	__Unwind_SjLj_Register
  70                             		.global	__Unwind_SjLj_Unregister
  71                             		.section	.text._ZN5FcLedD2Ev,"axG",@progbits,_ZN5FcLedD5Ev,comdat
  72                             		.weak	__ZN5FcLedD2Ev
  74                             	__ZN5FcLedD2Ev:
  75                             	.LFB52:
  76                             		.file 5 "C:\\Users\\ryota\\e2_studio\\workspace\\umouse\\src\\robot_object/fcled.h"
   1:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\fcled.h **** #ifndef FCLED_H
   2:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\fcled.h **** #define FCLED_H
   3:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\fcled.h **** 
   4:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\fcled.h **** #include <stdint.h>
   5:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\fcled.h **** #include "abcled.h"
   6:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\fcled.h **** 
   7:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\fcled.h **** ///////////////////////////////////////////////////////////////////
   8:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\fcled.h **** class LED_R : public AbstructLED{
   9:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\fcled.h **** public:
  10:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\fcled.h **** 	void setState(uint8_t state);
  11:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\fcled.h **** };
  12:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\fcled.h **** ///////////////////////////////////////////////////////////////////
  13:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\fcled.h **** class LED_G : public AbstructLED{
  14:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\fcled.h **** public:
  15:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\fcled.h **** 	void setState(uint8_t state);
  16:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\fcled.h **** };
  17:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\fcled.h **** ///////////////////////////////////////////////////////////////////
  18:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\fcled.h **** class LED_B : public AbstructLED{
  19:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\fcled.h **** public:
  20:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\fcled.h **** 	void setState(uint8_t state);
  21:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\fcled.h **** };
  22:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\fcled.h **** ///////////////////////////////////////////////////////////////////
  23:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\fcled.h **** class FcLed{
  24:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\fcled.h **** public:
  25:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\fcled.h **** 	static FcLed& getInstance(){
  26:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\fcled.h **** 		static FcLed instance;
  27:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\fcled.h **** 		return instance;
  28:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\fcled.h **** 	}
  29:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\fcled.h **** 
  30:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\fcled.h **** 	LED_R R;
  31:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\fcled.h **** 	LED_G G;
  32:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\fcled.h **** 	LED_B B;
  33:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\fcled.h **** 	void update(){
  34:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\fcled.h **** 		R.update();
  35:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\fcled.h **** 		G.update();
  36:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\fcled.h **** 		B.update();
  37:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\fcled.h **** 	}
  38:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\fcled.h **** 	void turn(uint8_t r, uint8_t g, uint8_t b){
  39:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\fcled.h **** 		R.turn(r);
  40:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\fcled.h **** 		G.turn(g);
  41:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\fcled.h **** 		B.turn(b);
  42:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\fcled.h **** 	}
  43:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\fcled.h **** private:
  44:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\fcled.h **** 	FcLed(){turn(0,0,0);}
  45:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\fcled.h **** 	~FcLed(){turn(0,0,0);}
  77                             		.loc 5 45 0
  78                             	.LVL5:
  79                             		.loc 5 45 0
  80 0000 7E A7                   		push.l	r7
  81                             	.LCFI0:
  82 0002 71 00 CC                		add	#-52, r0
  83                             	.LCFI1:
  84                             		.loc 5 45 0
  85 0005 EF 17                   		mov.L	r1, r7
  86 0007 EF 01                   		mov.L	r0, r1
  87                             	.LVL6:
  88 0009 F9 02 06 00 00 00 00    		mov.L	#___gxx_personality_sj0, 24[r0]
  89 0010 F9 02 07 00 00 00 00    		mov.L	#.LLSDA52, 28[r0]
  90 0017 05 00 00 00             		bsr	__Unwind_SjLj_Register
  91                             	.LVL7:
  92                             	.LBB956:
  93                             	.LBB957:
  39:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\fcled.h **** 		G.turn(g);
  94                             		.loc 5 39 0
  95 001b EF 71                   		mov.L	r7, r1
  96 001d 66 02                   		mov	#0, r2
  97 001f 3E 01 00                		mov.L	#0, 4[r0]
  98 0022 05 00 00 00             		bsr	__ZN11AbstructLED4turnEh
  99                             	.LVL8:
  40:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\fcled.h **** 		B.turn(b);
 100                             		.loc 5 40 0
 101 0026 71 71 0C                		add	#12, r7, r1
 102 0029 66 02                   		mov	#0, r2
 103 002b 05 00 00 00             		bsr	__ZN11AbstructLED4turnEh
 104                             	.LVL9:
  41:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\fcled.h **** 	}
 105                             		.loc 5 41 0
 106 002f 71 71 18                		add	#24, r7, r1
 107 0032 66 02                   		mov	#0, r2
 108 0034 05 00 00 00             		bsr	__ZN11AbstructLED4turnEh
 109                             	.LVL10:
 110 0038 EF 01                   		mov.L	r0, r1
 111 003a 05 00 00 00             		bsr	__Unwind_SjLj_Unregister
 112                             	.LVL11:
 113                             	.LBE957:
 114                             	.LBE956:
 115                             		.loc 5 45 0
 116 003e 3F 77 0E                		rtsd	#56, r7-r7
 117                             	.LFE52:
 118                             		.section	.gcc_except_table._ZN5FcLedD2Ev,"awG",@progbits,_ZN5FcLedD5Ev,comdat
 119                             	.LLSDA52:
 120 0000 FF                      		.byte	0xff
 121 0001 FF                      		.byte	0xff
 122 0002 01                      		.byte	0x1
 123 0003 00                      		.uleb128 .LLSDACSE52-.LLSDACSB52
 124                             	.LLSDACSB52:
 125                             	.LLSDACSE52:
 126                             		.section	.text._ZN5FcLedD2Ev,"axG",@progbits,_ZN5FcLedD5Ev,comdat
 128                             		.weak	__ZN5FcLedD1Ev
 129                             		.set	__ZN5FcLedD1Ev,__ZN5FcLedD2Ev
 130                             		.section	.text._ZNSt5queueIhSt5dequeIhSaIhEEED2Ev,"axG",@progbits,_ZNSt5queueIhSt5dequeIhSaIhEEED5
 131                             		.weak	__ZNSt5queueIhSt5dequeIhSaIhEEED2Ev
 133                             	__ZNSt5queueIhSt5dequeIhSaIhEEED2Ev:
 134                             	.LFB1734:
 135                             		.file 6 "c:\\progra~2\\gccfor~2.201\\rx-elf\\rx-elf\\rx-elf\\include\\c++\\4.8.0.201602-gnurx\\bit
   1:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_queue.h **** // Queue implementation -*- C++ -*-
   2:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_queue.h **** 
   3:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_queue.h **** // Copyright (C) 2001-2013 Free Software Foundation, Inc.
   4:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_queue.h **** //
   5:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_queue.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_queue.h **** // software; you can redistribute it and/or modify it under the
   7:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_queue.h **** // terms of the GNU General Public License as published by the
   8:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_queue.h **** // Free Software Foundation; either version 3, or (at your option)
   9:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_queue.h **** // any later version.
  10:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_queue.h **** 
  11:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_queue.h **** // This library is distributed in the hope that it will be useful,
  12:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_queue.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_queue.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_queue.h **** // GNU General Public License for more details.
  15:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_queue.h **** 
  16:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_queue.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_queue.h **** // permissions described in the GCC Runtime Library Exception, version
  18:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_queue.h **** // 3.1, as published by the Free Software Foundation.
  19:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_queue.h **** 
  20:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_queue.h **** // You should have received a copy of the GNU General Public License and
  21:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_queue.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_queue.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_queue.h **** // <http://www.gnu.org/licenses/>.
  24:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_queue.h **** 
  25:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_queue.h **** /*
  26:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_queue.h ****  *
  27:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_queue.h ****  * Copyright (c) 1994
  28:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_queue.h ****  * Hewlett-Packard Company
  29:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_queue.h ****  *
  30:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_queue.h ****  * Permission to use, copy, modify, distribute and sell this software
  31:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_queue.h ****  * and its documentation for any purpose is hereby granted without fee,
  32:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_queue.h ****  * provided that the above copyright notice appear in all copies and
  33:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_queue.h ****  * that both that copyright notice and this permission notice appear
  34:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_queue.h ****  * in supporting documentation.  Hewlett-Packard Company makes no
  35:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_queue.h ****  * representations about the suitability of this software for any
  36:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_queue.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  37:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_queue.h ****  *
  38:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_queue.h ****  *
  39:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_queue.h ****  * Copyright (c) 1996,1997
  40:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_queue.h ****  * Silicon Graphics Computer Systems, Inc.
  41:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_queue.h ****  *
  42:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_queue.h ****  * Permission to use, copy, modify, distribute and sell this software
  43:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_queue.h ****  * and its documentation for any purpose is hereby granted without fee,
  44:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_queue.h ****  * provided that the above copyright notice appear in all copies and
  45:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_queue.h ****  * that both that copyright notice and this permission notice appear
  46:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_queue.h ****  * in supporting documentation.  Silicon Graphics makes no
  47:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_queue.h ****  * representations about the suitability of this software for any
  48:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_queue.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  49:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_queue.h ****  */
  50:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_queue.h **** 
  51:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_queue.h **** /** @file bits/stl_queue.h
  52:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_queue.h ****  *  This is an internal header file, included by other library headers.
  53:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_queue.h ****  *  Do not attempt to use it directly. @headername{queue}
  54:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_queue.h ****  */
  55:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_queue.h **** 
  56:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_queue.h **** #ifndef _STL_QUEUE_H
  57:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_queue.h **** #define _STL_QUEUE_H 1
  58:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_queue.h **** 
  59:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_queue.h **** #include <bits/concept_check.h>
  60:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_queue.h **** #include <debug/debug.h>
  61:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_queue.h **** 
  62:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_queue.h **** namespace std _GLIBCXX_VISIBILITY(default)
  63:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_queue.h **** {
  64:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_queue.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  65:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_queue.h **** 
  66:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_queue.h ****   /**
  67:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_queue.h ****    *  @brief  A standard container giving FIFO behavior.
  68:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_queue.h ****    *
  69:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_queue.h ****    *  @ingroup sequences
  70:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_queue.h ****    *
  71:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_queue.h ****    *  @tparam _Tp  Type of element.
  72:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_queue.h ****    *  @tparam _Sequence  Type of underlying sequence, defaults to deque<_Tp>.
  73:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_queue.h ****    *
  74:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_queue.h ****    *  Meets many of the requirements of a
  75:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_queue.h ****    *  <a href="tables.html#65">container</a>,
  76:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_queue.h ****    *  but does not define anything to do with iterators.  Very few of the
  77:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_queue.h ****    *  other standard container interfaces are defined.
  78:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_queue.h ****    *
  79:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_queue.h ****    *  This is not a true container, but an @e adaptor.  It holds another
  80:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_queue.h ****    *  container, and provides a wrapper interface to that container.  The
  81:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_queue.h ****    *  wrapper is what enforces strict first-in-first-out %queue behavior.
  82:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_queue.h ****    *
  83:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_queue.h ****    *  The second template parameter defines the type of the underlying
  84:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_queue.h ****    *  sequence/container.  It defaults to std::deque, but it can be any type
  85:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_queue.h ****    *  that supports @c front, @c back, @c push_back, and @c pop_front,
  86:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_queue.h ****    *  such as std::list or an appropriate user-defined type.
  87:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_queue.h ****    *
  88:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_queue.h ****    *  Members not found in @a normal containers are @c container_type,
  89:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_queue.h ****    *  which is a typedef for the second Sequence parameter, and @c push and
  90:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_queue.h ****    *  @c pop, which are standard %queue/FIFO operations.
  91:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_queue.h ****   */
  92:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_queue.h ****   template<typename _Tp, typename _Sequence = deque<_Tp> >
  93:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_queue.h ****     class queue
 136                             		.loc 6 93 0
 137 0000 6E 7B                   		pushm	r7-r11
 138                             	.LCFI2:
 139                             		.loc 6 93 0
 140 0002 EF 1B                   		mov.L	r1, r11
 141                             	.LBB971:
 142                             	.LBB972:
 143                             	.LBB973:
 144                             		.file 7 "c:\\progra~2\\gccfor~2.201\\rx-elf\\rx-elf\\rx-elf\\include\\c++\\4.8.0.201602-gnurx\\bit
   1:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** // Deque implementation -*- C++ -*-
   2:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
   3:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** // Copyright (C) 2001-2013 Free Software Foundation, Inc.
   4:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** //
   5:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** // software; you can redistribute it and/or modify it under the
   7:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** // terms of the GNU General Public License as published by the
   8:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** // Free Software Foundation; either version 3, or (at your option)
   9:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** // any later version.
  10:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
  11:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** // This library is distributed in the hope that it will be useful,
  12:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** // GNU General Public License for more details.
  15:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
  16:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** // permissions described in the GCC Runtime Library Exception, version
  18:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** // 3.1, as published by the Free Software Foundation.
  19:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
  20:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** // You should have received a copy of the GNU General Public License and
  21:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** // <http://www.gnu.org/licenses/>.
  24:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
  25:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** /*
  26:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****  *
  27:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****  * Copyright (c) 1994
  28:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****  * Hewlett-Packard Company
  29:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****  *
  30:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****  * Permission to use, copy, modify, distribute and sell this software
  31:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****  * and its documentation for any purpose is hereby granted without fee,
  32:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****  * provided that the above copyright notice appear in all copies and
  33:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****  * that both that copyright notice and this permission notice appear
  34:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****  * in supporting documentation.  Hewlett-Packard Company makes no
  35:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****  * representations about the suitability of this software for any
  36:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  37:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****  *
  38:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****  *
  39:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****  * Copyright (c) 1997
  40:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****  * Silicon Graphics Computer Systems, Inc.
  41:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****  *
  42:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****  * Permission to use, copy, modify, distribute and sell this software
  43:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****  * and its documentation for any purpose is hereby granted without fee,
  44:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****  * provided that the above copyright notice appear in all copies and
  45:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****  * that both that copyright notice and this permission notice appear
  46:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****  * in supporting documentation.  Silicon Graphics makes no
  47:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****  * representations about the suitability of this software for any
  48:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  49:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****  */
  50:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
  51:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** /** @file bits/stl_deque.h
  52:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****  *  This is an internal header file, included by other library headers.
  53:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****  *  Do not attempt to use it directly. @headername{deque}
  54:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****  */
  55:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
  56:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** #ifndef _STL_DEQUE_H
  57:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** #define _STL_DEQUE_H 1
  58:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
  59:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** #include <bits/concept_check.h>
  60:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** #include <bits/stl_iterator_base_types.h>
  61:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** #include <bits/stl_iterator_base_funcs.h>
  62:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** #if __cplusplus >= 201103L
  63:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** #include <initializer_list>
  64:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** #endif
  65:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
  66:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** namespace std _GLIBCXX_VISIBILITY(default)
  67:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** {
  68:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** _GLIBCXX_BEGIN_NAMESPACE_CONTAINER
  69:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
  70:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****   /**
  71:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****    *  @brief This function controls the size of memory nodes.
  72:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****    *  @param  __size  The size of an element.
  73:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****    *  @return   The number (not byte size) of elements per node.
  74:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****    *
  75:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****    *  This function started off as a compiler kludge from SGI, but
  76:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****    *  seems to be a useful wrapper around a repeated constant
  77:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****    *  expression.  The @b 512 is tunable (and no other code needs to
  78:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****    *  change), but no investigation has been done since inheriting the
  79:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****    *  SGI code.  Touch _GLIBCXX_DEQUE_BUF_SIZE only if you know what
  80:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****    *  you are doing, however: changing it breaks the binary
  81:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****    *  compatibility!!
  82:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****   */
  83:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
  84:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** #ifndef _GLIBCXX_DEQUE_BUF_SIZE
  85:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** #define _GLIBCXX_DEQUE_BUF_SIZE 512
  86:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** #endif
  87:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
  88:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****   inline size_t
  89:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****   __deque_buf_size(size_t __size)
  90:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****   { return (__size < _GLIBCXX_DEQUE_BUF_SIZE
  91:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	    ? size_t(_GLIBCXX_DEQUE_BUF_SIZE / __size) : size_t(1)); }
  92:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
  93:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
  94:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****   /**
  95:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****    *  @brief A deque::iterator.
  96:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****    *
  97:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****    *  Quite a bit of intelligence here.  Much of the functionality of
  98:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****    *  deque is actually passed off to this class.  A deque holds two
  99:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****    *  of these internally, marking its valid range.  Access to
 100:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****    *  elements is done as offsets of either of those two, relying on
 101:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****    *  operator overloading in this class.
 102:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****    *
 103:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****    *  All the functions are op overloads except for _M_set_node.
 104:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****   */
 105:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****   template<typename _Tp, typename _Ref, typename _Ptr>
 106:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****     struct _Deque_iterator
 107:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****     {
 108:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       typedef _Deque_iterator<_Tp, _Tp&, _Tp*>             iterator;
 109:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       typedef _Deque_iterator<_Tp, const _Tp&, const _Tp*> const_iterator;
 110:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
 111:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       static size_t _S_buffer_size()
 112:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       { return __deque_buf_size(sizeof(_Tp)); }
 113:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
 114:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       typedef std::random_access_iterator_tag iterator_category;
 115:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       typedef _Tp                             value_type;
 116:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       typedef _Ptr                            pointer;
 117:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       typedef _Ref                            reference;
 118:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       typedef size_t                          size_type;
 119:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       typedef ptrdiff_t                       difference_type;
 120:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       typedef _Tp**                           _Map_pointer;
 121:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       typedef _Deque_iterator                 _Self;
 122:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
 123:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       _Tp* _M_cur;
 124:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       _Tp* _M_first;
 125:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       _Tp* _M_last;
 126:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       _Map_pointer _M_node;
 127:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
 128:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       _Deque_iterator(_Tp* __x, _Map_pointer __y)
 129:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       : _M_cur(__x), _M_first(*__y),
 130:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****         _M_last(*__y + _S_buffer_size()), _M_node(__y) { }
 131:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
 132:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       _Deque_iterator()
 133:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       : _M_cur(0), _M_first(0), _M_last(0), _M_node(0) { }
 134:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
 135:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       _Deque_iterator(const iterator& __x)
 136:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       : _M_cur(__x._M_cur), _M_first(__x._M_first),
 137:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****         _M_last(__x._M_last), _M_node(__x._M_node) { }
 138:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
 139:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       reference
 140:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       operator*() const
 141:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       { return *_M_cur; }
 142:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
 143:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       pointer
 144:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       operator->() const
 145:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       { return _M_cur; }
 146:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
 147:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       _Self&
 148:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       operator++()
 149:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       {
 150:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	++_M_cur;
 151:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	if (_M_cur == _M_last)
 152:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	  {
 153:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	    _M_set_node(_M_node + 1);
 154:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	    _M_cur = _M_first;
 155:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	  }
 156:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	return *this;
 157:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       }
 158:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
 159:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       _Self
 160:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       operator++(int)
 161:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       {
 162:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	_Self __tmp = *this;
 163:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	++*this;
 164:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	return __tmp;
 165:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       }
 166:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
 167:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       _Self&
 168:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       operator--()
 169:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       {
 170:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	if (_M_cur == _M_first)
 171:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	  {
 172:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	    _M_set_node(_M_node - 1);
 173:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	    _M_cur = _M_last;
 174:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	  }
 175:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	--_M_cur;
 176:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	return *this;
 177:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       }
 178:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
 179:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       _Self
 180:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       operator--(int)
 181:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       {
 182:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	_Self __tmp = *this;
 183:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	--*this;
 184:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	return __tmp;
 185:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       }
 186:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
 187:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       _Self&
 188:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       operator+=(difference_type __n)
 189:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       {
 190:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	const difference_type __offset = __n + (_M_cur - _M_first);
 191:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	if (__offset >= 0 && __offset < difference_type(_S_buffer_size()))
 192:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	  _M_cur += __n;
 193:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	else
 194:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	  {
 195:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	    const difference_type __node_offset =
 196:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	      __offset > 0 ? __offset / difference_type(_S_buffer_size())
 197:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	                   : -difference_type((-__offset - 1)
 198:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 					      / _S_buffer_size()) - 1;
 199:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	    _M_set_node(_M_node + __node_offset);
 200:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	    _M_cur = _M_first + (__offset - __node_offset
 201:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 				 * difference_type(_S_buffer_size()));
 202:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	  }
 203:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	return *this;
 204:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       }
 205:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
 206:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       _Self
 207:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       operator+(difference_type __n) const
 208:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       {
 209:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	_Self __tmp = *this;
 210:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	return __tmp += __n;
 211:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       }
 212:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
 213:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       _Self&
 214:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       operator-=(difference_type __n)
 215:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       { return *this += -__n; }
 216:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
 217:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       _Self
 218:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       operator-(difference_type __n) const
 219:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       {
 220:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	_Self __tmp = *this;
 221:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	return __tmp -= __n;
 222:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       }
 223:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
 224:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       reference
 225:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       operator[](difference_type __n) const
 226:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       { return *(*this + __n); }
 227:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
 228:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       /** 
 229:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  Prepares to traverse new_node.  Sets everything except
 230:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  _M_cur, which should therefore be set by the caller
 231:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  immediately afterwards, based on _M_first and _M_last.
 232:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        */
 233:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       void
 234:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       _M_set_node(_Map_pointer __new_node)
 235:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       {
 236:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	_M_node = __new_node;
 237:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	_M_first = *__new_node;
 238:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	_M_last = _M_first + difference_type(_S_buffer_size());
 239:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       }
 240:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****     };
 241:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
 242:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****   // Note: we also provide overloads whose operands are of the same type in
 243:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****   // order to avoid ambiguous overload resolution when std::rel_ops operators
 244:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****   // are in scope (for additional details, see libstdc++/3628)
 245:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****   template<typename _Tp, typename _Ref, typename _Ptr>
 246:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****     inline bool
 247:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****     operator==(const _Deque_iterator<_Tp, _Ref, _Ptr>& __x,
 248:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	       const _Deque_iterator<_Tp, _Ref, _Ptr>& __y)
 249:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****     { return __x._M_cur == __y._M_cur; }
 250:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
 251:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****   template<typename _Tp, typename _RefL, typename _PtrL,
 252:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	   typename _RefR, typename _PtrR>
 253:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****     inline bool
 254:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****     operator==(const _Deque_iterator<_Tp, _RefL, _PtrL>& __x,
 255:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	       const _Deque_iterator<_Tp, _RefR, _PtrR>& __y)
 256:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****     { return __x._M_cur == __y._M_cur; }
 257:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
 258:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****   template<typename _Tp, typename _Ref, typename _Ptr>
 259:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****     inline bool
 260:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****     operator!=(const _Deque_iterator<_Tp, _Ref, _Ptr>& __x,
 261:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	       const _Deque_iterator<_Tp, _Ref, _Ptr>& __y)
 262:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****     { return !(__x == __y); }
 263:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
 264:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****   template<typename _Tp, typename _RefL, typename _PtrL,
 265:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	   typename _RefR, typename _PtrR>
 266:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****     inline bool
 267:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****     operator!=(const _Deque_iterator<_Tp, _RefL, _PtrL>& __x,
 268:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	       const _Deque_iterator<_Tp, _RefR, _PtrR>& __y)
 269:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****     { return !(__x == __y); }
 270:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
 271:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****   template<typename _Tp, typename _Ref, typename _Ptr>
 272:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****     inline bool
 273:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****     operator<(const _Deque_iterator<_Tp, _Ref, _Ptr>& __x,
 274:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	      const _Deque_iterator<_Tp, _Ref, _Ptr>& __y)
 275:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****     { return (__x._M_node == __y._M_node) ? (__x._M_cur < __y._M_cur)
 276:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****                                           : (__x._M_node < __y._M_node); }
 277:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
 278:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****   template<typename _Tp, typename _RefL, typename _PtrL,
 279:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	   typename _RefR, typename _PtrR>
 280:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****     inline bool
 281:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****     operator<(const _Deque_iterator<_Tp, _RefL, _PtrL>& __x,
 282:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	      const _Deque_iterator<_Tp, _RefR, _PtrR>& __y)
 283:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****     { return (__x._M_node == __y._M_node) ? (__x._M_cur < __y._M_cur)
 284:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	                                  : (__x._M_node < __y._M_node); }
 285:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
 286:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****   template<typename _Tp, typename _Ref, typename _Ptr>
 287:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****     inline bool
 288:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****     operator>(const _Deque_iterator<_Tp, _Ref, _Ptr>& __x,
 289:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	      const _Deque_iterator<_Tp, _Ref, _Ptr>& __y)
 290:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****     { return __y < __x; }
 291:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
 292:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****   template<typename _Tp, typename _RefL, typename _PtrL,
 293:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	   typename _RefR, typename _PtrR>
 294:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****     inline bool
 295:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****     operator>(const _Deque_iterator<_Tp, _RefL, _PtrL>& __x,
 296:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	      const _Deque_iterator<_Tp, _RefR, _PtrR>& __y)
 297:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****     { return __y < __x; }
 298:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
 299:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****   template<typename _Tp, typename _Ref, typename _Ptr>
 300:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****     inline bool
 301:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****     operator<=(const _Deque_iterator<_Tp, _Ref, _Ptr>& __x,
 302:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	       const _Deque_iterator<_Tp, _Ref, _Ptr>& __y)
 303:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****     { return !(__y < __x); }
 304:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
 305:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****   template<typename _Tp, typename _RefL, typename _PtrL,
 306:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	   typename _RefR, typename _PtrR>
 307:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****     inline bool
 308:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****     operator<=(const _Deque_iterator<_Tp, _RefL, _PtrL>& __x,
 309:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	       const _Deque_iterator<_Tp, _RefR, _PtrR>& __y)
 310:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****     { return !(__y < __x); }
 311:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
 312:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****   template<typename _Tp, typename _Ref, typename _Ptr>
 313:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****     inline bool
 314:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****     operator>=(const _Deque_iterator<_Tp, _Ref, _Ptr>& __x,
 315:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	       const _Deque_iterator<_Tp, _Ref, _Ptr>& __y)
 316:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****     { return !(__x < __y); }
 317:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
 318:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****   template<typename _Tp, typename _RefL, typename _PtrL,
 319:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	   typename _RefR, typename _PtrR>
 320:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****     inline bool
 321:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****     operator>=(const _Deque_iterator<_Tp, _RefL, _PtrL>& __x,
 322:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	       const _Deque_iterator<_Tp, _RefR, _PtrR>& __y)
 323:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****     { return !(__x < __y); }
 324:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
 325:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****   // _GLIBCXX_RESOLVE_LIB_DEFECTS
 326:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****   // According to the resolution of DR179 not only the various comparison
 327:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****   // operators but also operator- must accept mixed iterator/const_iterator
 328:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****   // parameters.
 329:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****   template<typename _Tp, typename _Ref, typename _Ptr>
 330:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****     inline typename _Deque_iterator<_Tp, _Ref, _Ptr>::difference_type
 331:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****     operator-(const _Deque_iterator<_Tp, _Ref, _Ptr>& __x,
 332:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	      const _Deque_iterator<_Tp, _Ref, _Ptr>& __y)
 333:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****     {
 334:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       return typename _Deque_iterator<_Tp, _Ref, _Ptr>::difference_type
 335:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	(_Deque_iterator<_Tp, _Ref, _Ptr>::_S_buffer_size())
 336:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	* (__x._M_node - __y._M_node - 1) + (__x._M_cur - __x._M_first)
 337:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	+ (__y._M_last - __y._M_cur);
 338:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****     }
 339:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
 340:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****   template<typename _Tp, typename _RefL, typename _PtrL,
 341:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	   typename _RefR, typename _PtrR>
 342:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****     inline typename _Deque_iterator<_Tp, _RefL, _PtrL>::difference_type
 343:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****     operator-(const _Deque_iterator<_Tp, _RefL, _PtrL>& __x,
 344:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	      const _Deque_iterator<_Tp, _RefR, _PtrR>& __y)
 345:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****     {
 346:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       return typename _Deque_iterator<_Tp, _RefL, _PtrL>::difference_type
 347:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	(_Deque_iterator<_Tp, _RefL, _PtrL>::_S_buffer_size())
 348:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	* (__x._M_node - __y._M_node - 1) + (__x._M_cur - __x._M_first)
 349:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	+ (__y._M_last - __y._M_cur);
 350:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****     }
 351:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
 352:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****   template<typename _Tp, typename _Ref, typename _Ptr>
 353:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****     inline _Deque_iterator<_Tp, _Ref, _Ptr>
 354:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****     operator+(ptrdiff_t __n, const _Deque_iterator<_Tp, _Ref, _Ptr>& __x)
 355:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****     { return __x + __n; }
 356:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
 357:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****   template<typename _Tp>
 358:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****     void
 359:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****     fill(const _Deque_iterator<_Tp, _Tp&, _Tp*>&,
 360:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	 const _Deque_iterator<_Tp, _Tp&, _Tp*>&, const _Tp&);
 361:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
 362:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****   template<typename _Tp>
 363:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****     _Deque_iterator<_Tp, _Tp&, _Tp*>
 364:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****     copy(_Deque_iterator<_Tp, const _Tp&, const _Tp*>,
 365:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	 _Deque_iterator<_Tp, const _Tp&, const _Tp*>,
 366:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	 _Deque_iterator<_Tp, _Tp&, _Tp*>);
 367:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
 368:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****   template<typename _Tp>
 369:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****     inline _Deque_iterator<_Tp, _Tp&, _Tp*>
 370:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****     copy(_Deque_iterator<_Tp, _Tp&, _Tp*> __first,
 371:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	 _Deque_iterator<_Tp, _Tp&, _Tp*> __last,
 372:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	 _Deque_iterator<_Tp, _Tp&, _Tp*> __result)
 373:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****     { return std::copy(_Deque_iterator<_Tp, const _Tp&, const _Tp*>(__first),
 374:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 		       _Deque_iterator<_Tp, const _Tp&, const _Tp*>(__last),
 375:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 		       __result); }
 376:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
 377:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****   template<typename _Tp>
 378:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****     _Deque_iterator<_Tp, _Tp&, _Tp*>
 379:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****     copy_backward(_Deque_iterator<_Tp, const _Tp&, const _Tp*>,
 380:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 		  _Deque_iterator<_Tp, const _Tp&, const _Tp*>,
 381:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 		  _Deque_iterator<_Tp, _Tp&, _Tp*>);
 382:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
 383:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****   template<typename _Tp>
 384:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****     inline _Deque_iterator<_Tp, _Tp&, _Tp*>
 385:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****     copy_backward(_Deque_iterator<_Tp, _Tp&, _Tp*> __first,
 386:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 		  _Deque_iterator<_Tp, _Tp&, _Tp*> __last,
 387:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 		  _Deque_iterator<_Tp, _Tp&, _Tp*> __result)
 388:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****     { return std::copy_backward(_Deque_iterator<_Tp,
 389:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 				const _Tp&, const _Tp*>(__first),
 390:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 				_Deque_iterator<_Tp,
 391:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 				const _Tp&, const _Tp*>(__last),
 392:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 				__result); }
 393:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
 394:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** #if __cplusplus >= 201103L
 395:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****   template<typename _Tp>
 396:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****     _Deque_iterator<_Tp, _Tp&, _Tp*>
 397:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****     move(_Deque_iterator<_Tp, const _Tp&, const _Tp*>,
 398:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	 _Deque_iterator<_Tp, const _Tp&, const _Tp*>,
 399:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	 _Deque_iterator<_Tp, _Tp&, _Tp*>);
 400:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
 401:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****   template<typename _Tp>
 402:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****     inline _Deque_iterator<_Tp, _Tp&, _Tp*>
 403:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****     move(_Deque_iterator<_Tp, _Tp&, _Tp*> __first,
 404:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	 _Deque_iterator<_Tp, _Tp&, _Tp*> __last,
 405:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	 _Deque_iterator<_Tp, _Tp&, _Tp*> __result)
 406:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****     { return std::move(_Deque_iterator<_Tp, const _Tp&, const _Tp*>(__first),
 407:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 		       _Deque_iterator<_Tp, const _Tp&, const _Tp*>(__last),
 408:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 		       __result); }
 409:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
 410:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****   template<typename _Tp>
 411:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****     _Deque_iterator<_Tp, _Tp&, _Tp*>
 412:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****     move_backward(_Deque_iterator<_Tp, const _Tp&, const _Tp*>,
 413:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 		  _Deque_iterator<_Tp, const _Tp&, const _Tp*>,
 414:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 		  _Deque_iterator<_Tp, _Tp&, _Tp*>);
 415:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
 416:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****   template<typename _Tp>
 417:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****     inline _Deque_iterator<_Tp, _Tp&, _Tp*>
 418:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****     move_backward(_Deque_iterator<_Tp, _Tp&, _Tp*> __first,
 419:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 		  _Deque_iterator<_Tp, _Tp&, _Tp*> __last,
 420:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 		  _Deque_iterator<_Tp, _Tp&, _Tp*> __result)
 421:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****     { return std::move_backward(_Deque_iterator<_Tp,
 422:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 				const _Tp&, const _Tp*>(__first),
 423:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 				_Deque_iterator<_Tp,
 424:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 				const _Tp&, const _Tp*>(__last),
 425:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 				__result); }
 426:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** #endif
 427:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
 428:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****   /**
 429:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****    *  Deque base class.  This class provides the unified face for %deque's
 430:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****    *  allocation.  This class's constructor and destructor allocate and
 431:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****    *  deallocate (but do not initialize) storage.  This makes %exception
 432:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****    *  safety easier.
 433:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****    *
 434:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****    *  Nothing in this class ever constructs or destroys an actual Tp element.
 435:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****    *  (Deque handles that itself.)  Only/All memory management is performed
 436:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****    *  here.
 437:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****   */
 438:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****   template<typename _Tp, typename _Alloc>
 439:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****     class _Deque_base
 440:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****     {
 441:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****     public:
 442:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       typedef _Alloc                  allocator_type;
 443:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
 444:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       allocator_type
 445:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       get_allocator() const _GLIBCXX_NOEXCEPT
 446:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       { return allocator_type(_M_get_Tp_allocator()); }
 447:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
 448:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       typedef _Deque_iterator<_Tp, _Tp&, _Tp*>             iterator;
 449:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       typedef _Deque_iterator<_Tp, const _Tp&, const _Tp*> const_iterator;
 450:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
 451:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       _Deque_base()
 452:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       : _M_impl()
 453:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       { _M_initialize_map(0); }
 454:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
 455:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       _Deque_base(size_t __num_elements)
 456:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       : _M_impl()
 457:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       { _M_initialize_map(__num_elements); }
 458:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
 459:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       _Deque_base(const allocator_type& __a, size_t __num_elements)
 460:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       : _M_impl(__a)
 461:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       { _M_initialize_map(__num_elements); }
 462:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
 463:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       _Deque_base(const allocator_type& __a)
 464:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       : _M_impl(__a)
 465:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       { }
 466:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
 467:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** #if __cplusplus >= 201103L
 468:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       _Deque_base(_Deque_base&& __x)
 469:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       : _M_impl(std::move(__x._M_get_Tp_allocator()))
 470:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       {
 471:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	_M_initialize_map(0);
 472:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	if (__x._M_impl._M_map)
 473:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	  {
 474:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	    std::swap(this->_M_impl._M_start, __x._M_impl._M_start);
 475:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	    std::swap(this->_M_impl._M_finish, __x._M_impl._M_finish);
 476:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	    std::swap(this->_M_impl._M_map, __x._M_impl._M_map);
 477:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	    std::swap(this->_M_impl._M_map_size, __x._M_impl._M_map_size);
 478:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	  }
 479:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       }
 480:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** #endif
 481:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
 482:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       ~_Deque_base();
 483:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
 484:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****     protected:
 485:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       //This struct encapsulates the implementation of the std::deque
 486:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       //standard container and at the same time makes use of the EBO
 487:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       //for empty allocators.
 488:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       typedef typename _Alloc::template rebind<_Tp*>::other _Map_alloc_type;
 489:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
 490:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       typedef typename _Alloc::template rebind<_Tp>::other  _Tp_alloc_type;
 491:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
 492:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       struct _Deque_impl
 493:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       : public _Tp_alloc_type
 494:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       {
 495:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	_Tp** _M_map;
 496:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	size_t _M_map_size;
 497:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	iterator _M_start;
 498:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	iterator _M_finish;
 499:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
 500:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	_Deque_impl()
 501:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	: _Tp_alloc_type(), _M_map(0), _M_map_size(0),
 502:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	  _M_start(), _M_finish()
 503:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	{ }
 504:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
 505:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	_Deque_impl(const _Tp_alloc_type& __a)
 506:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	: _Tp_alloc_type(__a), _M_map(0), _M_map_size(0),
 507:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	  _M_start(), _M_finish()
 508:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	{ }
 509:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
 510:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** #if __cplusplus >= 201103L
 511:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	_Deque_impl(_Tp_alloc_type&& __a)
 512:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	: _Tp_alloc_type(std::move(__a)), _M_map(0), _M_map_size(0),
 513:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	  _M_start(), _M_finish()
 514:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	{ }
 515:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** #endif
 516:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       };
 517:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
 518:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       _Tp_alloc_type&
 519:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 520:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       { return *static_cast<_Tp_alloc_type*>(&this->_M_impl); }
 521:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
 522:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       const _Tp_alloc_type&
 523:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 524:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       { return *static_cast<const _Tp_alloc_type*>(&this->_M_impl); }
 525:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
 526:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       _Map_alloc_type
 527:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       _M_get_map_allocator() const _GLIBCXX_NOEXCEPT
 528:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       { return _Map_alloc_type(_M_get_Tp_allocator()); }
 529:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
 530:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       _Tp*
 531:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       _M_allocate_node()
 532:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       { 
 533:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	return _M_impl._Tp_alloc_type::allocate(__deque_buf_size(sizeof(_Tp)));
 534:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       }
 535:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
 536:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       void
 537:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       _M_deallocate_node(_Tp* __p)
 538:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       {
 539:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	_M_impl._Tp_alloc_type::deallocate(__p, __deque_buf_size(sizeof(_Tp)));
 540:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       }
 541:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
 542:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       _Tp**
 543:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       _M_allocate_map(size_t __n)
 544:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       { return _M_get_map_allocator().allocate(__n); }
 545:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
 546:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       void
 547:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       _M_deallocate_map(_Tp** __p, size_t __n)
 548:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       { _M_get_map_allocator().deallocate(__p, __n); }
 549:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
 550:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****     protected:
 551:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       void _M_initialize_map(size_t);
 552:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       void _M_create_nodes(_Tp** __nstart, _Tp** __nfinish);
 553:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       void _M_destroy_nodes(_Tp** __nstart, _Tp** __nfinish);
 554:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       enum { _S_initial_map_size = 8 };
 555:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
 556:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       _Deque_impl _M_impl;
 557:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****     };
 558:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
 559:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****   template<typename _Tp, typename _Alloc>
 560:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****     _Deque_base<_Tp, _Alloc>::
 561:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****     ~_Deque_base()
 562:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****     {
 563:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       if (this->_M_impl._M_map)
 145                             		.loc 7 563 0
 146 0004 EC 11                   		mov.L	[r1], r1
 147 0006 61 01                   		cmp	#0, r1
 148 0008 20 23                   		beq	.L13
 564:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	{
 565:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	  _M_destroy_nodes(this->_M_impl._M_start._M_node,
 566:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 			   this->_M_impl._M_finish._M_node + 1);
 149                             		.loc 7 566 0
 150 000a ED BA 09                		mov.L	36[r11], r10
 151 000d ED B7 05                		mov.L	20[r11], r7
 152 0010 62 4A                   		add	#4, r10
 153                             	.LBB974:
 154                             	.LBB975:
 567:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	  _M_deallocate_map(this->_M_impl._M_map, this->_M_impl._M_map_size);
 568:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	}
 569:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****     }
 570:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
 571:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****   /**
 572:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****    *  @brief Layout storage.
 573:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****    *  @param  __num_elements  The count of T's for which to allocate space
 574:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****    *                        at first.
 575:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****    *  @return   Nothing.
 576:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****    *
 577:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****    *  The initial underlying memory layout is a bit complicated...
 578:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****   */
 579:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****   template<typename _Tp, typename _Alloc>
 580:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****     void
 581:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****     _Deque_base<_Tp, _Alloc>::
 582:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****     _M_initialize_map(size_t __num_elements)
 583:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****     {
 584:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       const size_t __num_nodes = (__num_elements/ __deque_buf_size(sizeof(_Tp))
 585:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 				  + 1);
 586:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
 587:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,
 588:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 					   size_t(__num_nodes + 2));
 589:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       this->_M_impl._M_map = _M_allocate_map(this->_M_impl._M_map_size);
 590:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
 591:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       // For "small" maps (needing less than _M_map_size nodes), allocation
 592:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       // starts in the middle elements and grows outwards.  So nstart may be
 593:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       // the beginning of _M_map, but for small maps it may be as far in as
 594:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       // _M_map+3.
 595:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
 596:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       _Tp** __nstart = (this->_M_impl._M_map
 597:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 			+ (this->_M_impl._M_map_size - __num_nodes) / 2);
 598:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       _Tp** __nfinish = __nstart + __num_nodes;
 599:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
 600:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       __try
 601:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	{ _M_create_nodes(__nstart, __nfinish); }
 602:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       __catch(...)
 603:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	{
 604:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	  _M_deallocate_map(this->_M_impl._M_map, this->_M_impl._M_map_size);
 605:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	  this->_M_impl._M_map = 0;
 606:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	  this->_M_impl._M_map_size = 0;
 607:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	  __throw_exception_again;
 608:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	}
 609:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
 610:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       this->_M_impl._M_start._M_set_node(__nstart);
 611:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       this->_M_impl._M_finish._M_set_node(__nfinish - 1);
 612:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       this->_M_impl._M_start._M_cur = _M_impl._M_start._M_first;
 613:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
 614:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 					+ __num_elements
 615:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 					% __deque_buf_size(sizeof(_Tp)));
 616:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****     }
 617:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
 618:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****   template<typename _Tp, typename _Alloc>
 619:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****     void
 620:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****     _Deque_base<_Tp, _Alloc>::
 621:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****     _M_create_nodes(_Tp** __nstart, _Tp** __nfinish)
 622:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****     {
 623:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       _Tp** __cur;
 624:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       __try
 625:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	{
 626:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	  for (__cur = __nstart; __cur < __nfinish; ++__cur)
 627:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	    *__cur = this->_M_allocate_node();
 628:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	}
 629:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       __catch(...)
 630:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	{
 631:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	  _M_destroy_nodes(__nstart, __cur);
 632:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	  __throw_exception_again;
 633:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	}
 634:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****     }
 635:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
 636:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****   template<typename _Tp, typename _Alloc>
 637:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****     void
 638:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****     _Deque_base<_Tp, _Alloc>::
 639:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****     _M_destroy_nodes(_Tp** __nstart, _Tp** __nfinish)
 640:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****     {
 641:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       for (_Tp** __n = __nstart; __n < __nfinish; ++__n)
 155                             		.loc 7 641 0
 156 0012 47 A7                   		cmp	r10, r7
 157 0014 22 11                   		bgeu	.L15
 158 0016 EF 00                   		.balign 8,3,3
 159                             	.L17:
 160                             	.LBB976:
 161                             	.LBB977:
 162                             	.LBB978:
 163                             		.file 8 "c:\\progra~2\\gccfor~2.201\\rx-elf\\rx-elf\\rx-elf\\include\\c++\\4.8.0.201602-gnurx\\ext
   1:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\ext\new_allocator.h **** // Allocator that wraps operator new -*- C++ -*-
   2:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\ext\new_allocator.h **** 
   3:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\ext\new_allocator.h **** // Copyright (C) 2001-2013 Free Software Foundation, Inc.
   4:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\ext\new_allocator.h **** //
   5:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\ext\new_allocator.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\ext\new_allocator.h **** // software; you can redistribute it and/or modify it under the
   7:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\ext\new_allocator.h **** // terms of the GNU General Public License as published by the
   8:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\ext\new_allocator.h **** // Free Software Foundation; either version 3, or (at your option)
   9:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\ext\new_allocator.h **** // any later version.
  10:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\ext\new_allocator.h **** 
  11:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\ext\new_allocator.h **** // This library is distributed in the hope that it will be useful,
  12:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\ext\new_allocator.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\ext\new_allocator.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\ext\new_allocator.h **** // GNU General Public License for more details.
  15:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\ext\new_allocator.h **** 
  16:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\ext\new_allocator.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\ext\new_allocator.h **** // permissions described in the GCC Runtime Library Exception, version
  18:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\ext\new_allocator.h **** // 3.1, as published by the Free Software Foundation.
  19:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\ext\new_allocator.h **** 
  20:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\ext\new_allocator.h **** // You should have received a copy of the GNU General Public License and
  21:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\ext\new_allocator.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\ext\new_allocator.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\ext\new_allocator.h **** // <http://www.gnu.org/licenses/>.
  24:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\ext\new_allocator.h **** 
  25:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\ext\new_allocator.h **** /** @file ext/new_allocator.h
  26:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\ext\new_allocator.h ****  *  This file is a GNU extension to the Standard C++ Library.
  27:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\ext\new_allocator.h ****  */
  28:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\ext\new_allocator.h **** 
  29:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\ext\new_allocator.h **** #ifndef _NEW_ALLOCATOR_H
  30:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\ext\new_allocator.h **** #define _NEW_ALLOCATOR_H 1
  31:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\ext\new_allocator.h **** 
  32:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\ext\new_allocator.h **** #include <bits/c++config.h>
  33:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\ext\new_allocator.h **** #include <new>
  34:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\ext\new_allocator.h **** #include <bits/functexcept.h>
  35:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\ext\new_allocator.h **** #include <bits/move.h>
  36:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\ext\new_allocator.h **** #if __cplusplus >= 201103L
  37:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\ext\new_allocator.h **** #include <type_traits>
  38:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\ext\new_allocator.h **** #endif
  39:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\ext\new_allocator.h **** 
  40:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\ext\new_allocator.h **** namespace __gnu_cxx _GLIBCXX_VISIBILITY(default)
  41:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\ext\new_allocator.h **** {
  42:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\ext\new_allocator.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  43:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\ext\new_allocator.h **** 
  44:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\ext\new_allocator.h ****   using std::size_t;
  45:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\ext\new_allocator.h ****   using std::ptrdiff_t;
  46:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\ext\new_allocator.h **** 
  47:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\ext\new_allocator.h ****   /**
  48:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\ext\new_allocator.h ****    *  @brief  An allocator that uses global new, as per [20.4].
  49:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\ext\new_allocator.h ****    *  @ingroup allocators
  50:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\ext\new_allocator.h ****    *
  51:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\ext\new_allocator.h ****    *  This is precisely the allocator defined in the C++ Standard. 
  52:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\ext\new_allocator.h ****    *    - all allocation calls operator new
  53:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\ext\new_allocator.h ****    *    - all deallocation calls operator delete
  54:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\ext\new_allocator.h ****    *
  55:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\ext\new_allocator.h ****    *  @tparam  _Tp  Type of allocated object.
  56:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\ext\new_allocator.h ****    */
  57:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\ext\new_allocator.h ****   template<typename _Tp>
  58:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\ext\new_allocator.h ****     class new_allocator
  59:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\ext\new_allocator.h ****     {
  60:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\ext\new_allocator.h ****     public:
  61:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\ext\new_allocator.h ****       typedef size_t     size_type;
  62:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\ext\new_allocator.h ****       typedef ptrdiff_t  difference_type;
  63:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\ext\new_allocator.h ****       typedef _Tp*       pointer;
  64:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\ext\new_allocator.h ****       typedef const _Tp* const_pointer;
  65:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\ext\new_allocator.h ****       typedef _Tp&       reference;
  66:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\ext\new_allocator.h ****       typedef const _Tp& const_reference;
  67:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\ext\new_allocator.h ****       typedef _Tp        value_type;
  68:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\ext\new_allocator.h **** 
  69:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\ext\new_allocator.h ****       template<typename _Tp1>
  70:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\ext\new_allocator.h ****         struct rebind
  71:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\ext\new_allocator.h ****         { typedef new_allocator<_Tp1> other; };
  72:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\ext\new_allocator.h **** 
  73:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\ext\new_allocator.h **** #if __cplusplus >= 201103L
  74:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\ext\new_allocator.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
  75:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\ext\new_allocator.h ****       // 2103. propagate_on_container_move_assignment
  76:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\ext\new_allocator.h ****       typedef std::true_type propagate_on_container_move_assignment;
  77:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\ext\new_allocator.h **** #endif
  78:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\ext\new_allocator.h **** 
  79:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\ext\new_allocator.h ****       new_allocator() _GLIBCXX_USE_NOEXCEPT { }
  80:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\ext\new_allocator.h **** 
  81:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\ext\new_allocator.h ****       new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
  82:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\ext\new_allocator.h **** 
  83:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\ext\new_allocator.h ****       template<typename _Tp1>
  84:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\ext\new_allocator.h ****         new_allocator(const new_allocator<_Tp1>&) _GLIBCXX_USE_NOEXCEPT { }
  85:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\ext\new_allocator.h **** 
  86:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\ext\new_allocator.h ****       ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
  87:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\ext\new_allocator.h **** 
  88:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\ext\new_allocator.h ****       pointer
  89:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\ext\new_allocator.h ****       address(reference __x) const _GLIBCXX_NOEXCEPT
  90:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\ext\new_allocator.h ****       { return std::__addressof(__x); }
  91:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\ext\new_allocator.h **** 
  92:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\ext\new_allocator.h ****       const_pointer
  93:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\ext\new_allocator.h ****       address(const_reference __x) const _GLIBCXX_NOEXCEPT
  94:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\ext\new_allocator.h ****       { return std::__addressof(__x); }
  95:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\ext\new_allocator.h **** 
  96:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\ext\new_allocator.h ****       // NB: __n is permitted to be 0.  The C++ standard says nothing
  97:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\ext\new_allocator.h ****       // about what the return value is when __n == 0.
  98:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\ext\new_allocator.h ****       pointer
  99:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\ext\new_allocator.h ****       allocate(size_type __n, const void* = 0)
 100:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\ext\new_allocator.h ****       { 
 101:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\ext\new_allocator.h **** 	if (__n > this->max_size())
 102:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\ext\new_allocator.h **** 	  std::__throw_bad_alloc();
 103:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\ext\new_allocator.h **** 
 104:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\ext\new_allocator.h **** 	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 105:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\ext\new_allocator.h ****       }
 106:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\ext\new_allocator.h **** 
 107:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\ext\new_allocator.h ****       // __p is not permitted to be a null pointer.
 108:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\ext\new_allocator.h ****       void
 109:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\ext\new_allocator.h ****       deallocate(pointer __p, size_type)
 110:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\ext\new_allocator.h ****       { ::operator delete(__p); }
 164                             		.loc 8 110 0
 165 0018 FD 2A 71                		mov.L	[r7+], r1
 166 001b 05 00 00 00             		bsr	__ZdlPv
 167                             	.LBE978:
 168                             	.LBE977:
 169                             	.LBE976:
 170                             		.loc 7 641 0
 171 001f 47 7A                   		cmp	r7, r10
 172 0021 24 F7                   		bgtu	.L17
 173 0023 EC B1                   		mov.L	[r11], r1
 174                             		.balign 8,3,1
 175                             	.L15:
 176                             	.LBE975:
 177                             	.LBE974:
 178                             	.LBE973:
 179                             	.LBE972:
 180                             	.LBE971:
 181                             		.loc 6 93 0
 182 0025 6F 7B                   		popm	r7-r11
 183                             	.LBB984:
 184                             	.LBB983:
 185                             	.LBB982:
 186                             	.LBB979:
 187                             	.LBB980:
 188                             	.LBB981:
 189                             		.loc 8 110 0
 190 0027 04 00 00 00             		bra	__ZdlPv
 191                             	.L13:
 192                             	.LBE981:
 193                             	.LBE980:
 194                             	.LBE979:
 195                             	.LBE982:
 196                             	.LBE983:
 197                             	.LBE984:
 198                             		.loc 6 93 0
 199 002b 3F 7B 05                		rtsd	#20, r7-r11
 200                             	.LFE1734:
 202                             		.weak	__ZNSt5queueIhSt5dequeIhSaIhEEED1Ev
 203                             		.set	__ZNSt5queueIhSt5dequeIhSaIhEEED1Ev,__ZNSt5queueIhSt5dequeIhSaIhEEED2Ev
 204 002e EF 00                   		.section	.text._ZN10WallSensorD2Ev,"axG",@progbits,_ZN10WallSensorD5Ev,comdat
 205                             		.weak	__ZN10WallSensorD2Ev
 207                             	__ZN10WallSensorD2Ev:
 208                             	.LFB606:
 209                             		.file 9 "C:\\Users\\ryota\\e2_studio\\workspace\\umouse\\src\\robot_object/wallsensor.hpp"
   1:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\wallsensor.hpp **** #ifndef WALLSENSOR_H
   2:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\wallsensor.hpp **** #define WALLSENSOR_H
   3:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\wallsensor.hpp **** 
   4:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\wallsensor.hpp **** #include "iodefine.h"
   5:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\wallsensor.hpp **** #include "stdint.h"
   6:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\wallsensor.hpp **** #include <deque>
   7:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\wallsensor.hpp **** 
   8:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\wallsensor.hpp **** using std::deque;
   9:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\wallsensor.hpp **** 
  10:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\wallsensor.hpp **** 
  11:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\wallsensor.hpp **** 
  12:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\wallsensor.hpp **** class WallSensor{
  13:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\wallsensor.hpp **** 
  14:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\wallsensor.hpp **** private:
  15:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\wallsensor.hpp ****     const uint8_t BUFF_SIZE = 5;
  16:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\wallsensor.hpp ****     bool enable;
  17:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\wallsensor.hpp **** 
  18:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\wallsensor.hpp ****     WallSensor(){
  19:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\wallsensor.hpp ****         enable = true;
  20:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\wallsensor.hpp ****         ahead_on = 0;
  21:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\wallsensor.hpp ****         left_on  = 0;
  22:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\wallsensor.hpp ****         right_on = 0;
  23:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\wallsensor.hpp **** 
  24:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\wallsensor.hpp ****         ahead_off = 0;
  25:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\wallsensor.hpp ****         left_off = 0;
  26:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\wallsensor.hpp ****         right_off = 0;
  27:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\wallsensor.hpp ****         for(uint8_t i=0;i<BUFF_SIZE;i++){
  28:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\wallsensor.hpp ****             ahead.push_front(0);
  29:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\wallsensor.hpp ****             right.push_front(0);
  30:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\wallsensor.hpp ****             left.push_front(0);
  31:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\wallsensor.hpp ****         }
  32:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\wallsensor.hpp **** 
  33:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\wallsensor.hpp ****     };
  34:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\wallsensor.hpp ****     WallSensor(WallSensor&){
  35:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\wallsensor.hpp ****         enable = true;
  36:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\wallsensor.hpp ****         ahead_on = 0;
  37:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\wallsensor.hpp ****         left_on = 0;
  38:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\wallsensor.hpp ****         right_on = 0;
  39:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\wallsensor.hpp **** 
  40:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\wallsensor.hpp ****         ahead_off = 0;
  41:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\wallsensor.hpp ****         left_off = 0;
  42:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\wallsensor.hpp ****         right_off = 0;
  43:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\wallsensor.hpp ****         for(uint8_t i=0;i<BUFF_SIZE;i++){
  44:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\wallsensor.hpp ****             ahead.push_front(0);
  45:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\wallsensor.hpp ****             right.push_front(0);
  46:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\wallsensor.hpp ****             left.push_front(0);
  47:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\wallsensor.hpp ****         }
  48:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\wallsensor.hpp **** 
  49:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\wallsensor.hpp ****     };
  50:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\wallsensor.hpp ****     ~WallSensor(){
 210                             		.loc 9 50 0
 211 0000 6E 7B                   		pushm	r7-r11
 212                             	.LCFI3:
 213                             		.loc 9 50 0
 214 0002 EF 1A                   		mov.L	r1, r10
 215                             	.LBB1025:
 216                             	.LBB1026:
 217                             	.LBB1027:
 218                             	.LBB1028:
 563:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	{
 219                             		.loc 7 563 0
 220 0004 AE 11                   		mov.L	96[r1], r1
 221                             	.LBE1028:
 222                             	.LBE1027:
 223                             	.LBE1026:
  51:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\wallsensor.hpp ****         enable = false;
 224                             		.loc 9 51 0
 225 0006 F9 A4 01 00             		mov.B	#0, 1[r10]
 226                             	.LBB1039:
 227                             	.LBB1038:
 228                             	.LBB1037:
 563:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	{
 229                             		.loc 7 563 0
 230 000a 61 01                   		cmp	#0, r1
 231 000c 20 20                   		beq	.L21
 566:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	  _M_deallocate_map(this->_M_impl._M_map, this->_M_impl._M_map_size);
 232                             		.loc 7 566 0
 233 000e ED AB 21                		mov.L	132[r10], r11
 234 0011 ED A7 1D                		mov.L	116[r10], r7
 235 0014 62 4B                   		add	#4, r11
 236                             	.LBB1029:
 237                             	.LBB1030:
 238                             		.loc 7 641 0
 239 0016 47 B7                   		cmp	r11, r7
 240 0018 22 10                   		bgeu	.L22
 241                             		.balign 8,3,3
 242                             	.L24:
 243                             	.LBB1031:
 244                             	.LBB1032:
 245                             	.LBB1033:
 246                             		.loc 8 110 0
 247 001a FD 2A 71                		mov.L	[r7+], r1
 248 001d 05 00 00 00             		bsr	__ZdlPv
 249                             	.LBE1033:
 250                             	.LBE1032:
 251                             	.LBE1031:
 252                             		.loc 7 641 0
 253 0021 47 7B                   		cmp	r7, r11
 254 0023 24 F7                   		bgtu	.L24
 255 0025 ED A1 18                		mov.L	96[r10], r1
 256                             		.balign 8,3,3
 257                             	.L22:
 258                             	.LBE1030:
 259                             	.LBE1029:
 260                             	.LBB1034:
 261                             	.LBB1035:
 262                             	.LBB1036:
 263                             		.loc 8 110 0
 264 0028 05 00 00 00             		bsr	__ZdlPv
 265                             		.balign 8,3,1
 266                             	.L21:
 267                             	.LBE1036:
 268                             	.LBE1035:
 269                             	.LBE1034:
 270                             	.LBE1037:
 271                             	.LBE1038:
 272                             	.LBE1039:
 273                             	.LBB1040:
 274                             	.LBB1041:
 275                             	.LBB1042:
 563:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	{
 276                             		.loc 7 563 0
 277 002c ED A1 0E                		mov.L	56[r10], r1
 278 002f 61 01                   		cmp	#0, r1
 279 0031 20 23                   		beq	.L25
 566:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	  _M_deallocate_map(this->_M_impl._M_map, this->_M_impl._M_map_size);
 280                             		.loc 7 566 0
 281 0033 ED AB 17                		mov.L	92[r10], r11
 282 0036 ED A7 13                		mov.L	76[r10], r7
 283 0039 62 4B                   		add	#4, r11
 284                             	.LBB1043:
 285                             	.LBB1044:
 286                             		.loc 7 641 0
 287 003b 47 B7                   		cmp	r11, r7
 288 003d 22 13                   		bgeu	.L26
 289 003f 03                      		.balign 8,3,3
 290                             	.L28:
 291                             	.LBB1045:
 292                             	.LBB1046:
 293                             	.LBB1047:
 294                             		.loc 8 110 0
 295 0040 FD 2A 71                		mov.L	[r7+], r1
 296 0043 05 00 00 00             		bsr	__ZdlPv
 297                             	.LBE1047:
 298                             	.LBE1046:
 299                             	.LBE1045:
 300                             		.loc 7 641 0
 301 0047 47 7B                   		cmp	r7, r11
 302 0049 24 F7                   		bgtu	.L28
 303 004b ED A1 0E                		mov.L	56[r10], r1
 304 004e EF 00                   		.balign 8,3,3
 305                             	.L26:
 306                             	.LBE1044:
 307                             	.LBE1043:
 308                             	.LBB1048:
 309                             	.LBB1049:
 310                             	.LBB1050:
 311                             		.loc 8 110 0
 312 0050 05 00 00 00             		bsr	__ZdlPv
 313                             		.balign 8,3,1
 314                             	.L25:
 315                             	.LBE1050:
 316                             	.LBE1049:
 317                             	.LBE1048:
 318                             	.LBE1042:
 319                             	.LBE1041:
 320                             	.LBE1040:
 321                             	.LBB1051:
 322                             	.LBB1052:
 323                             	.LBB1053:
 563:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	{
 324                             		.loc 7 563 0
 325 0054 ED A1 04                		mov.L	16[r10], r1
 326 0057 61 01                   		cmp	#0, r1
 327 0059 20 23                   		beq	.L20
 566:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	  _M_deallocate_map(this->_M_impl._M_map, this->_M_impl._M_map_size);
 328                             		.loc 7 566 0
 329 005b ED AB 0D                		mov.L	52[r10], r11
 330 005e ED A7 09                		mov.L	36[r10], r7
 331 0061 62 4B                   		add	#4, r11
 332                             	.LBB1054:
 333                             	.LBB1055:
 334                             		.loc 7 641 0
 335 0063 47 B7                   		cmp	r11, r7
 336 0065 22 11                   		bgeu	.L30
 337 0067 03                      		.balign 8,3,3
 338                             	.L32:
 339                             	.LBB1056:
 340                             	.LBB1057:
 341                             	.LBB1058:
 342                             		.loc 8 110 0
 343 0068 FD 2A 71                		mov.L	[r7+], r1
 344 006b 05 00 00 00             		bsr	__ZdlPv
 345                             	.LBE1058:
 346                             	.LBE1057:
 347                             	.LBE1056:
 348                             		.loc 7 641 0
 349 006f 47 7B                   		cmp	r7, r11
 350 0071 24 F7                   		bgtu	.L32
 351 0073 ED A1 04                		mov.L	16[r10], r1
 352                             		.balign 8,3,1
 353                             	.L30:
 354                             	.LBE1055:
 355                             	.LBE1054:
 356                             	.LBE1053:
 357                             	.LBE1052:
 358                             	.LBE1051:
 359                             	.LBE1025:
  52:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\wallsensor.hpp ****     };
 360                             		.loc 9 52 0
 361 0076 6F 7B                   		popm	r7-r11
 362                             	.LBB1065:
 363                             	.LBB1064:
 364                             	.LBB1063:
 365                             	.LBB1062:
 366                             	.LBB1059:
 367                             	.LBB1060:
 368                             	.LBB1061:
 369                             		.loc 8 110 0
 370 0078 04 00 00 00             		bra	__ZdlPv
 371                             	.L20:
 372                             	.LBE1061:
 373                             	.LBE1060:
 374                             	.LBE1059:
 375                             	.LBE1062:
 376                             	.LBE1063:
 377                             	.LBE1064:
 378                             	.LBE1065:
 379                             		.loc 9 52 0
 380 007c 3F 7B 05                		rtsd	#20, r7-r11
 381                             	.LFE606:
 383                             		.weak	__ZN10WallSensorD1Ev
 384                             		.set	__ZN10WallSensorD1Ev,__ZN10WallSensorD2Ev
 385 007f 03                      		.section P,"ax"
 386                             		.global	__Z12fetchCommandv
 388                             	__Z12fetchCommandv:
 389                             	.LFB1428:
 390                             		.file 10 "../src/peripheral/uart.cpp"
   1:../src/peripheral/uart.cpp **** /*
   2:../src/peripheral/uart.cpp ****  * uart.cpp
   3:../src/peripheral/uart.cpp ****  *
   4:../src/peripheral/uart.cpp ****  *  Created on: 2016/07/24
   5:../src/peripheral/uart.cpp ****  *      Author: ryota
   6:../src/peripheral/uart.cpp ****  */
   7:../src/peripheral/uart.cpp **** 
   8:../src/peripheral/uart.cpp **** #include <stdio.h>
   9:../src/peripheral/uart.cpp **** #include <stdarg.h>
  10:../src/peripheral/uart.cpp **** #include <stdint.h>
  11:../src/peripheral/uart.cpp **** 
  12:../src/peripheral/uart.cpp **** #include "timer.h"
  13:../src/peripheral/uart.cpp **** #include "timeInterrupt.hpp"
  14:../src/peripheral/uart.cpp **** #include "iodefine.h"
  15:../src/peripheral/uart.cpp **** #include "clock.h"
  16:../src/peripheral/uart.cpp **** #include "uart.hpp"
  17:../src/peripheral/uart.cpp **** #include "ad.h"
  18:../src/peripheral/uart.cpp **** #include "phaseCounting.h"
  19:../src/peripheral/uart.cpp **** #include "pwm.h"
  20:../src/peripheral/uart.cpp **** 
  21:../src/peripheral/uart.cpp **** #include "imu.hpp"
  22:../src/peripheral/uart.cpp **** #include "tactsw.h"
  23:../src/peripheral/uart.cpp **** #include "fcled.h"
  24:../src/peripheral/uart.cpp **** 
  25:../src/peripheral/uart.cpp **** #include "maze.h"
  26:../src/peripheral/uart.cpp **** #include "mouse.h"
  27:../src/peripheral/uart.cpp **** #include "wallsensor.hpp"
  28:../src/peripheral/uart.cpp **** #include "gamepad.h"
  29:../src/peripheral/uart.cpp **** 
  30:../src/peripheral/uart.cpp **** #include "myUtil.h"
  31:../src/peripheral/uart.cpp **** 
  32:../src/peripheral/uart.cpp **** #include <queue>
  33:../src/peripheral/uart.cpp **** #include <array>
  34:../src/peripheral/uart.cpp **** 
  35:../src/peripheral/uart.cpp **** #define PERIODIC_MSG_LEN  (250)
  36:../src/peripheral/uart.cpp **** #define RECEIVE_BUFF_LEN  (512)
  37:../src/peripheral/uart.cpp **** #define CMD_SIZE  (16)
  38:../src/peripheral/uart.cpp **** //#define DEBUG_SWITCH
  39:../src/peripheral/uart.cpp **** 
  40:../src/peripheral/uart.cpp **** using std::queue;
  41:../src/peripheral/uart.cpp **** static queue<uint8_t> transBuff;
  42:../src/peripheral/uart.cpp **** static queue<uint8_t> printfBuff;
  43:../src/peripheral/uart.cpp **** static uint8_t recieveBuff[RECEIVE_BUFF_LEN];
  44:../src/peripheral/uart.cpp **** static uint16_t recieveBuffCount = 0;
  45:../src/peripheral/uart.cpp **** static uint8_t periodicMsg[PERIODIC_MSG_LEN];
  46:../src/peripheral/uart.cpp **** //static queue<array<uint8_t, 10>> cmdBuff;
  47:../src/peripheral/uart.cpp **** 
  48:../src/peripheral/uart.cpp **** 
  49:../src/peripheral/uart.cpp **** void execCommand(uint8_t *cmd)
  50:../src/peripheral/uart.cpp **** {
  51:../src/peripheral/uart.cpp ****     FcLed& fcled = FcLed::getInstance();
  52:../src/peripheral/uart.cpp ****     uint8_t id = cmd[3];
  53:../src/peripheral/uart.cpp **** 
  54:../src/peripheral/uart.cpp ****     int16_t duty_int;
  55:../src/peripheral/uart.cpp ****     int16_t deg_int;
  56:../src/peripheral/uart.cpp **** 
  57:../src/peripheral/uart.cpp ****     int16_t rt = cmd[12];
  58:../src/peripheral/uart.cpp ****     int16_t lt = cmd[14];
  59:../src/peripheral/uart.cpp ****     float rt_f, lt_f;
  60:../src/peripheral/uart.cpp **** 
  61:../src/peripheral/uart.cpp ****     if(lt == 128){
  62:../src/peripheral/uart.cpp ****         PORT2.PODR.BIT.B0 = 0;
  63:../src/peripheral/uart.cpp ****         PORT1.PODR.BIT.B7 = 0;
  64:../src/peripheral/uart.cpp ****         lt_f = 0.001;
  65:../src/peripheral/uart.cpp ****         fcled.B.turn(0);
  66:../src/peripheral/uart.cpp ****     }
  67:../src/peripheral/uart.cpp ****     else if(lt>128){
  68:../src/peripheral/uart.cpp ****         PORT2.PODR.BIT.B0 = 1;
  69:../src/peripheral/uart.cpp ****         PORT1.PODR.BIT.B7 = 0;
  70:../src/peripheral/uart.cpp ****         lt_f = 0.001+0.2*(float(lt-128)/128.0);
  71:../src/peripheral/uart.cpp ****         fcled.B.turn(1);
  72:../src/peripheral/uart.cpp ****     }else{
  73:../src/peripheral/uart.cpp ****         PORT2.PODR.BIT.B0 = 0;
  74:../src/peripheral/uart.cpp ****         PORT1.PODR.BIT.B7 = 1;
  75:../src/peripheral/uart.cpp ****         lt_f = 0.001+0.2*(float(128-lt)/128.0);
  76:../src/peripheral/uart.cpp ****         fcled.B.flash(100,100);
  77:../src/peripheral/uart.cpp ****     }
  78:../src/peripheral/uart.cpp **** 
  79:../src/peripheral/uart.cpp ****     if(rt == 128){
  80:../src/peripheral/uart.cpp ****         PORT1.PODR.BIT.B3 = 0;
  81:../src/peripheral/uart.cpp ****         PORT1.PODR.BIT.B2 = 0;
  82:../src/peripheral/uart.cpp ****         rt_f = 0.001;
  83:../src/peripheral/uart.cpp ****         fcled.R.turn(0);
  84:../src/peripheral/uart.cpp ****     }
  85:../src/peripheral/uart.cpp ****     else if(rt>128){
  86:../src/peripheral/uart.cpp ****         PORT1.PODR.BIT.B3 = 0;
  87:../src/peripheral/uart.cpp ****         PORT1.PODR.BIT.B2 = 1;
  88:../src/peripheral/uart.cpp ****         rt_f = 0.001+0.2*(float(rt-128)/128.0);
  89:../src/peripheral/uart.cpp ****         fcled.R.turn(1);
  90:../src/peripheral/uart.cpp ****     }else{
  91:../src/peripheral/uart.cpp ****         PORT1.PODR.BIT.B3 = 1;
  92:../src/peripheral/uart.cpp ****         PORT1.PODR.BIT.B2 = 0;
  93:../src/peripheral/uart.cpp ****         rt_f = 0.001+0.2*(float(128-rt)/128.0);
  94:../src/peripheral/uart.cpp ****         fcled.R.flash(100,100);
  95:../src/peripheral/uart.cpp ****     }
  96:../src/peripheral/uart.cpp ****     myprintf3("=%d,%d,%d,%d,%d\n",cmd[3],cmd[4],cmd[5],PORT1.PODR.BIT.B3,PORT1.PODR.BIT.B2);
  97:../src/peripheral/uart.cpp **** 
  98:../src/peripheral/uart.cpp ****     setDutyMTU3(rt_f);
  99:../src/peripheral/uart.cpp ****     setDutyMTU4(lt_f);
 100:../src/peripheral/uart.cpp **** }
 101:../src/peripheral/uart.cpp **** 
 102:../src/peripheral/uart.cpp **** 
 103:../src/peripheral/uart.cpp **** void fetchCommand()
 104:../src/peripheral/uart.cpp **** {
 391                             		.loc 10 104 0
 392 0000 6E 7D                   		pushm	r7-r13
 393                             	.LCFI4:
 394                             	.LVL12:
 395                             	.LBB1083:
 396                             	.LBB1084:
 105:../src/peripheral/uart.cpp ****     int16_t last_cmd_index = -1;
 106:../src/peripheral/uart.cpp ****     for(int i=0;i<recieveBuffCount-4;i++){
 397                             		.loc 10 106 0
 398 0002 FB A2 B4 0C 00 00       		mov.L	#__ZL16recieveBuffCount, r10
 399 0008 5C A1                   		movu.W	[r10], r1
 400 000a 71 12 FC                		add	#-4, r1, r2
 401 000d 61 02                   		cmp	#0, r2
 402 000f 2B 36                   		ble	.L40
 403 0011 FB 42 B8 0C 00 00       		mov.L	#__ZL11recieveBuff, r4
 404 0017 66 1E                   		mov.L	#1, r14
 405 0019 4B E1                   		add	r14, r1
 406 001b 2E 15                   		bra	.L52
 407                             	.LVL13:
 408                             	.L73:
 409                             	.LBB1085:
 107:../src/peripheral/uart.cpp ****         if(recieveBuffCount-i > CMD_SIZE &&
 410                             		.loc 10 107 0 discriminator 1
 411 001d 58 45                   		movu.B	[r4], r5
 412 001f EF E3                   		mov.L	r14, r3
 413 0021 75 55 63                		cmp	#0x63, r5
 414 0024 20 24                   		beq	.L72
 415                             		.balign 8,3,1
 416                             	.L44:
 417                             	.LVL14:
 418 0026 62 1E                   		add	#1, r14
 419 0028 62 14                   		add	#1, r4
 420                             	.LBE1085:
 106:../src/peripheral/uart.cpp ****         if(recieveBuffCount-i > CMD_SIZE &&
 421                             		.loc 10 106 0
 422 002a 47 32                   		cmp	r3, r2
 423 002c 2B 19                   		ble	.L40
 424                             	.LVL15:
 425 002e EF 00                   		.balign 8,3,2
 426                             	.L52:
 427 0030 FF 03 E1                		sub	r14, r1, r3
 428 0033 71 E7 FF                		add	#-1, r14, r7
 429                             	.LVL16:
 430                             	.LBB1104:
 431                             		.loc 10 107 0
 432 0036 75 53 10                		cmp	#16, r3
 433 0039 2A E4                   		bgt	.L73
 434 003b EF E3                   		mov.L	r14, r3
 435                             	.LVL17:
 436 003d 62 1E                   		add	#1, r14
 437 003f 62 14                   		add	#1, r4
 438                             	.LBE1104:
 106:../src/peripheral/uart.cpp ****         if(recieveBuffCount-i > CMD_SIZE &&
 439                             		.loc 10 106 0
 440 0041 47 32                   		cmp	r3, r2
 441 0043 2A ED                   		bgt	.L52
 442                             	.LVL18:
 443                             		.balign 8,3,2
 444                             	.L40:
 445                             	.LBE1084:
 446                             	.LBE1083:
 108:../src/peripheral/uart.cpp ****             recieveBuff[i+0]==99 &&
 109:../src/peripheral/uart.cpp ****             recieveBuff[i+1]==109 &&
 110:../src/peripheral/uart.cpp ****             recieveBuff[i+2]==100
 111:../src/peripheral/uart.cpp ****         ){
 112:../src/peripheral/uart.cpp ****             //execCommand(&recieveBuff[i]);
 113:../src/peripheral/uart.cpp ****             Gamepad &gamepad = Gamepad::getInstance();
 114:../src/peripheral/uart.cpp ****             gamepad.updateCommand(&recieveBuff[i]);
 115:../src/peripheral/uart.cpp ****             last_cmd_index = i;
 116:../src/peripheral/uart.cpp ****             break;
 117:../src/peripheral/uart.cpp ****         }
 118:../src/peripheral/uart.cpp ****     }
 119:../src/peripheral/uart.cpp **** 
 120:../src/peripheral/uart.cpp ****     if (last_cmd_index != -1){
 121:../src/peripheral/uart.cpp ****         for(int ind = last_cmd_index + CMD_SIZE;
 122:../src/peripheral/uart.cpp ****                 ind < recieveBuffCount;
 123:../src/peripheral/uart.cpp ****                 ind++){
 124:../src/peripheral/uart.cpp ****             recieveBuff[ind -(last_cmd_index + CMD_SIZE)] = recieveBuff[ind];
 125:../src/peripheral/uart.cpp ****         }
 126:../src/peripheral/uart.cpp ****         recieveBuffCount = recieveBuffCount - (last_cmd_index + CMD_SIZE);
 127:../src/peripheral/uart.cpp ****     }
 128:../src/peripheral/uart.cpp **** }
 447                             		.loc 10 128 0
 448 0045 3F 7D 07                		rtsd	#28, r7-r13
 449                             	.LVL19:
 450                             	.L72:
 451                             	.LBB1115:
 452                             	.LBB1107:
 453                             	.LBB1105:
 108:../src/peripheral/uart.cpp ****             recieveBuff[i+0]==99 &&
 454                             		.loc 10 108 0
 455 0048 B0 4D                   		movu.B	1[r4], r5
 456 004a 75 55 6D                		cmp	#0x6d, r5
 457 004d 21 D9                   		bne	.L44
 109:../src/peripheral/uart.cpp ****             recieveBuff[i+2]==100
 458                             		.loc 10 109 0
 459 004f 59 4B 02                		movu.B	2[r4], r11
 460 0052 75 5B 64                		cmp	#0x64, r11
 461 0055 21 D1                   		bne	.L44
 462                             	.LBB1086:
 463                             	.LBB1087:
 464                             	.LBB1088:
  29:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\gamepad.h ****         return instance;
 465                             		.loc 4 29 0
 466 0057 FB D2 00 00 00 00       		mov.L	#__ZGVZN7Gamepad11getInstanceEvE8instance, r13
 467 005d 58 DC                   		movu.B	[r13], r12
 468 005f 61 0C                   		cmp	#0, r12
 469 0061 3A 40 01                		beq	.L74
 470 0064 76 10 01 00             		.balign 8,3,5
 471                             	.L46:
 472                             	.LBE1088:
 473                             	.LBE1087:
 114:../src/peripheral/uart.cpp ****             last_cmd_index = i;
 474                             		.loc 10 114 0
 475 0068 70 7B B8 0C 00 00       		add	#__ZL11recieveBuff, r7, r11
 476                             	.LVL20:
 477                             	.LBB1094:
 478                             	.LBB1095:
  44:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\gamepad.h ****             preRecieveTime = getElapsedMsec();
 479                             		.loc 4 44 0
 480 006e 59 BC 03                		movu.B	3[r11], r12
 481 0071 75 5C FE                		cmp	#0xfe, r12
 482 0074 3A B1 00                		beq	.L48
 483                             	.LVL21:
 484 0077 03                      		.balign 8,3,5
 485                             	.L51:
 486                             	.LBE1095:
 487                             	.LBE1094:
 488                             	.LBE1086:
 489                             	.LBE1105:
 490                             	.LBE1107:
 491                             	.LBB1108:
 492                             	.LBB1109:
 493                             	.LBB1110:
 122:../src/peripheral/uart.cpp ****                 ind++){
 494                             		.loc 10 122 0
 495 0078 DC AB                   		mov.W	[r10], r11
 121:../src/peripheral/uart.cpp ****                 ind < recieveBuffCount;
 496                             		.loc 10 121 0
 497 007a DF 7C                   		mov.W	r7, r12
 498 007c 71 CE 10                		add	#16, r12, r14
 499                             	.LVL22:
 122:../src/peripheral/uart.cpp ****                 ind++){
 500                             		.loc 10 122 0
 501 007f 5F BF                   		movu.W	r11, r15
 121:../src/peripheral/uart.cpp ****                 ind < recieveBuffCount;
 502                             		.loc 10 121 0
 503 0081 47 FE                   		cmp	r15, r14
 504 0083 29 05 38 95 00          		bge	.L50
 505 0088 70 E2 B8 0C 00 00       		add	#__ZL11recieveBuff, r14, r2
 506 008e 71 24 04                		add	#4, r2, r4
 507 0091 66 33                   		mov.L	#3, r3
 508 0093 53 23                   		and	r2, r3
 509 0095 74 04 B8 0C 00 00       		cmp	#__ZL11recieveBuff, r4
 510 009b FC DB 45                		scleu.L	r4
 511 009e 74 02 BC 0C 00 00       		cmp	#__ZL11recieveBuff+4, r2
 512 00a4 FC DB D2                		scgeu.L	r13
 513 00a7 FF 05 CF                		sub	r12, r15, r5
 514 00aa 61 03                   		cmp	#0, r3
 515 00ac FC DB 30                		sceq.L	r3
 516 00af 57 D4                   		or	r13, r4
 517 00b1 FB D6 F0                		mov.L	#-16, r13
 518 00b4 43 CD                   		sub	r12, r13
 519 00b6 71 55 F0                		add	#-16, r5
 520 00b9 FC 33 43                		tst	r4, r3
 521 00bc 3A 46 01                		beq	.L53
 522 00bf 61 85                   		cmp	#8, r5
 523 00c1 24 05 38 3F 01          		bleu	.L53
 524 00c6 FD 82 51                		shlr	#2, r5, r1
 525 00c9 FD C2 1C                		shll	#2, r1, r12
 526 00cc 66 04                   		mov.L	#0, r4
 527 00ce FB 32 B8 0C 00 00       		mov.L	#__ZL11recieveBuff, r3
 528                             	.LVL23:
 529                             		.balign 8,3,3
 530                             	.L58:
 124:../src/peripheral/uart.cpp ****         }
 531                             		.loc 10 124 0 discriminator 2
 532 00d4 FD 2A 29                		mov.L	[r2+], r9
 533 00d7 FD 22 39                		mov.L	r9, [r3+]
 534 00da 62 14                   		add	#1, r4
 535 00dc 47 14                   		cmp	r1, r4
 536 00de 23 F6                   		bltu	.L58
 537 00e0 4B CE                   		add	r12, r14
 538 00e2 47 C5                   		cmp	r12, r5
 539 00e4 20 36                   		beq	.L50
 540                             	.LVL24:
 124:../src/peripheral/uart.cpp ****         }
 541                             		.loc 10 124 0 is_stmt 0
 542 00e6 70 EC B8 0C 00 00       		add	#__ZL11recieveBuff, r14, r12
 543 00ec 70 D4 B8 0C 00 00       		add	#__ZL11recieveBuff, r13, r4
 544 00f2 CC CC                   		mov.B	[r12], r12
 545 00f4 FE 0E 4C                		mov.B	r12, [r14,r4]
 121:../src/peripheral/uart.cpp ****                 ind < recieveBuffCount;
 546                             		.loc 10 121 0 is_stmt 1
 547 00f7 71 EC 01                		add	#1, r14, r12
 548                             	.LVL25:
 549 00fa 47 FC                   		cmp	r15, r12
 550 00fc 28 1E                   		bge	.L50
 551                             	.LVL26:
 124:../src/peripheral/uart.cpp ****         }
 552                             		.loc 10 124 0
 553 00fe 70 EC B9 0C 00 00       		add	#__ZL11recieveBuff+1, r14, r12
 554 0104 CC C3                   		mov.B	[r12], r3
 555 0106 FE 0D C3                		mov.B	r3, [r13,r12]
 121:../src/peripheral/uart.cpp ****                 ind < recieveBuffCount;
 556                             		.loc 10 121 0
 557 0109 62 2E                   		add	#2, r14
 558                             	.LVL27:
 559 010b 47 EF                   		cmp	r14, r15
 560 010d 2B 0D                   		ble	.L50
 124:../src/peripheral/uart.cpp ****         }
 561                             		.loc 10 124 0
 562 010f 70 EC B8 0C 00 00       		add	#__ZL11recieveBuff, r14, r12
 563 0115 CC CC                   		mov.B	[r12], r12
 564 0117 FE 0E 4C                		mov.B	r12, [r14,r4]
 565                             	.LVL28:
 566                             		.balign 8,3,2
 567                             	.L50:
 568                             	.LBE1110:
 126:../src/peripheral/uart.cpp ****     }
 569                             		.loc 10 126 0
 570 011a 71 BB F0                		add	#-16, r11
 571 011d FF 07 7B                		sub	r7, r11, r7
 572                             	.LVL29:
 573 0120 D3 A7                   		mov.W	r7, [r10]
 574                             	.LBE1109:
 575                             	.LBE1108:
 576                             	.LBE1115:
 577                             		.loc 10 128 0
 578 0122 3F 7D 07                		rtsd	#28, r7-r13
 579                             	.LVL30:
 580                             	.L48:
 581                             	.LBB1116:
 582                             	.LBB1113:
 583                             	.LBB1106:
 584                             	.LBB1103:
 585                             	.LBB1101:
 586                             	.LBB1100:
  44:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\gamepad.h ****             preRecieveTime = getElapsedMsec();
 587                             		.loc 4 44 0
 588 0125 59 BC 04                		movu.B	4[r11], r12
 589 0128 75 5C FD                		cmp	#0xfd, r12
 590 012b 3B 4D FF                		bne	.L51
 591                             	.LBB1096:
  45:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\gamepad.h ****             for(uint8_t i=0;i<16; i++){
 592                             		.loc 4 45 0
 593 012e 05 00 00 00             		bsr	__Z14getElapsedMsecv
 594                             	.LVL31:
 595                             	.LBB1097:
  47:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\gamepad.h ****             }
 596                             		.loc 4 47 0
 597 0132 CC BD                   		mov.B	[r11], r13
 598                             	.LBE1097:
  45:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\gamepad.h ****             for(uint8_t i=0;i<16; i++){
 599                             		.loc 4 45 0
 600 0134 FB C2 00 00 00 00       		mov.L	#__ZZN7Gamepad11getInstanceEvE8instance, r12
 601                             	.LBB1098:
  47:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\gamepad.h ****             }
 602                             		.loc 4 47 0
 603 013a CD BE 01                		mov.B	1[r11], r14
 604 013d C7 CD 28                		mov.B	r13, 40[r12]
 605 0140 CD BD 02                		mov.B	2[r11], r13
 606 0143 C7 CE 29                		mov.B	r14, 41[r12]
 607 0146 CD BE 03                		mov.B	3[r11], r14
 608 0149 C7 CD 2A                		mov.B	r13, 42[r12]
 609 014c CD BD 04                		mov.B	4[r11], r13
 610 014f C7 CE 2B                		mov.B	r14, 43[r12]
 611 0152 CD BE 05                		mov.B	5[r11], r14
 612 0155 C7 CD 2C                		mov.B	r13, 44[r12]
 613 0158 CD BD 06                		mov.B	6[r11], r13
 614 015b C7 CE 2D                		mov.B	r14, 45[r12]
 615 015e CD BE 07                		mov.B	7[r11], r14
 616 0161 C7 CD 2E                		mov.B	r13, 46[r12]
 617 0164 CD BD 08                		mov.B	8[r11], r13
 618 0167 C7 CE 2F                		mov.B	r14, 47[r12]
 619 016a CD BE 09                		mov.B	9[r11], r14
 620 016d C7 CD 30                		mov.B	r13, 48[r12]
 621 0170 CD BD 0A                		mov.B	10[r11], r13
 622 0173 C7 CE 31                		mov.B	r14, 49[r12]
 623 0176 CD BE 0B                		mov.B	11[r11], r14
 624 0179 C7 CD 32                		mov.B	r13, 50[r12]
 625 017c CD BD 0C                		mov.B	12[r11], r13
 626 017f C7 CE 33                		mov.B	r14, 51[r12]
 627 0182 CD BE 0D                		mov.B	13[r11], r14
 628 0185 C7 CD 34                		mov.B	r13, 52[r12]
 629 0188 CD BD 0E                		mov.B	14[r11], r13
 630 018b C7 CE 35                		mov.B	r14, 53[r12]
 631 018e CD BB 0F                		mov.B	15[r11], r11
 632                             	.LVL32:
 633                             	.LBE1098:
  45:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\gamepad.h ****             for(uint8_t i=0;i<16; i++){
 634                             		.loc 4 45 0
 635 0191 E7 C1 0F                		mov.L	r1, 60[r12]
 636 0194 F9 C6 10 00             		mov.L	#0, 64[r12]
 637                             	.LVL33:
 638                             	.LBB1099:
  47:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\gamepad.h ****             }
 639                             		.loc 4 47 0
 640 0198 C7 CD 36                		mov.B	r13, 54[r12]
 641                             	.LVL34:
 642 019b C7 CB 37                		mov.B	r11, 55[r12]
 643                             	.LVL35:
 644 019e 38 DA FE                		bra	.L51
 645                             	.LVL36:
 646                             	.L74:
 647                             	.LBE1099:
 648                             	.LBE1096:
 649                             	.LBE1100:
 650                             	.LBE1101:
 651                             	.LBB1102:
 652                             	.LBB1093:
  29:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\gamepad.h ****         return instance;
 653                             		.loc 4 29 0
 654 01a1 EF D1                   		mov.L	r13, r1
 655 01a3 05 00 00 00             		bsr	___cxa_guard_acquire
 656                             	.LVL37:
 657 01a7 61 01                   		cmp	#0, r1
 658 01a9 3A BF FE                		beq	.L46
 659                             	.LVL38:
 660                             	.LBB1089:
 661                             	.LBB1090:
 104:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\gamepad.h ****         cross_y = 0;
 662                             		.loc 4 104 0
 663 01ac FB B2 00 00 00 00       		mov.L	#__ZZN7Gamepad11getInstanceEvE8instance, r11
 664 01b2 C3 BC                   		mov.B	r12, [r11]
 105:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\gamepad.h ****         L3D_x = 0;
 665                             		.loc 4 105 0
 666 01b4 C7 BC 01                		mov.B	r12, 1[r11]
 106:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\gamepad.h ****         R3D_x = 0;
 667                             		.loc 4 106 0
 668 01b7 C7 BC 02                		mov.B	r12, 2[r11]
 107:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\gamepad.h ****         R3D_y = 0;
 669                             		.loc 4 107 0
 670 01ba C7 BC 04                		mov.B	r12, 4[r11]
 108:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\gamepad.h ****         RT = 0;
 671                             		.loc 4 108 0
 672 01bd C7 BC 05                		mov.B	r12, 5[r11]
 109:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\gamepad.h ****         LT = 0;
 673                             		.loc 4 109 0
 674 01c0 C7 BC 06                		mov.B	r12, 6[r11]
 110:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\gamepad.h ****         A  = 0;
 675                             		.loc 4 110 0
 676 01c3 C7 BC 07                		mov.B	r12, 7[r11]
 111:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\gamepad.h ****         B  = 0;
 677                             		.loc 4 111 0
 678 01c6 E7 BC 02                		mov.L	r12, 8[r11]
 112:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\gamepad.h ****         Y  = 0;
 679                             		.loc 4 112 0
 680 01c9 E7 BC 03                		mov.L	r12, 12[r11]
 113:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\gamepad.h ****         X  = 0;
 681                             		.loc 4 113 0
 682 01cc E7 BC 04                		mov.L	r12, 16[r11]
 114:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\gamepad.h ****         RB = 0;
 683                             		.loc 4 114 0
 684 01cf E7 BC 05                		mov.L	r12, 20[r11]
 115:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\gamepad.h ****         LB = 0;
 685                             		.loc 4 115 0
 686 01d2 E7 BC 06                		mov.L	r12, 24[r11]
 116:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\gamepad.h ****         BACK = 0;
 687                             		.loc 4 116 0
 688 01d5 E7 BC 07                		mov.L	r12, 28[r11]
 117:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\gamepad.h ****         START = 0;
 689                             		.loc 4 117 0
 690 01d8 E7 BC 08                		mov.L	r12, 32[r11]
 691                             	.LBE1090:
 692                             	.LBE1089:
  29:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\gamepad.h ****         return instance;
 693                             		.loc 4 29 0
 694 01db EF D1                   		mov.L	r13, r1
 695                             	.LBB1092:
 696                             	.LBB1091:
 118:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\gamepad.h ****         conStatus = false;
 697                             		.loc 4 118 0
 698 01dd E7 BC 09                		mov.L	r12, 36[r11]
 119:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\gamepad.h ****         preRecieveTime = 0;
 699                             		.loc 4 119 0
 700 01e0 C7 BC 38                		mov.B	r12, 56[r11]
 120:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\gamepad.h ****     };
 701                             		.loc 4 120 0
 702 01e3 E7 BC 0F                		mov.L	r12, 60[r11]
 703 01e6 E7 BC 10                		mov.L	r12, 64[r11]
 704                             	.LBE1091:
 705                             	.LBE1092:
  29:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\gamepad.h ****         return instance;
 706                             		.loc 4 29 0
 707 01e9 05 00 00 00             		bsr	___cxa_guard_release
 708                             	.LVL39:
 709 01ed FB 12 00 00 00 00       		mov.L	#__ZN7GamepadD1Ev, r1
 710 01f3 EF B2                   		mov.L	r11, r2
 711 01f5 FB 32 00 00 00 00       		mov.L	#___dso_handle, r3
 712 01fb 05 00 00 00             		bsr	___cxa_atexit
 713                             	.LVL40:
 714 01ff 38 69 FE                		bra	.L46
 715                             	.LVL41:
 716                             	.L53:
 717                             	.LBE1093:
 718                             	.LBE1102:
 719                             	.LBE1103:
 720                             	.LBE1106:
 721                             	.LBE1113:
 722                             	.LBE1116:
 124:../src/peripheral/uart.cpp ****         }
 723                             		.loc 10 124 0
 724 0202 4B ED                   		add	r14, r13
 725 0204 70 EE B8 0C 00 00       		add	#__ZL11recieveBuff, r14
 726                             	.LVL42:
 727 020a 70 D4 B8 0C 00 00       		add	#__ZL11recieveBuff, r13, r4
 728 0210 70 F3 B8 0C 00 00       		add	#__ZL11recieveBuff, r15, r3
 729                             	.LVL43:
 730 0216 EF 00                   		.balign 8,3,5
 731                             	.L60:
 732                             	.LBB1117:
 733                             	.LBB1114:
 734                             	.LBB1112:
 735                             	.LBB1111:
 736 0218 FD 28 E9                		mov.B	[r14+], r9
 737                             	.LVL44:
 738 021b FD 20 49                		mov.B	r9, [r4+]
 739                             	.LVL45:
 121:../src/peripheral/uart.cpp ****                 ind < recieveBuffCount;
 740                             		.loc 10 121 0
 741 021e 47 3E                   		cmp	r3, r14
 742 0220 21 F8                   		bne	.L60
 743 0222 38 F8 FE                		bra	.L50
 744                             	.LBE1111:
 745                             	.LBE1112:
 746                             	.LBE1114:
 747                             	.LBE1117:
 748                             	.LFE1428:
 750                             		.global	__Z8initSCI1v
 752                             	__Z8initSCI1v:
 753                             	.LFB1429:
 129:../src/peripheral/uart.cpp **** 
 130:../src/peripheral/uart.cpp **** 
 131:../src/peripheral/uart.cpp **** void initSCI1(void) {
 754                             		.loc 10 131 0
 755                             	.LVL46:
 756                             	.LBB1118:
 132:../src/peripheral/uart.cpp ****     uint32_t PCLK = PCLKB;
 133:../src/peripheral/uart.cpp ****     SYSTEM.PRCR.WORD = 0xA502;
 757                             		.loc 10 133 0
 758 0225 FB EE 00 00 08          		mov.L	#0x80000, r14
 759 022a FA E9 FF 01 02 A5       		mov.W	#0xffffa502, 1022[r14]
 134:../src/peripheral/uart.cpp ****     MSTP( SCI1 ) = 0;        //モジュールストップを解除
 760                             		.loc 10 134 0
 761 0230 ED E4 05                		mov.L	20[r14], r4
 135:../src/peripheral/uart.cpp ****     SYSTEM.PRCR.WORD = 0xA500;
 136:../src/peripheral/uart.cpp **** 
 137:../src/peripheral/uart.cpp ****     PORT3.PMR.BIT.B0 = 0;   //ピンの設定をするときはまずピンを汎用ポートに設
 762                             		.loc 10 137 0
 763 0233 FB 2E 03 C0 08          		mov.L	#0x8c003, r2
 134:../src/peripheral/uart.cpp ****     MSTP( SCI1 ) = 0;        //モジュールストップを解除
 764                             		.loc 10 134 0
 765 0238 7B E4                   		bclr #30, r4
 766 023a E7 E4 05                		mov.L	r4, 20[r14]
 135:../src/peripheral/uart.cpp ****     SYSTEM.PRCR.WORD = 0xA500;
 767                             		.loc 10 135 0
 768 023d FA E9 FF 01 00 A5       		mov.W	#0xffffa500, 1022[r14]
 769                             		.loc 10 137 0
 770 0243 CD 2E 60                		mov.B	96[r2], r14
 138:../src/peripheral/uart.cpp ****     PORT2.PMR.BIT.B6 = 0;
 771                             		.loc 10 138 0
 772 0246 FB 3E 02 C0 08          		mov.L	#0x8c002, r3
 137:../src/peripheral/uart.cpp ****     PORT2.PMR.BIT.B6 = 0;
 773                             		.loc 10 137 0
 774 024b 7A 0E                   		bclr #0, r14
 775 024d C7 2E 60                		mov.B	r14, 96[r2]
 776                             		.loc 10 138 0
 777 0250 CD 3E 60                		mov.B	96[r3], r14
 139:../src/peripheral/uart.cpp ****     MPC.PWPR.BIT.B0WI = 0;  //書き込み許可 0で許可
 778                             		.loc 10 139 0
 779 0253 FB 4E 00 C1 08          		mov.L	#0x8c100, r4
 138:../src/peripheral/uart.cpp ****     PORT2.PMR.BIT.B6 = 0;
 780                             		.loc 10 138 0
 781 0258 7A 6E                   		bclr #6, r14
 782 025a C7 3E 60                		mov.B	r14, 96[r3]
 783                             		.loc 10 139 0
 784 025d 8F C9                   		mov.B	31[r4], r1
 140:../src/peripheral/uart.cpp ****     MPC.PWPR.BIT.PFSWE = 1; //書き込み許可  1で許可
 141:../src/peripheral/uart.cpp ****     MPC.P26PFS.BIT.PSEL = 10; //P26を TXD1に
 142:../src/peripheral/uart.cpp ****     MPC.P30PFS.BIT.PSEL = 10; //P30を RXD1に
 143:../src/peripheral/uart.cpp ****     MPC.PWPR.BIT.PFSWE = 0;  //PFSWEの書き込み禁止 0
 144:../src/peripheral/uart.cpp ****     MPC.PWPR.BIT.B0WI = 1; //書き込み禁止
 145:../src/peripheral/uart.cpp ****     PORT3.PMR.BIT.B0 = 1;   //周辺モジュールをピンに割り当て
 146:../src/peripheral/uart.cpp ****     PORT2.PMR.BIT.B6 = 1;   //
 147:../src/peripheral/uart.cpp **** 
 148:../src/peripheral/uart.cpp ****     SCI1.SMR.BIT.CKS = 0;  //PCLK/1
 785                             		.loc 10 148 0
 786 025f FB EE 20 A0 08          		mov.L	#0x8a020, r14
 139:../src/peripheral/uart.cpp ****     MPC.PWPR.BIT.B0WI = 0;  //書き込み許可 0で許可
 787                             		.loc 10 139 0
 788 0264 75 21 7F                		and #0x7f, r1
 789 0267 87 C9                   		mov.B	r1, 31[r4]
 140:../src/peripheral/uart.cpp ****     MPC.PWPR.BIT.PFSWE = 1; //書き込み許可  1で許可
 790                             		.loc 10 140 0
 791 0269 F1 46 1F                		bset #6, 31[r4].B
 141:../src/peripheral/uart.cpp ****     MPC.P30PFS.BIT.PSEL = 10; //P30を RXD1に
 792                             		.loc 10 141 0
 793 026c CD 41 56                		mov.B	86[r4], r1
 794 026f 75 21 C0                		and #-64, r1
 795 0272 65 A1                   		or	#10, r1
 796 0274 C7 41 56                		mov.B	r1, 86[r4]
 142:../src/peripheral/uart.cpp ****     MPC.PWPR.BIT.PFSWE = 0;  //PFSWEの書き込み禁止 0
 797                             		.loc 10 142 0
 798 0277 CD 41 58                		mov.B	88[r4], r1
 799 027a 75 21 C0                		and #-64, r1
 800 027d 65 A1                   		or	#10, r1
 801 027f C7 41 58                		mov.B	r1, 88[r4]
 143:../src/peripheral/uart.cpp ****     MPC.PWPR.BIT.B0WI = 1; //書き込み禁止
 802                             		.loc 10 143 0
 803 0282 F1 4E 1F                		bclr #6, 31[r4].B
 144:../src/peripheral/uart.cpp ****     PORT3.PMR.BIT.B0 = 1;   //周辺モジュールをピンに割り当て
 804                             		.loc 10 144 0
 805 0285 8F C9                   		mov.B	31[r4], r1
 806 0287 75 31 80                		or	#0xffffff80, r1
 807 028a 87 C9                   		mov.B	r1, 31[r4]
 145:../src/peripheral/uart.cpp ****     PORT2.PMR.BIT.B6 = 1;   //
 808                             		.loc 10 145 0
 809 028c F1 20 60                		bset #0, 96[r2].B
 146:../src/peripheral/uart.cpp **** 
 810                             		.loc 10 146 0
 811 028f F1 36 60                		bset #6, 96[r3].B
 812                             		.loc 10 148 0
 813 0292 CC E4                   		mov.B	[r14], r4
 814 0294 75 24 FC                		and #-4, r4
 815 0297 C3 E4                   		mov.B	r4, [r14]
 149:../src/peripheral/uart.cpp ****     SCI1.SMR.BIT.MP = 0;
 816                             		.loc 10 149 0
 817 0299 F0 EA                   		bclr #2, [r14].B
 150:../src/peripheral/uart.cpp ****     SCI1.SMR.BIT.STOP = 0;
 818                             		.loc 10 150 0
 819 029b F0 EB                   		bclr #3, [r14].B
 151:../src/peripheral/uart.cpp ****     SCI1.SMR.BIT.PM = 0;
 820                             		.loc 10 151 0
 821 029d F0 EC                   		bclr #4, [r14].B
 152:../src/peripheral/uart.cpp ****     SCI1.SMR.BIT.PE = 0;
 822                             		.loc 10 152 0
 823 029f F0 ED                   		bclr #5, [r14].B
 153:../src/peripheral/uart.cpp ****     SCI1.SMR.BIT.CHR = 0;
 824                             		.loc 10 153 0
 825 02a1 F0 EE                   		bclr #6, [r14].B
 154:../src/peripheral/uart.cpp ****     SCI1.SMR.BIT.CM = 0;
 826                             		.loc 10 154 0
 827 02a3 CC E4                   		mov.B	[r14], r4
 828 02a5 75 24 7F                		and #0x7f, r4
 829 02a8 C3 E4                   		mov.B	r4, [r14]
 155:../src/peripheral/uart.cpp ****     SCI1.SEMR.BIT.ABCS = 1;
 830                             		.loc 10 155 0
 831 02aa F1 E4 07                		bset #4, 7[r14].B
 156:../src/peripheral/uart.cpp ****     SCI1.SEMR.BIT.BGDM = 1;
 832                             		.loc 10 156 0
 833 02ad F1 E6 07                		bset #6, 7[r14].B
 157:../src/peripheral/uart.cpp ****     SCI1.BRR = 3 - 1;   // N = PCLK /(8*BRR)
 834                             		.loc 10 157 0
 835 02b0 F9 E4 01 02             		mov.B	#2, 1[r14]
 158:../src/peripheral/uart.cpp **** 
 159:../src/peripheral/uart.cpp ****     SCI1.SCR.BIT.RE = 1; //受信許可
 836                             		.loc 10 159 0
 837 02b4 F1 E4 02                		bset #4, 2[r14].B
 160:../src/peripheral/uart.cpp ****     SCI1.SCR.BIT.TE = 1; //送信許可
 838                             		.loc 10 160 0
 839 02b7 F1 E5 02                		bset #5, 2[r14].B
 840 02ba 02                      		rts
 841                             	.LBE1118:
 842                             	.LFE1429:
 844                             		.global	__Z8initSCI2v
 846                             	__Z8initSCI2v:
 847                             	.LFB1430:
 161:../src/peripheral/uart.cpp **** 
 162:../src/peripheral/uart.cpp **** }
 163:../src/peripheral/uart.cpp **** 
 164:../src/peripheral/uart.cpp **** void initSCI2(void) {
 848                             		.loc 10 164 0
 849                             	.LVL47:
 850                             	.LBB1119:
 165:../src/peripheral/uart.cpp ****     uint32_t PCLK = PCLKB;
 166:../src/peripheral/uart.cpp ****     SYSTEM.PRCR.WORD = 0xA502;
 851                             		.loc 10 166 0
 852 02bb FB EE 00 00 08          		mov.L	#0x80000, r14
 853 02c0 FA E9 FF 01 02 A5       		mov.W	#0xffffa502, 1022[r14]
 167:../src/peripheral/uart.cpp ****     MSTP( SCI2 ) = 0;        //モジュールストップを解除
 854                             		.loc 10 167 0
 855 02c6 ED E4 05                		mov.L	20[r14], r4
 168:../src/peripheral/uart.cpp ****     SYSTEM.PRCR.WORD = 0xA500;
 169:../src/peripheral/uart.cpp **** 
 170:../src/peripheral/uart.cpp ****     PORT5.PMR.BIT.B0 = 0;   //ピンの設定をするときはまずピンを汎用ポートに設
 856                             		.loc 10 170 0
 857 02c9 FB 3E 05 C0 08          		mov.L	#0x8c005, r3
 167:../src/peripheral/uart.cpp ****     MSTP( SCI2 ) = 0;        //モジュールストップを解除
 858                             		.loc 10 167 0
 859 02ce 7B D4                   		bclr #29, r4
 860 02d0 E7 E4 05                		mov.L	r4, 20[r14]
 168:../src/peripheral/uart.cpp ****     SYSTEM.PRCR.WORD = 0xA500;
 861                             		.loc 10 168 0
 862 02d3 FA E9 FF 01 00 A5       		mov.W	#0xffffa500, 1022[r14]
 863                             		.loc 10 170 0
 864 02d9 CD 3E 60                		mov.B	96[r3], r14
 171:../src/peripheral/uart.cpp ****     PORT5.PMR.BIT.B6 = 0;
 172:../src/peripheral/uart.cpp ****     MPC.PWPR.BIT.B0WI = 0;  //書き込み許可 0で許可
 865                             		.loc 10 172 0
 866 02dc FB 4E 00 C1 08          		mov.L	#0x8c100, r4
 170:../src/peripheral/uart.cpp ****     PORT5.PMR.BIT.B6 = 0;
 867                             		.loc 10 170 0
 868 02e1 7A 0E                   		bclr #0, r14
 869 02e3 C7 3E 60                		mov.B	r14, 96[r3]
 171:../src/peripheral/uart.cpp ****     PORT5.PMR.BIT.B6 = 0;
 870                             		.loc 10 171 0
 871 02e6 CD 32 60                		mov.B	96[r3], r2
 173:../src/peripheral/uart.cpp ****     MPC.PWPR.BIT.PFSWE = 1; //書き込み許可  1で許可
 174:../src/peripheral/uart.cpp ****     MPC.P50PFS.BIT.PSEL = 10; //P50を TXD2に
 175:../src/peripheral/uart.cpp ****     MPC.P52PFS.BIT.PSEL = 10; //P52を RXD2に
 176:../src/peripheral/uart.cpp ****     MPC.PWPR.BIT.PFSWE = 0;  //PFSWEの書き込み禁止 0
 177:../src/peripheral/uart.cpp ****     MPC.PWPR.BIT.B0WI = 1; //書き込み禁止
 178:../src/peripheral/uart.cpp ****     PORT5.PMR.BIT.B0 = 1;   //周辺モジュールをピンに割り当て
 179:../src/peripheral/uart.cpp ****     PORT5.PMR.BIT.B2 = 1;   //
 180:../src/peripheral/uart.cpp **** 
 181:../src/peripheral/uart.cpp ****     SCI2.SMR.BIT.CKS = 0;  //PCLK/2
 872                             		.loc 10 181 0
 873 02e9 FB EE 40 A0 08          		mov.L	#0x8a040, r14
 171:../src/peripheral/uart.cpp ****     MPC.PWPR.BIT.B0WI = 0;  //書き込み許可 0で許可
 874                             		.loc 10 171 0
 875 02ee 7A 62                   		bclr #6, r2
 876 02f0 C7 32 60                		mov.B	r2, 96[r3]
 172:../src/peripheral/uart.cpp ****     MPC.PWPR.BIT.PFSWE = 1; //書き込み許可  1で許可
 877                             		.loc 10 172 0
 878 02f3 8F CA                   		mov.B	31[r4], r2
 879 02f5 75 22 7F                		and #0x7f, r2
 880 02f8 87 CA                   		mov.B	r2, 31[r4]
 173:../src/peripheral/uart.cpp ****     MPC.PWPR.BIT.PFSWE = 1; //書き込み許可  1で許可
 881                             		.loc 10 173 0
 882 02fa F1 46 1F                		bset #6, 31[r4].B
 174:../src/peripheral/uart.cpp ****     MPC.P52PFS.BIT.PSEL = 10; //P52を RXD2に
 883                             		.loc 10 174 0
 884 02fd CD 42 68                		mov.B	104[r4], r2
 885 0300 75 22 C0                		and #-64, r2
 886 0303 65 A2                   		or	#10, r2
 887 0305 C7 42 68                		mov.B	r2, 104[r4]
 175:../src/peripheral/uart.cpp ****     MPC.PWPR.BIT.PFSWE = 0;  //PFSWEの書き込み禁止 0
 888                             		.loc 10 175 0
 889 0308 CD 42 6A                		mov.B	106[r4], r2
 890 030b 75 22 C0                		and #-64, r2
 891 030e 65 A2                   		or	#10, r2
 892 0310 C7 42 6A                		mov.B	r2, 106[r4]
 176:../src/peripheral/uart.cpp ****     MPC.PWPR.BIT.B0WI = 1; //書き込み禁止
 893                             		.loc 10 176 0
 894 0313 F1 4E 1F                		bclr #6, 31[r4].B
 177:../src/peripheral/uart.cpp ****     PORT5.PMR.BIT.B0 = 1;   //周辺モジュールをピンに割り当て
 895                             		.loc 10 177 0
 896 0316 8F CA                   		mov.B	31[r4], r2
 897 0318 75 32 80                		or	#0xffffff80, r2
 898 031b 87 CA                   		mov.B	r2, 31[r4]
 178:../src/peripheral/uart.cpp ****     PORT5.PMR.BIT.B2 = 1;   //
 899                             		.loc 10 178 0
 900 031d F1 30 60                		bset #0, 96[r3].B
 179:../src/peripheral/uart.cpp **** 
 901                             		.loc 10 179 0
 902 0320 F1 32 60                		bset #2, 96[r3].B
 903                             		.loc 10 181 0
 904 0323 CC E4                   		mov.B	[r14], r4
 905 0325 75 24 FC                		and #-4, r4
 906 0328 C3 E4                   		mov.B	r4, [r14]
 182:../src/peripheral/uart.cpp ****     SCI2.SMR.BIT.MP = 0;
 907                             		.loc 10 182 0
 908 032a F0 EA                   		bclr #2, [r14].B
 183:../src/peripheral/uart.cpp ****     SCI2.SMR.BIT.STOP = 0;
 909                             		.loc 10 183 0
 910 032c F0 EB                   		bclr #3, [r14].B
 184:../src/peripheral/uart.cpp ****     SCI2.SMR.BIT.PM = 0;
 911                             		.loc 10 184 0
 912 032e F0 EC                   		bclr #4, [r14].B
 185:../src/peripheral/uart.cpp ****     SCI2.SMR.BIT.PE = 0;
 913                             		.loc 10 185 0
 914 0330 F0 ED                   		bclr #5, [r14].B
 186:../src/peripheral/uart.cpp ****     SCI2.SMR.BIT.CHR = 0;
 915                             		.loc 10 186 0
 916 0332 F0 EE                   		bclr #6, [r14].B
 187:../src/peripheral/uart.cpp ****     SCI2.SMR.BIT.CM = 0;
 917                             		.loc 10 187 0
 918 0334 CC E4                   		mov.B	[r14], r4
 919 0336 75 24 7F                		and #0x7f, r4
 920 0339 C3 E4                   		mov.B	r4, [r14]
 188:../src/peripheral/uart.cpp ****     SCI2.SEMR.BIT.ABCS = 1;
 921                             		.loc 10 188 0
 922 033b F1 E4 07                		bset #4, 7[r14].B
 189:../src/peripheral/uart.cpp ****     SCI2.SEMR.BIT.BGDM = 1;
 923                             		.loc 10 189 0
 924 033e F1 E6 07                		bset #6, 7[r14].B
 190:../src/peripheral/uart.cpp ****     SCI2.BRR = 3 - 1;   // N = PCLK /(8*BRR) 現在の設定は2Mbps
 925                             		.loc 10 190 0
 926 0341 F9 E4 01 02             		mov.B	#2, 1[r14]
 191:../src/peripheral/uart.cpp **** 
 192:../src/peripheral/uart.cpp ****     SCI2.SCR.BIT.RE = 1; //受信許可
 927                             		.loc 10 192 0
 928 0345 F1 E4 02                		bset #4, 2[r14].B
 193:../src/peripheral/uart.cpp ****     SCI2.SCR.BIT.TE = 1; //送信許可
 929                             		.loc 10 193 0
 930 0348 F1 E5 02                		bset #5, 2[r14].B
 931 034b 02                      		rts
 932                             	.LBE1119:
 933                             	.LFE1430:
 935                             		.global	__Z10initSCIFA9v
 937                             	__Z10initSCIFA9v:
 938                             	.LFB1431:
 194:../src/peripheral/uart.cpp **** 
 195:../src/peripheral/uart.cpp **** }
 196:../src/peripheral/uart.cpp **** 
 197:../src/peripheral/uart.cpp **** void initSCIFA9() {
 939                             		.loc 10 197 0
 940                             	.LVL48:
 941                             	.LBB1120:
 198:../src/peripheral/uart.cpp ****     uint32_t PCLK = PCLKA;
 199:../src/peripheral/uart.cpp ****     SYSTEM.PRCR.WORD = 0xA502;
 942                             		.loc 10 199 0
 943 034c FB EE 00 00 08          		mov.L	#0x80000, r14
 944 0351 FA E9 FF 01 02 A5       		mov.W	#0xffffa502, 1022[r14]
 200:../src/peripheral/uart.cpp ****     MSTP( SCIFA9 ) = 0;        //モジュールストップを解除
 945                             		.loc 10 200 0
 946 0357 ED E4 06                		mov.L	24[r14], r4
 201:../src/peripheral/uart.cpp ****     SYSTEM.PRCR.WORD = 0xA500;
 202:../src/peripheral/uart.cpp **** 
 203:../src/peripheral/uart.cpp ****     PORTB.PMR.BIT.B6 = 0;   //ピンの設定をするときはまずピンを汎用ポートに設
 947                             		.loc 10 203 0
 948 035a FB 3E 0B C0 08          		mov.L	#0x8c00b, r3
 200:../src/peripheral/uart.cpp ****     MSTP( SCIFA9 ) = 0;        //モジュールストップを解除
 949                             		.loc 10 200 0
 950 035f 7B A4                   		bclr #26, r4
 951 0361 E7 E4 06                		mov.L	r4, 24[r14]
 201:../src/peripheral/uart.cpp ****     SYSTEM.PRCR.WORD = 0xA500;
 952                             		.loc 10 201 0
 953 0364 FA E9 FF 01 00 A5       		mov.W	#0xffffa500, 1022[r14]
 954                             		.loc 10 203 0
 955 036a CD 3E 60                		mov.B	96[r3], r14
 204:../src/peripheral/uart.cpp ****     PORTB.PMR.BIT.B7 = 0;
 205:../src/peripheral/uart.cpp ****     MPC.PWPR.BIT.B0WI = 0;  //書き込み許可 0で許可
 956                             		.loc 10 205 0
 957 036d FB 4E 00 C1 08          		mov.L	#0x8c100, r4
 203:../src/peripheral/uart.cpp ****     PORTB.PMR.BIT.B7 = 0;
 958                             		.loc 10 203 0
 959 0372 7A 6E                   		bclr #6, r14
 960 0374 C7 3E 60                		mov.B	r14, 96[r3]
 204:../src/peripheral/uart.cpp ****     PORTB.PMR.BIT.B7 = 0;
 961                             		.loc 10 204 0
 962 0377 CD 32 60                		mov.B	96[r3], r2
 206:../src/peripheral/uart.cpp ****     MPC.PWPR.BIT.PFSWE = 1; //書き込み許可  1で許可
 207:../src/peripheral/uart.cpp ****     MPC.PB6PFS.BIT.PSEL = 0b1010; //RXD9に
 208:../src/peripheral/uart.cpp ****     MPC.PB7PFS.BIT.PSEL = 0b1010; //TXD2に
 209:../src/peripheral/uart.cpp ****     MPC.PWPR.BIT.PFSWE = 0;  //PFSWEの書き込み禁止 0
 210:../src/peripheral/uart.cpp ****     MPC.PWPR.BIT.B0WI = 1; //書き込み禁止
 211:../src/peripheral/uart.cpp ****     PORTB.PMR.BIT.B6 = 1;   //周辺モジュールをピンに割り当て
 212:../src/peripheral/uart.cpp ****     PORTB.PMR.BIT.B7 = 1;   //
 213:../src/peripheral/uart.cpp **** 
 214:../src/peripheral/uart.cpp ****     SCIFA9.SMR.BIT.CKS = 0;
 963                             		.loc 10 214 0
 964 037a FB EE 20 00 0D          		mov.L	#0xd0020, r14
 204:../src/peripheral/uart.cpp ****     MPC.PWPR.BIT.B0WI = 0;  //書き込み許可 0で許可
 965                             		.loc 10 204 0
 966 037f 75 22 7F                		and #0x7f, r2
 967 0382 C7 32 60                		mov.B	r2, 96[r3]
 205:../src/peripheral/uart.cpp ****     MPC.PWPR.BIT.PFSWE = 1; //書き込み許可  1で許可
 968                             		.loc 10 205 0
 969 0385 8F CA                   		mov.B	31[r4], r2
 970 0387 75 22 7F                		and #0x7f, r2
 971 038a 87 CA                   		mov.B	r2, 31[r4]
 206:../src/peripheral/uart.cpp ****     MPC.PWPR.BIT.PFSWE = 1; //書き込み許可  1で許可
 972                             		.loc 10 206 0
 973 038c F1 46 1F                		bset #6, 31[r4].B
 207:../src/peripheral/uart.cpp ****     MPC.PB7PFS.BIT.PSEL = 0b1010; //TXD2に
 974                             		.loc 10 207 0
 975 038f CD 42 9E                		mov.B	158[r4], r2
 976 0392 75 22 C0                		and #-64, r2
 977 0395 65 A2                   		or	#10, r2
 978 0397 C7 42 9E                		mov.B	r2, 158[r4]
 208:../src/peripheral/uart.cpp ****     MPC.PWPR.BIT.PFSWE = 0;  //PFSWEの書き込み禁止 0
 979                             		.loc 10 208 0
 980 039a CD 42 9F                		mov.B	159[r4], r2
 981 039d 75 22 C0                		and #-64, r2
 982 03a0 65 A2                   		or	#10, r2
 983 03a2 C7 42 9F                		mov.B	r2, 159[r4]
 209:../src/peripheral/uart.cpp ****     MPC.PWPR.BIT.B0WI = 1; //書き込み禁止
 984                             		.loc 10 209 0
 985 03a5 F1 4E 1F                		bclr #6, 31[r4].B
 210:../src/peripheral/uart.cpp ****     PORTB.PMR.BIT.B6 = 1;   //周辺モジュールをピンに割り当て
 986                             		.loc 10 210 0
 987 03a8 8F CA                   		mov.B	31[r4], r2
 988 03aa 75 32 80                		or	#0xffffff80, r2
 989 03ad 87 CA                   		mov.B	r2, 31[r4]
 211:../src/peripheral/uart.cpp ****     PORTB.PMR.BIT.B7 = 1;   //
 990                             		.loc 10 211 0
 991 03af F1 36 60                		bset #6, 96[r3].B
 212:../src/peripheral/uart.cpp **** 
 992                             		.loc 10 212 0
 993 03b2 CD 34 60                		mov.B	96[r3], r4
 994 03b5 75 34 80                		or	#0xffffff80, r4
 995 03b8 C7 34 60                		mov.B	r4, 96[r3]
 996                             		.loc 10 214 0
 997 03bb DC E4                   		mov.W	[r14], r4
 998 03bd 75 24 FC                		and #-4, r4
 999 03c0 D3 E4                   		mov.W	r4, [r14]
 215:../src/peripheral/uart.cpp ****     SCIFA9.SEMR.BIT.ABCS0 = 1;
 1000                             		.loc 10 215 0
 1001 03c2 F1 E0 14                		bset #0, 20[r14].B
 216:../src/peripheral/uart.cpp ****     SCIFA9.SEMR.BIT.BGDM = 1;
 1002                             		.loc 10 216 0
 1003 03c5 CD E4 14                		mov.B	20[r14], r4
 1004 03c8 75 34 80                		or	#0xffffff80, r4
 1005 03cb C7 E4 14                		mov.B	r4, 20[r14]
 217:../src/peripheral/uart.cpp ****     SCIFA9.BRR = 6 - 1;
 1006                             		.loc 10 217 0
 1007 03ce F9 E4 02 05             		mov.B	#5, 2[r14]
 218:../src/peripheral/uart.cpp ****     SCIFA9.FCR.BIT.TTRG = 0b11;
 1008                             		.loc 10 218 0
 1009 03d2 DD E4 06                		mov.W	12[r14], r4
 1010 03d5 75 34 30                		or	#48, r4
 1011 03d8 D7 E4 06                		mov.W	r4, 12[r14]
 219:../src/peripheral/uart.cpp **** 
 220:../src/peripheral/uart.cpp ****     //受信設定
 221:../src/peripheral/uart.cpp ****     SCIFA9.FCR.BIT.RTRG = 0b11;
 1012                             		.loc 10 221 0
 1013 03db DD E4 06                		mov.W	12[r14], r4
 1014 03de 76 34 C0 00             		or	#0xc0, r4
 1015 03e2 D7 E4 06                		mov.W	r4, 12[r14]
 222:../src/peripheral/uart.cpp ****     SCIFA9.SCR.BIT.RE = 1;
 1016                             		.loc 10 222 0
 1017 03e5 DD E4 02                		mov.W	4[r14], r4
 1018 03e8 78 44                   		bset #4, r4
 1019 03ea D7 E4 02                		mov.W	r4, 4[r14]
 223:../src/peripheral/uart.cpp **** 
 224:../src/peripheral/uart.cpp ****     //送信設定
 225:../src/peripheral/uart.cpp ****     //IEN(SCIFA9,TXIF9) = 1;//割り込み要求を許可
 226:../src/peripheral/uart.cpp ****     //IR(SCIFA9,TXIF9)=0;//割り込みステータフラグをクリア
 227:../src/peripheral/uart.cpp **** 
 228:../src/peripheral/uart.cpp ****     //SCIFA9.SCR.BIT.TEIE = 1;
 229:../src/peripheral/uart.cpp ****     SCIFA9.SCR.BIT.TE = 1;
 1020                             		.loc 10 229 0
 1021 03ed DD E4 02                		mov.W	4[r14], r4
 1022 03f0 78 54                   		bset #5, r4
 1023 03f2 D7 E4 02                		mov.W	r4, 4[r14]
 1024 03f5 02                      		rts
 1025                             	.LBE1120:
 1026                             	.LFE1431:
 1028                             		.global	__Z8put1bytec
 1030                             	__Z8put1bytec:
 1031                             	.LFB1432:
 230:../src/peripheral/uart.cpp ****     //SCIFA9.SCR.BIT.TIE = 1;
 231:../src/peripheral/uart.cpp **** 
 232:../src/peripheral/uart.cpp **** }
 233:../src/peripheral/uart.cpp **** 
 234:../src/peripheral/uart.cpp **** /***********1byte送信関数*******************/
 235:../src/peripheral/uart.cpp **** void put1byte(char c) {
 1032                             		.loc 10 235 0
 1033                             	.LVL49:
 236:../src/peripheral/uart.cpp ****     while ( SCI1.SSR.BIT.TEND == 0)
 1034                             		.loc 10 236 0
 1035 03f6 FB 4E 20 A0 08          		mov.L	#0x8a020, r4
 1036 03fb 77 10 01 00 00          		.balign 8,3,5
 1037                             	.L80:
 1038                             		.loc 10 236 0 is_stmt 0 discriminator 1
 1039 0400 CD 4E 04                		mov.B	4[r4], r14
 1040 0403 7C 2E                   		btst	#2, r14
 1041 0405 20 FB                   		beq	.L80
 237:../src/peripheral/uart.cpp ****         ;
 238:../src/peripheral/uart.cpp ****     SCI1.TDR = c;
 1042                             		.loc 10 238 0 is_stmt 1
 1043 0407 FB EE 20 A0 08          		mov.L	#0x8a020, r14
 1044 040c C7 E1 03                		mov.B	r1, 3[r14]
 1045 040f 02                      		rts
 1046                             	.LFE1432:
 1048                             		.global	__Z8putnbytePci
 1050                             	__Z8putnbytePci:
 1051                             	.LFB1433:
 239:../src/peripheral/uart.cpp **** }
 240:../src/peripheral/uart.cpp **** /***********nbyte送信関数*******************/
 241:../src/peripheral/uart.cpp **** void putnbyte(char *buf, int len) {
 1052                             		.loc 10 241 0
 1053                             	.LVL50:
 1054                             	.LBB1121:
 242:../src/peripheral/uart.cpp ****     int c;
 243:../src/peripheral/uart.cpp **** 
 244:../src/peripheral/uart.cpp ****     for (c = 0; c < len; c++) {
 1055                             		.loc 10 244 0
 1056 0410 61 02                   		cmp	#0, r2
 1057 0412 2B 23                   		ble	.L81
 1058                             	.LBB1122:
 1059                             	.LBB1123:
 236:../src/peripheral/uart.cpp ****         ;
 1060                             		.loc 10 236 0
 1061 0414 FB 4E 20 A0 08          		mov.L	#0x8a020, r4
 1062 0419 FF 25 21                		add	r2, r1, r5
 1063 041c EF 42                   		mov.L	r4, r2
 1064                             	.LVL51:
 1065 041e EF 00                   		.balign 8,3,5
 1066                             	.L86:
 1067                             	.LBE1123:
 1068                             	.LBE1122:
 245:../src/peripheral/uart.cpp ****         put1byte(buf[c]);
 1069                             		.loc 10 245 0 discriminator 2
 1070 0420 FD 28 13                		mov.B	[r1+], r3
 1071                             	.LVL52:
 1072 0423 77 10 01 00 00          		.balign 8,3,5
 1073                             	.L84:
 1074                             	.LBB1125:
 1075                             	.LBB1124:
 236:../src/peripheral/uart.cpp ****         ;
 1076                             		.loc 10 236 0
 1077 0428 CD 4E 04                		mov.B	4[r4], r14
 1078 042b 7C 2E                   		btst	#2, r14
 1079 042d 20 FB                   		beq	.L84
 238:../src/peripheral/uart.cpp **** }
 1080                             		.loc 10 238 0
 1081 042f 80 AB                   		mov.B	r3, 3[r2]
 1082                             	.LVL53:
 1083                             	.LBE1124:
 1084                             	.LBE1125:
 244:../src/peripheral/uart.cpp ****         put1byte(buf[c]);
 1085                             		.loc 10 244 0
 1086 0431 47 51                   		cmp	r5, r1
 1087 0433 21 ED                   		bne	.L86
 1088                             	.LVL54:
 1089                             	.L81:
 1090 0435 02                      		rts
 1091                             	.LBE1121:
 1092                             	.LFE1433:
 1094                             		.global	__Z8myprintfPKcz
 1096                             	__Z8myprintfPKcz:
 1097                             	.LFB1434:
 246:../src/peripheral/uart.cpp ****     }
 247:../src/peripheral/uart.cpp **** }
 248:../src/peripheral/uart.cpp **** /***********自作printf関数******************/
 249:../src/peripheral/uart.cpp **** int myprintf(const char *fmt, ...) {
 1098                             		.loc 10 249 0
 1099                             	.LVL55:
 1100 0436 60 40                   		sub	#4, r0
 1101                             	.LCFI5:
 1102                             		.loc 10 249 0
 1103 0438 66 83                   		mov.L	#8, r3
 1104 043a 4B 03                   		add	r0, r3
 1105                             	.LVL56:
 1106                             	.LBB1126:
 250:../src/peripheral/uart.cpp ****     static char buffer[1000];
 251:../src/peripheral/uart.cpp ****     int len;
 252:../src/peripheral/uart.cpp **** 
 253:../src/peripheral/uart.cpp ****     va_list ap;
 254:../src/peripheral/uart.cpp ****     va_start(ap, fmt);
 255:../src/peripheral/uart.cpp **** 
 256:../src/peripheral/uart.cpp ****     len = vsprintf(buffer, fmt, ap);
 1107                             		.loc 10 256 0
 1108 043c FD 2A 32                		mov.L	[r3+], r2
 1109                             	.LVL57:
 1110 043f FB 12 D1 07 00 00       		mov.L	#__ZZ8myprintfPKczE6buffer, r1
 1111 0445 05 00 00 00             		bsr	_vsprintf
 1112                             	.LVL58:
 1113                             	.LBB1127:
 1114                             	.LBB1128:
 244:../src/peripheral/uart.cpp ****         put1byte(buf[c]);
 1115                             		.loc 10 244 0
 1116 0449 61 01                   		cmp	#0, r1
 1117 044b 2B 2A                   		ble	.L93
 1118                             	.LBB1129:
 1119                             	.LBB1130:
 236:../src/peripheral/uart.cpp ****         ;
 1120                             		.loc 10 236 0
 1121 044d FB 4E 20 A0 08          		mov.L	#0x8a020, r4
 1122 0452 FB 32 D1 07 00 00       		mov.L	#__ZZ8myprintfPKczE6buffer, r3
 1123 0458 FF 2F 31                		add	r3, r1, r15
 1124 045b EF 45                   		mov.L	r4, r5
 1125                             	.LVL59:
 1126 045d FC 13 00                		.balign 8,3,5
 1127                             	.L92:
 1128                             	.LBE1130:
 1129                             	.LBE1129:
 245:../src/peripheral/uart.cpp ****     }
 1130                             		.loc 10 245 0
 1131 0460 FD 28 32                		mov.B	[r3+], r2
 1132                             	.LVL60:
 1133 0463 77 10 01 00 00          		.balign 8,3,5
 1134                             	.L90:
 1135                             	.LBB1132:
 1136                             	.LBB1131:
 236:../src/peripheral/uart.cpp ****         ;
 1137                             		.loc 10 236 0
 1138 0468 CD 4E 04                		mov.B	4[r4], r14
 1139 046b 7C 2E                   		btst	#2, r14
 1140 046d 20 FB                   		beq	.L90
 238:../src/peripheral/uart.cpp **** }
 1141                             		.loc 10 238 0
 1142 046f 80 DA                   		mov.B	r2, 3[r5]
 1143                             	.LVL61:
 1144                             	.LBE1131:
 1145                             	.LBE1132:
 244:../src/peripheral/uart.cpp ****         put1byte(buf[c]);
 1146                             		.loc 10 244 0
 1147 0471 47 F3                   		cmp	r15, r3
 1148 0473 21 ED                   		bne	.L92
 1149                             	.LVL62:
 1150                             		.balign 8,3,1
 1151                             	.L93:
 1152                             	.LBE1128:
 1153                             	.LBE1127:
 1154                             	.LBE1126:
 257:../src/peripheral/uart.cpp ****     putnbyte(buffer, len);
 258:../src/peripheral/uart.cpp ****     va_end(ap);
 259:../src/peripheral/uart.cpp ****     return len;
 260:../src/peripheral/uart.cpp **** }
 1155                             		.loc 10 260 0
 1156 0475 67 01                   		rtsd	#4
 1157                             	.LFE1434:
 1159                             		.global	__Z9put1byte2c
 1161                             	__Z9put1byte2c:
 1162                             	.LFB1435:
 261:../src/peripheral/uart.cpp **** 
 262:../src/peripheral/uart.cpp **** /***********1byte送信関数*******************/
 263:../src/peripheral/uart.cpp **** void put1byte2(char c) {
 1163                             		.loc 10 263 0
 1164                             	.LVL63:
 264:../src/peripheral/uart.cpp ****     while ( SCI2.SSR.BIT.TEND == 0)
 1165                             		.loc 10 264 0
 1166 0477 FB 4E 40 A0 08          		mov.L	#0x8a040, r4
 1167 047c 76 10 01 00             		.balign 8,3,5
 1168                             	.L97:
 1169                             		.loc 10 264 0 is_stmt 0 discriminator 1
 1170 0480 CD 4E 04                		mov.B	4[r4], r14
 1171 0483 7C 2E                   		btst	#2, r14
 1172 0485 20 FB                   		beq	.L97
 265:../src/peripheral/uart.cpp ****         ;
 266:../src/peripheral/uart.cpp ****     SCI2.TDR = c;
 1173                             		.loc 10 266 0 is_stmt 1
 1174 0487 FB EE 40 A0 08          		mov.L	#0x8a040, r14
 1175 048c C7 E1 03                		mov.B	r1, 3[r14]
 1176 048f 02                      		rts
 1177                             	.LFE1435:
 1179                             		.global	__Z9putnbyte2Pci
 1181                             	__Z9putnbyte2Pci:
 1182                             	.LFB1436:
 267:../src/peripheral/uart.cpp **** }
 268:../src/peripheral/uart.cpp **** /***********nbyte送信関数*******************/
 269:../src/peripheral/uart.cpp **** void putnbyte2(char *buf, int len) {
 1183                             		.loc 10 269 0
 1184                             	.LVL64:
 1185                             	.LBB1133:
 270:../src/peripheral/uart.cpp ****     int c;
 271:../src/peripheral/uart.cpp **** 
 272:../src/peripheral/uart.cpp ****     for (c = 0; c < len; c++) {
 1186                             		.loc 10 272 0
 1187 0490 61 02                   		cmp	#0, r2
 1188 0492 2B 23                   		ble	.L98
 1189                             	.LBB1134:
 1190                             	.LBB1135:
 264:../src/peripheral/uart.cpp ****         ;
 1191                             		.loc 10 264 0
 1192 0494 FB 4E 40 A0 08          		mov.L	#0x8a040, r4
 1193 0499 FF 25 21                		add	r2, r1, r5
 1194 049c EF 42                   		mov.L	r4, r2
 1195                             	.LVL65:
 1196 049e EF 00                   		.balign 8,3,5
 1197                             	.L103:
 1198                             	.LBE1135:
 1199                             	.LBE1134:
 273:../src/peripheral/uart.cpp ****         put1byte2(buf[c]);
 1200                             		.loc 10 273 0 discriminator 2
 1201 04a0 FD 28 13                		mov.B	[r1+], r3
 1202                             	.LVL66:
 1203 04a3 77 10 01 00 00          		.balign 8,3,5
 1204                             	.L101:
 1205                             	.LBB1137:
 1206                             	.LBB1136:
 264:../src/peripheral/uart.cpp ****         ;
 1207                             		.loc 10 264 0
 1208 04a8 CD 4E 04                		mov.B	4[r4], r14
 1209 04ab 7C 2E                   		btst	#2, r14
 1210 04ad 20 FB                   		beq	.L101
 266:../src/peripheral/uart.cpp **** }
 1211                             		.loc 10 266 0
 1212 04af 80 AB                   		mov.B	r3, 3[r2]
 1213                             	.LVL67:
 1214                             	.LBE1136:
 1215                             	.LBE1137:
 272:../src/peripheral/uart.cpp ****         put1byte2(buf[c]);
 1216                             		.loc 10 272 0
 1217 04b1 47 51                   		cmp	r5, r1
 1218 04b3 21 ED                   		bne	.L103
 1219                             	.LVL68:
 1220                             	.L98:
 1221 04b5 02                      		rts
 1222                             	.LBE1133:
 1223                             	.LFE1436:
 1225                             		.global	__Z9myprintf2PKcz
 1227                             	__Z9myprintf2PKcz:
 1228                             	.LFB1437:
 274:../src/peripheral/uart.cpp ****     }
 275:../src/peripheral/uart.cpp **** }
 276:../src/peripheral/uart.cpp **** /***********自作printf関数******************/
 277:../src/peripheral/uart.cpp **** int myprintf2(const char *fmt, ...) {
 1229                             		.loc 10 277 0
 1230                             	.LVL69:
 1231 04b6 60 40                   		sub	#4, r0
 1232                             	.LCFI6:
 1233                             		.loc 10 277 0
 1234 04b8 66 83                   		mov.L	#8, r3
 1235 04ba 4B 03                   		add	r0, r3
 1236                             	.LVL70:
 1237                             	.LBB1138:
 278:../src/peripheral/uart.cpp ****     static char buffer[1000];
 279:../src/peripheral/uart.cpp ****     int len;
 280:../src/peripheral/uart.cpp **** 
 281:../src/peripheral/uart.cpp ****     va_list ap;
 282:../src/peripheral/uart.cpp ****     va_start(ap, fmt);
 283:../src/peripheral/uart.cpp **** 
 284:../src/peripheral/uart.cpp ****     len = vsprintf(buffer, fmt, ap);
 1238                             		.loc 10 284 0
 1239 04bc FD 2A 32                		mov.L	[r3+], r2
 1240                             	.LVL71:
 1241 04bf FB 12 E9 03 00 00       		mov.L	#__ZZ9myprintf2PKczE6buffer, r1
 1242 04c5 05 00 00 00             		bsr	_vsprintf
 1243                             	.LVL72:
 1244                             	.LBB1139:
 1245                             	.LBB1140:
 272:../src/peripheral/uart.cpp ****         put1byte2(buf[c]);
 1246                             		.loc 10 272 0
 1247 04c9 61 01                   		cmp	#0, r1
 1248 04cb 2B 2A                   		ble	.L110
 1249                             	.LBB1141:
 1250                             	.LBB1142:
 264:../src/peripheral/uart.cpp ****         ;
 1251                             		.loc 10 264 0
 1252 04cd FB 4E 40 A0 08          		mov.L	#0x8a040, r4
 1253 04d2 FB 32 E9 03 00 00       		mov.L	#__ZZ9myprintf2PKczE6buffer, r3
 1254 04d8 FF 2F 31                		add	r3, r1, r15
 1255 04db EF 45                   		mov.L	r4, r5
 1256                             	.LVL73:
 1257 04dd FC 13 00                		.balign 8,3,5
 1258                             	.L109:
 1259                             	.LBE1142:
 1260                             	.LBE1141:
 273:../src/peripheral/uart.cpp ****     }
 1261                             		.loc 10 273 0
 1262 04e0 FD 28 32                		mov.B	[r3+], r2
 1263                             	.LVL74:
 1264 04e3 77 10 01 00 00          		.balign 8,3,5
 1265                             	.L107:
 1266                             	.LBB1144:
 1267                             	.LBB1143:
 264:../src/peripheral/uart.cpp ****         ;
 1268                             		.loc 10 264 0
 1269 04e8 CD 4E 04                		mov.B	4[r4], r14
 1270 04eb 7C 2E                   		btst	#2, r14
 1271 04ed 20 FB                   		beq	.L107
 266:../src/peripheral/uart.cpp **** }
 1272                             		.loc 10 266 0
 1273 04ef 80 DA                   		mov.B	r2, 3[r5]
 1274                             	.LVL75:
 1275                             	.LBE1143:
 1276                             	.LBE1144:
 272:../src/peripheral/uart.cpp ****         put1byte2(buf[c]);
 1277                             		.loc 10 272 0
 1278 04f1 47 F3                   		cmp	r15, r3
 1279 04f3 21 ED                   		bne	.L109
 1280                             	.LVL76:
 1281                             		.balign 8,3,1
 1282                             	.L110:
 1283                             	.LBE1140:
 1284                             	.LBE1139:
 1285                             	.LBE1138:
 285:../src/peripheral/uart.cpp ****     putnbyte2(buffer, len);
 286:../src/peripheral/uart.cpp ****     va_end(ap);
 287:../src/peripheral/uart.cpp ****     return len;
 288:../src/peripheral/uart.cpp **** }
 1286                             		.loc 10 288 0
 1287 04f5 67 01                   		rtsd	#4
 1288                             	.LFE1437:
 1290                             		.global	__Z20retrieveDatafromFRDRv
 1292                             	__Z20retrieveDatafromFRDRv:
 1293                             	.LFB1439:
 289:../src/peripheral/uart.cpp **** 
 290:../src/peripheral/uart.cpp **** /***********nbyte送信関数*******************/
 291:../src/peripheral/uart.cpp **** void putnbyte3(uint8_t *buf, uint16_t len) {
 292:../src/peripheral/uart.cpp ****     int c;
 293:../src/peripheral/uart.cpp **** 
 294:../src/peripheral/uart.cpp ****     for (c = 0; c < len; c++) {
 295:../src/peripheral/uart.cpp ****         transBuff.push(buf[c]);
 296:../src/peripheral/uart.cpp ****     }
 297:../src/peripheral/uart.cpp **** 
 298:../src/peripheral/uart.cpp **** }
 299:../src/peripheral/uart.cpp **** /***********受信バッファの中身を取り出す関数******************/
 300:../src/peripheral/uart.cpp **** void retrieveDatafromFRDR(){
 1294                             		.loc 10 300 0
 1295                             	.LBB1145:
 301:../src/peripheral/uart.cpp ****     uint8_t *periMes = getPointerOfPeriodicMsg();
 302:../src/peripheral/uart.cpp ****     periMes[107] = SCIFA9.FDR.BIT.R;
 1296                             		.loc 10 302 0
 1297 04f7 FB EE 20 00 0D          		mov.L	#0xd0020, r14
 1298 04fc DD E1 07                		mov.W	14[r14], r1
 303:../src/peripheral/uart.cpp ****     periMes[109] = SCIFA9.FSR.BIT.RDF;
 1299                             		.loc 10 303 0
 1300 04ff DD E4 04                		mov.W	8[r14], r4
 302:../src/peripheral/uart.cpp ****     periMes[109] = SCIFA9.FSR.BIT.RDF;
 1301                             		.loc 10 302 0
 1302 0502 FB 32 B9 0B 00 00       		mov.L	#__ZL11periodicMsg, r3
 1303                             		.loc 10 303 0
 1304 0508 68 14                   		shlr	#1, r4
 302:../src/peripheral/uart.cpp ****     periMes[109] = SCIFA9.FSR.BIT.RDF;
 1305                             		.loc 10 302 0
 1306 050a 75 21 1F                		and #31, r1
 1307                             		.loc 10 303 0
 1308 050d 64 14                   		and #1, r4
 304:../src/peripheral/uart.cpp ****     if(SCIFA9.FSR.BIT.BRK == 1)SCIFA9.FSR.BIT.BRK = 0;
 1309                             		.loc 10 304 0
 1310 050f DD E2 04                		mov.W	8[r14], r2
 302:../src/peripheral/uart.cpp ****     periMes[109] = SCIFA9.FSR.BIT.RDF;
 1311                             		.loc 10 302 0
 1312 0512 C7 31 6B                		mov.B	r1, 107[r3]
 303:../src/peripheral/uart.cpp ****     periMes[109] = SCIFA9.FSR.BIT.RDF;
 1313                             		.loc 10 303 0
 1314 0515 C7 34 6D                		mov.B	r4, 109[r3]
 1315                             		.loc 10 304 0
 1316 0518 7C 42                   		btst	#4, r2
 1317 051a 20 0E                   		beq	.L113
 1318                             		.loc 10 304 0 is_stmt 0 discriminator 1
 1319 051c DD E4 04                		mov.W	8[r14], r4
 1320 051f 7A 44                   		bclr #4, r4
 1321 0521 D7 E4 04                		mov.W	r4, 8[r14]
 1322 0524 76 10 01 00             		.balign 8,3,4
 1323                             	.L113:
 305:../src/peripheral/uart.cpp ****     if(SCIFA9.LSR.BIT.ORER == 1)SCIFA9.LSR.BIT.ORER = 0;
 1324                             		.loc 10 305 0 is_stmt 1
 1325 0528 FB EE 20 00 0D          		mov.L	#0xd0020, r14
 1326 052d DD E4 09                		mov.W	18[r14], r4
 1327 0530 7C 04                   		btst	#0, r4
 1328 0532 20 0E                   		beq	.L114
 1329                             		.loc 10 305 0 is_stmt 0 discriminator 1
 1330 0534 DD E4 09                		mov.W	18[r14], r4
 1331 0537 7A 04                   		bclr #0, r4
 1332 0539 D7 E4 09                		mov.W	r4, 18[r14]
 1333 053c 76 10 01 00             		.balign 8,3,4
 1334                             	.L114:
 306:../src/peripheral/uart.cpp ****     if(SCIFA9.FDR.BIT.R == 0) return;
 1335                             		.loc 10 306 0 is_stmt 1
 1336 0540 FB 4E 20 00 0D          		mov.L	#0xd0020, r4
 1337 0545 DD 4E 07                		mov.W	14[r4], r14
 1338 0548 FD 74 CE 1F             		tst	#31, r14
 1339 054c 20 38                   		beq	.L112
 307:../src/peripheral/uart.cpp ****     while (SCIFA9.FDR.BIT.R != 0){
 1340                             		.loc 10 307 0 discriminator 1
 1341 054e DD 4E 07                		mov.W	14[r4], r14
 1342 0551 FD 74 CE 1F             		tst	#31, r14
 1343 0555 20 2B                   		beq	.L118
 1344 0557 FB 12 B4 0C 00 00       		mov.L	#__ZL16recieveBuffCount, r1
 1345 055d DC 1E                   		mov.W	[r1], r14
 1346 055f 03                      		.balign 8,3,5
 1347                             	.L119:
 308:../src/peripheral/uart.cpp ****         recieveBuff[recieveBuffCount%512] = (uint8_t)(SCIFA9.FRDR);
 1348                             		.loc 10 308 0
 1349 0560 8A C2                   		mov.B	10[r4], r2
 1350 0562 FB 3A FF 01             		mov.L	#0x1ff, r3
 1351 0566 53 E3                   		and	r14, r3
 1352 0568 70 33 B8 0C 00 00       		add	#__ZL11recieveBuff, r3
 1353 056e C3 32                   		mov.B	r2, [r3]
 307:../src/peripheral/uart.cpp ****     while (SCIFA9.FDR.BIT.R != 0){
 1354                             		.loc 10 307 0
 1355 0570 99 CB                   		mov.W	14[r4], r3
 309:../src/peripheral/uart.cpp ****         //myprintf3("%d\n",recieveBuff[recieveBuffCount%512]);
 310:../src/peripheral/uart.cpp ****         recieveBuffCount ++;
 1356                             		.loc 10 310 0
 1357 0572 62 1E                   		add	#1, r14
 311:../src/peripheral/uart.cpp ****         recieveBuffCount %= 512;
 1358                             		.loc 10 311 0
 1359 0574 76 2E FF 01             		and #0x1ff, r14
 307:../src/peripheral/uart.cpp ****         recieveBuff[recieveBuffCount%512] = (uint8_t)(SCIFA9.FRDR);
 1360                             		.loc 10 307 0
 1361 0578 FD 74 C3 1F             		tst	#31, r3
 1362 057c 21 E4                   		bne	.L119
 1363 057e D3 1E                   		mov.W	r14, [r1]
 1364                             		.balign 8,3,3
 1365                             	.L118:
 312:../src/peripheral/uart.cpp ****     }
 313:../src/peripheral/uart.cpp **** 
 314:../src/peripheral/uart.cpp ****     fetchCommand();
 1366                             		.loc 10 314 0
 1367 0580 04 00 00 00             		bra	__Z12fetchCommandv
 1368                             	.LVL77:
 1369                             	.L112:
 1370 0584 02                      		rts
 1371                             	.LBE1145:
 1372                             	.LFE1439:
 1374                             		.global	__Z21sendDatafromTransBuffv
 1376                             	__Z21sendDatafromTransBuffv:
 1377                             	.LFB1440:
 315:../src/peripheral/uart.cpp **** }
 316:../src/peripheral/uart.cpp **** /*************送信バッファの中身を送信する関数***************/
 317:../src/peripheral/uart.cpp **** //この関数を周期的に呼び出す
 318:../src/peripheral/uart.cpp **** int sendDatafromTransBuff() {
 1378                             		.loc 10 318 0
 1379 0585 6E 7B                   		pushm	r7-r11
 1380                             	.LCFI7:
 319:../src/peripheral/uart.cpp ****     if (SCIFA9.FDR.BIT.T > 0)
 1381                             		.loc 10 319 0
 1382 0587 FB AE 20 00 0D          		mov.L	#0xd0020, r10
 1383 058c DD A7 07                		mov.W	14[r10], r7
 1384 058f FD 78 C7 00 1F          		tst	#0x1f00, r7
 1385 0594 20 2C                   		beq	.L136
 1386                             	.LVL78:
 1387                             	.LBB1165:
 1388                             	.LBB1166:
 1389                             	.LBB1167:
 1390                             	.LBB1168:
 337:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****     }
 1391                             		.loc 7 337 0
 1392 0596 FB 72 E0 0E 00 00       		mov.L	#__ZL9transBuff, r7
 1393 059c ED 7B 09                		mov.L	36[r7], r11
 1394 059f ED 7A 05                		mov.L	20[r7], r10
 1395 05a2 A9 F1                   		mov.L	24[r7], r1
 1396 05a4 43 AB                   		sub	r10, r11
 1397 05a6 6A 2B                   		shar	#2, r11
 1398 05a8 ED 7E 07                		mov.L	28[r7], r14
 1399 05ab 60 1B                   		sub	#1, r11
 1400 05ad ED 7A 04                		mov.L	16[r7], r10
 1401 05b0 A8 F7                   		mov.L	8[r7], r7
 1402 05b2 6C 9B                   		shll	#9, r11
 1403 05b4 43 E1                   		sub	r14, r1
 1404 05b6 4B B1                   		add	r11, r1
 1405 05b8 FF 07 7A                		sub	r7, r10, r7
 1406                             	.LBE1168:
 1407                             	.LBE1167:
 1408                             	.LBE1166:
 1409                             	.LBE1165:
 320:../src/peripheral/uart.cpp ****         return transBuff.size();
 1410                             		.loc 10 320 0
 1411 05bb 4B 71                   		add	r7, r1
 321:../src/peripheral/uart.cpp ****     while (SCIFA9.FDR.BIT.T < 0x10) {
 322:../src/peripheral/uart.cpp ****         if (transBuff.empty() == true)
 323:../src/peripheral/uart.cpp ****             return 0;
 324:../src/peripheral/uart.cpp ****         SCIFA9.FTDR = transBuff.front();
 325:../src/peripheral/uart.cpp ****         transBuff.pop();
 326:../src/peripheral/uart.cpp ****     }
 327:../src/peripheral/uart.cpp ****     return transBuff.size();
 328:../src/peripheral/uart.cpp **** }
 1412                             		.loc 10 328 0
 1413 05bd 3F 7B 05                		rtsd	#20, r7-r11
 1414                             	.LVL79:
 1415                             	.L136:
 1416 05c0 FB B2 E0 0E 00 00       		mov.L	#__ZL9transBuff, r11
 1417 05c6 ED B4 02                		mov.L	8[r11], r4
 642:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	_M_deallocate_node(*__n);
 643:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****     }
 644:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
 645:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****   /**
 646:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****    *  @brief  A standard container using fixed-size memory allocation and
 647:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****    *  constant-time manipulation of elements at either end.
 648:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****    *
 649:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****    *  @ingroup sequences
 650:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****    *
 651:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****    *  @tparam _Tp  Type of element.
 652:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****    *  @tparam _Alloc  Allocator type, defaults to allocator<_Tp>.
 653:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****    *
 654:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****    *  Meets the requirements of a <a href="tables.html#65">container</a>, a
 655:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****    *  <a href="tables.html#66">reversible container</a>, and a
 656:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****    *  <a href="tables.html#67">sequence</a>, including the
 657:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****    *  <a href="tables.html#68">optional sequence requirements</a>.
 658:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****    *
 659:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****    *  In previous HP/SGI versions of deque, there was an extra template
 660:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****    *  parameter so users could control the node size.  This extension turned
 661:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****    *  out to violate the C++ standard (it can be detected using template
 662:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****    *  template parameters), and it was removed.
 663:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****    *
 664:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****    *  Here's how a deque<Tp> manages memory.  Each deque has 4 members:
 665:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****    *
 666:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****    *  - Tp**        _M_map
 667:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****    *  - size_t      _M_map_size
 668:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****    *  - iterator    _M_start, _M_finish
 669:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****    *
 670:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****    *  map_size is at least 8.  %map is an array of map_size
 671:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****    *  pointers-to-@a nodes.  (The name %map has nothing to do with the
 672:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****    *  std::map class, and @b nodes should not be confused with
 673:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****    *  std::list's usage of @a node.)
 674:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****    *
 675:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****    *  A @a node has no specific type name as such, but it is referred
 676:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****    *  to as @a node in this file.  It is a simple array-of-Tp.  If Tp
 677:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****    *  is very large, there will be one Tp element per node (i.e., an
 678:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****    *  @a array of one).  For non-huge Tp's, node size is inversely
 679:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****    *  related to Tp size: the larger the Tp, the fewer Tp's will fit
 680:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****    *  in a node.  The goal here is to keep the total size of a node
 681:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****    *  relatively small and constant over different Tp's, to improve
 682:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****    *  allocator efficiency.
 683:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****    *
 684:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****    *  Not every pointer in the %map array will point to a node.  If
 685:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****    *  the initial number of elements in the deque is small, the
 686:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****    *  /middle/ %map pointers will be valid, and the ones at the edges
 687:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****    *  will be unused.  This same situation will arise as the %map
 688:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****    *  grows: available %map pointers, if any, will be on the ends.  As
 689:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****    *  new nodes are created, only a subset of the %map's pointers need
 690:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****    *  to be copied @a outward.
 691:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****    *
 692:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****    *  Class invariants:
 693:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****    * - For any nonsingular iterator i:
 694:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****    *    - i.node points to a member of the %map array.  (Yes, you read that
 695:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****    *      correctly:  i.node does not actually point to a node.)  The member of
 696:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****    *      the %map array is what actually points to the node.
 697:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****    *    - i.first == *(i.node)    (This points to the node (first Tp element).)
 698:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****    *    - i.last  == i.first + node_size
 699:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****    *    - i.cur is a pointer in the range [i.first, i.last).  NOTE:
 700:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****    *      the implication of this is that i.cur is always a dereferenceable
 701:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****    *      pointer, even if i is a past-the-end iterator.
 702:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****    * - Start and Finish are always nonsingular iterators.  NOTE: this
 703:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****    * means that an empty deque must have one node, a deque with <N
 704:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****    * elements (where N is the node buffer size) must have one node, a
 705:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****    * deque with N through (2N-1) elements must have two nodes, etc.
 706:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****    * - For every node other than start.node and finish.node, every
 707:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****    * element in the node is an initialized object.  If start.node ==
 708:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****    * finish.node, then [start.cur, finish.cur) are initialized
 709:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****    * objects, and the elements outside that range are uninitialized
 710:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****    * storage.  Otherwise, [start.cur, start.last) and [finish.first,
 711:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****    * finish.cur) are initialized objects, and [start.first, start.cur)
 712:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****    * and [finish.cur, finish.last) are uninitialized storage.
 713:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****    * - [%map, %map + map_size) is a valid, non-empty range.
 714:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****    * - [start.node, finish.node] is a valid range contained within
 715:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****    *   [%map, %map + map_size).
 716:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****    * - A pointer in the range [%map, %map + map_size) points to an allocated
 717:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****    *   node if and only if the pointer is in the range
 718:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****    *   [start.node, finish.node].
 719:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****    *
 720:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****    *  Here's the magic:  nothing in deque is @b aware of the discontiguous
 721:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****    *  storage!
 722:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****    *
 723:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****    *  The memory setup and layout occurs in the parent, _Base, and the iterator
 724:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****    *  class is entirely responsible for @a leaping from one node to the next.
 725:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****    *  All the implementation routines for deque itself work only through the
 726:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****    *  start and finish iterators.  This keeps the routines simple and sane,
 727:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****    *  and we can use other standard algorithms as well.
 728:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****   */
 729:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****   template<typename _Tp, typename _Alloc = std::allocator<_Tp> >
 730:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****     class deque : protected _Deque_base<_Tp, _Alloc>
 731:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****     {
 732:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       // concept requirements
 733:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       typedef typename _Alloc::value_type        _Alloc_value_type;
 734:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       __glibcxx_class_requires(_Tp, _SGIAssignableConcept)
 735:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       __glibcxx_class_requires2(_Tp, _Alloc_value_type, _SameTypeConcept)
 736:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
 737:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       typedef _Deque_base<_Tp, _Alloc>           _Base;
 738:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       typedef typename _Base::_Tp_alloc_type	 _Tp_alloc_type;
 739:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
 740:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****     public:
 741:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       typedef _Tp                                        value_type;
 742:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       typedef typename _Tp_alloc_type::pointer           pointer;
 743:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       typedef typename _Tp_alloc_type::const_pointer     const_pointer;
 744:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       typedef typename _Tp_alloc_type::reference         reference;
 745:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       typedef typename _Tp_alloc_type::const_reference   const_reference;
 746:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       typedef typename _Base::iterator                   iterator;
 747:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       typedef typename _Base::const_iterator             const_iterator;
 748:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       typedef std::reverse_iterator<const_iterator>      const_reverse_iterator;
 749:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       typedef std::reverse_iterator<iterator>            reverse_iterator;
 750:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       typedef size_t                             size_type;
 751:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       typedef ptrdiff_t                          difference_type;
 752:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       typedef _Alloc                             allocator_type;
 753:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
 754:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****     protected:
 755:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       typedef pointer*                           _Map_pointer;
 756:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
 757:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       static size_t _S_buffer_size()
 758:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       { return __deque_buf_size(sizeof(_Tp)); }
 759:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
 760:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       // Functions controlling memory layout, and nothing else.
 761:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       using _Base::_M_initialize_map;
 762:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       using _Base::_M_create_nodes;
 763:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       using _Base::_M_destroy_nodes;
 764:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       using _Base::_M_allocate_node;
 765:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       using _Base::_M_deallocate_node;
 766:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       using _Base::_M_allocate_map;
 767:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       using _Base::_M_deallocate_map;
 768:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       using _Base::_M_get_Tp_allocator;
 769:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
 770:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       /** 
 771:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  A total of four data members accumulated down the hierarchy.
 772:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  May be accessed via _M_impl.*
 773:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        */
 774:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       using _Base::_M_impl;
 775:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
 776:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****     public:
 777:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       // [23.2.1.1] construct/copy/destroy
 778:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       // (assign() and get_allocator() are also listed in this section)
 779:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       /**
 780:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  @brief  Default constructor creates no elements.
 781:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        */
 782:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       deque()
 783:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       : _Base() { }
 784:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
 785:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       /**
 786:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  @brief  Creates a %deque with no elements.
 787:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  @param  __a  An allocator object.
 788:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        */
 789:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       explicit
 790:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       deque(const allocator_type& __a)
 791:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       : _Base(__a, 0) { }
 792:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
 793:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** #if __cplusplus >= 201103L
 794:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       /**
 795:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  @brief  Creates a %deque with default constructed elements.
 796:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  @param  __n  The number of elements to initially create.
 797:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *
 798:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  This constructor fills the %deque with @a n default
 799:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  constructed elements.
 800:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        */
 801:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       explicit
 802:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       deque(size_type __n)
 803:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       : _Base(__n)
 804:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       { _M_default_initialize(); }
 805:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
 806:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       /**
 807:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  @brief  Creates a %deque with copies of an exemplar element.
 808:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  @param  __n  The number of elements to initially create.
 809:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  @param  __value  An element to copy.
 810:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  @param  __a  An allocator.
 811:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *
 812:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  This constructor fills the %deque with @a __n copies of @a __value.
 813:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        */
 814:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       deque(size_type __n, const value_type& __value,
 815:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	    const allocator_type& __a = allocator_type())
 816:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       : _Base(__a, __n)
 817:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       { _M_fill_initialize(__value); }
 818:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** #else
 819:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       /**
 820:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  @brief  Creates a %deque with copies of an exemplar element.
 821:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  @param  __n  The number of elements to initially create.
 822:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  @param  __value  An element to copy.
 823:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  @param  __a  An allocator.
 824:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *
 825:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  This constructor fills the %deque with @a __n copies of @a __value.
 826:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        */
 827:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       explicit
 828:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       deque(size_type __n, const value_type& __value = value_type(),
 829:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	    const allocator_type& __a = allocator_type())
 830:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       : _Base(__a, __n)
 831:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       { _M_fill_initialize(__value); }
 832:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** #endif
 833:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
 834:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       /**
 835:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  @brief  %Deque copy constructor.
 836:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  @param  __x  A %deque of identical element and allocator types.
 837:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *
 838:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  The newly-created %deque uses a copy of the allocation object used
 839:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  by @a __x.
 840:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        */
 841:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       deque(const deque& __x)
 842:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       : _Base(__x._M_get_Tp_allocator(), __x.size())
 843:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       { std::__uninitialized_copy_a(__x.begin(), __x.end(), 
 844:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 				    this->_M_impl._M_start,
 845:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 				    _M_get_Tp_allocator()); }
 846:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
 847:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** #if __cplusplus >= 201103L
 848:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       /**
 849:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  @brief  %Deque move constructor.
 850:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  @param  __x  A %deque of identical element and allocator types.
 851:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *
 852:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  The newly-created %deque contains the exact contents of @a __x.
 853:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  The contents of @a __x are a valid, but unspecified %deque.
 854:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        */
 855:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       deque(deque&& __x)
 856:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       : _Base(std::move(__x)) { }
 857:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
 858:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       /**
 859:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  @brief  Builds a %deque from an initializer list.
 860:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  @param  __l  An initializer_list.
 861:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  @param  __a  An allocator object.
 862:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *
 863:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  Create a %deque consisting of copies of the elements in the
 864:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  initializer_list @a __l.
 865:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *
 866:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  This will call the element type's copy constructor N times
 867:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  (where N is __l.size()) and do no memory reallocation.
 868:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        */
 869:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       deque(initializer_list<value_type> __l,
 870:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	    const allocator_type& __a = allocator_type())
 871:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       : _Base(__a)
 872:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       {
 873:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	_M_range_initialize(__l.begin(), __l.end(),
 874:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 			    random_access_iterator_tag());
 875:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       }
 876:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** #endif
 877:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
 878:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       /**
 879:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  @brief  Builds a %deque from a range.
 880:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  @param  __first  An input iterator.
 881:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  @param  __last  An input iterator.
 882:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  @param  __a  An allocator object.
 883:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *
 884:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  Create a %deque consisting of copies of the elements from [__first,
 885:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  __last).
 886:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *
 887:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  If the iterators are forward, bidirectional, or random-access, then
 888:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  this will call the elements' copy constructor N times (where N is
 889:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  distance(__first,__last)) and do no memory reallocation.  But if only
 890:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  input iterators are used, then this will do at most 2N calls to the
 891:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  copy constructor, and logN memory reallocations.
 892:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        */
 893:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** #if __cplusplus >= 201103L
 894:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       template<typename _InputIterator,
 895:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	       typename = std::_RequireInputIter<_InputIterator>>
 896:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****         deque(_InputIterator __first, _InputIterator __last,
 897:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	      const allocator_type& __a = allocator_type())
 898:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	: _Base(__a)
 899:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****         { _M_initialize_dispatch(__first, __last, __false_type()); }
 900:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** #else
 901:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       template<typename _InputIterator>
 902:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****         deque(_InputIterator __first, _InputIterator __last,
 903:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	      const allocator_type& __a = allocator_type())
 904:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	: _Base(__a)
 905:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****         {
 906:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	  // Check whether it's an integral type.  If so, it's not an iterator.
 907:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	  typedef typename std::__is_integer<_InputIterator>::__type _Integral;
 908:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	  _M_initialize_dispatch(__first, __last, _Integral());
 909:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	}
 910:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** #endif
 911:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
 912:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       /**
 913:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  The dtor only erases the elements, and note that if the elements
 914:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  themselves are pointers, the pointed-to memory is not touched in any
 915:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  way.  Managing the pointer is the user's responsibility.
 916:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        */
 917:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       ~deque() _GLIBCXX_NOEXCEPT
 918:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       { _M_destroy_data(begin(), end(), _M_get_Tp_allocator()); }
 919:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
 920:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       /**
 921:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  @brief  %Deque assignment operator.
 922:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  @param  __x  A %deque of identical element and allocator types.
 923:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *
 924:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  All the elements of @a x are copied, but unlike the copy constructor,
 925:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  the allocator object is not copied.
 926:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        */
 927:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       deque&
 928:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       operator=(const deque& __x);
 929:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
 930:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** #if __cplusplus >= 201103L
 931:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       /**
 932:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  @brief  %Deque move assignment operator.
 933:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  @param  __x  A %deque of identical element and allocator types.
 934:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *
 935:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  The contents of @a __x are moved into this deque (without copying).
 936:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  @a __x is a valid, but unspecified %deque.
 937:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        */
 938:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       deque&
 939:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       operator=(deque&& __x)
 940:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       {
 941:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	// NB: DR 1204.
 942:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	// NB: DR 675.
 943:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	this->clear();
 944:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	this->swap(__x);
 945:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	return *this;
 946:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       }
 947:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
 948:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       /**
 949:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  @brief  Assigns an initializer list to a %deque.
 950:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  @param  __l  An initializer_list.
 951:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *
 952:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  This function fills a %deque with copies of the elements in the
 953:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  initializer_list @a __l.
 954:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *
 955:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  Note that the assignment completely changes the %deque and that the
 956:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  resulting %deque's size is the same as the number of elements
 957:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  assigned.  Old data may be lost.
 958:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        */
 959:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       deque&
 960:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       operator=(initializer_list<value_type> __l)
 961:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       {
 962:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	this->assign(__l.begin(), __l.end());
 963:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	return *this;
 964:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       }
 965:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** #endif
 966:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
 967:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       /**
 968:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  @brief  Assigns a given value to a %deque.
 969:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  @param  __n  Number of elements to be assigned.
 970:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  @param  __val  Value to be assigned.
 971:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *
 972:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  This function fills a %deque with @a n copies of the given
 973:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  value.  Note that the assignment completely changes the
 974:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  %deque and that the resulting %deque's size is the same as
 975:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  the number of elements assigned.  Old data may be lost.
 976:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        */
 977:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       void
 978:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       assign(size_type __n, const value_type& __val)
 979:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       { _M_fill_assign(__n, __val); }
 980:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
 981:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       /**
 982:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  @brief  Assigns a range to a %deque.
 983:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  @param  __first  An input iterator.
 984:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  @param  __last   An input iterator.
 985:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *
 986:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  This function fills a %deque with copies of the elements in the
 987:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  range [__first,__last).
 988:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *
 989:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  Note that the assignment completely changes the %deque and that the
 990:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  resulting %deque's size is the same as the number of elements
 991:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  assigned.  Old data may be lost.
 992:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        */
 993:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** #if __cplusplus >= 201103L
 994:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       template<typename _InputIterator,
 995:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	       typename = std::_RequireInputIter<_InputIterator>>
 996:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****         void
 997:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****         assign(_InputIterator __first, _InputIterator __last)
 998:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****         { _M_assign_dispatch(__first, __last, __false_type()); }
 999:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** #else
1000:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       template<typename _InputIterator>
1001:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****         void
1002:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****         assign(_InputIterator __first, _InputIterator __last)
1003:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****         {
1004:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	  typedef typename std::__is_integer<_InputIterator>::__type _Integral;
1005:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	  _M_assign_dispatch(__first, __last, _Integral());
1006:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	}
1007:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** #endif
1008:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
1009:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** #if __cplusplus >= 201103L
1010:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       /**
1011:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  @brief  Assigns an initializer list to a %deque.
1012:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  @param  __l  An initializer_list.
1013:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *
1014:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  This function fills a %deque with copies of the elements in the
1015:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  initializer_list @a __l.
1016:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *
1017:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  Note that the assignment completely changes the %deque and that the
1018:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  resulting %deque's size is the same as the number of elements
1019:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  assigned.  Old data may be lost.
1020:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        */
1021:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       void
1022:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       assign(initializer_list<value_type> __l)
1023:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       { this->assign(__l.begin(), __l.end()); }
1024:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** #endif
1025:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
1026:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       /// Get a copy of the memory allocation object.
1027:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       allocator_type
1028:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       get_allocator() const _GLIBCXX_NOEXCEPT
1029:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       { return _Base::get_allocator(); }
1030:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
1031:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       // iterators
1032:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       /**
1033:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  Returns a read/write iterator that points to the first element in the
1034:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  %deque.  Iteration is done in ordinary element order.
1035:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        */
1036:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       iterator
1037:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       begin() _GLIBCXX_NOEXCEPT
1038:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       { return this->_M_impl._M_start; }
1039:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
1040:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       /**
1041:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  Returns a read-only (constant) iterator that points to the first
1042:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  element in the %deque.  Iteration is done in ordinary element order.
1043:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        */
1044:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       const_iterator
1045:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       begin() const _GLIBCXX_NOEXCEPT
1046:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       { return this->_M_impl._M_start; }
1047:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
1048:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       /**
1049:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  Returns a read/write iterator that points one past the last
1050:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  element in the %deque.  Iteration is done in ordinary
1051:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  element order.
1052:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        */
1053:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       iterator
1054:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       end() _GLIBCXX_NOEXCEPT
1055:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       { return this->_M_impl._M_finish; }
1056:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
1057:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       /**
1058:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  Returns a read-only (constant) iterator that points one past
1059:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  the last element in the %deque.  Iteration is done in
1060:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  ordinary element order.
1061:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        */
1062:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       const_iterator
1063:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       end() const _GLIBCXX_NOEXCEPT
1064:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       { return this->_M_impl._M_finish; }
1065:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
1066:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       /**
1067:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  Returns a read/write reverse iterator that points to the
1068:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  last element in the %deque.  Iteration is done in reverse
1069:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  element order.
1070:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        */
1071:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       reverse_iterator
1072:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       rbegin() _GLIBCXX_NOEXCEPT
1073:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       { return reverse_iterator(this->_M_impl._M_finish); }
1074:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
1075:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       /**
1076:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  Returns a read-only (constant) reverse iterator that points
1077:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  to the last element in the %deque.  Iteration is done in
1078:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  reverse element order.
1079:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        */
1080:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       const_reverse_iterator
1081:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       rbegin() const _GLIBCXX_NOEXCEPT
1082:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       { return const_reverse_iterator(this->_M_impl._M_finish); }
1083:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
1084:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       /**
1085:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  Returns a read/write reverse iterator that points to one
1086:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  before the first element in the %deque.  Iteration is done
1087:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  in reverse element order.
1088:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        */
1089:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       reverse_iterator
1090:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       rend() _GLIBCXX_NOEXCEPT
1091:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       { return reverse_iterator(this->_M_impl._M_start); }
1092:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
1093:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       /**
1094:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  Returns a read-only (constant) reverse iterator that points
1095:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  to one before the first element in the %deque.  Iteration is
1096:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  done in reverse element order.
1097:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        */
1098:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       const_reverse_iterator
1099:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       rend() const _GLIBCXX_NOEXCEPT
1100:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       { return const_reverse_iterator(this->_M_impl._M_start); }
1101:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
1102:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** #if __cplusplus >= 201103L
1103:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       /**
1104:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  Returns a read-only (constant) iterator that points to the first
1105:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  element in the %deque.  Iteration is done in ordinary element order.
1106:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        */
1107:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       const_iterator
1108:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       cbegin() const noexcept
1109:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       { return this->_M_impl._M_start; }
1110:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
1111:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       /**
1112:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  Returns a read-only (constant) iterator that points one past
1113:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  the last element in the %deque.  Iteration is done in
1114:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  ordinary element order.
1115:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        */
1116:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       const_iterator
1117:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       cend() const noexcept
1118:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       { return this->_M_impl._M_finish; }
1119:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
1120:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       /**
1121:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  Returns a read-only (constant) reverse iterator that points
1122:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  to the last element in the %deque.  Iteration is done in
1123:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  reverse element order.
1124:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        */
1125:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       const_reverse_iterator
1126:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       crbegin() const noexcept
1127:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       { return const_reverse_iterator(this->_M_impl._M_finish); }
1128:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
1129:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       /**
1130:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  Returns a read-only (constant) reverse iterator that points
1131:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  to one before the first element in the %deque.  Iteration is
1132:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  done in reverse element order.
1133:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        */
1134:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       const_reverse_iterator
1135:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       crend() const noexcept
1136:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       { return const_reverse_iterator(this->_M_impl._M_start); }
1137:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** #endif
1138:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
1139:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       // [23.2.1.2] capacity
1140:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       /**  Returns the number of elements in the %deque.  */
1141:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       size_type
1142:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       size() const _GLIBCXX_NOEXCEPT
1143:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       { return this->_M_impl._M_finish - this->_M_impl._M_start; }
1144:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
1145:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       /**  Returns the size() of the largest possible %deque.  */
1146:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       size_type
1147:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       max_size() const _GLIBCXX_NOEXCEPT
1148:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       { return _M_get_Tp_allocator().max_size(); }
1149:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
1150:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** #if __cplusplus >= 201103L
1151:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       /**
1152:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  @brief  Resizes the %deque to the specified number of elements.
1153:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  @param  __new_size  Number of elements the %deque should contain.
1154:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *
1155:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  This function will %resize the %deque to the specified
1156:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  number of elements.  If the number is smaller than the
1157:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  %deque's current size the %deque is truncated, otherwise
1158:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  default constructed elements are appended.
1159:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        */
1160:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       void
1161:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       resize(size_type __new_size)
1162:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       {
1163:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	const size_type __len = size();
1164:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	if (__new_size > __len)
1165:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	  _M_default_append(__new_size - __len);
1166:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	else if (__new_size < __len)
1167:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	  _M_erase_at_end(this->_M_impl._M_start
1168:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 			  + difference_type(__new_size));
1169:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       }
1170:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
1171:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       /**
1172:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  @brief  Resizes the %deque to the specified number of elements.
1173:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  @param  __new_size  Number of elements the %deque should contain.
1174:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  @param  __x  Data with which new elements should be populated.
1175:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *
1176:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  This function will %resize the %deque to the specified
1177:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  number of elements.  If the number is smaller than the
1178:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  %deque's current size the %deque is truncated, otherwise the
1179:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  %deque is extended and new elements are populated with given
1180:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  data.
1181:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        */
1182:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       void
1183:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       resize(size_type __new_size, const value_type& __x)
1184:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       {
1185:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	const size_type __len = size();
1186:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	if (__new_size > __len)
1187:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	  insert(this->_M_impl._M_finish, __new_size - __len, __x);
1188:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	else if (__new_size < __len)
1189:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	  _M_erase_at_end(this->_M_impl._M_start
1190:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 			  + difference_type(__new_size));
1191:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       }
1192:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** #else
1193:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       /**
1194:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  @brief  Resizes the %deque to the specified number of elements.
1195:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  @param  __new_size  Number of elements the %deque should contain.
1196:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  @param  __x  Data with which new elements should be populated.
1197:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *
1198:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  This function will %resize the %deque to the specified
1199:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  number of elements.  If the number is smaller than the
1200:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  %deque's current size the %deque is truncated, otherwise the
1201:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  %deque is extended and new elements are populated with given
1202:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  data.
1203:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        */
1204:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       void
1205:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       resize(size_type __new_size, value_type __x = value_type())
1206:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       {
1207:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	const size_type __len = size();
1208:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	if (__new_size > __len)
1209:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	  insert(this->_M_impl._M_finish, __new_size - __len, __x);
1210:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	else if (__new_size < __len)
1211:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	  _M_erase_at_end(this->_M_impl._M_start
1212:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 			  + difference_type(__new_size));
1213:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       }
1214:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** #endif
1215:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
1216:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** #if __cplusplus >= 201103L
1217:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       /**  A non-binding request to reduce memory use.  */
1218:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       void
1219:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       shrink_to_fit()
1220:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       { _M_shrink_to_fit(); }
1221:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** #endif
1222:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
1223:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       /**
1224:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  Returns true if the %deque is empty.  (Thus begin() would
1225:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  equal end().)
1226:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        */
1227:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       bool
1228:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       empty() const _GLIBCXX_NOEXCEPT
1229:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       { return this->_M_impl._M_finish == this->_M_impl._M_start; }
 1418                             		.loc 7 1229 0
 1419 05c9 EF B7                   		mov.L	r11, r7
 1420 05cb 0D                      		bra	.L128
 1421                             	.LVL80:
 1422                             	.L135:
 1423                             	.LBB1169:
 1424                             	.LBB1170:
 1425                             	.LBB1171:
 1426                             	.LBB1172:
 1427                             	.LBB1173:
 1428                             		.file 11 "c:\\progra~2\\gccfor~2.201\\rx-elf\\rx-elf\\rx-elf\\include\\c++\\4.8.0.201602-gnurx\\bi
   1:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** // Deque implementation (out of line) -*- C++ -*-
   2:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 
   3:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** // Copyright (C) 2001-2013 Free Software Foundation, Inc.
   4:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** //
   5:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** // software; you can redistribute it and/or modify it under the
   7:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** // terms of the GNU General Public License as published by the
   8:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** // Free Software Foundation; either version 3, or (at your option)
   9:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** // any later version.
  10:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 
  11:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** // This library is distributed in the hope that it will be useful,
  12:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** // GNU General Public License for more details.
  15:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 
  16:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** // Under Section 7 of GPL version 3, you are granted additional
  17:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** // permissions described in the GCC Runtime Library Exception, version
  18:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** // 3.1, as published by the Free Software Foundation.
  19:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 
  20:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** // You should have received a copy of the GNU General Public License and
  21:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** // a copy of the GCC Runtime Library Exception along with this program;
  22:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** // <http://www.gnu.org/licenses/>.
  24:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 
  25:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** /*
  26:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****  *
  27:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****  * Copyright (c) 1994
  28:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****  * Hewlett-Packard Company
  29:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****  *
  30:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****  * Permission to use, copy, modify, distribute and sell this software
  31:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****  * and its documentation for any purpose is hereby granted without fee,
  32:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****  * provided that the above copyright notice appear in all copies and
  33:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****  * that both that copyright notice and this permission notice appear
  34:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****  * in supporting documentation.  Hewlett-Packard Company makes no
  35:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****  * representations about the suitability of this software for any
  36:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****  * purpose.  It is provided "as is" without express or implied warranty.
  37:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****  *
  38:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****  *
  39:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****  * Copyright (c) 1997
  40:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****  * Silicon Graphics Computer Systems, Inc.
  41:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****  *
  42:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****  * Permission to use, copy, modify, distribute and sell this software
  43:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****  * and its documentation for any purpose is hereby granted without fee,
  44:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****  * provided that the above copyright notice appear in all copies and
  45:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****  * that both that copyright notice and this permission notice appear
  46:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****  * in supporting documentation.  Silicon Graphics makes no
  47:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****  * representations about the suitability of this software for any
  48:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****  * purpose.  It is provided "as is" without express or implied warranty.
  49:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****  */
  50:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 
  51:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** /** @file bits/deque.tcc
  52:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****  *  This is an internal header file, included by other library headers.
  53:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****  *  Do not attempt to use it directly. @headername{deque}
  54:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****  */
  55:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 
  56:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** #ifndef _DEQUE_TCC
  57:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** #define _DEQUE_TCC 1
  58:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 
  59:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** namespace std _GLIBCXX_VISIBILITY(default)
  60:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** {
  61:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** _GLIBCXX_BEGIN_NAMESPACE_CONTAINER
  62:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 
  63:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** #if __cplusplus >= 201103L
  64:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****   template <typename _Tp, typename _Alloc>
  65:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****     void
  66:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****     deque<_Tp, _Alloc>::
  67:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****     _M_default_initialize()
  68:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****     {
  69:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****       _Map_pointer __cur;
  70:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****       __try
  71:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****         {
  72:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****           for (__cur = this->_M_impl._M_start._M_node;
  73:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	       __cur < this->_M_impl._M_finish._M_node;
  74:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	       ++__cur)
  75:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****             std::__uninitialized_default_a(*__cur, *__cur + _S_buffer_size(),
  76:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 					   _M_get_Tp_allocator());
  77:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****           std::__uninitialized_default_a(this->_M_impl._M_finish._M_first,
  78:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 					 this->_M_impl._M_finish._M_cur,
  79:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 					 _M_get_Tp_allocator());
  80:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****         }
  81:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****       __catch(...)
  82:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****         {
  83:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****           std::_Destroy(this->_M_impl._M_start, iterator(*__cur, __cur),
  84:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 			_M_get_Tp_allocator());
  85:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****           __throw_exception_again;
  86:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****         }
  87:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****     }
  88:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** #endif
  89:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 
  90:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****   template <typename _Tp, typename _Alloc>
  91:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****     deque<_Tp, _Alloc>&
  92:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****     deque<_Tp, _Alloc>::
  93:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****     operator=(const deque& __x)
  94:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****     {
  95:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****       const size_type __len = size();
  96:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****       if (&__x != this)
  97:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	{
  98:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	  if (__len >= __x.size())
  99:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	    _M_erase_at_end(std::copy(__x.begin(), __x.end(),
 100:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 				      this->_M_impl._M_start));
 101:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	  else
 102:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	    {
 103:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	      const_iterator __mid = __x.begin() + difference_type(__len);
 104:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	      std::copy(__x.begin(), __mid, this->_M_impl._M_start);
 105:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	      insert(this->_M_impl._M_finish, __mid, __x.end());
 106:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	    }
 107:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	}
 108:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****       return *this;
 109:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****     }
 110:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 
 111:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** #if __cplusplus >= 201103L
 112:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****   template<typename _Tp, typename _Alloc>
 113:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****     template<typename... _Args>
 114:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****       void
 115:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****       deque<_Tp, _Alloc>::
 116:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****       emplace_front(_Args&&... __args)
 117:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****       {
 118:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	if (this->_M_impl._M_start._M_cur != this->_M_impl._M_start._M_first)
 119:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	  {
 120:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	    this->_M_impl.construct(this->_M_impl._M_start._M_cur - 1,
 121:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 				    std::forward<_Args>(__args)...);
 122:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	    --this->_M_impl._M_start._M_cur;
 123:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	  }
 124:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	else
 125:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	  _M_push_front_aux(std::forward<_Args>(__args)...);
 126:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****       }
 127:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 
 128:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****   template<typename _Tp, typename _Alloc>
 129:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****     template<typename... _Args>
 130:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****       void
 131:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****       deque<_Tp, _Alloc>::
 132:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****       emplace_back(_Args&&... __args)
 133:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****       {
 134:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	if (this->_M_impl._M_finish._M_cur
 135:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	    != this->_M_impl._M_finish._M_last - 1)
 136:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	  {
 137:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	    this->_M_impl.construct(this->_M_impl._M_finish._M_cur,
 138:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 				    std::forward<_Args>(__args)...);
 139:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	    ++this->_M_impl._M_finish._M_cur;
 140:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	  }
 141:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	else
 142:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	  _M_push_back_aux(std::forward<_Args>(__args)...);
 143:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****       }
 144:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** #endif
 145:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 
 146:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****   template <typename _Tp, typename _Alloc>
 147:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****     typename deque<_Tp, _Alloc>::iterator
 148:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****     deque<_Tp, _Alloc>::
 149:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****     insert(iterator __position, const value_type& __x)
 150:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****     {
 151:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****       if (__position._M_cur == this->_M_impl._M_start._M_cur)
 152:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	{
 153:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	  push_front(__x);
 154:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	  return this->_M_impl._M_start;
 155:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	}
 156:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****       else if (__position._M_cur == this->_M_impl._M_finish._M_cur)
 157:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	{
 158:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	  push_back(__x);
 159:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	  iterator __tmp = this->_M_impl._M_finish;
 160:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	  --__tmp;
 161:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	  return __tmp;
 162:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	}
 163:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****       else
 164:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****         return _M_insert_aux(__position, __x);
 165:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****     }
 166:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 
 167:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** #if __cplusplus >= 201103L
 168:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****   template<typename _Tp, typename _Alloc>
 169:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****     template<typename... _Args>
 170:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****       typename deque<_Tp, _Alloc>::iterator
 171:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****       deque<_Tp, _Alloc>::
 172:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****       emplace(iterator __position, _Args&&... __args)
 173:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****       {
 174:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	if (__position._M_cur == this->_M_impl._M_start._M_cur)
 175:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	  {
 176:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	    emplace_front(std::forward<_Args>(__args)...);
 177:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	    return this->_M_impl._M_start;
 178:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	  }
 179:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	else if (__position._M_cur == this->_M_impl._M_finish._M_cur)
 180:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	  {
 181:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	    emplace_back(std::forward<_Args>(__args)...);
 182:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	    iterator __tmp = this->_M_impl._M_finish;
 183:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	    --__tmp;
 184:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	    return __tmp;
 185:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	  }
 186:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	else
 187:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	  return _M_insert_aux(__position, std::forward<_Args>(__args)...);
 188:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****       }
 189:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** #endif
 190:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 
 191:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****   template <typename _Tp, typename _Alloc>
 192:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****     typename deque<_Tp, _Alloc>::iterator
 193:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****     deque<_Tp, _Alloc>::
 194:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****     erase(iterator __position)
 195:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****     {
 196:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****       iterator __next = __position;
 197:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****       ++__next;
 198:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****       const difference_type __index = __position - begin();
 199:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****       if (static_cast<size_type>(__index) < (size() >> 1))
 200:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	{
 201:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	  if (__position != begin())
 202:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	    _GLIBCXX_MOVE_BACKWARD3(begin(), __position, __next);
 203:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	  pop_front();
 204:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	}
 205:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****       else
 206:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	{
 207:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	  if (__next != end())
 208:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	    _GLIBCXX_MOVE3(__next, end(), __position);
 209:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	  pop_back();
 210:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	}
 211:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****       return begin() + __index;
 212:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****     }
 213:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 
 214:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****   template <typename _Tp, typename _Alloc>
 215:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****     typename deque<_Tp, _Alloc>::iterator
 216:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****     deque<_Tp, _Alloc>::
 217:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****     erase(iterator __first, iterator __last)
 218:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****     {
 219:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****       if (__first == __last)
 220:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	return __first;
 221:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****       else if (__first == begin() && __last == end())
 222:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	{
 223:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	  clear();
 224:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	  return end();
 225:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	}
 226:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****       else
 227:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	{
 228:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	  const difference_type __n = __last - __first;
 229:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	  const difference_type __elems_before = __first - begin();
 230:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	  if (static_cast<size_type>(__elems_before) <= (size() - __n) / 2)
 231:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	    {
 232:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	      if (__first != begin())
 233:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 		_GLIBCXX_MOVE_BACKWARD3(begin(), __first, __last);
 234:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	      _M_erase_at_begin(begin() + __n);
 235:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	    }
 236:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	  else
 237:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	    {
 238:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	      if (__last != end())
 239:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 		_GLIBCXX_MOVE3(__last, end(), __first);
 240:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	      _M_erase_at_end(end() - __n);
 241:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	    }
 242:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	  return begin() + __elems_before;
 243:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	}
 244:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****     }
 245:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 
 246:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****   template <typename _Tp, class _Alloc>
 247:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****     template <typename _InputIterator>
 248:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****       void
 249:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****       deque<_Tp, _Alloc>::
 250:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****       _M_assign_aux(_InputIterator __first, _InputIterator __last,
 251:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 		    std::input_iterator_tag)
 252:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****       {
 253:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****         iterator __cur = begin();
 254:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****         for (; __first != __last && __cur != end(); ++__cur, ++__first)
 255:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****           *__cur = *__first;
 256:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****         if (__first == __last)
 257:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****           _M_erase_at_end(__cur);
 258:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****         else
 259:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****           insert(end(), __first, __last);
 260:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****       }
 261:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 
 262:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****   template <typename _Tp, typename _Alloc>
 263:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****     void
 264:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****     deque<_Tp, _Alloc>::
 265:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****     _M_fill_insert(iterator __pos, size_type __n, const value_type& __x)
 266:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****     {
 267:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****       if (__pos._M_cur == this->_M_impl._M_start._M_cur)
 268:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	{
 269:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	  iterator __new_start = _M_reserve_elements_at_front(__n);
 270:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	  __try
 271:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	    {
 272:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	      std::__uninitialized_fill_a(__new_start, this->_M_impl._M_start,
 273:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 					  __x, _M_get_Tp_allocator());
 274:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	      this->_M_impl._M_start = __new_start;
 275:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	    }
 276:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	  __catch(...)
 277:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	    {
 278:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	      _M_destroy_nodes(__new_start._M_node,
 279:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 			       this->_M_impl._M_start._M_node);
 280:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	      __throw_exception_again;
 281:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	    }
 282:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	}
 283:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****       else if (__pos._M_cur == this->_M_impl._M_finish._M_cur)
 284:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	{
 285:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	  iterator __new_finish = _M_reserve_elements_at_back(__n);
 286:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	  __try
 287:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	    {
 288:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	      std::__uninitialized_fill_a(this->_M_impl._M_finish,
 289:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 					  __new_finish, __x,
 290:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 					  _M_get_Tp_allocator());
 291:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	      this->_M_impl._M_finish = __new_finish;
 292:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	    }
 293:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	  __catch(...)
 294:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	    {
 295:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	      _M_destroy_nodes(this->_M_impl._M_finish._M_node + 1,
 296:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 			       __new_finish._M_node + 1);
 297:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	      __throw_exception_again;
 298:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	    }
 299:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	}
 300:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****       else
 301:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****         _M_insert_aux(__pos, __n, __x);
 302:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****     }
 303:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 
 304:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** #if __cplusplus >= 201103L
 305:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****   template <typename _Tp, typename _Alloc>
 306:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****     void
 307:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****     deque<_Tp, _Alloc>::
 308:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****     _M_default_append(size_type __n)
 309:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****     {
 310:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****       if (__n)
 311:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	{
 312:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	  iterator __new_finish = _M_reserve_elements_at_back(__n);
 313:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	  __try
 314:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	    {
 315:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	      std::__uninitialized_default_a(this->_M_impl._M_finish,
 316:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 					     __new_finish,
 317:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 					     _M_get_Tp_allocator());
 318:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	      this->_M_impl._M_finish = __new_finish;
 319:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	    }
 320:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	  __catch(...)
 321:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	    {
 322:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	      _M_destroy_nodes(this->_M_impl._M_finish._M_node + 1,
 323:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 			       __new_finish._M_node + 1);
 324:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	      __throw_exception_again;
 325:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	    }
 326:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	}
 327:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****     }
 328:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 
 329:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****   template <typename _Tp, typename _Alloc>
 330:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****     bool
 331:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****     deque<_Tp, _Alloc>::
 332:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****     _M_shrink_to_fit()
 333:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****     {
 334:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****       const difference_type __front_capacity
 335:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	= (this->_M_impl._M_start._M_cur - this->_M_impl._M_start._M_first);
 336:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****       if (__front_capacity == 0)
 337:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	return false;
 338:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 
 339:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****       const difference_type __back_capacity
 340:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	= (this->_M_impl._M_finish._M_last - this->_M_impl._M_finish._M_cur);
 341:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****       if (__front_capacity + __back_capacity < _S_buffer_size())
 342:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	return false;
 343:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 
 344:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****       return std::__shrink_to_fit_aux<deque>::_S_do_it(*this);
 345:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****     }
 346:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** #endif
 347:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 
 348:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****   template <typename _Tp, typename _Alloc>
 349:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****     void
 350:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****     deque<_Tp, _Alloc>::
 351:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****     _M_fill_initialize(const value_type& __value)
 352:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****     {
 353:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****       _Map_pointer __cur;
 354:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****       __try
 355:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****         {
 356:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****           for (__cur = this->_M_impl._M_start._M_node;
 357:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	       __cur < this->_M_impl._M_finish._M_node;
 358:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	       ++__cur)
 359:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****             std::__uninitialized_fill_a(*__cur, *__cur + _S_buffer_size(),
 360:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 					__value, _M_get_Tp_allocator());
 361:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****           std::__uninitialized_fill_a(this->_M_impl._M_finish._M_first,
 362:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 				      this->_M_impl._M_finish._M_cur,
 363:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 				      __value, _M_get_Tp_allocator());
 364:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****         }
 365:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****       __catch(...)
 366:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****         {
 367:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****           std::_Destroy(this->_M_impl._M_start, iterator(*__cur, __cur),
 368:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 			_M_get_Tp_allocator());
 369:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****           __throw_exception_again;
 370:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****         }
 371:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****     }
 372:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 
 373:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****   template <typename _Tp, typename _Alloc>
 374:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****     template <typename _InputIterator>
 375:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****       void
 376:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****       deque<_Tp, _Alloc>::
 377:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****       _M_range_initialize(_InputIterator __first, _InputIterator __last,
 378:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****                           std::input_iterator_tag)
 379:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****       {
 380:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****         this->_M_initialize_map(0);
 381:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****         __try
 382:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****           {
 383:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****             for (; __first != __last; ++__first)
 384:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** #if __cplusplus >= 201103L
 385:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	      emplace_back(*__first);
 386:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** #else
 387:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****               push_back(*__first);
 388:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** #endif
 389:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****           }
 390:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****         __catch(...)
 391:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****           {
 392:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****             clear();
 393:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****             __throw_exception_again;
 394:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****           }
 395:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****       }
 396:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 
 397:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****   template <typename _Tp, typename _Alloc>
 398:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****     template <typename _ForwardIterator>
 399:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****       void
 400:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****       deque<_Tp, _Alloc>::
 401:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****       _M_range_initialize(_ForwardIterator __first, _ForwardIterator __last,
 402:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****                           std::forward_iterator_tag)
 403:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****       {
 404:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****         const size_type __n = std::distance(__first, __last);
 405:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****         this->_M_initialize_map(__n);
 406:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 
 407:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****         _Map_pointer __cur_node;
 408:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****         __try
 409:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****           {
 410:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****             for (__cur_node = this->_M_impl._M_start._M_node;
 411:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****                  __cur_node < this->_M_impl._M_finish._M_node;
 412:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****                  ++__cur_node)
 413:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	      {
 414:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 		_ForwardIterator __mid = __first;
 415:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 		std::advance(__mid, _S_buffer_size());
 416:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 		std::__uninitialized_copy_a(__first, __mid, *__cur_node,
 417:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 					    _M_get_Tp_allocator());
 418:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 		__first = __mid;
 419:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	      }
 420:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****             std::__uninitialized_copy_a(__first, __last,
 421:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 					this->_M_impl._M_finish._M_first,
 422:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 					_M_get_Tp_allocator());
 423:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****           }
 424:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****         __catch(...)
 425:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****           {
 426:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****             std::_Destroy(this->_M_impl._M_start,
 427:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 			  iterator(*__cur_node, __cur_node),
 428:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 			  _M_get_Tp_allocator());
 429:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****             __throw_exception_again;
 430:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****           }
 431:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****       }
 432:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 
 433:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****   // Called only if _M_impl._M_finish._M_cur == _M_impl._M_finish._M_last - 1.
 434:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****   template<typename _Tp, typename _Alloc>
 435:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** #if __cplusplus >= 201103L
 436:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****     template<typename... _Args>
 437:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****       void
 438:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****       deque<_Tp, _Alloc>::
 439:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****       _M_push_back_aux(_Args&&... __args)
 440:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** #else
 441:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****       void
 442:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****       deque<_Tp, _Alloc>::
 443:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****       _M_push_back_aux(const value_type& __t)
 444:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** #endif
 445:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****       {
 446:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	_M_reserve_map_at_back();
 447:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	*(this->_M_impl._M_finish._M_node + 1) = this->_M_allocate_node();
 448:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	__try
 449:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	  {
 450:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** #if __cplusplus >= 201103L
 451:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	    this->_M_impl.construct(this->_M_impl._M_finish._M_cur,
 452:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 				    std::forward<_Args>(__args)...);
 453:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** #else
 454:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	    this->_M_impl.construct(this->_M_impl._M_finish._M_cur, __t);
 455:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** #endif
 456:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	    this->_M_impl._M_finish._M_set_node(this->_M_impl._M_finish._M_node
 457:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 						+ 1);
 458:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	    this->_M_impl._M_finish._M_cur = this->_M_impl._M_finish._M_first;
 459:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	  }
 460:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	__catch(...)
 461:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	  {
 462:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	    _M_deallocate_node(*(this->_M_impl._M_finish._M_node + 1));
 463:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	    __throw_exception_again;
 464:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	  }
 465:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****       }
 466:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 
 467:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****   // Called only if _M_impl._M_start._M_cur == _M_impl._M_start._M_first.
 468:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****   template<typename _Tp, typename _Alloc>
 469:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** #if __cplusplus >= 201103L
 470:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****     template<typename... _Args>
 471:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****       void
 472:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****       deque<_Tp, _Alloc>::
 473:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****       _M_push_front_aux(_Args&&... __args)
 474:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** #else
 475:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****       void
 476:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****       deque<_Tp, _Alloc>::
 477:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****       _M_push_front_aux(const value_type& __t)
 478:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** #endif
 479:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****       {
 480:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	_M_reserve_map_at_front();
 481:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	*(this->_M_impl._M_start._M_node - 1) = this->_M_allocate_node();
 482:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	__try
 483:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	  {
 484:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	    this->_M_impl._M_start._M_set_node(this->_M_impl._M_start._M_node
 485:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 					       - 1);
 486:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	    this->_M_impl._M_start._M_cur = this->_M_impl._M_start._M_last - 1;
 487:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** #if __cplusplus >= 201103L
 488:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	    this->_M_impl.construct(this->_M_impl._M_start._M_cur,
 489:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 				    std::forward<_Args>(__args)...);
 490:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** #else
 491:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	    this->_M_impl.construct(this->_M_impl._M_start._M_cur, __t);
 492:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** #endif
 493:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	  }
 494:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	__catch(...)
 495:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	  {
 496:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	    ++this->_M_impl._M_start;
 497:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	    _M_deallocate_node(*(this->_M_impl._M_start._M_node - 1));
 498:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	    __throw_exception_again;
 499:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	  }
 500:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****       }
 501:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 
 502:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****   // Called only if _M_impl._M_finish._M_cur == _M_impl._M_finish._M_first.
 503:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****   template <typename _Tp, typename _Alloc>
 504:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****     void deque<_Tp, _Alloc>::
 505:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****     _M_pop_back_aux()
 506:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****     {
 507:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****       _M_deallocate_node(this->_M_impl._M_finish._M_first);
 508:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****       this->_M_impl._M_finish._M_set_node(this->_M_impl._M_finish._M_node - 1);
 509:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****       this->_M_impl._M_finish._M_cur = this->_M_impl._M_finish._M_last - 1;
 510:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****       this->_M_impl.destroy(this->_M_impl._M_finish._M_cur);
 511:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****     }
 512:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 
 513:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****   // Called only if _M_impl._M_start._M_cur == _M_impl._M_start._M_last - 1.
 514:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****   // Note that if the deque has at least one element (a precondition for this
 515:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****   // member function), and if
 516:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****   //   _M_impl._M_start._M_cur == _M_impl._M_start._M_last,
 517:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****   // then the deque must have at least two nodes.
 518:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****   template <typename _Tp, typename _Alloc>
 519:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****     void deque<_Tp, _Alloc>::
 520:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****     _M_pop_front_aux()
 521:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****     {
 522:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****       this->_M_impl.destroy(this->_M_impl._M_start._M_cur);
 523:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****       _M_deallocate_node(this->_M_impl._M_start._M_first);
 524:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****       this->_M_impl._M_start._M_set_node(this->_M_impl._M_start._M_node + 1);
 525:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****       this->_M_impl._M_start._M_cur = this->_M_impl._M_start._M_first;
 1429                             		.loc 11 525 0
 1430 05cc A0 F4                   		mov.L	r4, 8[r7]
 1431                             	.LVL81:
 1432 05ce EF 00                   		.balign 8,3,5
 1433                             	.L128:
 1434                             	.LBE1173:
 1435                             	.LBE1172:
 1436                             	.LBE1171:
 1437                             	.LBE1170:
 1438                             	.LBE1169:
 321:../src/peripheral/uart.cpp ****         if (transBuff.empty() == true)
 1439                             		.loc 10 321 0 discriminator 1
 1440 05d0 DD AE 07                		mov.W	14[r10], r14
 1441 05d3 68 8E                   		shlr	#8, r14
 1442 05d5 75 2E 1F                		and #31, r14
 1443 05d8 61 FE                   		cmp	#15, r14
 1444 05da 2A 38                   		bgt	.L137
 322:../src/peripheral/uart.cpp ****             return 0;
 1445                             		.loc 10 322 0
 1446 05dc ED BE 06                		mov.L	24[r11], r14
 1447 05df 47 4E                   		cmp	r4, r14
 1448 05e1 20 55                   		beq	.L133
 324:../src/peripheral/uart.cpp ****         transBuff.pop();
 1449                             		.loc 10 324 0
 1450 05e3 CC 44                   		mov.B	[r4], r4
 1451                             	.LBB1185:
 1452                             	.LBB1183:
 1453                             	.LBB1181:
1230:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
1231:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       // element access
1232:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       /**
1233:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  @brief Subscript access to the data contained in the %deque.
1234:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  @param __n The index of the element for which data should be
1235:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  accessed.
1236:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  @return  Read/write reference to data.
1237:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *
1238:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  This operator allows for easy, array-style, data access.
1239:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  Note that data access with this operator is unchecked and
1240:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  out_of_range lookups are not defined. (For checked lookups
1241:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  see at().)
1242:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        */
1243:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       reference
1244:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       operator[](size_type __n)
1245:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       { return this->_M_impl._M_start[difference_type(__n)]; }
1246:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
1247:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       /**
1248:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  @brief Subscript access to the data contained in the %deque.
1249:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  @param __n The index of the element for which data should be
1250:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  accessed.
1251:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  @return  Read-only (constant) reference to data.
1252:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *
1253:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  This operator allows for easy, array-style, data access.
1254:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  Note that data access with this operator is unchecked and
1255:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  out_of_range lookups are not defined. (For checked lookups
1256:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  see at().)
1257:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        */
1258:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       const_reference
1259:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       operator[](size_type __n) const
1260:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       { return this->_M_impl._M_start[difference_type(__n)]; }
1261:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
1262:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****     protected:
1263:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       /// Safety check used only from at().
1264:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       void
1265:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       _M_range_check(size_type __n) const
1266:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       {
1267:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	if (__n >= this->size())
1268:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	  __throw_out_of_range(__N("deque::_M_range_check"));
1269:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       }
1270:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
1271:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****     public:
1272:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       /**
1273:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  @brief  Provides access to the data contained in the %deque.
1274:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  @param __n The index of the element for which data should be
1275:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  accessed.
1276:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  @return  Read/write reference to data.
1277:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  @throw  std::out_of_range  If @a __n is an invalid index.
1278:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *
1279:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  This function provides for safer data access.  The parameter
1280:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  is first checked that it is in the range of the deque.  The
1281:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  function throws out_of_range if the check fails.
1282:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        */
1283:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       reference
1284:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       at(size_type __n)
1285:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       {
1286:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	_M_range_check(__n);
1287:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	return (*this)[__n];
1288:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       }
1289:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
1290:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       /**
1291:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  @brief  Provides access to the data contained in the %deque.
1292:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  @param __n The index of the element for which data should be
1293:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  accessed.
1294:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  @return  Read-only (constant) reference to data.
1295:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  @throw  std::out_of_range  If @a __n is an invalid index.
1296:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *
1297:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  This function provides for safer data access.  The parameter is first
1298:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  checked that it is in the range of the deque.  The function throws
1299:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  out_of_range if the check fails.
1300:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        */
1301:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       const_reference
1302:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       at(size_type __n) const
1303:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       {
1304:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	_M_range_check(__n);
1305:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	return (*this)[__n];
1306:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       }
1307:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
1308:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       /**
1309:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  Returns a read/write reference to the data at the first
1310:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  element of the %deque.
1311:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        */
1312:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       reference
1313:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       front()
1314:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       { return *begin(); }
1315:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
1316:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       /**
1317:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  Returns a read-only (constant) reference to the data at the first
1318:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  element of the %deque.
1319:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        */
1320:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       const_reference
1321:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       front() const
1322:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       { return *begin(); }
1323:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
1324:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       /**
1325:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  Returns a read/write reference to the data at the last element of the
1326:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  %deque.
1327:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        */
1328:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       reference
1329:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       back()
1330:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       {
1331:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	iterator __tmp = end();
1332:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	--__tmp;
1333:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	return *__tmp;
1334:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       }
1335:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
1336:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       /**
1337:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  Returns a read-only (constant) reference to the data at the last
1338:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  element of the %deque.
1339:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        */
1340:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       const_reference
1341:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       back() const
1342:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       {
1343:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	const_iterator __tmp = end();
1344:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	--__tmp;
1345:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	return *__tmp;
1346:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       }
1347:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
1348:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       // [23.2.1.2] modifiers
1349:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       /**
1350:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  @brief  Add data to the front of the %deque.
1351:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  @param  __x  Data to be added.
1352:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *
1353:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  This is a typical stack operation.  The function creates an
1354:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  element at the front of the %deque and assigns the given
1355:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  data to it.  Due to the nature of a %deque this operation
1356:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  can be done in constant time.
1357:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        */
1358:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       void
1359:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       push_front(const value_type& __x)
1360:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       {
1361:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	if (this->_M_impl._M_start._M_cur != this->_M_impl._M_start._M_first)
1362:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	  {
1363:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	    this->_M_impl.construct(this->_M_impl._M_start._M_cur - 1, __x);
1364:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	    --this->_M_impl._M_start._M_cur;
1365:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	  }
1366:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	else
1367:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	  _M_push_front_aux(__x);
1368:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       }
1369:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
1370:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** #if __cplusplus >= 201103L
1371:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       void
1372:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       push_front(value_type&& __x)
1373:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       { emplace_front(std::move(__x)); }
1374:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
1375:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       template<typename... _Args>
1376:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****         void
1377:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****         emplace_front(_Args&&... __args);
1378:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** #endif
1379:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
1380:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       /**
1381:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  @brief  Add data to the end of the %deque.
1382:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  @param  __x  Data to be added.
1383:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *
1384:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  This is a typical stack operation.  The function creates an
1385:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  element at the end of the %deque and assigns the given data
1386:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  to it.  Due to the nature of a %deque this operation can be
1387:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  done in constant time.
1388:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        */
1389:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       void
1390:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       push_back(const value_type& __x)
1391:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       {
1392:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	if (this->_M_impl._M_finish._M_cur
1393:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	    != this->_M_impl._M_finish._M_last - 1)
1394:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	  {
1395:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	    this->_M_impl.construct(this->_M_impl._M_finish._M_cur, __x);
1396:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	    ++this->_M_impl._M_finish._M_cur;
1397:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	  }
1398:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	else
1399:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	  _M_push_back_aux(__x);
1400:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       }
1401:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
1402:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** #if __cplusplus >= 201103L
1403:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       void
1404:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       push_back(value_type&& __x)
1405:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       { emplace_back(std::move(__x)); }
1406:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
1407:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       template<typename... _Args>
1408:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****         void
1409:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****         emplace_back(_Args&&... __args);
1410:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** #endif
1411:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
1412:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       /**
1413:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  @brief  Removes first element.
1414:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *
1415:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  This is a typical stack operation.  It shrinks the %deque by one.
1416:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *
1417:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  Note that no data is returned, and if the first element's data is
1418:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  needed, it should be retrieved before pop_front() is called.
1419:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        */
1420:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       void
1421:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       pop_front()
1422:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       {
1423:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	if (this->_M_impl._M_start._M_cur
1424:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	    != this->_M_impl._M_start._M_last - 1)
 1454                             		.loc 7 1424 0
 1455 05e5 A9 73                   		mov.L	16[r7], r3
1423:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	    != this->_M_impl._M_start._M_last - 1)
 1456                             		.loc 7 1423 0
 1457 05e7 ED 7E 02                		mov.L	8[r7], r14
 1458                             	.LBE1181:
 1459                             	.LBE1183:
 1460                             	.LBE1185:
 324:../src/peripheral/uart.cpp ****         transBuff.pop();
 1461                             		.loc 10 324 0
 1462 05ea C7 A4 06                		mov.B	r4, 6[r10]
 1463                             	.LVL82:
 1464                             	.LBB1186:
 1465                             	.LBB1184:
 1466                             	.LBB1182:
 1467                             		.loc 7 1424 0
 1468 05ed 60 13                   		sub	#1, r3
1425:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	  {
1426:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	    this->_M_impl.destroy(this->_M_impl._M_start._M_cur);
1427:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	    ++this->_M_impl._M_start._M_cur;
 1469                             		.loc 7 1427 0
 1470 05ef 71 E4 01                		add	#1, r14, r4
1423:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	    != this->_M_impl._M_start._M_last - 1)
 1471                             		.loc 7 1423 0
 1472 05f2 47 3E                   		cmp	r3, r14
 1473 05f4 21 D8                   		bne	.L135
 1474                             	.LVL83:
 1475                             	.LBB1180:
 1476                             	.LBB1179:
 1477                             	.LBB1174:
 1478                             	.LBB1175:
 1479                             	.LBB1176:
 1480                             		.loc 8 110 0
 1481 05f6 A8 F9                   		mov.L	12[r7], r1
 1482 05f8 05 00 00 00             		bsr	__ZdlPv
 1483                             	.LVL84:
 1484                             	.LBE1176:
 1485                             	.LBE1175:
 1486                             	.LBE1174:
 524:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****       this->_M_impl._M_start._M_cur = this->_M_impl._M_start._M_first;
 1487                             		.loc 11 524 0
 1488 05fc ED 7E 05                		mov.L	20[r7], r14
 1489                             	.LVL85:
 1490 05ff 71 E4 04                		add	#4, r14, r4
 1491                             	.LVL86:
 1492                             	.LBB1177:
 1493                             	.LBB1178:
 236:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	_M_first = *__new_node;
 1494                             		.loc 7 236 0
 1495 0602 A1 7C                   		mov.L	r4, 20[r7]
 237:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	_M_last = _M_first + difference_type(_S_buffer_size());
 1496                             		.loc 7 237 0
 1497 0604 ED E4 01                		mov.L	4[r14], r4
 1498                             	.LVL87:
 238:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       }
 1499                             		.loc 7 238 0
 1500 0607 72 4E 00 02             		add	#0x200, r4, r14
 237:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	_M_last = _M_first + difference_type(_S_buffer_size());
 1501                             		.loc 7 237 0
 1502 060b A0 FC                   		mov.L	r4, 12[r7]
 1503                             	.LVL88:
 238:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       }
 1504                             		.loc 7 238 0
 1505 060d E7 7E 04                		mov.L	r14, 16[r7]
 1506 0610 2E BC                   		bra	.L135
 1507                             	.LVL89:
 1508                             	.L137:
 1509                             	.LBE1178:
 1510                             	.LBE1177:
 1511                             	.LBE1179:
 1512                             	.LBE1180:
 1513                             	.LBE1182:
 1514                             	.LBE1184:
 1515                             	.LBE1186:
 1516                             	.LBB1187:
 1517                             	.LBB1188:
 1518                             	.LBB1189:
 1519                             	.LBB1190:
 337:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****     }
 1520                             		.loc 7 337 0
 1521 0612 ED B1 09                		mov.L	36[r11], r1
 1522 0615 ED B7 05                		mov.L	20[r11], r7
 1523 0618 ED BE 06                		mov.L	24[r11], r14
 1524 061b 43 71                   		sub	r7, r1
 1525 061d 6A 21                   		shar	#2, r1
 1526 061f ED BA 07                		mov.L	28[r11], r10
 1527 0622 60 11                   		sub	#1, r1
 1528 0624 ED B7 04                		mov.L	16[r11], r7
 1529 0627 6C 91                   		shll	#9, r1
 1530 0629 FF 0A AE                		sub	r10, r14, r10
 1531 062c 4B A1                   		add	r10, r1
 1532 062e FF 04 47                		sub	r4, r7, r4
 1533                             	.LBE1190:
 1534                             	.LBE1189:
 1535                             	.LBE1188:
 1536                             	.LBE1187:
 327:../src/peripheral/uart.cpp **** }
 1537                             		.loc 10 327 0
 1538 0631 4B 41                   		add	r4, r1
 1539                             		.loc 10 328 0
 1540 0633 3F 7B 05                		rtsd	#20, r7-r11
 1541                             	.LVL90:
 1542                             	.L133:
 323:../src/peripheral/uart.cpp ****         SCIFA9.FTDR = transBuff.front();
 1543                             		.loc 10 323 0
 1544 0636 66 01                   		mov.L	#0, r1
 1545                             		.loc 10 328 0
 1546 0638 3F 7B 05                		rtsd	#20, r7-r11
 1547                             	.LFE1440:
 1549                             		.global	__Z13myprintf3_DbgPKcz
 1551                             	__Z13myprintf3_DbgPKcz:
 1552                             	.LFB1442:
 329:../src/peripheral/uart.cpp **** 
 330:../src/peripheral/uart.cpp **** /***********自作printf関数******************/
 331:../src/peripheral/uart.cpp **** int myprintf3(const char *fmt, ...) {
 332:../src/peripheral/uart.cpp ****     static char buffer[1000];
 333:../src/peripheral/uart.cpp ****     int len;
 334:../src/peripheral/uart.cpp **** 
 335:../src/peripheral/uart.cpp ****     va_list ap;
 336:../src/peripheral/uart.cpp ****     va_start(ap, fmt);
 337:../src/peripheral/uart.cpp **** 
 338:../src/peripheral/uart.cpp ****     len = vsprintf(buffer, fmt, ap);
 339:../src/peripheral/uart.cpp **** 
 340:../src/peripheral/uart.cpp ****     for (int c = 0; c < len; c++) {
 341:../src/peripheral/uart.cpp ****         printfBuff.push(buffer[c]);
 342:../src/peripheral/uart.cpp ****     }
 343:../src/peripheral/uart.cpp **** 
 344:../src/peripheral/uart.cpp ****     va_end(ap);
 345:../src/peripheral/uart.cpp ****     return len;
 346:../src/peripheral/uart.cpp **** }
 347:../src/peripheral/uart.cpp **** 
 348:../src/peripheral/uart.cpp **** int myprintf3_Dbg(const char *fmt, ...) {
 1553                             		.loc 10 348 0
 1554                             	.LVL91:
 1555 063b 60 40                   		sub	#4, r0
 1556                             	.LCFI8:
 349:../src/peripheral/uart.cpp **** #ifdef DEBUG_SWITCH
 350:../src/peripheral/uart.cpp ****     static char buffer[1000];
 351:../src/peripheral/uart.cpp ****     int len;
 352:../src/peripheral/uart.cpp **** 
 353:../src/peripheral/uart.cpp ****     va_list ap;
 354:../src/peripheral/uart.cpp ****     va_start(ap, fmt);
 355:../src/peripheral/uart.cpp **** 
 356:../src/peripheral/uart.cpp ****     len = vsprintf(buffer, fmt, ap);
 357:../src/peripheral/uart.cpp **** 
 358:../src/peripheral/uart.cpp ****     for(int c = 0; c < len; c++) {
 359:../src/peripheral/uart.cpp ****         printfBuff.push(buffer[c]);
 360:../src/peripheral/uart.cpp ****     }
 361:../src/peripheral/uart.cpp **** 
 362:../src/peripheral/uart.cpp ****     va_end(ap);
 363:../src/peripheral/uart.cpp ****     return len;
 364:../src/peripheral/uart.cpp **** #endif
 365:../src/peripheral/uart.cpp ****     return -1;
 366:../src/peripheral/uart.cpp **** }
 1557                             		.loc 10 366 0
 1558 063d FB 16 FF                		mov.L	#-1, r1
 1559 0640 67 01                   		rtsd	#4
 1560                             	.LFE1442:
 1562                             		.global	__Z12packDataMazehPh
 1564                             	__Z12packDataMazehPh:
 1565                             	.LFB1444:
 367:../src/peripheral/uart.cpp **** 
 368:../src/peripheral/uart.cpp **** /***********periodicMsgを送る******************/
 369:../src/peripheral/uart.cpp **** void sendPeriodicMsg() {
 370:../src/peripheral/uart.cpp ****     packData(periodicMsg);
 371:../src/peripheral/uart.cpp ****     putnbyte3(periodicMsg, PERIODIC_MSG_LEN);
 372:../src/peripheral/uart.cpp **** }
 373:../src/peripheral/uart.cpp **** 
 374:../src/peripheral/uart.cpp **** //迷路の壁情報を送る
 375:../src/peripheral/uart.cpp **** //
 376:../src/peripheral/uart.cpp **** void packDataMaze(uint8_t part_num, uint8_t *buf) {
 1566                             		.loc 10 376 0
 1567                             	.LVL92:
 1568 0642 6E 7B                   		pushm	r7-r11
 1569                             	.LCFI9:
 1570                             		.loc 10 376 0
 1571 0644 CF 1A                   		mov.B	r1, r10
 1572 0646 EF 27                   		mov.L	r2, r7
 1573                             	.LBB1206:
 377:../src/peripheral/uart.cpp ****     buf[0] = part_num;
 1574                             		.loc 10 377 0
 1575 0648 C3 71                   		mov.B	r1, [r7]
 1576                             	.LBB1207:
 1577                             	.LBB1208:
 123:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h ****         return instance;
 1578                             		.loc 3 123 0
 1579 064a FB B2 00 00 00 00       		mov.L	#__ZGVZN6UMouse11getInstanceEvE8instance, r11
 1580 0650 58 BE                   		movu.B	[r11], r14
 1581 0652 61 0E                   		cmp	#0, r14
 1582 0654 3A B0 00                		beq	.L166
 1583                             	.LVL93:
 1584 0657 03                      		.balign 8,3,1
 1585                             	.L142:
 1586                             	.LBE1208:
 1587                             	.LBE1207:
 1588                             	.LBB1212:
 378:../src/peripheral/uart.cpp ****     UMouse &mouse = UMouse::getInstance();
 379:../src/peripheral/uart.cpp ****     uint8_t ind = 1;
 380:../src/peripheral/uart.cpp **** 
 381:../src/peripheral/uart.cpp ****     if (part_num == 0) {
 1589                             		.loc 10 381 0
 1590 0658 5B A1                   		movu.B	r10, r1
 1591 065a 61 01                   		cmp	#0, r1
 1592 065c 21 37                   		bne	.L144
 1593 065e 71 72 01                		add	#1, r7, r2
 1594 0661 FB E2 00 00 00 00       		mov.L	#__ZZN6UMouse11getInstanceEvE8instance, r14
 1595 0667 03                      		.balign 8,3,2
 1596                             	.L146:
 1597                             	.LVL94:
 1598                             	.LBB1213:
 382:../src/peripheral/uart.cpp ****         for (int i = 0; i < 16; i++) {
 383:../src/peripheral/uart.cpp ****             buf[ind + 0 + i * 4] = ((mouse.maze.walls_vertical[i] & 0x000000ff)
 1599                             		.loc 10 383 0 discriminator 2
 1600 0668 71 14 2B                		add	#43, r1, r4
 1601 066b FE 64 E3                		mov.L	[r4,r14], r3
 382:../src/peripheral/uart.cpp ****         for (int i = 0; i < 16; i++) {
 1602                             		.loc 10 382 0 discriminator 2
 1603 066e 62 11                   		add	#1, r1
 1604                             	.LVL95:
 384:../src/peripheral/uart.cpp ****                     >> 0);
 1605                             		.loc 10 384 0 discriminator 2
 1606 0670 C3 23                   		mov.B	r3, [r2]
 385:../src/peripheral/uart.cpp ****             buf[ind + 1 + i * 4] = ((mouse.maze.walls_vertical[i] & 0x0000ff00)
 1607                             		.loc 10 385 0 discriminator 2
 1608 0672 FE 64 E3                		mov.L	[r4,r14], r3
 386:../src/peripheral/uart.cpp ****                     >> 8);
 1609                             		.loc 10 386 0 discriminator 2
 1610 0675 68 83                   		shlr	#8, r3
 1611 0677 80 2B                   		mov.B	r3, 1[r2]
 387:../src/peripheral/uart.cpp ****             buf[ind + 2 + i * 4] = ((mouse.maze.walls_vertical[i] & 0x00ff0000)
 1612                             		.loc 10 387 0 discriminator 2
 1613 0679 FE 64 E3                		mov.L	[r4,r14], r3
 388:../src/peripheral/uart.cpp ****                     >> 16);
 1614                             		.loc 10 388 0 discriminator 2
 1615 067c 69 03                   		shlr	#16, r3
 1616 067e 80 A3                   		mov.B	r3, 2[r2]
 389:../src/peripheral/uart.cpp ****             buf[ind + 3 + i * 4] = ((mouse.maze.walls_vertical[i] & 0xff000000)
 1617                             		.loc 10 389 0 discriminator 2
 1618 0680 FE 64 E4                		mov.L	[r4,r14], r4
 390:../src/peripheral/uart.cpp ****                     >> 24);
 1619                             		.loc 10 390 0 discriminator 2
 1620 0683 69 84                   		shlr	#24, r4
 1621 0685 80 AC                   		mov.B	r4, 3[r2]
 1622 0687 62 42                   		add	#4, r2
 382:../src/peripheral/uart.cpp ****             buf[ind + 0 + i * 4] = ((mouse.maze.walls_vertical[i] & 0x000000ff)
 1623                             		.loc 10 382 0 discriminator 2
 1624 0689 75 51 10                		cmp	#16, r1
 1625 068c 21 DC                   		bne	.L146
 1626                             	.LVL96:
 1627 068e EF 00                   		.balign 8,3,2
 1628                             	.L140:
 1629                             	.LBE1213:
 1630                             	.LBE1212:
 1631                             	.LBE1206:
 391:../src/peripheral/uart.cpp ****         }
 392:../src/peripheral/uart.cpp ****     }
 393:../src/peripheral/uart.cpp **** 
 394:../src/peripheral/uart.cpp ****     if (part_num == 1) {
 395:../src/peripheral/uart.cpp ****         for (int i = 0; i < 15; i++) {
 396:../src/peripheral/uart.cpp ****             buf[ind + 0 + i * 4] = ((mouse.maze.walls_vertical[i + 16]
 397:../src/peripheral/uart.cpp ****                     & 0x000000ff) >> 0);
 398:../src/peripheral/uart.cpp ****             buf[ind + 1 + i * 4] = ((mouse.maze.walls_vertical[i + 16]
 399:../src/peripheral/uart.cpp ****                     & 0x0000ff00) >> 8);
 400:../src/peripheral/uart.cpp ****             buf[ind + 2 + i * 4] = ((mouse.maze.walls_vertical[i + 16]
 401:../src/peripheral/uart.cpp ****                     & 0x00ff0000) >> 16);
 402:../src/peripheral/uart.cpp ****             buf[ind + 3 + i * 4] = ((mouse.maze.walls_vertical[i + 16]
 403:../src/peripheral/uart.cpp ****                     & 0xff000000) >> 24);
 404:../src/peripheral/uart.cpp ****         }
 405:../src/peripheral/uart.cpp ****     }
 406:../src/peripheral/uart.cpp **** 
 407:../src/peripheral/uart.cpp ****     if (part_num == 2) {
 408:../src/peripheral/uart.cpp ****         for (int i = 0; i < 16; i++) {
 409:../src/peripheral/uart.cpp ****             buf[ind + 0 + i * 4] =
 410:../src/peripheral/uart.cpp ****                     ((mouse.maze.walls_horizontal[i] & 0x000000ff) >> 0);
 411:../src/peripheral/uart.cpp ****             buf[ind + 1 + i * 4] =
 412:../src/peripheral/uart.cpp ****                     ((mouse.maze.walls_horizontal[i] & 0x0000ff00) >> 8);
 413:../src/peripheral/uart.cpp ****             buf[ind + 2 + i * 4] =
 414:../src/peripheral/uart.cpp ****                     ((mouse.maze.walls_horizontal[i] & 0x00ff0000) >> 16);
 415:../src/peripheral/uart.cpp ****             buf[ind + 3 + i * 4] =
 416:../src/peripheral/uart.cpp ****                     ((mouse.maze.walls_horizontal[i] & 0xff000000) >> 24);
 417:../src/peripheral/uart.cpp ****         }
 418:../src/peripheral/uart.cpp ****     }
 419:../src/peripheral/uart.cpp **** 
 420:../src/peripheral/uart.cpp ****     if (part_num == 3) {
 421:../src/peripheral/uart.cpp ****         for (int i = 0; i < 15; i++) {
 422:../src/peripheral/uart.cpp ****             buf[ind + 0 + i * 4] = ((mouse.maze.walls_horizontal[i + 16]
 423:../src/peripheral/uart.cpp ****                     & 0x000000ff) >> 0);
 424:../src/peripheral/uart.cpp ****             buf[ind + 1 + i * 4] = ((mouse.maze.walls_horizontal[i + 16]
 425:../src/peripheral/uart.cpp ****                     & 0x0000ff00) >> 8);
 426:../src/peripheral/uart.cpp ****             buf[ind + 2 + i * 4] = ((mouse.maze.walls_horizontal[i + 16]
 427:../src/peripheral/uart.cpp ****                     & 0x00ff0000) >> 16);
 428:../src/peripheral/uart.cpp ****             buf[ind + 3 + i * 4] = ((mouse.maze.walls_horizontal[i + 16]
 429:../src/peripheral/uart.cpp ****                     & 0xff000000) >> 24);
 430:../src/peripheral/uart.cpp ****         }
 431:../src/peripheral/uart.cpp ****     }
 432:../src/peripheral/uart.cpp **** }
 1632                             		.loc 10 432 0
 1633 0690 3F 7B 05                		rtsd	#20, r7-r11
 1634                             	.LVL97:
 1635                             	.L144:
 1636                             	.LBB1221:
 1637                             	.LBB1214:
 394:../src/peripheral/uart.cpp ****         for (int i = 0; i < 15; i++) {
 1638                             		.loc 10 394 0
 1639 0693 61 11                   		cmp	#1, r1
 1640 0695 21 37                   		bne	.L147
 1641 0697 71 72 01                		add	#1, r7, r2
 1642 069a 75 43 10                		mov.L	#16, r3
 1643 069d FB E2 00 00 00 00       		mov.L	#__ZZN6UMouse11getInstanceEvE8instance, r14
 1644                             		.balign 8,3,2
 1645                             	.L149:
 1646                             	.LVL98:
 1647                             	.LBB1215:
 396:../src/peripheral/uart.cpp ****                     & 0x000000ff) >> 0);
 1648                             		.loc 10 396 0 discriminator 2
 1649 06a3 71 34 2B                		add	#43, r3, r4
 1650 06a6 FE 64 E1                		mov.L	[r4,r14], r1
 1651 06a9 62 13                   		add	#1, r3
 1652                             	.LVL99:
 397:../src/peripheral/uart.cpp ****             buf[ind + 1 + i * 4] = ((mouse.maze.walls_vertical[i + 16]
 1653                             		.loc 10 397 0 discriminator 2
 1654 06ab C3 21                   		mov.B	r1, [r2]
 398:../src/peripheral/uart.cpp ****                     & 0x0000ff00) >> 8);
 1655                             		.loc 10 398 0 discriminator 2
 1656 06ad FE 64 E1                		mov.L	[r4,r14], r1
 399:../src/peripheral/uart.cpp ****             buf[ind + 2 + i * 4] = ((mouse.maze.walls_vertical[i + 16]
 1657                             		.loc 10 399 0 discriminator 2
 1658 06b0 68 81                   		shlr	#8, r1
 1659 06b2 80 29                   		mov.B	r1, 1[r2]
 400:../src/peripheral/uart.cpp ****                     & 0x00ff0000) >> 16);
 1660                             		.loc 10 400 0 discriminator 2
 1661 06b4 FE 64 E1                		mov.L	[r4,r14], r1
 401:../src/peripheral/uart.cpp ****             buf[ind + 3 + i * 4] = ((mouse.maze.walls_vertical[i + 16]
 1662                             		.loc 10 401 0 discriminator 2
 1663 06b7 69 01                   		shlr	#16, r1
 1664 06b9 80 A1                   		mov.B	r1, 2[r2]
 402:../src/peripheral/uart.cpp ****                     & 0xff000000) >> 24);
 1665                             		.loc 10 402 0 discriminator 2
 1666 06bb FE 64 E4                		mov.L	[r4,r14], r4
 403:../src/peripheral/uart.cpp ****         }
 1667                             		.loc 10 403 0 discriminator 2
 1668 06be 69 84                   		shlr	#24, r4
 1669 06c0 80 AC                   		mov.B	r4, 3[r2]
 1670                             	.LVL100:
 1671 06c2 62 42                   		add	#4, r2
 395:../src/peripheral/uart.cpp ****             buf[ind + 0 + i * 4] = ((mouse.maze.walls_vertical[i + 16]
 1672                             		.loc 10 395 0 discriminator 2
 1673 06c4 75 53 1F                		cmp	#31, r3
 1674 06c7 21 DC                   		bne	.L149
 1675                             	.LBE1215:
 1676                             	.LBE1214:
 1677                             	.LBE1221:
 1678                             		.loc 10 432 0
 1679 06c9 3F 7B 05                		rtsd	#20, r7-r11
 1680                             	.LVL101:
 1681                             	.L147:
 1682                             	.LBB1222:
 1683                             	.LBB1216:
 407:../src/peripheral/uart.cpp ****         for (int i = 0; i < 16; i++) {
 1684                             		.loc 10 407 0
 1685 06cc 61 21                   		cmp	#2, r1
 1686 06ce 21 60                   		bne	.L150
 1687 06d0 71 72 01                		add	#1, r7, r2
 1688 06d3 66 03                   		mov.L	#0, r3
 1689 06d5 FB E2 00 00 00 00       		mov.L	#__ZZN6UMouse11getInstanceEvE8instance, r14
 1690                             		.balign 8,3,2
 1691                             	.L151:
 1692                             	.LVL102:
 1693                             	.LBB1217:
 410:../src/peripheral/uart.cpp ****             buf[ind + 1 + i * 4] =
 1694                             		.loc 10 410 0 discriminator 2
 1695 06db 71 34 4A                		add	#0x4a, r3, r4
 1696 06de FE 64 E1                		mov.L	[r4,r14], r1
 408:../src/peripheral/uart.cpp ****             buf[ind + 0 + i * 4] =
 1697                             		.loc 10 408 0 discriminator 2
 1698 06e1 62 13                   		add	#1, r3
 1699                             	.LVL103:
 410:../src/peripheral/uart.cpp ****             buf[ind + 1 + i * 4] =
 1700                             		.loc 10 410 0 discriminator 2
 1701 06e3 C3 21                   		mov.B	r1, [r2]
 412:../src/peripheral/uart.cpp ****             buf[ind + 2 + i * 4] =
 1702                             		.loc 10 412 0 discriminator 2
 1703 06e5 FE 64 E1                		mov.L	[r4,r14], r1
 1704 06e8 68 81                   		shlr	#8, r1
 1705 06ea 80 29                   		mov.B	r1, 1[r2]
 414:../src/peripheral/uart.cpp ****             buf[ind + 3 + i * 4] =
 1706                             		.loc 10 414 0 discriminator 2
 1707 06ec FE 64 E1                		mov.L	[r4,r14], r1
 1708 06ef 69 01                   		shlr	#16, r1
 1709 06f1 80 A1                   		mov.B	r1, 2[r2]
 416:../src/peripheral/uart.cpp ****         }
 1710                             		.loc 10 416 0 discriminator 2
 1711 06f3 FE 64 E4                		mov.L	[r4,r14], r4
 1712 06f6 69 84                   		shlr	#24, r4
 1713 06f8 80 AC                   		mov.B	r4, 3[r2]
 1714 06fa 62 42                   		add	#4, r2
 408:../src/peripheral/uart.cpp ****             buf[ind + 0 + i * 4] =
 1715                             		.loc 10 408 0 discriminator 2
 1716 06fc 75 53 10                		cmp	#16, r3
 1717 06ff 21 DC                   		bne	.L151
 1718                             	.LBE1217:
 1719                             	.LBE1216:
 1720                             	.LBE1222:
 1721                             		.loc 10 432 0
 1722 0701 3F 7B 05                		rtsd	#20, r7-r11
 1723                             	.LVL104:
 1724                             	.L166:
 1725                             	.LBB1223:
 1726                             	.LBB1218:
 1727                             	.LBB1209:
 123:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h ****         return instance;
 1728                             		.loc 3 123 0
 1729 0704 EF B1                   		mov.L	r11, r1
 1730                             	.LVL105:
 1731 0706 05 00 00 00             		bsr	___cxa_guard_acquire
 1732                             	.LVL106:
 1733 070a 61 01                   		cmp	#0, r1
 1734 070c 3A 4C FF                		beq	.L142
 1735                             	.LVL107:
 1736                             	.LBE1209:
 1737                             	.LBB1210:
 1738                             	.LBB1211:
 1739 070f EF B1                   		mov.L	r11, r1
 1740 0711 05 00 00 00             		bsr	___cxa_guard_release
 1741                             	.LVL108:
 1742 0715 FB 12 00 00 00 00       		mov.L	#__ZN6UMouseD1Ev, r1
 1743 071b FB 22 00 00 00 00       		mov.L	#__ZZN6UMouse11getInstanceEvE8instance, r2
 1744 0721 FB 32 00 00 00 00       		mov.L	#___dso_handle, r3
 1745 0727 05 00 00 00             		bsr	___cxa_atexit
 1746                             	.LVL109:
 1747 072b 38 2D FF                		bra	.L142
 1748                             	.LVL110:
 1749                             	.L150:
 1750                             	.LBE1211:
 1751                             	.LBE1210:
 1752                             	.LBE1218:
 1753                             	.LBB1219:
 420:../src/peripheral/uart.cpp ****         for (int i = 0; i < 15; i++) {
 1754                             		.loc 10 420 0
 1755 072e 61 31                   		cmp	#3, r1
 1756 0730 3B 60 FF                		bne	.L140
 1757 0733 71 72 01                		add	#1, r7, r2
 1758 0736 75 43 10                		mov.L	#16, r3
 1759 0739 FB E2 00 00 00 00       		mov.L	#__ZZN6UMouse11getInstanceEvE8instance, r14
 1760 073f 03                      		.balign 8,3,2
 1761                             	.L152:
 1762                             	.LVL111:
 1763                             	.LBB1220:
 422:../src/peripheral/uart.cpp ****                     & 0x000000ff) >> 0);
 1764                             		.loc 10 422 0 discriminator 2
 1765 0740 71 34 4A                		add	#0x4a, r3, r4
 1766 0743 FE 64 E1                		mov.L	[r4,r14], r1
 1767 0746 62 13                   		add	#1, r3
 1768                             	.LVL112:
 423:../src/peripheral/uart.cpp ****             buf[ind + 1 + i * 4] = ((mouse.maze.walls_horizontal[i + 16]
 1769                             		.loc 10 423 0 discriminator 2
 1770 0748 C3 21                   		mov.B	r1, [r2]
 424:../src/peripheral/uart.cpp ****                     & 0x0000ff00) >> 8);
 1771                             		.loc 10 424 0 discriminator 2
 1772 074a FE 64 E1                		mov.L	[r4,r14], r1
 425:../src/peripheral/uart.cpp ****             buf[ind + 2 + i * 4] = ((mouse.maze.walls_horizontal[i + 16]
 1773                             		.loc 10 425 0 discriminator 2
 1774 074d 68 81                   		shlr	#8, r1
 1775 074f 80 29                   		mov.B	r1, 1[r2]
 426:../src/peripheral/uart.cpp ****                     & 0x00ff0000) >> 16);
 1776                             		.loc 10 426 0 discriminator 2
 1777 0751 FE 64 E1                		mov.L	[r4,r14], r1
 427:../src/peripheral/uart.cpp ****             buf[ind + 3 + i * 4] = ((mouse.maze.walls_horizontal[i + 16]
 1778                             		.loc 10 427 0 discriminator 2
 1779 0754 69 01                   		shlr	#16, r1
 1780 0756 80 A1                   		mov.B	r1, 2[r2]
 428:../src/peripheral/uart.cpp ****                     & 0xff000000) >> 24);
 1781                             		.loc 10 428 0 discriminator 2
 1782 0758 FE 64 E4                		mov.L	[r4,r14], r4
 429:../src/peripheral/uart.cpp ****         }
 1783                             		.loc 10 429 0 discriminator 2
 1784 075b 69 84                   		shlr	#24, r4
 1785 075d 80 AC                   		mov.B	r4, 3[r2]
 1786                             	.LVL113:
 1787 075f 62 42                   		add	#4, r2
 421:../src/peripheral/uart.cpp ****             buf[ind + 0 + i * 4] = ((mouse.maze.walls_horizontal[i + 16]
 1788                             		.loc 10 421 0 discriminator 2
 1789 0761 75 53 1F                		cmp	#31, r3
 1790 0764 21 DC                   		bne	.L152
 1791                             	.LBE1220:
 1792                             	.LBE1219:
 1793                             	.LBE1223:
 1794                             		.loc 10 432 0
 1795 0766 3F 7B 05                		rtsd	#20, r7-r11
 1796                             	.LFE1444:
 1798                             		.global	__Z11set2ByteValtff
 1800                             	__Z11set2ByteValtff:
 1801                             	.LFB1446:
 433:../src/peripheral/uart.cpp **** 
 434:../src/peripheral/uart.cpp **** void packData(uint8_t *buf) {
 435:../src/peripheral/uart.cpp ****     uint8_t printfDataNum = 0;
 436:../src/peripheral/uart.cpp ****     const uint8_t printfFieldNum = 20;
 437:../src/peripheral/uart.cpp **** 
 438:../src/peripheral/uart.cpp ****     MPU9250& imu1 = MPU9250::getInstance();
 439:../src/peripheral/uart.cpp ****     Icm20608G& imu2 = Icm20608G::getInstance();
 440:../src/peripheral/uart.cpp ****     TactSw& tsw = TactSw::getInstance();
 441:../src/peripheral/uart.cpp ****     WallSensor &wallSen = WallSensor::getInstance();
 442:../src/peripheral/uart.cpp ****     UMouse &m = UMouse::getInstance();
 443:../src/peripheral/uart.cpp ****     //header
 444:../src/peripheral/uart.cpp ****     buf[0] = 0xff;
 445:../src/peripheral/uart.cpp ****     buf[1] = 0xff;
 446:../src/peripheral/uart.cpp ****     buf[2] = 0x48;
 447:../src/peripheral/uart.cpp ****     buf[3] = 0x45;
 448:../src/peripheral/uart.cpp ****     buf[4] = 0x41;
 449:../src/peripheral/uart.cpp ****     buf[5] = 0x44;
 450:../src/peripheral/uart.cpp ****     //elapsed time
 451:../src/peripheral/uart.cpp ****     unsigned int elapsedTime = getElapsedMsec();
 452:../src/peripheral/uart.cpp ****     buf[8] = ((0xff000000 & elapsedTime) >> 24);
 453:../src/peripheral/uart.cpp ****     buf[9] = ((0x00ff0000 & elapsedTime) >> 16);
 454:../src/peripheral/uart.cpp ****     buf[10] = ((0x0000ff00 & elapsedTime) >> 8);
 455:../src/peripheral/uart.cpp ****     buf[11] = ((0x000000ff & elapsedTime));
 456:../src/peripheral/uart.cpp ****     //bat vol
 457:../src/peripheral/uart.cpp ****     uint16_t vol = S12AD.ADDR0;
 458:../src/peripheral/uart.cpp ****     buf[12] = ((0x0000ff00 & vol) >> 8);
 459:../src/peripheral/uart.cpp ****     buf[13] = ((0x000000ff & vol));
 460:../src/peripheral/uart.cpp **** 
 461:../src/peripheral/uart.cpp ****     buf[14] = ((0x0000ff00 & S12AD.ADDR1) >> 8);
 462:../src/peripheral/uart.cpp ****     buf[15] = ((0x000000ff & S12AD.ADDR1));
 463:../src/peripheral/uart.cpp **** 
 464:../src/peripheral/uart.cpp ****     buf[16] = ((0x0000ff00 & S12AD.ADDR2) >> 8);
 465:../src/peripheral/uart.cpp ****     buf[17] = ((0x000000ff & S12AD.ADDR2));
 466:../src/peripheral/uart.cpp **** 
 467:../src/peripheral/uart.cpp ****     buf[18] = ((0x0000ff00 & S12AD.ADDR3) >> 8);
 468:../src/peripheral/uart.cpp ****     buf[19] = ((0x000000ff & S12AD.ADDR3));
 469:../src/peripheral/uart.cpp **** 
 470:../src/peripheral/uart.cpp ****     buf[20] = ((0x0000ff00 & S12AD.ADDR4) >> 8);
 471:../src/peripheral/uart.cpp ****     buf[21] = ((0x000000ff & S12AD.ADDR4));
 472:../src/peripheral/uart.cpp **** 
 473:../src/peripheral/uart.cpp ****     buf[22] = ((0x0000ff00 & S12AD.ADDR5) >> 8);
 474:../src/peripheral/uart.cpp ****     buf[23] = ((0x000000ff & S12AD.ADDR5));
 475:../src/peripheral/uart.cpp **** 
 476:../src/peripheral/uart.cpp ****     buf[24] = ((0x0000ff00 & S12AD.ADDR6) >> 8);
 477:../src/peripheral/uart.cpp ****     buf[25] = ((0x000000ff & S12AD.ADDR6));
 478:../src/peripheral/uart.cpp **** 
 479:../src/peripheral/uart.cpp ****     buf[26] = ((0x0000ff00 & S12AD.ADDR7) >> 8);
 480:../src/peripheral/uart.cpp ****     buf[27] = ((0x000000ff & S12AD.ADDR7));
 481:../src/peripheral/uart.cpp **** 
 482:../src/peripheral/uart.cpp ****     buf[28] = ((0x0000ff00 & S12AD1.ADDR8) >> 8);
 483:../src/peripheral/uart.cpp ****     buf[29] = ((0x000000ff & S12AD1.ADDR8));
 484:../src/peripheral/uart.cpp **** 
 485:../src/peripheral/uart.cpp ****     buf[30] = ((0x0000ff00 & S12AD1.ADDR9) >> 8);
 486:../src/peripheral/uart.cpp ****     buf[31] = ((0x000000ff & S12AD1.ADDR9));
 487:../src/peripheral/uart.cpp **** 
 488:../src/peripheral/uart.cpp ****     buf[32] = ((0x0000ff00 & S12AD1.ADDR10) >> 8);
 489:../src/peripheral/uart.cpp ****     buf[33] = ((0x000000ff & S12AD1.ADDR10));
 490:../src/peripheral/uart.cpp **** 
 491:../src/peripheral/uart.cpp ****     buf[34] = ((0x0000ff00 & (imu1.omega_raw[0])) >> 8);
 492:../src/peripheral/uart.cpp ****     buf[35] = ((0x000000ff & imu1.omega_raw[0]));
 493:../src/peripheral/uart.cpp **** 
 494:../src/peripheral/uart.cpp ****     buf[36] = ((0x0000ff00 & (imu1.omega_raw[1])) >> 8);
 495:../src/peripheral/uart.cpp ****     buf[37] = ((0x000000ff & imu1.omega_raw[1]));
 496:../src/peripheral/uart.cpp **** 
 497:../src/peripheral/uart.cpp ****     buf[38] = ((0x0000ff00 & (imu1.omega_raw[2])) >> 8);
 498:../src/peripheral/uart.cpp ****     buf[39] = ((0x000000ff & imu1.omega_raw[2]));
 499:../src/peripheral/uart.cpp **** 
 500:../src/peripheral/uart.cpp ****     buf[40] = ((0x0000ff00 & (imu1.acc_raw[0])) >> 8);
 501:../src/peripheral/uart.cpp ****     buf[41] = ((0x000000ff & imu1.acc_raw[0]));
 502:../src/peripheral/uart.cpp **** 
 503:../src/peripheral/uart.cpp ****     buf[42] = ((0x0000ff00 & (imu1.acc_raw[1])) >> 8);
 504:../src/peripheral/uart.cpp ****     buf[43] = ((0x000000ff & imu1.acc_raw[1]));
 505:../src/peripheral/uart.cpp **** 
 506:../src/peripheral/uart.cpp ****     buf[44] = ((0x0000ff00 & (imu1.acc_raw[2])) >> 8);
 507:../src/peripheral/uart.cpp ****     buf[45] = ((0x000000ff & imu1.acc_raw[2]));
 508:../src/peripheral/uart.cpp **** 
 509:../src/peripheral/uart.cpp ****     buf[46] = ((0x0000ff00 & (imu1.mag_raw[0])) >> 8);
 510:../src/peripheral/uart.cpp ****     buf[47] = ((0x000000ff & imu1.mag_raw[0]));
 511:../src/peripheral/uart.cpp **** 
 512:../src/peripheral/uart.cpp ****     buf[48] = ((0x0000ff00 & (imu1.mag_raw[1])) >> 8);
 513:../src/peripheral/uart.cpp ****     buf[49] = ((0x000000ff & imu1.mag_raw[1]));
 514:../src/peripheral/uart.cpp **** 
 515:../src/peripheral/uart.cpp ****     buf[50] = ((0x0000ff00 & (imu1.mag_raw[2])) >> 8);
 516:../src/peripheral/uart.cpp ****     buf[51] = ((0x000000ff & imu1.mag_raw[2]));
 517:../src/peripheral/uart.cpp **** 
 518:../src/peripheral/uart.cpp ****     buf[52] = ((0x0000ff00 & (imu2.omega_raw[0])) >> 8);
 519:../src/peripheral/uart.cpp ****     buf[53] = ((0x000000ff & imu2.omega_raw[0]));
 520:../src/peripheral/uart.cpp **** 
 521:../src/peripheral/uart.cpp ****     buf[54] = ((0x0000ff00 & (imu2.omega_raw[1])) >> 8);
 522:../src/peripheral/uart.cpp ****     buf[55] = ((0x000000ff & imu2.omega_raw[1]));
 523:../src/peripheral/uart.cpp **** 
 524:../src/peripheral/uart.cpp ****     buf[56] = ((0x0000ff00 & (imu2.omega_raw[2])) >> 8);
 525:../src/peripheral/uart.cpp ****     buf[57] = ((0x000000ff & imu2.omega_raw[2]));
 526:../src/peripheral/uart.cpp **** 
 527:../src/peripheral/uart.cpp ****     buf[58] = ((0x0000ff00 & (imu2.acc_raw[0])) >> 8);
 528:../src/peripheral/uart.cpp ****     buf[59] = ((0x000000ff & imu2.acc_raw[0]));
 529:../src/peripheral/uart.cpp **** 
 530:../src/peripheral/uart.cpp ****     buf[60] = ((0x0000ff00 & (imu2.acc_raw[1])) >> 8);
 531:../src/peripheral/uart.cpp ****     buf[61] = ((0x000000ff & imu2.acc_raw[1]));
 532:../src/peripheral/uart.cpp **** 
 533:../src/peripheral/uart.cpp ****     buf[62] = ((0x0000ff00 & (imu2.acc_raw[2])) >> 8);
 534:../src/peripheral/uart.cpp ****     buf[63] = ((0x000000ff & imu2.acc_raw[2]));
 535:../src/peripheral/uart.cpp **** 
 536:../src/peripheral/uart.cpp ****     buf[64] = ((0x0000ff00 & (getTimeuCountIntCMT0())) >> 8);
 537:../src/peripheral/uart.cpp ****     buf[65] = ((0x000000ff & getTimeuCountIntCMT0()));
 538:../src/peripheral/uart.cpp **** 
 539:../src/peripheral/uart.cpp ****     buf[66] = ((0x0000ff00 & (getTimeuCountIntCMT1())) >> 8);
 540:../src/peripheral/uart.cpp ****     buf[67] = ((0x000000ff & getTimeuCountIntCMT1()));
 541:../src/peripheral/uart.cpp **** //
 542:../src/peripheral/uart.cpp ****     buf[68] = ((0x0000ff00 & (TPU0.TCNT)) >> 8);
 543:../src/peripheral/uart.cpp ****     buf[69] = ((0x000000ff & TPU0.TCNT));
 544:../src/peripheral/uart.cpp **** /*
 545:../src/peripheral/uart.cpp ****     uint16_t duty_int_r = uint16_t(getDutyMTU3() * 65535.0);
 546:../src/peripheral/uart.cpp ****     buf[70] = ((0x0000ff00 & (duty_int_r)) >> 8);
 547:../src/peripheral/uart.cpp ****     buf[71] = ((0x000000ff & duty_int_r));
 548:../src/peripheral/uart.cpp ****     uint16_t duty_int_l = uint16_t(getDutyMTU4() * 65535.0);
 549:../src/peripheral/uart.cpp ****     buf[72] = ((0x0000ff00 & (duty_int_l)) >> 8);
 550:../src/peripheral/uart.cpp ****     buf[73] = ((0x000000ff & duty_int_l));
 551:../src/peripheral/uart.cpp **** */
 552:../src/peripheral/uart.cpp ****     set2ByteVal(70, m.duty_R, 32767);
 553:../src/peripheral/uart.cpp ****     set2ByteVal(72, m.duty_L, 32767);
 554:../src/peripheral/uart.cpp **** 
 555:../src/peripheral/uart.cpp ****     buf[74] = ((0x0000ff00 & (MTU1.TCNT)) >> 8);
 556:../src/peripheral/uart.cpp ****     buf[75] = ((0x000000ff & MTU1.TCNT));
 557:../src/peripheral/uart.cpp **** 
 558:../src/peripheral/uart.cpp ****     buf[76] = ((0x0000ff00 & (MTU2.TCNT)) >> 8);
 559:../src/peripheral/uart.cpp ****     buf[77] = ((0x000000ff & MTU2.TCNT));
 560:../src/peripheral/uart.cpp **** 
 561:../src/peripheral/uart.cpp ****     buf[78] = ((0x0000ff00 & (tsw.getOntime())) >> 8);
 562:../src/peripheral/uart.cpp ****     buf[79] = ((0x000000ff & (tsw.getOntime())));
 563:../src/peripheral/uart.cpp **** 
 564:../src/peripheral/uart.cpp ****     buf[94] = ((0x0000ff00 & (wallSen.right.at(0))) >> 8);
 565:../src/peripheral/uart.cpp ****     buf[95] = ((0x000000ff & (wallSen.right.at(0))));
 566:../src/peripheral/uart.cpp **** 
 567:../src/peripheral/uart.cpp ****     buf[96] = ((0x0000ff00 & (wallSen.ahead.at(0))) >> 8);
 568:../src/peripheral/uart.cpp ****     buf[97] = ((0x000000ff & (wallSen.ahead.at(0))));
 569:../src/peripheral/uart.cpp **** 
 570:../src/peripheral/uart.cpp ****     buf[98] = ((0x0000ff00 & (wallSen.left.at(0))) >> 8);
 571:../src/peripheral/uart.cpp ****     buf[99] = ((0x000000ff & (wallSen.left.at(0))));
 572:../src/peripheral/uart.cpp **** 
 573:../src/peripheral/uart.cpp ****     //buf[100] = ((0x0000ff00 & (recieveBuff.size())) >> 8);
 574:../src/peripheral/uart.cpp ****     //buf[101] = ((0x000000ff & (recieveBuff.size()))     );
 575:../src/peripheral/uart.cpp **** 
 576:../src/peripheral/uart.cpp ****     //buf[102] = ((0x0000ff00 & (recieveBuff.front())) >> 8);
 577:../src/peripheral/uart.cpp ****     //buf[103] = ((0x000000ff & (recieveBuff.front()))     );
 578:../src/peripheral/uart.cpp **** /*
 579:../src/peripheral/uart.cpp ****     buf[104] = ((0x0000ff00 & ((uint8_t)(SCIFA9.FDR.BIT.R))) >> 8);
 580:../src/peripheral/uart.cpp ****     buf[105] = ((0x000000ff & ((uint8_t)(SCIFA9.FDR.BIT.R)))     );
 581:../src/peripheral/uart.cpp **** 
 582:../src/peripheral/uart.cpp ****     Gamepad &gamepad = Gamepad::getInstance();
 583:../src/peripheral/uart.cpp **** 
 584:../src/peripheral/uart.cpp ****     buf[114] = (0x0000ff00 & gamepad.A) >> 8;
 585:../src/peripheral/uart.cpp ****     buf[115] = (0x000000ff & gamepad.A)     ;
 586:../src/peripheral/uart.cpp **** 
 587:../src/peripheral/uart.cpp ****     buf[116] = (0x0000ff00 & gamepad.B) >> 8;
 588:../src/peripheral/uart.cpp ****     buf[117] = (0x000000ff & gamepad.B)     ;
 589:../src/peripheral/uart.cpp **** 
 590:../src/peripheral/uart.cpp ****     buf[118] = (0x0000ff00 & gamepad.X) >> 8;
 591:../src/peripheral/uart.cpp ****     buf[119] = (0x000000ff & gamepad.X)     ;
 592:../src/peripheral/uart.cpp **** 
 593:../src/peripheral/uart.cpp ****     buf[120] = (0x0000ff00 & gamepad.Y) >> 8;
 594:../src/peripheral/uart.cpp ****     buf[121] = (0x000000ff & gamepad.Y)     ;
 595:../src/peripheral/uart.cpp **** 
 596:../src/peripheral/uart.cpp ****     buf[122] = (0x0000ff00 & gamepad.RB) >> 8;
 597:../src/peripheral/uart.cpp ****     buf[123] = (0x000000ff & gamepad.RB)    ;
 598:../src/peripheral/uart.cpp **** 
 599:../src/peripheral/uart.cpp ****     buf[124] = (0x0000ff00 & gamepad.LB) >> 8;
 600:../src/peripheral/uart.cpp ****     buf[125] = (0x000000ff & gamepad.LB)     ;
 601:../src/peripheral/uart.cpp **** 
 602:../src/peripheral/uart.cpp ****     buf[126] = (0x0000ff00 & gamepad.BACK) >> 8;
 603:../src/peripheral/uart.cpp ****     buf[127] = (0x000000ff & gamepad.BACK)     ;
 604:../src/peripheral/uart.cpp **** 
 605:../src/peripheral/uart.cpp ****     buf[128] = (0x0000ff00 & gamepad.START) >> 8;
 606:../src/peripheral/uart.cpp ****     buf[129] = (0x000000ff & gamepad.START)     ;
 607:../src/peripheral/uart.cpp **** 
 608:../src/peripheral/uart.cpp ****     buf[130] = (0x0000ff00 & gamepad.RT) >> 8;
 609:../src/peripheral/uart.cpp ****     buf[131] = (0x000000ff & gamepad.RT)     ;
 610:../src/peripheral/uart.cpp **** 
 611:../src/peripheral/uart.cpp ****     buf[132] = (0x0000ff00 & gamepad.LT) >> 8;
 612:../src/peripheral/uart.cpp ****     buf[133] = (0x000000ff & gamepad.LT)     ;
 613:../src/peripheral/uart.cpp **** 
 614:../src/peripheral/uart.cpp ****     buf[134] = (0x0000ff00 & gamepad.cross_x) >> 8;
 615:../src/peripheral/uart.cpp ****     buf[135] = (0x000000ff & gamepad.cross_x)     ;
 616:../src/peripheral/uart.cpp **** 
 617:../src/peripheral/uart.cpp ****     buf[136] = (0x0000ff00 & gamepad.cross_y) >> 8;
 618:../src/peripheral/uart.cpp ****     buf[137] = (0x000000ff & gamepad.cross_y)     ;
 619:../src/peripheral/uart.cpp **** 
 620:../src/peripheral/uart.cpp ****     buf[138] = (0x0000ff00 & gamepad.R3D_x) >> 8;
 621:../src/peripheral/uart.cpp ****     buf[139] = (0x000000ff & gamepad.R3D_x)     ;
 622:../src/peripheral/uart.cpp **** 
 623:../src/peripheral/uart.cpp ****     buf[140] = (0x0000ff00 & gamepad.R3D_y) >> 8;
 624:../src/peripheral/uart.cpp ****     buf[141] = (0x000000ff & gamepad.R3D_y)     ;
 625:../src/peripheral/uart.cpp **** 
 626:../src/peripheral/uart.cpp ****     buf[142] = (0x0000ff00 & gamepad.L3D_x) >> 8;
 627:../src/peripheral/uart.cpp ****     buf[143] = (0x000000ff & gamepad.L3D_x)     ;
 628:../src/peripheral/uart.cpp **** 
 629:../src/peripheral/uart.cpp ****     buf[144] = (0x0000ff00 & gamepad.L3D_y) >> 8;
 630:../src/peripheral/uart.cpp ****     buf[145] = (0x000000ff & gamepad.L3D_y)      ;
 631:../src/peripheral/uart.cpp **** */
 632:../src/peripheral/uart.cpp ****     set2ByteVal(100, m.t_ang_a, 20.0);
 633:../src/peripheral/uart.cpp ****     set2ByteVal(102, m.t_ang_v, 20.0);
 634:../src/peripheral/uart.cpp ****     set2ByteVal(104, m.t_ang, 20.0);
 635:../src/peripheral/uart.cpp ****     set2ByteVal(106, m.accum_ang, 20.0);
 636:../src/peripheral/uart.cpp ****     set2ByteVal(108, imu1.omega_c[2]);
 637:../src/peripheral/uart.cpp **** 
 638:../src/peripheral/uart.cpp ****     set2ByteVal(110, m.t_a, 1000.0);
 639:../src/peripheral/uart.cpp ****     set2ByteVal(112, m.t_v, 3000.0);
 640:../src/peripheral/uart.cpp ****     set2ByteVal(114, m.t_x, 3000.0);
 641:../src/peripheral/uart.cpp ****     set2ByteVal(116, m.accum_x, 3000.0);
 642:../src/peripheral/uart.cpp ****     set2ByteVal(118, m.a_v, 1000.0);
 643:../src/peripheral/uart.cpp ****     set2ByteVal(120, m.a_h, 1000.0);
 644:../src/peripheral/uart.cpp ****     set2ByteVal(122, m.v_enc, 3000.0 );
 645:../src/peripheral/uart.cpp ****     set2ByteVal(124, m.wall_P, 3000.0);
 646:../src/peripheral/uart.cpp ****     set2ByteVal(126, m.wall_I, 3000.0);
 647:../src/peripheral/uart.cpp ****     set2ByteVal(128, m.wall_D, 3000.0);
 648:../src/peripheral/uart.cpp ****     set2ByteVal(130, m.v_P, 3000.0);
 649:../src/peripheral/uart.cpp ****     set2ByteVal(132, m.v_I, 3000.0);
 650:../src/peripheral/uart.cpp ****     set2ByteVal(134, m.v_D, 3000.0);
 651:../src/peripheral/uart.cpp ****     set2ByteVal(136, m.ang_P, 3000.0);
 652:../src/peripheral/uart.cpp ****     set2ByteVal(138, m.ang_I, 3000.0);
 653:../src/peripheral/uart.cpp ****     set2ByteVal(140, m.ang_D, 3000.0);
 654:../src/peripheral/uart.cpp ****     set2ByteVal(142, m.ang_v_P, 3000.0);
 655:../src/peripheral/uart.cpp ****     set2ByteVal(144, m.ang_v_I, 3000.0);
 656:../src/peripheral/uart.cpp ****     set2ByteVal(146, m.ang_v_D, 3000.0);
 657:../src/peripheral/uart.cpp ****     set2ByteVal(148, m.v_FF, 3000.0);
 658:../src/peripheral/uart.cpp ****     set2ByteVal(150, m.ang_FF, 3000.0);
 659:../src/peripheral/uart.cpp **** 
 660:../src/peripheral/uart.cpp **** 
 661:../src/peripheral/uart.cpp **** 
 662:../src/peripheral/uart.cpp **** 
 663:../src/peripheral/uart.cpp **** 
 664:../src/peripheral/uart.cpp ****     //迷路データ
 665:../src/peripheral/uart.cpp ****     static uint8_t count = 0;
 666:../src/peripheral/uart.cpp ****     packDataMaze(count, &buf[160]);
 667:../src/peripheral/uart.cpp ****     count++;
 668:../src/peripheral/uart.cpp ****     if (count == 4)
 669:../src/peripheral/uart.cpp ****         count = 0;
 670:../src/peripheral/uart.cpp **** 
 671:../src/peripheral/uart.cpp ****     //printf Data
 672:../src/peripheral/uart.cpp ****     //myprintf("Buff:%d\n",printfBuff.size());
 673:../src/peripheral/uart.cpp ****     uint16_t start_byte = PERIODIC_MSG_LEN - printfFieldNum;
 674:../src/peripheral/uart.cpp ****     uint16_t end_byte = PERIODIC_MSG_LEN;
 675:../src/peripheral/uart.cpp ****     for (int i = start_byte; i < end_byte; i++) {
 676:../src/peripheral/uart.cpp ****         if (printfBuff.empty() == false) {
 677:../src/peripheral/uart.cpp ****             buf[i] = printfBuff.front();
 678:../src/peripheral/uart.cpp ****             printfBuff.pop();
 679:../src/peripheral/uart.cpp ****             printfDataNum++;
 680:../src/peripheral/uart.cpp ****         } else {
 681:../src/peripheral/uart.cpp ****             buf[i] = 0;
 682:../src/peripheral/uart.cpp ****         }
 683:../src/peripheral/uart.cpp ****     }
 684:../src/peripheral/uart.cpp ****     //printf Data Num
 685:../src/peripheral/uart.cpp ****     buf[7] = printfDataNum;
 686:../src/peripheral/uart.cpp **** 
 687:../src/peripheral/uart.cpp ****     //check sum
 688:../src/peripheral/uart.cpp ****     uint8_t sum = 0;
 689:../src/peripheral/uart.cpp ****     for (int i = 7; i < PERIODIC_MSG_LEN; i++)
 690:../src/peripheral/uart.cpp ****         sum += buf[i];
 691:../src/peripheral/uart.cpp ****     buf[6] = sum;
 692:../src/peripheral/uart.cpp **** }
 693:../src/peripheral/uart.cpp **** 
 694:../src/peripheral/uart.cpp **** void set2ByteVal(uint16_t index, float val,float prop){
 1802                             		.loc 10 694 0
 1803                             	.LVL114:
 1804                             	.LBB1224:
 695:../src/peripheral/uart.cpp ****     int16_t int_val = (int16_t)(val * prop);
 1805                             		.loc 10 695 0
 1806 0769 FC 8F 23                		fmul	r2, r3
 1807                             	.LVL115:
 1808 076c FC 97 33                		ftoi	r3, r3
 1809                             	.LVL116:
 696:../src/peripheral/uart.cpp ****     periodicMsg[index]   = (0x0000ff00 & int_val) >> 8;
 1810                             		.loc 10 696 0
 1811 076f 5F 11                   		movu.W	r1, r1
 1812 0771 FD 88 34                		shlr	#8, r3, r4
 1813 0774 FB E2 B9 0B 00 00       		mov.L	#__ZL11periodicMsg, r14
 1814 077a FE 01 E4                		mov.B	r4, [r1,r14]
 697:../src/peripheral/uart.cpp ****     periodicMsg[index+1] = (0x000000ff & int_val)   ;
 1815                             		.loc 10 697 0
 1816 077d 4B E1                   		add	r14, r1
 1817                             	.LVL117:
 1818 077f 80 1B                   		mov.B	r3, 1[r1]
 1819 0781 02                      		rts
 1820                             	.LBE1224:
 1821                             	.LFE1446:
 1823                             		.global	__Z11set2ByteValtt
 1825                             	__Z11set2ByteValtt:
 1826                             	.LFB1447:
 698:../src/peripheral/uart.cpp **** }
 699:../src/peripheral/uart.cpp **** 
 700:../src/peripheral/uart.cpp **** void set2ByteVal(uint16_t index, uint16_t val){
 1827                             		.loc 10 700 0
 1828                             	.LVL118:
 701:../src/peripheral/uart.cpp ****     periodicMsg[index]   = (0x0000ff00 & val) >> 8;
 1829                             		.loc 10 701 0
 1830 0782 5F 11                   		movu.W	r1, r1
 1831 0784 FD 88 24                		shlr	#8, r2, r4
 1832 0787 FB E2 B9 0B 00 00       		mov.L	#__ZL11periodicMsg, r14
 1833 078d FE 01 E4                		mov.B	r4, [r1,r14]
 702:../src/peripheral/uart.cpp ****     periodicMsg[index+1] = (0x000000ff & val)   ;
 1834                             		.loc 10 702 0
 1835 0790 4B E1                   		add	r14, r1
 1836                             	.LVL119:
 1837 0792 80 1A                   		mov.B	r2, 1[r1]
 1838 0794 02                      		rts
 1839                             	.LFE1447:
 1841                             		.global	__Z23getPointerOfPeriodicMsgv
 1843                             	__Z23getPointerOfPeriodicMsgv:
 1844                             	.LFB1448:
 703:../src/peripheral/uart.cpp **** }
 704:../src/peripheral/uart.cpp **** 
 705:../src/peripheral/uart.cpp **** 
 706:../src/peripheral/uart.cpp **** uint8_t* getPointerOfPeriodicMsg() {
 1845                             		.loc 10 706 0
 707:../src/peripheral/uart.cpp ****     return periodicMsg;
 708:../src/peripheral/uart.cpp **** }
 1846                             		.loc 10 708 0
 1847 0795 FB 12 B9 0B 00 00       		mov.L	#__ZL11periodicMsg, r1
 1848 079b 02                      		rts
 1849                             	.LFE1448:
 1851                             		.section	.text._ZNSt11_Deque_baseIsSaIsEED2Ev,"axG",@progbits,_ZNSt11_Deque_baseIsSaIsEED5Ev,comda
 1852                             		.weak	__ZNSt11_Deque_baseIsSaIsEED2Ev
 1854                             	__ZNSt11_Deque_baseIsSaIsEED2Ev:
 1855                             	.LFB1495:
 560:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****     ~_Deque_base()
 1856                             		.loc 7 560 0
 1857 0000 6E 7B                   		pushm	r7-r11
 1858                             	.LCFI10:
 560:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****     ~_Deque_base()
 1859                             		.loc 7 560 0
 1860 0002 EF 1B                   		mov.L	r1, r11
 1861                             	.LBB1225:
 563:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	{
 1862                             		.loc 7 563 0
 1863 0004 EC 11                   		mov.L	[r1], r1
 1864 0006 61 01                   		cmp	#0, r1
 1865 0008 20 23                   		beq	.L170
 566:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	  _M_deallocate_map(this->_M_impl._M_map, this->_M_impl._M_map_size);
 1866                             		.loc 7 566 0
 1867 000a ED BA 09                		mov.L	36[r11], r10
 1868 000d ED B7 05                		mov.L	20[r11], r7
 1869 0010 62 4A                   		add	#4, r10
 1870                             	.LBB1226:
 1871                             	.LBB1227:
 641:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	_M_deallocate_node(*__n);
 1872                             		.loc 7 641 0
 1873 0012 47 A7                   		cmp	r10, r7
 1874 0014 22 11                   		bgeu	.L172
 1875 0016 EF 00                   		.balign 8,3,3
 1876                             	.L174:
 1877                             	.LBB1228:
 1878                             	.LBB1229:
 1879                             	.LBB1230:
 1880                             		.loc 8 110 0
 1881 0018 FD 2A 71                		mov.L	[r7+], r1
 1882 001b 05 00 00 00             		bsr	__ZdlPv
 1883                             	.LBE1230:
 1884                             	.LBE1229:
 1885                             	.LBE1228:
 641:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	_M_deallocate_node(*__n);
 1886                             		.loc 7 641 0
 1887 001f 47 7A                   		cmp	r7, r10
 1888 0021 24 F7                   		bgtu	.L174
 1889 0023 EC B1                   		mov.L	[r11], r1
 1890                             		.balign 8,3,1
 1891                             	.L172:
 1892                             	.LBE1227:
 1893                             	.LBE1226:
 1894                             	.LBE1225:
 569:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
 1895                             		.loc 7 569 0
 1896 0025 6F 7B                   		popm	r7-r11
 1897                             	.LBB1234:
 1898                             	.LBB1231:
 1899                             	.LBB1232:
 1900                             	.LBB1233:
 1901                             		.loc 8 110 0
 1902 0027 04 00 00 00             		bra	__ZdlPv
 1903                             	.L170:
 1904                             	.LBE1233:
 1905                             	.LBE1232:
 1906                             	.LBE1231:
 1907                             	.LBE1234:
 569:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
 1908                             		.loc 7 569 0
 1909 002b 3F 7B 05                		rtsd	#20, r7-r11
 1910                             	.LFE1495:
 1912                             		.weak	__ZNSt11_Deque_baseIsSaIsEED1Ev
 1913                             		.set	__ZNSt11_Deque_baseIsSaIsEED1Ev,__ZNSt11_Deque_baseIsSaIsEED2Ev
 1914 002e EF 00                   		.section	.text._ZNSt11_Deque_baseIhSaIhEED2Ev,"axG",@progbits,_ZNSt11_Deque_baseIhSaIhEED5Ev,comda
 1915                             		.weak	__ZNSt11_Deque_baseIhSaIhEED2Ev
 1917                             	__ZNSt11_Deque_baseIhSaIhEED2Ev:
 1918                             	.LFB1528:
 560:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****     ~_Deque_base()
 1919                             		.loc 7 560 0
 1920 0000 6E 7B                   		pushm	r7-r11
 1921                             	.LCFI11:
 560:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****     ~_Deque_base()
 1922                             		.loc 7 560 0
 1923 0002 EF 1B                   		mov.L	r1, r11
 1924                             	.LBB1235:
 563:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	{
 1925                             		.loc 7 563 0
 1926 0004 EC 11                   		mov.L	[r1], r1
 1927 0006 61 01                   		cmp	#0, r1
 1928 0008 20 23                   		beq	.L176
 566:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	  _M_deallocate_map(this->_M_impl._M_map, this->_M_impl._M_map_size);
 1929                             		.loc 7 566 0
 1930 000a ED BA 09                		mov.L	36[r11], r10
 1931 000d ED B7 05                		mov.L	20[r11], r7
 1932 0010 62 4A                   		add	#4, r10
 1933                             	.LBB1236:
 1934                             	.LBB1237:
 641:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	_M_deallocate_node(*__n);
 1935                             		.loc 7 641 0
 1936 0012 47 A7                   		cmp	r10, r7
 1937 0014 22 11                   		bgeu	.L178
 1938 0016 EF 00                   		.balign 8,3,3
 1939                             	.L180:
 1940                             	.LBB1238:
 1941                             	.LBB1239:
 1942                             	.LBB1240:
 1943                             		.loc 8 110 0
 1944 0018 FD 2A 71                		mov.L	[r7+], r1
 1945 001b 05 00 00 00             		bsr	__ZdlPv
 1946                             	.LBE1240:
 1947                             	.LBE1239:
 1948                             	.LBE1238:
 641:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	_M_deallocate_node(*__n);
 1949                             		.loc 7 641 0
 1950 001f 47 7A                   		cmp	r7, r10
 1951 0021 24 F7                   		bgtu	.L180
 1952 0023 EC B1                   		mov.L	[r11], r1
 1953                             		.balign 8,3,1
 1954                             	.L178:
 1955                             	.LBE1237:
 1956                             	.LBE1236:
 1957                             	.LBE1235:
 569:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
 1958                             		.loc 7 569 0
 1959 0025 6F 7B                   		popm	r7-r11
 1960                             	.LBB1244:
 1961                             	.LBB1241:
 1962                             	.LBB1242:
 1963                             	.LBB1243:
 1964                             		.loc 8 110 0
 1965 0027 04 00 00 00             		bra	__ZdlPv
 1966                             	.L176:
 1967                             	.LBE1243:
 1968                             	.LBE1242:
 1969                             	.LBE1241:
 1970                             	.LBE1244:
 569:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
 1971                             		.loc 7 569 0
 1972 002b 3F 7B 05                		rtsd	#20, r7-r11
 1973                             	.LFE1528:
 1975                             		.weak	__ZNSt11_Deque_baseIhSaIhEED1Ev
 1976                             		.set	__ZNSt11_Deque_baseIhSaIhEED1Ev,__ZNSt11_Deque_baseIhSaIhEED2Ev
 1977                             		.global	_abort
 1978 002e EF 00                   		.section	.text._ZNSt11_Deque_baseIhSaIhEE17_M_initialize_mapEm,"axG",@progbits,_ZNSt11_Deque_baseI
 1979                             		.weak	__ZNSt11_Deque_baseIhSaIhEE17_M_initialize_mapEm
 1981                             	__ZNSt11_Deque_baseIhSaIhEE17_M_initialize_mapEm:
 1982                             	.LFB1572:
 581:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****     _M_initialize_map(size_t __num_elements)
 1983                             		.loc 7 581 0
 1984                             	.LVL120:
 1985 0000 6E 6A                   		pushm	r6-r10
 1986                             	.LCFI12:
 1987 0002 71 00 B8                		add	#0xffffffb8, r0
 1988                             	.LCFI13:
 581:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****     _M_initialize_map(size_t __num_elements)
 1989                             		.loc 7 581 0
 1990 0005 A3 89                   		mov.L	r1, 60[r0]
 1991 0007 A4 0A                   		mov.L	r2, 68[r0]
 1992 0009 EF 01                   		mov.L	r0, r1
 1993                             	.LVL121:
 1994 000b F9 02 06 00 00 00 00    		mov.L	#___gxx_personality_sj0, 24[r0]
 1995 0012 F9 02 07 00 00 00 00    		mov.L	#.LLSDA1572, 28[r0]
 1996 0019 A2 00                   		mov.L	r0, 32[r0]
 1997 001b F9 02 09 BE 00 00 00    		mov.L	#.L191, 36[r0]
 1998 0022 A2 80                   		mov.L	r0, 40[r0]
 1999 0024 05 00 00 00             		bsr	__Unwind_SjLj_Register
 2000                             	.LVL122:
 2001                             	.LBB1270:
 585:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
 2002                             		.loc 7 585 0
 2003 0028 ED 0E 11                		mov.L	68[r0], r14
 2004 002b 68 9E                   		shlr	#9, r14
 588:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       this->_M_impl._M_map = _M_allocate_map(this->_M_impl._M_map_size);
 2005                             		.loc 7 588 0
 2006 002d 71 E1 03                		add	#3, r14, r1
 2007 0030 61 81                   		cmp	#8, r1
 2008 0032 22 04                   		bgeu 1f
 2009 0034 66 81                   		mov #8, r1
 2010                             	1:
 587:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 					   size_t(__num_nodes + 2));
 2011                             		.loc 7 587 0
 2012 0036 AB 8F                   		mov.L	60[r0], r7
 2013 0038 A0 79                   		mov.L	r1, 4[r7]
 2014                             	.LBB1271:
 2015                             	.LBB1272:
 2016                             	.LBB1273:
 104:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\ext\new_allocator.h ****       }
 2017                             		.loc 8 104 0
 2018 003a F9 06 01 FF             		mov.L	#-1, 4[r0]
 2019 003e 6C 21                   		shll	#2, r1
 2020                             	.LBE1273:
 2021                             	.LBE1272:
 2022                             	.LBE1271:
 585:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
 2023                             		.loc 7 585 0
 2024 0040 62 1E                   		add	#1, r14
 2025 0042 E7 0E 0D                		mov.L	r14, 52[r0]
 2026                             	.LVL123:
 2027                             	.LBB1276:
 2028                             	.LBB1275:
 2029                             	.LBB1274:
 104:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\ext\new_allocator.h ****       }
 2030                             		.loc 8 104 0
 2031 0045 05 00 00 00             		bsr	__Znwm
 2032                             	.LVL124:
 2033                             	.LBE1274:
 2034                             	.LBE1275:
 2035                             	.LBE1276:
 597:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       _Tp** __nfinish = __nstart + __num_nodes;
 2036                             		.loc 7 597 0
 2037 0049 A8 7C                   		mov.L	4[r7], r4
 598:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
 2038                             		.loc 7 598 0
 2039 004b ED 0E 0D                		mov.L	52[r0], r14
 2040 004e 6C 2E                   		shll	#2, r14
 597:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       _Tp** __nfinish = __nstart + __num_nodes;
 2041                             		.loc 7 597 0
 2042 0050 ED 0A 0D                		mov.L	52[r0], r10
 2043 0053 43 A4                   		sub	r10, r4
 2044 0055 68 14                   		shlr	#1, r4
 2045 0057 6C 24                   		shll	#2, r4
 2046 0059 4B 14                   		add	r1, r4
 2047 005b A4 04                   		mov.L	r4, 64[r0]
 2048                             	.LVL125:
 589:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
 2049                             		.loc 7 589 0
 2050 005d E3 71                   		mov.L	r1, [r7]
 598:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
 2051                             		.loc 7 598 0
 2052 005f 4B 4E                   		add	r4, r14
 2053 0061 E7 0E 0E                		mov.L	r14, 56[r0]
 2054                             	.LVL126:
 2055                             	.LBB1277:
 2056                             	.LBB1278:
 626:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	    *__cur = this->_M_allocate_node();
 2057                             		.loc 7 626 0
 2058 0064 47 E4                   		cmp	r14, r4
 2059 0066 22 1E                   		bgeu	.L183
 2060 0068 A3 0C                   		mov.L	r4, 52[r0]
 2061                             	.LVL127:
 2062                             		.balign 8,3,4
 2063                             	.L184:
 2064                             	.LBB1279:
 2065                             	.LBB1280:
 2066                             	.LBB1281:
 104:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\ext\new_allocator.h ****       }
 2067                             		.loc 8 104 0
 2068 006a 3E 01 02                		mov.L	#2, 4[r0]
 2069 006d FB 1A 00 02             		mov.L	#0x200, r1
 2070 0071 05 00 00 00             		bsr	__Znwm
 2071                             	.LVL128:
 2072                             	.LBE1281:
 2073                             	.LBE1280:
 2074                             	.LBE1279:
 627:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	}
 2075                             		.loc 7 627 0
 2076 0075 ED 0A 0D                		mov.L	52[r0], r10
 2077 0078 FD 22 A1                		mov.L	r1, [r10+]
 2078 007b E7 0A 0D                		mov.L	r10, 52[r0]
 2079                             	.LVL129:
 626:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	    *__cur = this->_M_allocate_node();
 2080                             		.loc 7 626 0
 2081 007e AB 87                   		mov.L	56[r0], r7
 2082 0080 47 A7                   		cmp	r10, r7
 2083 0082 24 E8                   		bgtu	.L184
 2084                             	.LVL130:
 2085                             		.balign 8,3,1
 2086                             	.L183:
 2087                             	.LBE1278:
 2088                             	.LBE1277:
 2089                             	.LBB1289:
 2090                             	.LBB1290:
 236:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	_M_first = *__new_node;
 2091                             		.loc 7 236 0
 2092 0084 AB 8F                   		mov.L	60[r0], r7
 2093 0086 E5 07 10 05             		mov.L	64[r0], 20[r7]
 237:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	_M_last = _M_first + difference_type(_S_buffer_size());
 2094                             		.loc 7 237 0
 2095 008a ED 0A 10                		mov.L	64[r0], r10
 2096 008d EC AE                   		mov.L	[r10], r14
 2097                             	.LBE1290:
 2098                             	.LBE1289:
 611:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       this->_M_impl._M_start._M_cur = _M_impl._M_start._M_first;
 2099                             		.loc 7 611 0
 2100 008f AB 84                   		mov.L	56[r0], r4
 2101 0091 60 44                   		sub	#4, r4
 2102                             	.LBB1292:
 2103                             	.LBB1291:
 238:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       }
 2104                             		.loc 7 238 0
 2105 0093 72 E3 00 02             		add	#0x200, r14, r3
 237:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	_M_last = _M_first + difference_type(_S_buffer_size());
 2106                             		.loc 7 237 0
 2107 0097 E7 7E 03                		mov.L	r14, 12[r7]
 2108                             	.LVL131:
 238:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       }
 2109                             		.loc 7 238 0
 2110 009a A1 73                   		mov.L	r3, 16[r7]
 2111                             	.LVL132:
 2112                             	.LBE1291:
 2113                             	.LBE1292:
 2114                             	.LBB1293:
 2115                             	.LBB1294:
 236:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	_M_first = *__new_node;
 2116                             		.loc 7 236 0
 2117 009c A2 7C                   		mov.L	r4, 36[r7]
 237:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	_M_last = _M_first + difference_type(_S_buffer_size());
 2118                             		.loc 7 237 0
 2119 009e EC 44                   		mov.L	[r4], r4
 2120                             	.LBE1294:
 2121                             	.LBE1293:
 614:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 					% __deque_buf_size(sizeof(_Tp)));
 2122                             		.loc 7 614 0
 2123 00a0 AC 0B                   		mov.L	68[r0], r3
 2124 00a2 76 23 FF 01             		and #0x1ff, r3
 2125                             	.LBB1297:
 2126                             	.LBB1295:
 238:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       }
 2127                             		.loc 7 238 0
 2128 00a6 72 42 00 02             		add	#0x200, r4, r2
 2129                             	.LBE1295:
 2130                             	.LBE1297:
 614:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 					% __deque_buf_size(sizeof(_Tp)));
 2131                             		.loc 7 614 0
 2132 00aa 4B 43                   		add	r4, r3
 2133                             	.LBB1298:
 2134                             	.LBB1296:
 237:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	_M_last = _M_first + difference_type(_S_buffer_size());
 2135                             		.loc 7 237 0
 2136 00ac A1 FC                   		mov.L	r4, 28[r7]
 238:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       }
 2137                             		.loc 7 238 0
 2138 00ae A2 72                   		mov.L	r2, 32[r7]
 2139                             	.LBE1296:
 2140                             	.LBE1298:
 612:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
 2141                             		.loc 7 612 0
 2142 00b0 E7 7E 02                		mov.L	r14, 8[r7]
 2143                             	.LVL133:
 613:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 					+ __num_elements
 2144                             		.loc 7 613 0
 2145 00b3 A1 F3                   		mov.L	r3, 24[r7]
 2146 00b5 EF 01                   		mov.L	r0, r1
 2147 00b7 05 00 00 00             		bsr	__Unwind_SjLj_Unregister
 2148                             	.LVL134:
 2149                             	.LBE1270:
 616:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
 2150                             		.loc 7 616 0
 2151 00bb 3F 6A 17                		rtsd	#92, r6-r10
 2152                             	.LVL135:
 2153                             	.L191:
 2154 00be E5 00 01 0E             		mov.L	4[r0], 56[r0]
 2155 00c2 E5 00 02 11             		mov.L	8[r0], 68[r0]
 2156 00c6 AB 87                   		mov.L	56[r0], r7
 2157 00c8 61 07                   		cmp	#0, r7
 2158 00ca 20 12                   		beq	.L192
 2159 00cc 60 17                   		sub	#1, r7
 2160 00ce A3 87                   		mov.L	r7, 56[r0]
 2161 00d0 20 42                   		beq	.L193
 2162 00d2 60 17                   		sub	#1, r7
 2163 00d4 A3 87                   		mov.L	r7, 56[r0]
 2164 00d6 20 17                   		beq	.L194
 2165 00d8 05 00 00 00             		bsr	_abort
 2166                             	.LVL136:
 2167                             	.L192:
 2168                             	.LBB1304:
 602:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	{
 2169                             		.loc 7 602 0
 2170 00dc 3E 01 00                		mov.L	#0, 4[r0]
 2171 00df 05 00 00 00             		bsr	___cxa_end_catch
 2172                             	.LVL137:
 2173 00e3 AC 09                   		mov.L	68[r0], r1
 2174 00e5 F9 06 01 FF             		mov.L	#-1, 4[r0]
 2175 00e9 05 00 00 00             		bsr	__Unwind_SjLj_Resume
 2176                             	.LVL138:
 2177                             	.L194:
 2178                             	.LBB1299:
 2179                             	.LBB1287:
 629:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	{
 2180                             		.loc 7 629 0
 2181 00ed E5 00 0E 01             		mov.L	56[r0], 4[r0]
 2182 00f1 05 00 00 00             		bsr	___cxa_end_catch
 2183                             	.LVL139:
 2184                             	.LBE1287:
 2185                             	.LBE1299:
 602:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	{
 2186                             		.loc 7 602 0
 2187 00f5 AC 09                   		mov.L	68[r0], r1
 2188 00f7 05 00 00 00             		bsr	___cxa_begin_catch
 2189                             	.LVL140:
 2190                             	.LBB1300:
 2191                             	.LBB1301:
 2192                             	.LBB1302:
 2193                             		.loc 8 110 0
 2194 00fb ED 0A 0F                		mov.L	60[r0], r10
 2195 00fe EC A1                   		mov.L	[r10], r1
 2196 0100 05 00 00 00             		bsr	__ZdlPv
 2197                             	.LVL141:
 2198                             	.LBE1302:
 2199                             	.LBE1301:
 2200                             	.LBE1300:
 605:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	  this->_M_impl._M_map_size = 0;
 2201                             		.loc 7 605 0
 2202 0104 E1 0A 0E                		mov.L	56[r0], [r10]
 606:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	  __throw_exception_again;
 2203                             		.loc 7 606 0
 2204 0107 E5 0A 0E 01             		mov.L	56[r0], 4[r10]
 607:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	}
 2205                             		.loc 7 607 0
 2206 010b 3E 01 01                		mov.L	#1, 4[r0]
 2207 010e 05 00 00 00             		bsr	___cxa_rethrow
 2208                             	.LVL142:
 2209                             	.L193:
 2210                             	.LBB1303:
 2211                             	.LBB1288:
 629:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	{
 2212                             		.loc 7 629 0
 2213 0112 AC 09                   		mov.L	68[r0], r1
 2214 0114 05 00 00 00             		bsr	___cxa_begin_catch
 2215                             	.LVL143:
 2216                             	.LBB1282:
 2217                             	.LBB1283:
 641:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	_M_deallocate_node(*__n);
 2218                             		.loc 7 641 0
 2219 0118 AC 07                   		mov.L	64[r0], r7
 2220 011a ED 0A 0D                		mov.L	52[r0], r10
 2221 011d 47 A7                   		cmp	r10, r7
 2222 011f 22 14                   		bgeu	.L188
 2223                             	.LVL144:
 2224                             		.balign 8,3,1
 2225                             	.L195:
 2226                             	.LBB1284:
 2227                             	.LBB1285:
 2228                             	.LBB1286:
 2229                             		.loc 8 110 0
 2230 0121 AC 07                   		mov.L	64[r0], r7
 2231 0123 FD 2A 71                		mov.L	[r7+], r1
 2232 0126 A4 07                   		mov.L	r7, 64[r0]
 2233                             	.LVL145:
 2234 0128 05 00 00 00             		bsr	__ZdlPv
 2235                             	.LVL146:
 2236                             	.LBE1286:
 2237                             	.LBE1285:
 2238                             	.LBE1284:
 641:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	_M_deallocate_node(*__n);
 2239                             		.loc 7 641 0
 2240 012c ED 0A 0D                		mov.L	52[r0], r10
 2241 012f 47 A7                   		cmp	r10, r7
 2242 0131 23 F0                   		bltu	.L195
 2243                             	.LVL147:
 2244                             		.balign 8,3,4
 2245                             	.L188:
 2246                             	.LBE1283:
 2247                             	.LBE1282:
 632:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	}
 2248                             		.loc 7 632 0
 2249 0133 3E 01 03                		mov.L	#3, 4[r0]
 2250 0136 05 00 00 00             		bsr	___cxa_rethrow
 2251                             	.LVL148:
 2252                             	.LBE1288:
 2253                             	.LBE1303:
 2254                             	.LBE1304:
 2255                             	.LFE1572:
 2256                             		.section	.gcc_except_table._ZNSt11_Deque_baseIhSaIhEE17_M_initialize_mapEm,"awG",@progbits,_ZNSt11
 2257                             		.balign 4
 2258                             	.LLSDA1572:
 2259 0000 FF                      		.byte	0xff
 2260 0001 00                      		.byte	0
 2261 0002 11                      		.uleb128 .LLSDATT1572-.LLSDATTD1572
 2262                             	.LLSDATTD1572:
 2263 0003 01                      		.byte	0x1
 2264 0004 06                      		.uleb128 .LLSDACSE1572-.LLSDACSB1572
 2265                             	.LLSDACSB1572:
 2266 0005 00                      		.uleb128 0
 2267 0006 00                      		.uleb128 0
 2268 0007 01                      		.uleb128 0x1
 2269 0008 01                      		.uleb128 0x1
 2270 0009 02                      		.uleb128 0x2
 2271 000a 03                      		.uleb128 0x3
 2272                             	.LLSDACSE1572:
 2273 000b 01                      		.byte	0x1
 2274 000c 00                      		.byte	0
 2275 000d 00                      		.byte	0
 2276 000e 7D                      		.byte	0x7d
 2277 000f 00                      		.balign 4
 2278 0010 00 00 00 00             		.long	0
 2279                             	.LLSDATT1572:
 2280                             		.section	.text._ZNSt11_Deque_baseIhSaIhEE17_M_initialize_mapEm,"axG",@progbits,_ZNSt11_Deque_baseI
 2282 013a 74 10 01 00 00 00       		.section	.text._ZNSt11_Deque_baseIhSaIhEEC2EOS1_,"axG",@progbits,_ZNSt11_Deque_baseIhSaIhEEC5EOS1_
 2283                             		.weak	__ZNSt11_Deque_baseIhSaIhEEC2EOS1_
 2285                             	__ZNSt11_Deque_baseIhSaIhEEC2EOS1_:
 2286                             	.LFB1578:
 468:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       : _M_impl(std::move(__x._M_get_Tp_allocator()))
 2287                             		.loc 7 468 0
 2288                             	.LVL149:
 2289 0000 6E 7A                   		pushm	r7-r10
 2290                             	.LCFI14:
 468:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       : _M_impl(std::move(__x._M_get_Tp_allocator()))
 2291                             		.loc 7 468 0
 2292 0002 EF 17                   		mov.L	r1, r7
 2293 0004 EF 2A                   		mov.L	r2, r10
 2294                             	.LVL150:
 2295                             	.LBB1305:
 2296                             	.LBB1306:
 2297                             	.LBB1307:
 513:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	{ }
 2298                             		.loc 7 513 0
 2299 0006 F8 16 00                		mov.L	#0, [r1]
 2300 0009 3E 11 00                		mov.L	#0, 4[r1]
 2301                             	.LVL151:
 2302                             	.LBB1308:
 2303                             	.LBB1309:
 133:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
 2304                             		.loc 7 133 0
 2305 000c 3E 12 00                		mov.L	#0, 8[r1]
 2306 000f 3E 13 00                		mov.L	#0, 12[r1]
 2307 0012 3E 14 00                		mov.L	#0, 16[r1]
 2308 0015 3E 15 00                		mov.L	#0, 20[r1]
 2309                             	.LVL152:
 2310                             	.LBE1309:
 2311                             	.LBE1308:
 2312                             	.LBB1310:
 2313                             	.LBB1311:
 2314 0018 3E 16 00                		mov.L	#0, 24[r1]
 2315 001b 3E 17 00                		mov.L	#0, 28[r1]
 2316 001e 3E 18 00                		mov.L	#0, 32[r1]
 2317 0021 3E 19 00                		mov.L	#0, 36[r1]
 2318                             	.LBE1311:
 2319                             	.LBE1310:
 2320                             	.LBE1307:
 2321                             	.LBE1306:
 471:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	if (__x._M_impl._M_map)
 2322                             		.loc 7 471 0
 2323 0024 66 02                   		mov.L	#0, r2
 2324                             	.LVL153:
 2325 0026 05 00 00 00             		bsr	__ZNSt11_Deque_baseIhSaIhEE17_M_initialize_mapEm
 2326                             	.LVL154:
 472:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	  {
 2327                             		.loc 7 472 0
 2328 002a EC AE                   		mov.L	[r10], r14
 2329 002c 61 0E                   		cmp	#0, r14
 2330 002e 20 54                   		beq	.L198
 2331                             	.LVL155:
 2332                             	.LBB1312:
 2333                             	.LBB1313:
 2334                             	.LBB1314:
 2335                             	.LBB1315:
 137:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
 2336                             		.loc 7 137 0
 2337 0030 ED 7F 02                		mov.L	8[r7], r15
 2338                             	.LVL156:
 2339 0033 A8 FD                   		mov.L	12[r7], r5
 2340                             	.LVL157:
 2341 0035 A9 74                   		mov.L	16[r7], r4
 2342                             	.LVL158:
 2343 0037 ED 7E 05                		mov.L	20[r7], r14
 2344                             	.LVL159:
 2345                             	.LBE1315:
 2346                             	.LBE1314:
 2347                             		.file 12 "c:\\progra~2\\gccfor~2.201\\rx-elf\\rx-elf\\rx-elf\\include\\c++\\4.8.0.201602-gnurx\\bi
   1:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\move.h **** // Move, forward and identity for C++0x + swap -*- C++ -*-
   2:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\move.h **** 
   3:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\move.h **** // Copyright (C) 2007-2013 Free Software Foundation, Inc.
   4:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\move.h **** //
   5:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\move.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\move.h **** // software; you can redistribute it and/or modify it under the
   7:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\move.h **** // terms of the GNU General Public License as published by the
   8:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\move.h **** // Free Software Foundation; either version 3, or (at your option)
   9:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\move.h **** // any later version.
  10:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\move.h **** 
  11:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\move.h **** // This library is distributed in the hope that it will be useful,
  12:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\move.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\move.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\move.h **** // GNU General Public License for more details.
  15:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\move.h **** 
  16:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\move.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\move.h **** // permissions described in the GCC Runtime Library Exception, version
  18:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\move.h **** // 3.1, as published by the Free Software Foundation.
  19:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\move.h **** 
  20:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\move.h **** // You should have received a copy of the GNU General Public License and
  21:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\move.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\move.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\move.h **** // <http://www.gnu.org/licenses/>.
  24:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\move.h **** 
  25:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\move.h **** /** @file bits/move.h
  26:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\move.h ****  *  This is an internal header file, included by other library headers.
  27:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\move.h ****  *  Do not attempt to use it directly. @headername{utility}
  28:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\move.h ****  */
  29:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\move.h **** 
  30:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\move.h **** #ifndef _MOVE_H
  31:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\move.h **** #define _MOVE_H 1
  32:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\move.h **** 
  33:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\move.h **** #include <bits/c++config.h>
  34:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\move.h **** #include <bits/concept_check.h>
  35:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\move.h **** 
  36:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\move.h **** namespace std _GLIBCXX_VISIBILITY(default)
  37:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\move.h **** {
  38:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\move.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  39:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\move.h **** 
  40:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\move.h ****   // Used, in C++03 mode too, by allocators, etc.
  41:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\move.h ****   /**
  42:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\move.h ****    *  @brief Same as C++11 std::addressof
  43:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\move.h ****    *  @ingroup utilities
  44:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\move.h ****    */
  45:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\move.h ****   template<typename _Tp>
  46:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\move.h ****     inline _Tp*
  47:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\move.h ****     __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
  48:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\move.h ****     {
  49:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\move.h ****       return reinterpret_cast<_Tp*>
  50:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\move.h **** 	(&const_cast<char&>(reinterpret_cast<const volatile char&>(__r)));
  51:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\move.h ****     }
  52:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\move.h **** 
  53:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\move.h **** _GLIBCXX_END_NAMESPACE_VERSION
  54:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\move.h **** } // namespace
  55:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\move.h **** 
  56:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\move.h **** #if __cplusplus >= 201103L
  57:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\move.h **** #include <type_traits> // Brings in std::declval too.
  58:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\move.h **** 
  59:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\move.h **** namespace std _GLIBCXX_VISIBILITY(default)
  60:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\move.h **** {
  61:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\move.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  62:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\move.h **** 
  63:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\move.h ****   /**
  64:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\move.h ****    *  @addtogroup utilities
  65:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\move.h ****    *  @{
  66:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\move.h ****    */
  67:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\move.h **** 
  68:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\move.h ****   /**
  69:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\move.h ****    *  @brief  Forward an lvalue.
  70:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\move.h ****    *  @return The parameter cast to the specified type.
  71:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\move.h ****    *
  72:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\move.h ****    *  This function is used to implement "perfect forwarding".
  73:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\move.h ****    */
  74:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\move.h ****   template<typename _Tp>
  75:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\move.h ****     constexpr _Tp&&
  76:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\move.h ****     forward(typename std::remove_reference<_Tp>::type& __t) noexcept
  77:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\move.h ****     { return static_cast<_Tp&&>(__t); }
  78:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\move.h **** 
  79:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\move.h ****   /**
  80:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\move.h ****    *  @brief  Forward an rvalue.
  81:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\move.h ****    *  @return The parameter cast to the specified type.
  82:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\move.h ****    *
  83:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\move.h ****    *  This function is used to implement "perfect forwarding".
  84:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\move.h ****    */
  85:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\move.h ****   template<typename _Tp>
  86:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\move.h ****     constexpr _Tp&&
  87:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\move.h ****     forward(typename std::remove_reference<_Tp>::type&& __t) noexcept
  88:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\move.h ****     {
  89:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\move.h ****       static_assert(!std::is_lvalue_reference<_Tp>::value, "template argument"
  90:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\move.h **** 		    " substituting _Tp is an lvalue reference type");
  91:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\move.h ****       return static_cast<_Tp&&>(__t);
  92:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\move.h ****     }
  93:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\move.h **** 
  94:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\move.h ****   /**
  95:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\move.h ****    *  @brief  Convert a value to an rvalue.
  96:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\move.h ****    *  @param  __t  A thing of arbitrary type.
  97:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\move.h ****    *  @return The parameter cast to an rvalue-reference to allow moving it.
  98:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\move.h ****   */
  99:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\move.h ****   template<typename _Tp>
 100:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\move.h ****     constexpr typename std::remove_reference<_Tp>::type&&
 101:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\move.h ****     move(_Tp&& __t) noexcept
 102:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\move.h ****     { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 103:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\move.h **** 
 104:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\move.h **** 
 105:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\move.h ****   template<typename _Tp>
 106:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\move.h ****     struct __move_if_noexcept_cond
 107:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\move.h ****     : public __and_<__not_<is_nothrow_move_constructible<_Tp>>,
 108:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\move.h ****                     is_copy_constructible<_Tp>>::type { };
 109:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\move.h **** 
 110:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\move.h ****   /**
 111:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\move.h ****    *  @brief  Conditionally convert a value to an rvalue.
 112:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\move.h ****    *  @param  __x  A thing of arbitrary type.
 113:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\move.h ****    *  @return The parameter, possibly cast to an rvalue-reference.
 114:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\move.h ****    *
 115:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\move.h ****    *  Same as std::move unless the type's move constructor could throw and the
 116:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\move.h ****    *  type is copyable, in which case an lvalue-reference is returned instead.
 117:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\move.h ****    */
 118:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\move.h ****   template<typename _Tp>
 119:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\move.h ****     inline constexpr typename
 120:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\move.h ****     conditional<__move_if_noexcept_cond<_Tp>::value, const _Tp&, _Tp&&>::type
 121:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\move.h ****     move_if_noexcept(_Tp& __x) noexcept
 122:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\move.h ****     { return std::move(__x); }
 123:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\move.h **** 
 124:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\move.h ****   // declval, from type_traits.
 125:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\move.h **** 
 126:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\move.h ****   /**
 127:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\move.h ****    *  @brief Returns the actual address of the object or function
 128:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\move.h ****    *         referenced by r, even in the presence of an overloaded
 129:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\move.h ****    *         operator&.
 130:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\move.h ****    *  @param  __r  Reference to an object or function.
 131:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\move.h ****    *  @return   The actual address.
 132:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\move.h ****   */
 133:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\move.h ****   template<typename _Tp>
 134:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\move.h ****     inline _Tp*
 135:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\move.h ****     addressof(_Tp& __r) noexcept
 136:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\move.h ****     { return std::__addressof(__r); }
 137:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\move.h **** 
 138:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\move.h ****   /// @} group utilities
 139:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\move.h **** _GLIBCXX_END_NAMESPACE_VERSION
 140:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\move.h **** } // namespace
 141:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\move.h **** 
 142:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\move.h **** #define _GLIBCXX_MOVE(__val) std::move(__val)
 143:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\move.h **** #define _GLIBCXX_FORWARD(_Tp, __val) std::forward<_Tp>(__val)
 144:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\move.h **** #else
 145:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\move.h **** #define _GLIBCXX_MOVE(__val) (__val)
 146:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\move.h **** #define _GLIBCXX_FORWARD(_Tp, __val) (__val)
 147:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\move.h **** #endif
 148:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\move.h **** 
 149:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\move.h **** namespace std _GLIBCXX_VISIBILITY(default)
 150:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\move.h **** {
 151:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\move.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
 152:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\move.h **** 
 153:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\move.h ****   /**
 154:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\move.h ****    *  @addtogroup utilities
 155:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\move.h ****    *  @{
 156:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\move.h ****    */
 157:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\move.h **** 
 158:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\move.h ****   /**
 159:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\move.h ****    *  @brief Swaps two values.
 160:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\move.h ****    *  @param  __a  A thing of arbitrary type.
 161:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\move.h ****    *  @param  __b  Another thing of arbitrary type.
 162:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\move.h ****    *  @return   Nothing.
 163:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\move.h ****   */
 164:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\move.h ****   template<typename _Tp>
 165:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\move.h ****     inline void
 166:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\move.h ****     swap(_Tp& __a, _Tp& __b)
 167:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\move.h **** #if __cplusplus >= 201103L
 168:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\move.h ****     noexcept(__and_<is_nothrow_move_constructible<_Tp>,
 169:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\move.h **** 	            is_nothrow_move_assignable<_Tp>>::value)
 170:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\move.h **** #endif
 171:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\move.h ****     {
 172:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\move.h ****       // concept requirements
 173:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\move.h ****       __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
 174:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\move.h **** 
 175:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\move.h ****       _Tp __tmp = _GLIBCXX_MOVE(__a);
 176:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\move.h ****       __a = _GLIBCXX_MOVE(__b);
 2348                             		.loc 12 176 0
 2349 003a 71 71 08                		add	#8, r7, r1
 2350                             	.LVL160:
 2351 003d 71 A2 08                		add	#8, r10, r2
 2352                             	.LVL161:
 2353 0040 75 43 10                		mov.L	#16, r3
 2354 0043 7F 8F                   		smovf
 2355                             	.LVL162:
 177:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\move.h ****       __b = _GLIBCXX_MOVE(__tmp);
 2356                             		.loc 12 177 0
 2357 0045 E7 AF 02                		mov.L	r15, 8[r10]
 2358 0048 E7 A5 03                		mov.L	r5, 12[r10]
 2359 004b E7 A4 04                		mov.L	r4, 16[r10]
 2360 004e E7 AE 05                		mov.L	r14, 20[r10]
 2361                             	.LVL163:
 2362                             	.LBE1313:
 2363                             	.LBE1312:
 2364                             	.LBB1316:
 2365                             	.LBB1317:
 2366                             	.LBB1318:
 2367                             	.LBB1319:
 137:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
 2368                             		.loc 7 137 0
 2369 0051 ED 7F 06                		mov.L	24[r7], r15
 2370                             	.LVL164:
 2371 0054 A9 FD                   		mov.L	28[r7], r5
 2372                             	.LVL165:
 2373 0056 AA 74                   		mov.L	32[r7], r4
 2374                             	.LVL166:
 2375 0058 ED 7E 09                		mov.L	36[r7], r14
 2376                             	.LVL167:
 2377                             	.LBE1319:
 2378                             	.LBE1318:
 176:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\move.h ****       __b = _GLIBCXX_MOVE(__tmp);
 2379                             		.loc 12 176 0
 2380 005b 71 71 18                		add	#24, r7, r1
 2381                             	.LVL168:
 2382 005e 71 A2 18                		add	#24, r10, r2
 2383                             	.LVL169:
 2384 0061 75 43 10                		mov.L	#16, r3
 2385 0064 7F 8F                   		smovf
 2386                             	.LVL170:
 2387                             		.loc 12 177 0
 2388 0066 E7 AF 06                		mov.L	r15, 24[r10]
 2389 0069 E7 A5 07                		mov.L	r5, 28[r10]
 2390 006c E7 A4 08                		mov.L	r4, 32[r10]
 2391 006f E7 AE 09                		mov.L	r14, 36[r10]
 2392                             	.LVL171:
 2393                             	.LBE1317:
 2394                             	.LBE1316:
 2395                             	.LBB1320:
 2396                             	.LBB1321:
 175:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\move.h ****       __a = _GLIBCXX_MOVE(__b);
 2397                             		.loc 12 175 0
 2398 0072 EC 74                   		mov.L	[r7], r4
 2399                             	.LVL172:
 176:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\move.h ****       __b = _GLIBCXX_MOVE(__tmp);
 2400                             		.loc 12 176 0
 2401 0074 E0 A7                   		mov.L	[r10], [r7]
 2402                             	.LVL173:
 2403                             	.LBE1321:
 2404                             	.LBE1320:
 2405                             	.LBB1323:
 2406                             	.LBB1324:
 175:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\move.h ****       __a = _GLIBCXX_MOVE(__b);
 2407                             		.loc 12 175 0
 2408 0076 ED 7E 01                		mov.L	4[r7], r14
 2409                             	.LVL174:
 2410                             	.LBE1324:
 2411                             	.LBE1323:
 2412                             	.LBB1326:
 2413                             	.LBB1322:
 2414                             		.loc 12 177 0
 2415 0079 E3 A4                   		mov.L	r4, [r10]
 2416                             	.LVL175:
 2417                             	.LBE1322:
 2418                             	.LBE1326:
 2419                             	.LBB1327:
 2420                             	.LBB1325:
 176:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\move.h ****       __b = _GLIBCXX_MOVE(__tmp);
 2421                             		.loc 12 176 0
 2422 007b E5 A7 01 01             		mov.L	4[r10], 4[r7]
 2423                             	.LVL176:
 2424                             		.loc 12 177 0
 2425 007f E7 AE 01                		mov.L	r14, 4[r10]
 2426                             	.LVL177:
 2427                             		.balign 8,3,2
 2428                             	.L198:
 2429                             	.LBE1325:
 2430                             	.LBE1327:
 2431                             	.LBE1305:
 479:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** #endif
 2432                             		.loc 7 479 0
 2433 0082 3F 7A 04                		rtsd	#16, r7-r10
 2434                             	.LFE1578:
 2436                             		.weak	__ZNSt11_Deque_baseIhSaIhEEC1EOS1_
 2437                             		.set	__ZNSt11_Deque_baseIhSaIhEEC1EOS1_,__ZNSt11_Deque_baseIhSaIhEEC2EOS1_
 2438 0085 FC 13 00                		.section	.text._ZNSt5dequeIsSaIsEE17_M_reallocate_mapEmb,"axG",@progbits,_ZNSt5dequeIsSaIsEE17_M_r
 2439                             		.weak	__ZNSt5dequeIsSaIsEE17_M_reallocate_mapEmb
 2441                             	__ZNSt5dequeIsSaIsEE17_M_reallocate_mapEmb:
 2442                             	.LFB1611:
 526:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****     }
 527:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 
 528:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****   template <typename _Tp, typename _Alloc>
 529:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****     template <typename _InputIterator>
 530:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****       void
 531:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****       deque<_Tp, _Alloc>::
 532:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****       _M_range_insert_aux(iterator __pos,
 533:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****                           _InputIterator __first, _InputIterator __last,
 534:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****                           std::input_iterator_tag)
 535:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****       { std::copy(__first, __last, std::inserter(*this, __pos)); }
 536:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 
 537:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****   template <typename _Tp, typename _Alloc>
 538:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****     template <typename _ForwardIterator>
 539:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****       void
 540:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****       deque<_Tp, _Alloc>::
 541:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****       _M_range_insert_aux(iterator __pos,
 542:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****                           _ForwardIterator __first, _ForwardIterator __last,
 543:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****                           std::forward_iterator_tag)
 544:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****       {
 545:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****         const size_type __n = std::distance(__first, __last);
 546:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****         if (__pos._M_cur == this->_M_impl._M_start._M_cur)
 547:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	  {
 548:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	    iterator __new_start = _M_reserve_elements_at_front(__n);
 549:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	    __try
 550:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	      {
 551:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 		std::__uninitialized_copy_a(__first, __last, __new_start,
 552:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 					    _M_get_Tp_allocator());
 553:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 		this->_M_impl._M_start = __new_start;
 554:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	      }
 555:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	    __catch(...)
 556:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	      {
 557:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 		_M_destroy_nodes(__new_start._M_node,
 558:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 				 this->_M_impl._M_start._M_node);
 559:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 		__throw_exception_again;
 560:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	      }
 561:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	  }
 562:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****         else if (__pos._M_cur == this->_M_impl._M_finish._M_cur)
 563:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	  {
 564:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	    iterator __new_finish = _M_reserve_elements_at_back(__n);
 565:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	    __try
 566:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	      {
 567:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 		std::__uninitialized_copy_a(__first, __last,
 568:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 					    this->_M_impl._M_finish,
 569:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 					    _M_get_Tp_allocator());
 570:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 		this->_M_impl._M_finish = __new_finish;
 571:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	      }
 572:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	    __catch(...)
 573:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	      {
 574:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 		_M_destroy_nodes(this->_M_impl._M_finish._M_node + 1,
 575:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 				 __new_finish._M_node + 1);
 576:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 		__throw_exception_again;
 577:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	      }
 578:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	  }
 579:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****         else
 580:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****           _M_insert_aux(__pos, __first, __last, __n);
 581:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****       }
 582:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 
 583:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****   template<typename _Tp, typename _Alloc>
 584:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** #if __cplusplus >= 201103L
 585:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****     template<typename... _Args>
 586:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****       typename deque<_Tp, _Alloc>::iterator
 587:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****       deque<_Tp, _Alloc>::
 588:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****       _M_insert_aux(iterator __pos, _Args&&... __args)
 589:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****       {
 590:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	value_type __x_copy(std::forward<_Args>(__args)...); // XXX copy
 591:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** #else
 592:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****     typename deque<_Tp, _Alloc>::iterator
 593:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****       deque<_Tp, _Alloc>::
 594:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****       _M_insert_aux(iterator __pos, const value_type& __x)
 595:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****       {
 596:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	value_type __x_copy = __x; // XXX copy
 597:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** #endif
 598:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	difference_type __index = __pos - this->_M_impl._M_start;
 599:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	if (static_cast<size_type>(__index) < size() / 2)
 600:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	  {
 601:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	    push_front(_GLIBCXX_MOVE(front()));
 602:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	    iterator __front1 = this->_M_impl._M_start;
 603:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	    ++__front1;
 604:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	    iterator __front2 = __front1;
 605:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	    ++__front2;
 606:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	    __pos = this->_M_impl._M_start + __index;
 607:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	    iterator __pos1 = __pos;
 608:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	    ++__pos1;
 609:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	    _GLIBCXX_MOVE3(__front2, __pos1, __front1);
 610:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	  }
 611:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	else
 612:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	  {
 613:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	    push_back(_GLIBCXX_MOVE(back()));
 614:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	    iterator __back1 = this->_M_impl._M_finish;
 615:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	    --__back1;
 616:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	    iterator __back2 = __back1;
 617:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	    --__back2;
 618:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	    __pos = this->_M_impl._M_start + __index;
 619:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	    _GLIBCXX_MOVE_BACKWARD3(__pos, __back2, __back1);
 620:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	  }
 621:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	*__pos = _GLIBCXX_MOVE(__x_copy);
 622:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	return __pos;
 623:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****       }
 624:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 
 625:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****   template <typename _Tp, typename _Alloc>
 626:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****     void
 627:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****     deque<_Tp, _Alloc>::
 628:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****     _M_insert_aux(iterator __pos, size_type __n, const value_type& __x)
 629:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****     {
 630:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****       const difference_type __elems_before = __pos - this->_M_impl._M_start;
 631:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****       const size_type __length = this->size();
 632:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****       value_type __x_copy = __x;
 633:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****       if (__elems_before < difference_type(__length / 2))
 634:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	{
 635:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	  iterator __new_start = _M_reserve_elements_at_front(__n);
 636:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	  iterator __old_start = this->_M_impl._M_start;
 637:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	  __pos = this->_M_impl._M_start + __elems_before;
 638:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	  __try
 639:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	    {
 640:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	      if (__elems_before >= difference_type(__n))
 641:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 		{
 642:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 		  iterator __start_n = (this->_M_impl._M_start
 643:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 					+ difference_type(__n));
 644:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 		  std::__uninitialized_move_a(this->_M_impl._M_start,
 645:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 					      __start_n, __new_start,
 646:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 					      _M_get_Tp_allocator());
 647:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 		  this->_M_impl._M_start = __new_start;
 648:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 		  _GLIBCXX_MOVE3(__start_n, __pos, __old_start);
 649:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 		  std::fill(__pos - difference_type(__n), __pos, __x_copy);
 650:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 		}
 651:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	      else
 652:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 		{
 653:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 		  std::__uninitialized_move_fill(this->_M_impl._M_start,
 654:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 						 __pos, __new_start,
 655:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 						 this->_M_impl._M_start,
 656:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 						 __x_copy,
 657:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 						 _M_get_Tp_allocator());
 658:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 		  this->_M_impl._M_start = __new_start;
 659:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 		  std::fill(__old_start, __pos, __x_copy);
 660:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 		}
 661:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	    }
 662:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	  __catch(...)
 663:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	    {
 664:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	      _M_destroy_nodes(__new_start._M_node,
 665:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 			       this->_M_impl._M_start._M_node);
 666:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	      __throw_exception_again;
 667:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	    }
 668:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	}
 669:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****       else
 670:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	{
 671:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	  iterator __new_finish = _M_reserve_elements_at_back(__n);
 672:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	  iterator __old_finish = this->_M_impl._M_finish;
 673:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	  const difference_type __elems_after =
 674:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	    difference_type(__length) - __elems_before;
 675:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	  __pos = this->_M_impl._M_finish - __elems_after;
 676:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	  __try
 677:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	    {
 678:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	      if (__elems_after > difference_type(__n))
 679:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 		{
 680:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 		  iterator __finish_n = (this->_M_impl._M_finish
 681:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 					 - difference_type(__n));
 682:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 		  std::__uninitialized_move_a(__finish_n,
 683:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 					      this->_M_impl._M_finish,
 684:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 					      this->_M_impl._M_finish,
 685:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 					      _M_get_Tp_allocator());
 686:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 		  this->_M_impl._M_finish = __new_finish;
 687:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 		  _GLIBCXX_MOVE_BACKWARD3(__pos, __finish_n, __old_finish);
 688:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 		  std::fill(__pos, __pos + difference_type(__n), __x_copy);
 689:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 		}
 690:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	      else
 691:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 		{
 692:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 		  std::__uninitialized_fill_move(this->_M_impl._M_finish,
 693:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 						 __pos + difference_type(__n),
 694:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 						 __x_copy, __pos,
 695:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 						 this->_M_impl._M_finish,
 696:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 						 _M_get_Tp_allocator());
 697:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 		  this->_M_impl._M_finish = __new_finish;
 698:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 		  std::fill(__pos, __old_finish, __x_copy);
 699:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 		}
 700:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	    }
 701:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	  __catch(...)
 702:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	    {
 703:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	      _M_destroy_nodes(this->_M_impl._M_finish._M_node + 1,
 704:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 			       __new_finish._M_node + 1);
 705:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	      __throw_exception_again;
 706:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	    }
 707:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	}
 708:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****     }
 709:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 
 710:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****   template <typename _Tp, typename _Alloc>
 711:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****     template <typename _ForwardIterator>
 712:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****       void
 713:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****       deque<_Tp, _Alloc>::
 714:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****       _M_insert_aux(iterator __pos,
 715:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****                     _ForwardIterator __first, _ForwardIterator __last,
 716:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****                     size_type __n)
 717:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****       {
 718:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****         const difference_type __elemsbefore = __pos - this->_M_impl._M_start;
 719:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****         const size_type __length = size();
 720:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****         if (static_cast<size_type>(__elemsbefore) < __length / 2)
 721:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	  {
 722:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	    iterator __new_start = _M_reserve_elements_at_front(__n);
 723:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	    iterator __old_start = this->_M_impl._M_start;
 724:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	    __pos = this->_M_impl._M_start + __elemsbefore;
 725:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	    __try
 726:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	      {
 727:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 		if (__elemsbefore >= difference_type(__n))
 728:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 		  {
 729:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 		    iterator __start_n = (this->_M_impl._M_start
 730:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 					  + difference_type(__n));
 731:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 		    std::__uninitialized_move_a(this->_M_impl._M_start,
 732:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 						__start_n, __new_start,
 733:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 						_M_get_Tp_allocator());
 734:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 		    this->_M_impl._M_start = __new_start;
 735:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 		    _GLIBCXX_MOVE3(__start_n, __pos, __old_start);
 736:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 		    std::copy(__first, __last, __pos - difference_type(__n));
 737:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 		  }
 738:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 		else
 739:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 		  {
 740:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 		    _ForwardIterator __mid = __first;
 741:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 		    std::advance(__mid, difference_type(__n) - __elemsbefore);
 742:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 		    std::__uninitialized_move_copy(this->_M_impl._M_start,
 743:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 						   __pos, __first, __mid,
 744:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 						   __new_start,
 745:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 						   _M_get_Tp_allocator());
 746:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 		    this->_M_impl._M_start = __new_start;
 747:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 		    std::copy(__mid, __last, __old_start);
 748:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 		  }
 749:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	      }
 750:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	    __catch(...)
 751:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	      {
 752:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 		_M_destroy_nodes(__new_start._M_node,
 753:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 				 this->_M_impl._M_start._M_node);
 754:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 		__throw_exception_again;
 755:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	      }
 756:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	  }
 757:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****         else
 758:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****         {
 759:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****           iterator __new_finish = _M_reserve_elements_at_back(__n);
 760:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****           iterator __old_finish = this->_M_impl._M_finish;
 761:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****           const difference_type __elemsafter =
 762:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****             difference_type(__length) - __elemsbefore;
 763:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****           __pos = this->_M_impl._M_finish - __elemsafter;
 764:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****           __try
 765:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****             {
 766:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****               if (__elemsafter > difference_type(__n))
 767:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 		{
 768:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 		  iterator __finish_n = (this->_M_impl._M_finish
 769:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 					 - difference_type(__n));
 770:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 		  std::__uninitialized_move_a(__finish_n,
 771:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 					      this->_M_impl._M_finish,
 772:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 					      this->_M_impl._M_finish,
 773:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 					      _M_get_Tp_allocator());
 774:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 		  this->_M_impl._M_finish = __new_finish;
 775:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 		  _GLIBCXX_MOVE_BACKWARD3(__pos, __finish_n, __old_finish);
 776:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 		  std::copy(__first, __last, __pos);
 777:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 		}
 778:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****               else
 779:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 		{
 780:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 		  _ForwardIterator __mid = __first;
 781:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 		  std::advance(__mid, __elemsafter);
 782:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 		  std::__uninitialized_copy_move(__mid, __last, __pos,
 783:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 						 this->_M_impl._M_finish,
 784:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 						 this->_M_impl._M_finish,
 785:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 						 _M_get_Tp_allocator());
 786:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 		  this->_M_impl._M_finish = __new_finish;
 787:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 		  std::copy(__first, __mid, __pos);
 788:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 		}
 789:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****             }
 790:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****           __catch(...)
 791:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****             {
 792:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****               _M_destroy_nodes(this->_M_impl._M_finish._M_node + 1,
 793:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 			       __new_finish._M_node + 1);
 794:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****               __throw_exception_again;
 795:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****             }
 796:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****         }
 797:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****       }
 798:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 
 799:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****    template<typename _Tp, typename _Alloc>
 800:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****      void
 801:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****      deque<_Tp, _Alloc>::
 802:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****      _M_destroy_data_aux(iterator __first, iterator __last)
 803:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****      {
 804:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****        for (_Map_pointer __node = __first._M_node + 1;
 805:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	    __node < __last._M_node; ++__node)
 806:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	 std::_Destroy(*__node, *__node + _S_buffer_size(),
 807:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 		       _M_get_Tp_allocator());
 808:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 
 809:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****        if (__first._M_node != __last._M_node)
 810:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	 {
 811:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	   std::_Destroy(__first._M_cur, __first._M_last,
 812:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 			 _M_get_Tp_allocator());
 813:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	   std::_Destroy(__last._M_first, __last._M_cur,
 814:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 			 _M_get_Tp_allocator());
 815:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	 }
 816:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****        else
 817:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	 std::_Destroy(__first._M_cur, __last._M_cur,
 818:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 		       _M_get_Tp_allocator());
 819:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****      }
 820:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 
 821:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****   template <typename _Tp, typename _Alloc>
 822:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****     void
 823:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****     deque<_Tp, _Alloc>::
 824:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****     _M_new_elements_at_front(size_type __new_elems)
 825:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****     {
 826:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****       if (this->max_size() - this->size() < __new_elems)
 827:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	__throw_length_error(__N("deque::_M_new_elements_at_front"));
 828:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 
 829:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****       const size_type __new_nodes = ((__new_elems + _S_buffer_size() - 1)
 830:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 				     / _S_buffer_size());
 831:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****       _M_reserve_map_at_front(__new_nodes);
 832:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****       size_type __i;
 833:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****       __try
 834:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****         {
 835:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****           for (__i = 1; __i <= __new_nodes; ++__i)
 836:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****             *(this->_M_impl._M_start._M_node - __i) = this->_M_allocate_node();
 837:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****         }
 838:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****       __catch(...)
 839:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****         {
 840:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****           for (size_type __j = 1; __j < __i; ++__j)
 841:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****             _M_deallocate_node(*(this->_M_impl._M_start._M_node - __j));
 842:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****           __throw_exception_again;
 843:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****         }
 844:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****     }
 845:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 
 846:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****   template <typename _Tp, typename _Alloc>
 847:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****     void
 848:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****     deque<_Tp, _Alloc>::
 849:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****     _M_new_elements_at_back(size_type __new_elems)
 850:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****     {
 851:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****       if (this->max_size() - this->size() < __new_elems)
 852:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	__throw_length_error(__N("deque::_M_new_elements_at_back"));
 853:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 
 854:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****       const size_type __new_nodes = ((__new_elems + _S_buffer_size() - 1)
 855:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 				     / _S_buffer_size());
 856:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****       _M_reserve_map_at_back(__new_nodes);
 857:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****       size_type __i;
 858:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****       __try
 859:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****         {
 860:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****           for (__i = 1; __i <= __new_nodes; ++__i)
 861:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****             *(this->_M_impl._M_finish._M_node + __i) = this->_M_allocate_node();
 862:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****         }
 863:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****       __catch(...)
 864:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****         {
 865:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****           for (size_type __j = 1; __j < __i; ++__j)
 866:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****             _M_deallocate_node(*(this->_M_impl._M_finish._M_node + __j));
 867:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****           __throw_exception_again;
 868:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****         }
 869:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****     }
 870:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 
 871:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****   template <typename _Tp, typename _Alloc>
 872:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****     void
 873:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****     deque<_Tp, _Alloc>::
 2443                             		.loc 11 873 0
 2444                             	.LVL178:
 2445 0000 6E 6D                   		pushm	r6-r13
 2446                             	.LCFI15:
 2447                             		.loc 11 873 0
 2448 0002 EF 17                   		mov.L	r1, r7
 2449                             	.LBB1365:
 874:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****     _M_reallocate_map(size_type __nodes_to_add, bool __add_at_front)
 875:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****     {
 876:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****       const size_type __old_num_nodes
 877:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	= this->_M_impl._M_finish._M_node - this->_M_impl._M_start._M_node + 1;
 2450                             		.loc 11 877 0
 2451 0004 AA 19                   		mov.L	36[r1], r1
 2452                             	.LVL179:
 2453 0006 A9 7C                   		mov.L	20[r7], r4
 2454                             	.LBE1365:
 873:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****     _M_reallocate_map(size_type __nodes_to_add, bool __add_at_front)
 2455                             		.loc 11 873 0
 2456 0008 EF 2C                   		mov.L	r2, r12
 2457                             	.LBB1440:
 2458                             		.loc 11 877 0
 2459 000a FF 0D 41                		sub	r4, r1, r13
 2460 000d 6A 2D                   		shar	#2, r13
 2461 000f 62 1D                   		add	#1, r13
 2462                             	.LVL180:
 878:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****       const size_type __new_num_nodes = __old_num_nodes + __nodes_to_add;
 2463                             		.loc 11 878 0
 2464 0011 FF 2B 2D                		add	r2, r13, r11
 2465                             	.LVL181:
 2466                             	.LBB1366:
 879:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 
 880:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****       _Map_pointer __new_nstart;
 881:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****       if (this->_M_impl._M_map_size > 2 * __new_num_nodes)
 2467                             		.loc 11 881 0
 2468 0014 ED 7E 01                		mov.L	4[r7], r14
 2469 0017 FF 2A BB                		add	r11, r11, r10
 2470                             	.LBE1366:
 2471                             	.LBE1440:
 873:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****     _M_reallocate_map(size_type __nodes_to_add, bool __add_at_front)
 2472                             		.loc 11 873 0
 2473 001a CF 39                   		mov.B	r3, r9
 2474                             	.LBB1441:
 2475                             	.LBB1432:
 2476                             		.loc 11 881 0
 2477 001c 47 AE                   		cmp	r10, r14
 2478 001e 25 2C                   		bleu	.L205
 882:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	{
 883:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 884:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 					 - __new_num_nodes) / 2
 885:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	                 + (__add_at_front ? __nodes_to_add : 0);
 2479                             		.loc 11 885 0
 2480 0020 FF 0B BE                		sub	r11, r14, r11
 2481                             	.LVL182:
 2482 0023 68 1B                   		shlr	#1, r11
 2483 0025 5B 39                   		movu.B	r3, r9
 2484 0027 EC 7A                   		mov.L	[r7], r10
 2485 0029 6C 2B                   		shll	#2, r11
 2486 002b 61 09                   		cmp	#0, r9
 2487 002d 14                      		beq	.L206
 2488                             		.loc 11 885 0 is_stmt 0 discriminator 1
 2489 002e FD C2 29                		shll	#2, r2, r9
 2490                             		.balign 8,3,1
 2491                             	.L206:
 2492                             		.loc 11 885 0 discriminator 3
 2493 0031 4B B9                   		add	r11, r9
 883:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 					 - __new_num_nodes) / 2
 2494                             		.loc 11 883 0 is_stmt 1 discriminator 3
 2495 0033 4B 9A                   		add	r9, r10
 2496                             	.LVL183:
 886:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	  if (__new_nstart < this->_M_impl._M_start._M_node)
 887:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	    std::copy(this->_M_impl._M_start._M_node,
 888:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 		      this->_M_impl._M_finish._M_node + 1,
 889:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 		      __new_nstart);
 2497                             		.loc 11 889 0 discriminator 3
 2498 0035 71 13 04                		add	#4, r1, r3
 2499                             	.LVL184:
 2500                             	.LBB1367:
 2501                             	.LBB1368:
 2502                             	.LBB1369:
 2503                             	.LBB1370:
 2504                             	.LBB1371:
 2505                             	.LBB1372:
 2506                             		.file 13 "c:\\progra~2\\gccfor~2.201\\rx-elf\\rx-elf\\rx-elf\\include\\c++\\4.8.0.201602-gnurx\\bi
   1:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** // Core algorithmic facilities -*- C++ -*-
   2:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** 
   3:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** // Copyright (C) 2001-2013 Free Software Foundation, Inc.
   4:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** //
   5:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** // software; you can redistribute it and/or modify it under the
   7:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** // terms of the GNU General Public License as published by the
   8:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** // Free Software Foundation; either version 3, or (at your option)
   9:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** // any later version.
  10:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** 
  11:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** // This library is distributed in the hope that it will be useful,
  12:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** // GNU General Public License for more details.
  15:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** 
  16:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** // permissions described in the GCC Runtime Library Exception, version
  18:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** // 3.1, as published by the Free Software Foundation.
  19:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** 
  20:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** // You should have received a copy of the GNU General Public License and
  21:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** // <http://www.gnu.org/licenses/>.
  24:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** 
  25:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** /*
  26:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****  *
  27:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****  * Copyright (c) 1994
  28:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****  * Hewlett-Packard Company
  29:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****  *
  30:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****  * Permission to use, copy, modify, distribute and sell this software
  31:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****  * and its documentation for any purpose is hereby granted without fee,
  32:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****  * provided that the above copyright notice appear in all copies and
  33:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****  * that both that copyright notice and this permission notice appear
  34:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****  * in supporting documentation.  Hewlett-Packard Company makes no
  35:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****  * representations about the suitability of this software for any
  36:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  37:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****  *
  38:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****  *
  39:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****  * Copyright (c) 1996-1998
  40:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****  * Silicon Graphics Computer Systems, Inc.
  41:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****  *
  42:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****  * Permission to use, copy, modify, distribute and sell this software
  43:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****  * and its documentation for any purpose is hereby granted without fee,
  44:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****  * provided that the above copyright notice appear in all copies and
  45:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****  * that both that copyright notice and this permission notice appear
  46:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****  * in supporting documentation.  Silicon Graphics makes no
  47:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****  * representations about the suitability of this software for any
  48:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  49:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****  */
  50:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** 
  51:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** /** @file bits/stl_algobase.h
  52:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****  *  This is an internal header file, included by other library headers.
  53:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****  *  Do not attempt to use it directly. @headername{algorithm}
  54:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****  */
  55:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** 
  56:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** #ifndef _STL_ALGOBASE_H
  57:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** #define _STL_ALGOBASE_H 1
  58:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** 
  59:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** #include <bits/c++config.h>
  60:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** #include <bits/functexcept.h>
  61:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** #include <bits/cpp_type_traits.h>
  62:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** #include <ext/type_traits.h>
  63:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** #include <ext/numeric_traits.h>
  64:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** #include <bits/stl_pair.h>
  65:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** #include <bits/stl_iterator_base_types.h>
  66:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** #include <bits/stl_iterator_base_funcs.h>
  67:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** #include <bits/stl_iterator.h>
  68:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** #include <bits/concept_check.h>
  69:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** #include <debug/debug.h>
  70:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** #include <bits/move.h> // For std::swap and _GLIBCXX_MOVE
  71:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** 
  72:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** namespace std _GLIBCXX_VISIBILITY(default)
  73:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** {
  74:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  75:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** 
  76:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** #if __cplusplus < 201103L
  77:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****   // See http://gcc.gnu.org/ml/libstdc++/2004-08/msg00167.html: in a
  78:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****   // nutshell, we are partially implementing the resolution of DR 187,
  79:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****   // when it's safe, i.e., the value_types are equal.
  80:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****   template<bool _BoolType>
  81:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****     struct __iter_swap
  82:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****     {
  83:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****       template<typename _ForwardIterator1, typename _ForwardIterator2>
  84:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****         static void
  85:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****         iter_swap(_ForwardIterator1 __a, _ForwardIterator2 __b)
  86:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****         {
  87:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****           typedef typename iterator_traits<_ForwardIterator1>::value_type
  88:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****             _ValueType1;
  89:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****           _ValueType1 __tmp = _GLIBCXX_MOVE(*__a);
  90:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****           *__a = _GLIBCXX_MOVE(*__b);
  91:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****           *__b = _GLIBCXX_MOVE(__tmp);
  92:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** 	}
  93:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****     };
  94:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** 
  95:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****   template<>
  96:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****     struct __iter_swap<true>
  97:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****     {
  98:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****       template<typename _ForwardIterator1, typename _ForwardIterator2>
  99:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****         static void 
 100:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****         iter_swap(_ForwardIterator1 __a, _ForwardIterator2 __b)
 101:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****         {
 102:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****           swap(*__a, *__b);
 103:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****         }
 104:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****     };
 105:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** #endif
 106:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** 
 107:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****   /**
 108:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****    *  @brief Swaps the contents of two iterators.
 109:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****    *  @ingroup mutating_algorithms
 110:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****    *  @param  __a  An iterator.
 111:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****    *  @param  __b  Another iterator.
 112:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****    *  @return   Nothing.
 113:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****    *
 114:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****    *  This function swaps the values pointed to by two iterators, not the
 115:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****    *  iterators themselves.
 116:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****   */
 117:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****   template<typename _ForwardIterator1, typename _ForwardIterator2>
 118:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****     inline void
 119:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****     iter_swap(_ForwardIterator1 __a, _ForwardIterator2 __b)
 120:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****     {
 121:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****       // concept requirements
 122:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****       __glibcxx_function_requires(_Mutable_ForwardIteratorConcept<
 123:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** 				  _ForwardIterator1>)
 124:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****       __glibcxx_function_requires(_Mutable_ForwardIteratorConcept<
 125:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** 				  _ForwardIterator2>)
 126:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** 
 127:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** #if __cplusplus < 201103L
 128:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****       typedef typename iterator_traits<_ForwardIterator1>::value_type
 129:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** 	_ValueType1;
 130:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****       typedef typename iterator_traits<_ForwardIterator2>::value_type
 131:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** 	_ValueType2;
 132:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** 
 133:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****       __glibcxx_function_requires(_ConvertibleConcept<_ValueType1,
 134:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** 				  _ValueType2>)
 135:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****       __glibcxx_function_requires(_ConvertibleConcept<_ValueType2,
 136:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** 				  _ValueType1>)
 137:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** 
 138:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****       typedef typename iterator_traits<_ForwardIterator1>::reference
 139:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** 	_ReferenceType1;
 140:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****       typedef typename iterator_traits<_ForwardIterator2>::reference
 141:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** 	_ReferenceType2;
 142:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****       std::__iter_swap<__are_same<_ValueType1, _ValueType2>::__value
 143:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** 	&& __are_same<_ValueType1&, _ReferenceType1>::__value
 144:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** 	&& __are_same<_ValueType2&, _ReferenceType2>::__value>::
 145:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** 	iter_swap(__a, __b);
 146:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** #else
 147:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****       swap(*__a, *__b);
 148:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** #endif
 149:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****     }
 150:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** 
 151:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****   /**
 152:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****    *  @brief Swap the elements of two sequences.
 153:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****    *  @ingroup mutating_algorithms
 154:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****    *  @param  __first1  A forward iterator.
 155:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****    *  @param  __last1   A forward iterator.
 156:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****    *  @param  __first2  A forward iterator.
 157:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****    *  @return   An iterator equal to @p first2+(last1-first1).
 158:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****    *
 159:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****    *  Swaps each element in the range @p [first1,last1) with the
 160:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****    *  corresponding element in the range @p [first2,(last1-first1)).
 161:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****    *  The ranges must not overlap.
 162:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****   */
 163:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****   template<typename _ForwardIterator1, typename _ForwardIterator2>
 164:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****     _ForwardIterator2
 165:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****     swap_ranges(_ForwardIterator1 __first1, _ForwardIterator1 __last1,
 166:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** 		_ForwardIterator2 __first2)
 167:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****     {
 168:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****       // concept requirements
 169:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****       __glibcxx_function_requires(_Mutable_ForwardIteratorConcept<
 170:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** 				  _ForwardIterator1>)
 171:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****       __glibcxx_function_requires(_Mutable_ForwardIteratorConcept<
 172:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** 				  _ForwardIterator2>)
 173:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****       __glibcxx_requires_valid_range(__first1, __last1);
 174:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** 
 175:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****       for (; __first1 != __last1; ++__first1, ++__first2)
 176:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** 	std::iter_swap(__first1, __first2);
 177:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****       return __first2;
 178:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****     }
 179:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** 
 180:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****   /**
 181:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****    *  @brief This does what you think it does.
 182:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****    *  @ingroup sorting_algorithms
 183:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****    *  @param  __a  A thing of arbitrary type.
 184:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****    *  @param  __b  Another thing of arbitrary type.
 185:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****    *  @return   The lesser of the parameters.
 186:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****    *
 187:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****    *  This is the simple classic generic implementation.  It will work on
 188:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****    *  temporary expressions, since they are only evaluated once, unlike a
 189:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****    *  preprocessor macro.
 190:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****   */
 191:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****   template<typename _Tp>
 192:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****     inline const _Tp&
 193:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****     min(const _Tp& __a, const _Tp& __b)
 194:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****     {
 195:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****       // concept requirements
 196:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****       __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
 197:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****       //return __b < __a ? __b : __a;
 198:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****       if (__b < __a)
 199:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** 	return __b;
 200:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****       return __a;
 201:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****     }
 202:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** 
 203:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****   /**
 204:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****    *  @brief This does what you think it does.
 205:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****    *  @ingroup sorting_algorithms
 206:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****    *  @param  __a  A thing of arbitrary type.
 207:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****    *  @param  __b  Another thing of arbitrary type.
 208:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****    *  @return   The greater of the parameters.
 209:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****    *
 210:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****    *  This is the simple classic generic implementation.  It will work on
 211:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****    *  temporary expressions, since they are only evaluated once, unlike a
 212:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****    *  preprocessor macro.
 213:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****   */
 214:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****   template<typename _Tp>
 215:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****     inline const _Tp&
 216:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****     max(const _Tp& __a, const _Tp& __b)
 217:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****     {
 218:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****       // concept requirements
 219:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****       __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
 220:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****       //return  __a < __b ? __b : __a;
 221:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****       if (__a < __b)
 222:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** 	return __b;
 223:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****       return __a;
 224:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****     }
 225:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** 
 226:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****   /**
 227:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****    *  @brief This does what you think it does.
 228:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****    *  @ingroup sorting_algorithms
 229:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****    *  @param  __a  A thing of arbitrary type.
 230:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****    *  @param  __b  Another thing of arbitrary type.
 231:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****    *  @param  __comp  A @link comparison_functors comparison functor@endlink.
 232:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****    *  @return   The lesser of the parameters.
 233:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****    *
 234:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****    *  This will work on temporary expressions, since they are only evaluated
 235:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****    *  once, unlike a preprocessor macro.
 236:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****   */
 237:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****   template<typename _Tp, typename _Compare>
 238:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****     inline const _Tp&
 239:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****     min(const _Tp& __a, const _Tp& __b, _Compare __comp)
 240:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****     {
 241:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****       //return __comp(__b, __a) ? __b : __a;
 242:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****       if (__comp(__b, __a))
 243:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** 	return __b;
 244:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****       return __a;
 245:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****     }
 246:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** 
 247:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****   /**
 248:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****    *  @brief This does what you think it does.
 249:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****    *  @ingroup sorting_algorithms
 250:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****    *  @param  __a  A thing of arbitrary type.
 251:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****    *  @param  __b  Another thing of arbitrary type.
 252:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****    *  @param  __comp  A @link comparison_functors comparison functor@endlink.
 253:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****    *  @return   The greater of the parameters.
 254:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****    *
 255:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****    *  This will work on temporary expressions, since they are only evaluated
 256:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****    *  once, unlike a preprocessor macro.
 257:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****   */
 258:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****   template<typename _Tp, typename _Compare>
 259:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****     inline const _Tp&
 260:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****     max(const _Tp& __a, const _Tp& __b, _Compare __comp)
 261:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****     {
 262:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****       //return __comp(__a, __b) ? __b : __a;
 263:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****       if (__comp(__a, __b))
 264:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** 	return __b;
 265:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****       return __a;
 266:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****     }
 267:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** 
 268:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****   // If _Iterator is a __normal_iterator return its base (a plain pointer,
 269:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****   // normally) otherwise return it untouched.  See copy, fill, ... 
 270:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****   template<typename _Iterator>
 271:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****     struct _Niter_base
 272:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****     : _Iter_base<_Iterator, __is_normal_iterator<_Iterator>::__value>
 273:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****     { };
 274:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** 
 275:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****   template<typename _Iterator>
 276:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****     inline typename _Niter_base<_Iterator>::iterator_type
 277:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****     __niter_base(_Iterator __it)
 278:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****     { return std::_Niter_base<_Iterator>::_S_base(__it); }
 279:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** 
 280:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****   // Likewise, for move_iterator.
 281:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****   template<typename _Iterator>
 282:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****     struct _Miter_base
 283:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****     : _Iter_base<_Iterator, __is_move_iterator<_Iterator>::__value>
 284:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****     { };
 285:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** 
 286:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****   template<typename _Iterator>
 287:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****     inline typename _Miter_base<_Iterator>::iterator_type
 288:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****     __miter_base(_Iterator __it)
 289:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****     { return std::_Miter_base<_Iterator>::_S_base(__it); }
 290:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** 
 291:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****   // All of these auxiliary structs serve two purposes.  (1) Replace
 292:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****   // calls to copy with memmove whenever possible.  (Memmove, not memcpy,
 293:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****   // because the input and output ranges are permitted to overlap.)
 294:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****   // (2) If we're using random access iterators, then write the loop as
 295:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****   // a for loop with an explicit count.
 296:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** 
 297:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****   template<bool, bool, typename>
 298:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****     struct __copy_move
 299:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****     {
 300:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****       template<typename _II, typename _OI>
 301:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****         static _OI
 302:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****         __copy_m(_II __first, _II __last, _OI __result)
 303:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****         {
 304:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** 	  for (; __first != __last; ++__result, ++__first)
 305:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** 	    *__result = *__first;
 306:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** 	  return __result;
 307:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** 	}
 308:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****     };
 309:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** 
 310:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** #if __cplusplus >= 201103L
 311:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****   template<typename _Category>
 312:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****     struct __copy_move<true, false, _Category>
 313:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****     {
 314:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****       template<typename _II, typename _OI>
 315:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****         static _OI
 316:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****         __copy_m(_II __first, _II __last, _OI __result)
 317:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****         {
 318:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** 	  for (; __first != __last; ++__result, ++__first)
 319:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** 	    *__result = std::move(*__first);
 320:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** 	  return __result;
 321:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** 	}
 322:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****     };
 323:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** #endif
 324:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** 
 325:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****   template<>
 326:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****     struct __copy_move<false, false, random_access_iterator_tag>
 327:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****     {
 328:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****       template<typename _II, typename _OI>
 329:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****         static _OI
 330:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****         __copy_m(_II __first, _II __last, _OI __result)
 331:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****         { 
 332:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** 	  typedef typename iterator_traits<_II>::difference_type _Distance;
 333:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** 	  for(_Distance __n = __last - __first; __n > 0; --__n)
 334:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** 	    {
 335:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** 	      *__result = *__first;
 336:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** 	      ++__first;
 337:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** 	      ++__result;
 338:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** 	    }
 339:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** 	  return __result;
 340:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** 	}
 341:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****     };
 342:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** 
 343:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** #if __cplusplus >= 201103L
 344:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****   template<>
 345:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****     struct __copy_move<true, false, random_access_iterator_tag>
 346:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****     {
 347:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****       template<typename _II, typename _OI>
 348:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****         static _OI
 349:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****         __copy_m(_II __first, _II __last, _OI __result)
 350:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****         { 
 351:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** 	  typedef typename iterator_traits<_II>::difference_type _Distance;
 352:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** 	  for(_Distance __n = __last - __first; __n > 0; --__n)
 353:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** 	    {
 354:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** 	      *__result = std::move(*__first);
 355:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** 	      ++__first;
 356:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** 	      ++__result;
 357:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** 	    }
 358:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** 	  return __result;
 359:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** 	}
 360:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****     };
 361:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** #endif
 362:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** 
 363:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****   template<bool _IsMove>
 364:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****     struct __copy_move<_IsMove, true, random_access_iterator_tag>
 365:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****     {
 366:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****       template<typename _Tp>
 367:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****         static _Tp*
 368:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****         __copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 369:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****         {
 370:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** 	  const ptrdiff_t _Num = __last - __first;
 2507                             		.loc 13 370 0 discriminator 3
 2508 0038 43 43                   		sub	r4, r3
 2509                             	.LBE1372:
 2510                             	.LBE1371:
 2511                             	.LBE1370:
 2512                             	.LBE1369:
 2513                             	.LBE1368:
 2514                             	.LBE1367:
 886:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	  if (__new_nstart < this->_M_impl._M_start._M_node)
 2515                             		.loc 11 886 0 discriminator 3
 2516 003a 47 A4                   		cmp	r10, r4
 2517 003c 24 05 38 87 00          		bleu	.L207
 2518                             	.LVL185:
 2519                             	.LBB1383:
 2520                             	.LBB1381:
 2521                             	.LBB1379:
 2522                             	.LBB1377:
 2523                             	.LBB1375:
 2524                             	.LBB1373:
 2525                             		.loc 13 370 0
 2526 0041 6A 23                   		shar	#2, r3
 2527                             	.LVL186:
 371:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** 	  if (_Num)
 2528                             		.loc 13 371 0
 2529 0043 3B 99 00                		bne	.L208
 2530 0046 6C 2D                   		shll	#2, r13
 2531                             	.LVL187:
 2532 0048 2E 58                   		bra	.L209
 2533                             	.LVL188:
 2534                             	.L205:
 2535                             	.LBE1373:
 2536                             	.LBE1375:
 2537                             	.LBE1377:
 2538                             	.LBE1379:
 2539                             	.LBE1381:
 2540                             	.LBE1383:
 2541                             	.LBB1384:
 890:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	  else
 891:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	    std::copy_backward(this->_M_impl._M_start._M_node,
 892:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 			       this->_M_impl._M_finish._M_node + 1,
 893:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 			       __new_nstart + __old_num_nodes);
 894:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	}
 895:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****       else
 896:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	{
 897:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	  size_type __new_map_size = this->_M_impl._M_map_size
 898:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	                             + std::max(this->_M_impl._M_map_size,
 899:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 						__nodes_to_add) + 2;
 2542                             		.loc 11 899 0
 2543 004a 71 E8 02                		add	#2, r14, r8
 2544 004d 47 E2                   		cmp	r14, r2
 2545 004f 23 04                   		bltu 1f
 2546 0051 EF 2E                   		mov r2, r14
 2547                             	1:
 2548 0053 4B E8                   		add	r14, r8
 2549                             	.LVL189:
 2550                             	.LBB1385:
 2551                             	.LBB1386:
 2552                             	.LBB1387:
 101:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\ext\new_allocator.h **** 	  std::__throw_bad_alloc();
 2553                             		.loc 8 101 0
 2554 0055 74 08 FF FF FF 3F       		cmp	#0x3fffffff, r8
 2555 005b 25 05 38 8D 00          		bgtu	.L223
 104:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\ext\new_allocator.h ****       }
 2556                             		.loc 8 104 0
 2557 0060 FD C2 81                		shll	#2, r8, r1
 2558 0063 05 00 00 00             		bsr	__Znwm
 2559                             	.LVL190:
 2560 0067 EF 16                   		mov.L	r1, r6
 2561                             	.LBE1387:
 2562                             	.LBE1386:
 2563                             	.LBE1385:
 900:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 
 901:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	  _Map_pointer __new_map = this->_M_allocate_map(__new_map_size);
 902:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
 903:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	                 + (__add_at_front ? __nodes_to_add : 0);
 2564                             		.loc 11 903 0
 2565 0069 FF 0B B8                		sub	r11, r8, r11
 2566                             	.LVL191:
 2567 006c 68 1B                   		shlr	#1, r11
 2568 006e 5B 99                   		movu.B	r9, r9
 2569 0070 6C 2B                   		shll	#2, r11
 2570 0072 61 09                   		cmp	#0, r9
 2571 0074 14                      		beq	.L211
 2572                             		.loc 11 903 0 is_stmt 0 discriminator 1
 2573 0075 FD C2 C9                		shll	#2, r12, r9
 2574                             	.LVL192:
 2575                             		.balign 8,3,1
 2576                             	.L211:
 904:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	  std::copy(this->_M_impl._M_start._M_node,
 905:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 		    this->_M_impl._M_finish._M_node + 1,
 906:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 		    __new_nstart);
 2577                             		.loc 11 906 0 is_stmt 1 discriminator 3
 2578 0078 AA 7B                   		mov.L	36[r7], r3
 2579 007a A9 7A                   		mov.L	20[r7], r2
 2580 007c 62 43                   		add	#4, r3
 2581                             	.LBB1390:
 2582                             	.LBB1391:
 2583                             	.LBB1392:
 2584                             	.LBB1393:
 2585                             	.LBB1394:
 2586                             	.LBB1395:
 370:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** 	  if (_Num)
 2587                             		.loc 13 370 0 discriminator 3
 2588 007e 43 23                   		sub	r2, r3
 2589                             	.LBE1395:
 2590                             	.LBE1394:
 2591                             	.LBE1393:
 2592                             	.LBE1392:
 2593                             	.LBE1391:
 2594                             	.LBE1390:
 903:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	  std::copy(this->_M_impl._M_start._M_node,
 2595                             		.loc 11 903 0 discriminator 3
 2596 0080 FF 2A B9                		add	r11, r9, r10
 2597                             	.LBB1406:
 2598                             	.LBB1404:
 2599                             	.LBB1402:
 2600                             	.LBB1400:
 2601                             	.LBB1398:
 2602                             	.LBB1396:
 370:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** 	  if (_Num)
 2603                             		.loc 13 370 0 discriminator 3
 2604 0083 6A 23                   		shar	#2, r3
 2605                             	.LBE1396:
 2606                             	.LBE1398:
 2607                             	.LBE1400:
 2608                             	.LBE1402:
 2609                             	.LBE1404:
 2610                             	.LBE1406:
 902:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	                 + (__add_at_front ? __nodes_to_add : 0);
 2611                             		.loc 11 902 0 discriminator 3
 2612 0085 4B 6A                   		add	r6, r10
 2613                             	.LVL193:
 2614                             	.LBB1407:
 2615                             	.LBB1405:
 2616                             	.LBB1403:
 2617                             	.LBB1401:
 2618                             	.LBB1399:
 2619                             	.LBB1397:
 2620                             		.loc 13 371 0 discriminator 3
 2621 0087 61 03                   		cmp	#0, r3
 2622 0089 11                      		beq	.L212
 372:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** 	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 2623                             		.loc 13 372 0
 2624 008a EF A1                   		mov.L	r10, r1
 2625 008c 6C 23                   		shll	#2, r3
 2626                             	.LVL194:
 2627 008e 05 00 00 00             		bsr	_memmove
 2628                             	.LVL195:
 2629                             		.balign 8,3,1
 2630                             	.L212:
 2631                             	.LBE1397:
 2632                             	.LBE1399:
 2633                             	.LBE1401:
 2634                             	.LBE1403:
 2635                             	.LBE1405:
 2636                             	.LBE1407:
 2637                             	.LBB1408:
 2638                             	.LBB1409:
 2639                             	.LBB1410:
 2640                             		.loc 8 110 0
 2641 0092 EC 71                   		mov.L	[r7], r1
 2642 0094 6C 2D                   		shll	#2, r13
 2643                             	.LVL196:
 2644 0096 05 00 00 00             		bsr	__ZdlPv
 2645                             	.LVL197:
 2646                             	.LBE1410:
 2647                             	.LBE1409:
 2648                             	.LBE1408:
 907:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	  _M_deallocate_map(this->_M_impl._M_map, this->_M_impl._M_map_size);
 908:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 
 909:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	  this->_M_impl._M_map = __new_map;
 2649                             		.loc 11 909 0
 2650 009a E3 76                   		mov.L	r6, [r7]
 910:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	  this->_M_impl._M_map_size = __new_map_size;
 2651                             		.loc 11 910 0
 2652 009c E7 78 01                		mov.L	r8, 4[r7]
 2653                             	.LVL198:
 2654 009f 03                      		.balign 8,3,5
 2655                             	.L209:
 2656                             	.LBE1384:
 2657                             	.LBE1432:
 2658                             	.LBB1433:
 2659                             	.LBB1434:
 236:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	_M_first = *__new_node;
 2660                             		.loc 7 236 0
 2661 00a0 E7 7A 05                		mov.L	r10, 20[r7]
 237:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	_M_last = _M_first + difference_type(_S_buffer_size());
 2662                             		.loc 7 237 0
 2663 00a3 EC AB                   		mov.L	[r10], r11
 2664                             	.LBE1434:
 2665                             	.LBE1433:
 911:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	}
 912:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 
 913:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****       this->_M_impl._M_start._M_set_node(__new_nstart);
 914:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****       this->_M_impl._M_finish._M_set_node(__new_nstart + __old_num_nodes - 1);
 2666                             		.loc 11 914 0
 2667 00a5 60 4D                   		sub	#4, r13
 2668 00a7 4B DA                   		add	r13, r10
 2669                             	.LVL199:
 2670                             	.LBB1436:
 2671                             	.LBB1435:
 238:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       }
 2672                             		.loc 7 238 0
 2673 00a9 72 BC 00 02             		add	#0x200, r11, r12
 2674                             	.LVL200:
 237:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	_M_last = _M_first + difference_type(_S_buffer_size());
 2675                             		.loc 7 237 0
 2676 00ad E7 7B 03                		mov.L	r11, 12[r7]
 2677                             	.LVL201:
 238:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       }
 2678                             		.loc 7 238 0
 2679 00b0 E7 7C 04                		mov.L	r12, 16[r7]
 2680                             	.LVL202:
 2681                             	.LBE1435:
 2682                             	.LBE1436:
 2683                             	.LBB1437:
 2684                             	.LBB1438:
 236:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	_M_first = *__new_node;
 2685                             		.loc 7 236 0
 2686 00b3 E7 7A 09                		mov.L	r10, 36[r7]
 237:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	_M_last = _M_first + difference_type(_S_buffer_size());
 2687                             		.loc 7 237 0
 2688 00b6 EC AA                   		mov.L	[r10], r10
 2689                             	.LVL203:
 238:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       }
 2690                             		.loc 7 238 0
 2691 00b8 72 AB 00 02             		add	#0x200, r10, r11
 237:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	_M_last = _M_first + difference_type(_S_buffer_size());
 2692                             		.loc 7 237 0
 2693 00bc E7 7A 07                		mov.L	r10, 28[r7]
 238:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       }
 2694                             		.loc 7 238 0
 2695 00bf E7 7B 08                		mov.L	r11, 32[r7]
 2696                             	.LBE1438:
 2697                             	.LBE1437:
 2698                             	.LBE1441:
 915:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****     }
 2699                             		.loc 11 915 0
 2700 00c2 3F 6D 08                		rtsd	#32, r6-r13
 2701                             	.LVL204:
 2702                             	.L207:
 2703                             	.LBB1442:
 2704                             	.LBB1439:
 2705                             	.LBB1412:
 2706                             	.LBB1413:
 2707                             	.LBB1414:
 2708                             	.LBB1415:
 2709                             	.LBB1416:
 2710                             	.LBB1417:
 373:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** 	  return __result + _Num;
 374:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** 	}
 375:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****     };
 376:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** 
 377:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****   template<bool _IsMove, typename _II, typename _OI>
 378:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****     inline _OI
 379:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****     __copy_move_a(_II __first, _II __last, _OI __result)
 380:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****     {
 381:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****       typedef typename iterator_traits<_II>::value_type _ValueTypeI;
 382:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****       typedef typename iterator_traits<_OI>::value_type _ValueTypeO;
 383:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****       typedef typename iterator_traits<_II>::iterator_category _Category;
 384:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****       const bool __simple = (__is_trivial(_ValueTypeI)
 385:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** 	                     && __is_pointer<_II>::__value
 386:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** 	                     && __is_pointer<_OI>::__value
 387:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** 			     && __are_same<_ValueTypeI, _ValueTypeO>::__value);
 388:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** 
 389:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****       return std::__copy_move<_IsMove, __simple,
 390:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** 	                      _Category>::__copy_m(__first, __last, __result);
 391:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****     }
 392:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** 
 393:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****   // Helpers for streambuf iterators (either istream or ostream).
 394:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****   // NB: avoid including <iosfwd>, relatively large.
 395:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****   template<typename _CharT>
 396:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****     struct char_traits;
 397:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** 
 398:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****   template<typename _CharT, typename _Traits>
 399:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****     class istreambuf_iterator;
 400:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** 
 401:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****   template<typename _CharT, typename _Traits>
 402:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****     class ostreambuf_iterator;
 403:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** 
 404:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****   template<bool _IsMove, typename _CharT>
 405:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****     typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value, 
 406:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** 	     ostreambuf_iterator<_CharT, char_traits<_CharT> > >::__type
 407:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****     __copy_move_a2(_CharT*, _CharT*,
 408:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** 		   ostreambuf_iterator<_CharT, char_traits<_CharT> >);
 409:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** 
 410:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****   template<bool _IsMove, typename _CharT>
 411:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****     typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value, 
 412:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** 	     ostreambuf_iterator<_CharT, char_traits<_CharT> > >::__type
 413:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****     __copy_move_a2(const _CharT*, const _CharT*,
 414:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** 		   ostreambuf_iterator<_CharT, char_traits<_CharT> >);
 415:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** 
 416:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****   template<bool _IsMove, typename _CharT>
 417:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****     typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value,
 418:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** 				    _CharT*>::__type
 419:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****     __copy_move_a2(istreambuf_iterator<_CharT, char_traits<_CharT> >,
 420:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** 		   istreambuf_iterator<_CharT, char_traits<_CharT> >, _CharT*);
 421:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** 
 422:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****   template<bool _IsMove, typename _II, typename _OI>
 423:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****     inline _OI
 424:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****     __copy_move_a2(_II __first, _II __last, _OI __result)
 425:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****     {
 426:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****       return _OI(std::__copy_move_a<_IsMove>(std::__niter_base(__first),
 427:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** 					     std::__niter_base(__last),
 428:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** 					     std::__niter_base(__result)));
 429:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****     }
 430:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** 
 431:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****   /**
 432:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****    *  @brief Copies the range [first,last) into result.
 433:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****    *  @ingroup mutating_algorithms
 434:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****    *  @param  __first  An input iterator.
 435:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****    *  @param  __last   An input iterator.
 436:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****    *  @param  __result An output iterator.
 437:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****    *  @return   result + (first - last)
 438:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****    *
 439:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****    *  This inline function will boil down to a call to @c memmove whenever
 440:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****    *  possible.  Failing that, if random access iterators are passed, then the
 441:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****    *  loop count will be known (and therefore a candidate for compiler
 442:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****    *  optimizations such as unrolling).  Result may not be contained within
 443:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****    *  [first,last); the copy_backward function should be used instead.
 444:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****    *
 445:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****    *  Note that the end of the output range is permitted to be contained
 446:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****    *  within [first,last).
 447:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****   */
 448:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****   template<typename _II, typename _OI>
 449:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****     inline _OI
 450:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****     copy(_II __first, _II __last, _OI __result)
 451:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****     {
 452:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****       // concept requirements
 453:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****       __glibcxx_function_requires(_InputIteratorConcept<_II>)
 454:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****       __glibcxx_function_requires(_OutputIteratorConcept<_OI,
 455:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** 	    typename iterator_traits<_II>::value_type>)
 456:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****       __glibcxx_requires_valid_range(__first, __last);
 457:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** 
 458:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****       return (std::__copy_move_a2<__is_move_iterator<_II>::__value>
 459:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** 	      (std::__miter_base(__first), std::__miter_base(__last),
 460:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** 	       __result));
 461:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****     }
 462:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** 
 463:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** #if __cplusplus >= 201103L
 464:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****   /**
 465:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****    *  @brief Moves the range [first,last) into result.
 466:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****    *  @ingroup mutating_algorithms
 467:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****    *  @param  __first  An input iterator.
 468:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****    *  @param  __last   An input iterator.
 469:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****    *  @param  __result An output iterator.
 470:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****    *  @return   result + (first - last)
 471:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****    *
 472:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****    *  This inline function will boil down to a call to @c memmove whenever
 473:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****    *  possible.  Failing that, if random access iterators are passed, then the
 474:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****    *  loop count will be known (and therefore a candidate for compiler
 475:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****    *  optimizations such as unrolling).  Result may not be contained within
 476:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****    *  [first,last); the move_backward function should be used instead.
 477:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****    *
 478:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****    *  Note that the end of the output range is permitted to be contained
 479:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****    *  within [first,last).
 480:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****   */
 481:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****   template<typename _II, typename _OI>
 482:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****     inline _OI
 483:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****     move(_II __first, _II __last, _OI __result)
 484:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****     {
 485:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****       // concept requirements
 486:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****       __glibcxx_function_requires(_InputIteratorConcept<_II>)
 487:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****       __glibcxx_function_requires(_OutputIteratorConcept<_OI,
 488:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** 	    typename iterator_traits<_II>::value_type>)
 489:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****       __glibcxx_requires_valid_range(__first, __last);
 490:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** 
 491:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****       return std::__copy_move_a2<true>(std::__miter_base(__first),
 492:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** 				       std::__miter_base(__last), __result);
 493:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****     }
 494:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** 
 495:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** #define _GLIBCXX_MOVE3(_Tp, _Up, _Vp) std::move(_Tp, _Up, _Vp)
 496:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** #else
 497:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** #define _GLIBCXX_MOVE3(_Tp, _Up, _Vp) std::copy(_Tp, _Up, _Vp)
 498:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** #endif
 499:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** 
 500:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****   template<bool, bool, typename>
 501:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****     struct __copy_move_backward
 502:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****     {
 503:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****       template<typename _BI1, typename _BI2>
 504:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****         static _BI2
 505:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****         __copy_move_b(_BI1 __first, _BI1 __last, _BI2 __result)
 506:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****         {
 507:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** 	  while (__first != __last)
 508:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** 	    *--__result = *--__last;
 509:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** 	  return __result;
 510:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** 	}
 511:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****     };
 512:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** 
 513:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** #if __cplusplus >= 201103L
 514:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****   template<typename _Category>
 515:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****     struct __copy_move_backward<true, false, _Category>
 516:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****     {
 517:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****       template<typename _BI1, typename _BI2>
 518:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****         static _BI2
 519:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****         __copy_move_b(_BI1 __first, _BI1 __last, _BI2 __result)
 520:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****         {
 521:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** 	  while (__first != __last)
 522:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** 	    *--__result = std::move(*--__last);
 523:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** 	  return __result;
 524:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** 	}
 525:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****     };
 526:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** #endif
 527:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** 
 528:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****   template<>
 529:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****     struct __copy_move_backward<false, false, random_access_iterator_tag>
 530:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****     {
 531:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****       template<typename _BI1, typename _BI2>
 532:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****         static _BI2
 533:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****         __copy_move_b(_BI1 __first, _BI1 __last, _BI2 __result)
 534:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****         {
 535:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** 	  typename iterator_traits<_BI1>::difference_type __n;
 536:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** 	  for (__n = __last - __first; __n > 0; --__n)
 537:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** 	    *--__result = *--__last;
 538:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** 	  return __result;
 539:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** 	}
 540:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****     };
 541:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** 
 542:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** #if __cplusplus >= 201103L
 543:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****   template<>
 544:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****     struct __copy_move_backward<true, false, random_access_iterator_tag>
 545:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****     {
 546:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****       template<typename _BI1, typename _BI2>
 547:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****         static _BI2
 548:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****         __copy_move_b(_BI1 __first, _BI1 __last, _BI2 __result)
 549:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****         {
 550:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** 	  typename iterator_traits<_BI1>::difference_type __n;
 551:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** 	  for (__n = __last - __first; __n > 0; --__n)
 552:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** 	    *--__result = std::move(*--__last);
 553:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** 	  return __result;
 554:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** 	}
 555:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****     };
 556:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** #endif
 557:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** 
 558:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****   template<bool _IsMove>
 559:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****     struct __copy_move_backward<_IsMove, true, random_access_iterator_tag>
 560:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****     {
 561:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****       template<typename _Tp>
 562:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****         static _Tp*
 563:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****         __copy_move_b(const _Tp* __first, const _Tp* __last, _Tp* __result)
 564:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h ****         {
 565:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** 	  const ptrdiff_t _Num = __last - __first;
 2711                             		.loc 13 565 0
 2712 00c5 6A 23                   		shar	#2, r3
 2713                             	.LBE1417:
 2714                             	.LBE1416:
 2715                             	.LBE1415:
 2716                             	.LBE1414:
 2717                             	.LBE1413:
 2718                             	.LBE1412:
 893:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	}
 2719                             		.loc 11 893 0
 2720 00c7 6C 2D                   		shll	#2, r13
 2721                             	.LVL205:
 2722                             	.LBB1428:
 2723                             	.LBB1426:
 2724                             	.LBB1424:
 2725                             	.LBB1422:
 2726                             	.LBB1420:
 2727                             	.LBB1418:
 566:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** 	  if (_Num)
 2728                             		.loc 13 566 0
 2729 00c9 61 03                   		cmp	#0, r3
 2730 00cb 20 D5                   		beq	.L209
 567:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** 	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
 2731                             		.loc 13 567 0
 2732 00cd 6C 23                   		shll	#2, r3
 2733                             	.LVL206:
 2734                             	.LBE1418:
 2735                             	.LBE1420:
 2736                             	.LBE1422:
 2737                             	.LBE1424:
 2738                             	.LBE1426:
 2739                             	.LBE1428:
 893:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	}
 2740                             		.loc 11 893 0
 2741 00cf FF 21 DA                		add	r13, r10, r1
 2742                             	.LVL207:
 2743                             	.LBB1429:
 2744                             	.LBB1427:
 2745                             	.LBB1425:
 2746                             	.LBB1423:
 2747                             	.LBB1421:
 2748                             	.LBB1419:
 2749                             		.loc 13 567 0
 2750 00d2 43 31                   		sub	r3, r1
 2751                             	.LVL208:
 2752 00d4 EF 42                   		mov.L	r4, r2
 2753                             	.LVL209:
 2754 00d6 05 00 00 00             		bsr	_memmove
 2755                             	.LVL210:
 2756 00da 2E C6                   		bra	.L209
 2757                             	.LVL211:
 2758                             	.L208:
 2759                             	.LBE1419:
 2760                             	.LBE1421:
 2761                             	.LBE1423:
 2762                             	.LBE1425:
 2763                             	.LBE1427:
 2764                             	.LBE1429:
 2765                             	.LBB1430:
 2766                             	.LBB1382:
 2767                             	.LBB1380:
 2768                             	.LBB1378:
 2769                             	.LBB1376:
 2770                             	.LBB1374:
 372:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** 	  return __result + _Num;
 2771                             		.loc 13 372 0
 2772 00dc EF A1                   		mov.L	r10, r1
 2773 00de EF 42                   		mov.L	r4, r2
 2774                             	.LVL212:
 2775 00e0 6C 23                   		shll	#2, r3
 2776                             	.LVL213:
 2777 00e2 05 00 00 00             		bsr	_memmove
 2778                             	.LVL214:
 2779 00e6 6C 2D                   		shll	#2, r13
 2780                             	.LVL215:
 2781 00e8 2E B8                   		bra	.L209
 2782                             	.LVL216:
 2783                             	.L223:
 2784                             	.LBE1374:
 2785                             	.LBE1376:
 2786                             	.LBE1378:
 2787                             	.LBE1380:
 2788                             	.LBE1382:
 2789                             	.LBE1430:
 2790                             	.LBB1431:
 2791                             	.LBB1411:
 2792                             	.LBB1389:
 2793                             	.LBB1388:
 102:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\ext\new_allocator.h **** 
 2794                             		.loc 8 102 0
 2795 00ea 05 00 00 00             		bsr	__ZSt17__throw_bad_allocv
 2796                             	.LVL217:
 2797                             	.LBE1388:
 2798                             	.LBE1389:
 2799                             	.LBE1411:
 2800                             	.LBE1431:
 2801                             	.LBE1439:
 2802                             	.LBE1442:
 2803                             	.LFE1611:
 2805 00ee EF 00                   		.section	.rodata.str1.1,"aMS",@progbits,1
 2806                             	.LC0:
 2807 0000 64 65 71 75 65 3A 3A 5F 		.string	"deque::_M_range_check"
 2807      4D 5F 72 61 6E 67 65 5F 
 2807      63 68 65 63 6B 00 
 2808                             		.section P,"ax"
 2809                             		.global	__Z8packDataPh
 2811                             	__Z8packDataPh:
 2812                             	.LFB1445:
 434:../src/peripheral/uart.cpp ****     uint8_t printfDataNum = 0;
 2813                             		.loc 10 434 0
 2814                             	.LVL218:
 2815 079c 6E 6D                   		pushm	r6-r13
 2816                             	.LCFI16:
 2817 079e 71 00 9C                		add	#0xffffff9c, r0
 2818                             	.LCFI17:
 434:../src/peripheral/uart.cpp ****     uint8_t printfDataNum = 0;
 2819                             		.loc 10 434 0
 2820 07a1 A3 89                   		mov.L	r1, 60[r0]
 2821 07a3 F9 02 06 00 00 00 00    		mov.L	#___gxx_personality_sj0, 24[r0]
 2822 07aa F9 02 07 00 00 00 00    		mov.L	#.LLSDA1445, 28[r0]
 2823 07b1 A2 00                   		mov.L	r0, 32[r0]
 2824 07b3 F9 02 09 88 15 00 00    		mov.L	#.L320, 36[r0]
 2825 07ba A2 80                   		mov.L	r0, 40[r0]
 2826 07bc EF 01                   		mov.L	r0, r1
 2827                             	.LVL219:
 2828 07be 05 00 00 00             		bsr	__Unwind_SjLj_Register
 2829                             	.LVL220:
 2830                             	.LBB1875:
 2831                             	.LBB1876:
 2832                             	.LBB1877:
  70:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\imu.hpp **** 		return instance;
 2833                             		.loc 1 70 0
 2834 07c2 FB 12 00 00 00 00       		mov.L	#__ZGVZN7MPU925011getInstanceEvE8instance, r1
 2835 07c8 58 17                   		movu.B	[r1], r7
 2836 07ca 61 07                   		cmp	#0, r7
 2837 07cc 3A 86 08                		beq	.L399
 2838 07cf 03                      		.balign 8,3,5
 2839                             	.L226:
 2840                             	.LBE1877:
 2841                             	.LBE1876:
 2842                             	.LBB1879:
 2843                             	.LBB1880:
  26:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\imu.hpp **** 		return instance;
 2844                             		.loc 1 26 0
 2845 07d0 FB 22 00 00 00 00       		mov.L	#__ZGVZN9Icm20608G11getInstanceEvE8instance, r2
 2846 07d6 58 27                   		movu.B	[r2], r7
 2847 07d8 61 07                   		cmp	#0, r7
 2848 07da 3A AE 08                		beq	.L400
 2849 07dd FC 13 00                		.balign 8,3,5
 2850                             	.L229:
 2851                             	.LBE1880:
 2852                             	.LBE1879:
 2853                             	.LBB1882:
 2854                             	.LBB1883:
  13:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\tactsw.h **** 
  14:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\tactsw.h **** public:
  15:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\tactsw.h **** 	bool getState(){
  16:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\tactsw.h **** 		if( on_time_msec >5) return true;
  17:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\tactsw.h **** 		else return false;
  18:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\tactsw.h **** 	};
  19:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\tactsw.h **** 
  20:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\tactsw.h **** 	uint16_t getOntime(){
  21:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\tactsw.h **** 		return on_time_msec;
  22:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\tactsw.h **** 	};
  23:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\tactsw.h **** 
  24:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\tactsw.h **** 	void update(){
  25:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\tactsw.h **** 		if(PORTE.PIDR.BIT.B3 == 0)on_time_msec++;
  26:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\tactsw.h **** 		else on_time_msec = 0;
  27:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\tactsw.h **** 	}
  28:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\tactsw.h **** 
  29:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\tactsw.h **** 	static TactSw& getInstance(){
  30:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\tactsw.h **** 		static TactSw instance;
 2855                             		.loc 2 30 0
 2856 07e0 FB 32 00 00 00 00       		mov.L	#__ZGVZN6TactSw11getInstanceEvE8instance, r3
 2857 07e6 58 33                   		movu.B	[r3], r3
 2858 07e8 A3 0B                   		mov.L	r3, 52[r0]
 2859 07ea 61 03                   		cmp	#0, r3
 2860 07ec 3A D6 08                		beq	.L401
 2861 07ef 03                      		.balign 8,3,5
 2862                             	.L232:
 2863                             	.LBE1883:
 2864                             	.LBE1882:
 2865                             	.LBB1887:
 2866                             	.LBB1888:
  53:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\wallsensor.hpp **** public:
  54:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\wallsensor.hpp **** 
  55:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\wallsensor.hpp ****     int16_t ahead_on;
  56:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\wallsensor.hpp ****     int16_t left_on;
  57:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\wallsensor.hpp ****     int16_t right_on;
  58:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\wallsensor.hpp **** 
  59:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\wallsensor.hpp ****     int16_t ahead_off;
  60:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\wallsensor.hpp ****     int16_t left_off;
  61:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\wallsensor.hpp ****     int16_t right_off;
  62:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\wallsensor.hpp **** 
  63:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\wallsensor.hpp ****     deque<int16_t> ahead;
  64:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\wallsensor.hpp ****     deque<int16_t> left;
  65:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\wallsensor.hpp ****     deque<int16_t> right;
  66:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\wallsensor.hpp **** 
  67:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\wallsensor.hpp ****     void turnOffAllLed(){
  68:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\wallsensor.hpp ****         PORTD.PODR.BIT.B3 = 0;
  69:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\wallsensor.hpp ****         PORTD.PODR.BIT.B4 = 0;
  70:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\wallsensor.hpp ****         PORTD.PODR.BIT.B5 = 0;
  71:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\wallsensor.hpp ****         PORTE.PODR.BIT.B2 = 0;
  72:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\wallsensor.hpp ****     };
  73:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\wallsensor.hpp **** 
  74:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\wallsensor.hpp ****     void turnOnAllLed(){
  75:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\wallsensor.hpp ****         if(enable == true){
  76:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\wallsensor.hpp ****             PORTD.PODR.BIT.B3 = 1; //右
  77:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\wallsensor.hpp ****             PORTD.PODR.BIT.B4 = 1; //前
  78:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\wallsensor.hpp ****             PORTD.PODR.BIT.B5 = 1;   //左
  79:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\wallsensor.hpp ****             //PORTE.PODR.BIT.B2 = 1; //未配線
  80:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\wallsensor.hpp ****         }
  81:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\wallsensor.hpp ****         else{
  82:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\wallsensor.hpp ****             turnOffAllLed();
  83:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\wallsensor.hpp ****         }
  84:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\wallsensor.hpp ****     }
  85:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\wallsensor.hpp **** 
  86:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\wallsensor.hpp ****     void updateAllOffVal(){
  87:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\wallsensor.hpp ****         right_off = startAD_AN001(); //右センサ
  88:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\wallsensor.hpp ****         left_off  = startAD_AN002(); //左センサ
  89:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\wallsensor.hpp ****         ahead_off = startAD_AN110(); //前センサ
  90:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\wallsensor.hpp ****     };
  91:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\wallsensor.hpp **** 
  92:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\wallsensor.hpp ****     void updateAllOnVal(){
  93:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\wallsensor.hpp ****         right_on = startAD_AN001(); //右センサ
  94:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\wallsensor.hpp ****         left_on  = startAD_AN002(); //左センサ
  95:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\wallsensor.hpp ****         ahead_on = startAD_AN110(); //前センサ
  96:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\wallsensor.hpp ****     }
  97:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\wallsensor.hpp **** 
  98:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\wallsensor.hpp ****     void turnOnAheadLed(){
  99:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\wallsensor.hpp ****         PORTD.PODR.BIT.B4 = 1; //前
 100:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\wallsensor.hpp ****     };
 101:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\wallsensor.hpp ****     void turnOnLeftLed(){
 102:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\wallsensor.hpp ****         PORTD.PODR.BIT.B5 = 1; //左
 103:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\wallsensor.hpp ****     };
 104:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\wallsensor.hpp ****     void turnOnRightLed(){
 105:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\wallsensor.hpp ****         PORTD.PODR.BIT.B3 = 1; //右
 106:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\wallsensor.hpp ****     };
 107:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\wallsensor.hpp **** 
 108:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\wallsensor.hpp ****     void updateAheadOnVal(){
 109:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\wallsensor.hpp ****         ahead_on = startAD_AN110(); //前センサ
 110:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\wallsensor.hpp ****     };
 111:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\wallsensor.hpp ****     void updateLeftOnVal(){
 112:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\wallsensor.hpp ****         left_on  = startAD_AN002(); //左センサ
 113:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\wallsensor.hpp ****     };
 114:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\wallsensor.hpp ****     void updateRightOnVal(){
 115:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\wallsensor.hpp ****         right_on = startAD_AN001(); //右センサ
 116:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\wallsensor.hpp ****     };
 117:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\wallsensor.hpp **** 
 118:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\wallsensor.hpp ****     void modulateVal(){
 119:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\wallsensor.hpp ****         int16_t ah_mod = ahead_on - ahead_off;
 120:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\wallsensor.hpp ****         int16_t l_mod  = left_on - left_off;
 121:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\wallsensor.hpp ****         int16_t r_mod  = right_on - right_off;
 122:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\wallsensor.hpp **** 
 123:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\wallsensor.hpp ****         ahead.push_front(ah_mod);
 124:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\wallsensor.hpp ****         left.push_front(l_mod);
 125:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\wallsensor.hpp ****         right.push_front(r_mod);
 126:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\wallsensor.hpp **** 
 127:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\wallsensor.hpp ****         ahead.pop_back();
 128:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\wallsensor.hpp ****         left.pop_back();
 129:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\wallsensor.hpp ****         right.pop_back();
 130:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\wallsensor.hpp ****     };
 131:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\wallsensor.hpp **** 
 132:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\wallsensor.hpp ****     static WallSensor& getInstance(){
 133:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\wallsensor.hpp ****         static WallSensor instance;
 2867                             		.loc 9 133 0
 2868 07f0 FB 12 00 00 00 00       		mov.L	#__ZGVZN10WallSensor11getInstanceEvE8instance, r1
 2869 07f6 58 16                   		movu.B	[r1], r6
 2870 07f8 A3 86                   		mov.L	r6, 56[r0]
 2871 07fa 61 06                   		cmp	#0, r6
 2872 07fc 3A 0E 09                		beq	.L234
 2873                             	.L411:
 2874 07ff F9 02 0D 00 00 00 00    		mov.L	#__ZZN10WallSensor11getInstanceEvE8instance, 52[r0]
 2875 0806 EF 00                   		.balign 8,3,5
 2876                             	.L235:
 2877                             	.LBE1888:
 2878                             	.LBE1887:
 2879                             	.LBB2149:
 2880                             	.LBB2150:
 123:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h ****         return instance;
 2881                             		.loc 3 123 0
 2882 0808 FB 62 00 00 00 00       		mov.L	#__ZGVZN6UMouse11getInstanceEvE8instance, r6
 2883 080e 58 67                   		movu.B	[r6], r7
 2884 0810 61 07                   		cmp	#0, r7
 2885 0812 3A 56 0C                		beq	.L402
 2886                             		.balign 8,3,1
 2887                             	.L268:
 2888                             	.LBE2150:
 2889                             	.LBE2149:
 444:../src/peripheral/uart.cpp ****     buf[1] = 0xff;
 2890                             		.loc 10 444 0
 2891 0815 AB 8F                   		mov.L	60[r0], r7
 2892 0817 F8 74 FF                		mov.B	#-1, [r7]
 445:../src/peripheral/uart.cpp ****     buf[2] = 0x48;
 2893                             		.loc 10 445 0
 2894 081a F9 74 01 FF             		mov.B	#-1, 1[r7]
 446:../src/peripheral/uart.cpp ****     buf[3] = 0x45;
 2895                             		.loc 10 446 0
 2896 081e 3C 72 48                		mov.B	#0x48, 2[r7]
 447:../src/peripheral/uart.cpp ****     buf[4] = 0x41;
 2897                             		.loc 10 447 0
 2898 0821 3C 73 45                		mov.B	#0x45, 3[r7]
 448:../src/peripheral/uart.cpp ****     buf[5] = 0x44;
 2899                             		.loc 10 448 0
 2900 0824 3C 74 41                		mov.B	#0x41, 4[r7]
 449:../src/peripheral/uart.cpp ****     //elapsed time
 2901                             		.loc 10 449 0
 2902 0827 3C 75 44                		mov.B	#0x44, 5[r7]
 451:../src/peripheral/uart.cpp ****     buf[8] = ((0xff000000 & elapsedTime) >> 24);
 2903                             		.loc 10 451 0
 2904 082a F9 06 01 FF             		mov.L	#-1, 4[r0]
 2905 082e 05 00 00 00             		bsr	__Z14getElapsedMsecv
 2906                             	.LVL221:
 452:../src/peripheral/uart.cpp ****     buf[9] = ((0x00ff0000 & elapsedTime) >> 16);
 2907                             		.loc 10 452 0
 2908 0832 FD 98 1B                		shlr	#24, r1, r11
 453:../src/peripheral/uart.cpp ****     buf[10] = ((0x0000ff00 & elapsedTime) >> 8);
 2909                             		.loc 10 453 0
 2910 0835 FD 90 1A                		shlr	#16, r1, r10
 454:../src/peripheral/uart.cpp ****     buf[11] = ((0x000000ff & elapsedTime));
 2911                             		.loc 10 454 0
 2912 0838 FD 88 17                		shlr	#8, r1, r7
 452:../src/peripheral/uart.cpp ****     buf[9] = ((0x00ff0000 & elapsedTime) >> 16);
 2913                             		.loc 10 452 0
 2914 083b ED 08 0F                		mov.L	60[r0], r8
 2915 083e C7 8B 08                		mov.B	r11, 8[r8]
 453:../src/peripheral/uart.cpp ****     buf[10] = ((0x0000ff00 & elapsedTime) >> 8);
 2916                             		.loc 10 453 0
 2917 0841 C7 8A 09                		mov.B	r10, 9[r8]
 454:../src/peripheral/uart.cpp ****     buf[11] = ((0x000000ff & elapsedTime));
 2918                             		.loc 10 454 0
 2919 0844 C7 87 0A                		mov.B	r7, 10[r8]
 455:../src/peripheral/uart.cpp ****     //bat vol
 2920                             		.loc 10 455 0
 2921 0847 C7 81 0B                		mov.B	r1, 11[r8]
 457:../src/peripheral/uart.cpp ****     buf[12] = ((0x0000ff00 & vol) >> 8);
 2922                             		.loc 10 457 0
 2923 084a FB AE 00 90 08          		mov.L	#0x89000, r10
 2924 084f DD A7 10                		mov.W	32[r10], r7
 2925                             	.LVL222:
 482:../src/peripheral/uart.cpp ****     buf[29] = ((0x000000ff & S12AD1.ADDR8));
 2926                             		.loc 10 482 0
 2927 0852 FB BE 00 91 08          		mov.L	#0x89100, r11
 458:../src/peripheral/uart.cpp ****     buf[13] = ((0x000000ff & vol));
 2928                             		.loc 10 458 0
 2929 0857 EF 7C                   		mov.L	r7, r12
 2930 0859 68 8C                   		shlr	#8, r12
 2931 085b C7 8C 0C                		mov.B	r12, 12[r8]
 459:../src/peripheral/uart.cpp **** 
 2932                             		.loc 10 459 0
 2933 085e C7 87 0D                		mov.B	r7, 13[r8]
 461:../src/peripheral/uart.cpp ****     buf[15] = ((0x000000ff & S12AD.ADDR1));
 2934                             		.loc 10 461 0
 2935 0861 DD A7 11                		mov.W	34[r10], r7
 2936                             	.LVL223:
 2937 0864 68 87                   		shlr	#8, r7
 2938 0866 C7 87 0E                		mov.B	r7, 14[r8]
 462:../src/peripheral/uart.cpp **** 
 2939                             		.loc 10 462 0
 2940 0869 DD AC 11                		mov.W	34[r10], r12
 518:../src/peripheral/uart.cpp ****     buf[53] = ((0x000000ff & imu2.omega_raw[0]));
 2941                             		.loc 10 518 0
 2942 086c FB 72 00 00 00 00       		mov.L	#__ZZN9Icm20608G11getInstanceEvE8instance, r7
 462:../src/peripheral/uart.cpp **** 
 2943                             		.loc 10 462 0
 2944 0872 C7 8C 0F                		mov.B	r12, 15[r8]
 464:../src/peripheral/uart.cpp ****     buf[17] = ((0x000000ff & S12AD.ADDR2));
 2945                             		.loc 10 464 0
 2946 0875 DD AC 12                		mov.W	36[r10], r12
 2947 0878 68 8C                   		shlr	#8, r12
 2948 087a C7 8C 10                		mov.B	r12, 16[r8]
 465:../src/peripheral/uart.cpp **** 
 2949                             		.loc 10 465 0
 2950 087d DD AC 12                		mov.W	36[r10], r12
 2951 0880 C7 8C 11                		mov.B	r12, 17[r8]
 467:../src/peripheral/uart.cpp ****     buf[19] = ((0x000000ff & S12AD.ADDR3));
 2952                             		.loc 10 467 0
 2953 0883 DD AC 13                		mov.W	38[r10], r12
 2954 0886 68 8C                   		shlr	#8, r12
 2955 0888 C7 8C 12                		mov.B	r12, 18[r8]
 468:../src/peripheral/uart.cpp **** 
 2956                             		.loc 10 468 0
 2957 088b DD AC 13                		mov.W	38[r10], r12
 2958 088e C7 8C 13                		mov.B	r12, 19[r8]
 470:../src/peripheral/uart.cpp ****     buf[21] = ((0x000000ff & S12AD.ADDR4));
 2959                             		.loc 10 470 0
 2960 0891 DD AC 14                		mov.W	40[r10], r12
 2961 0894 68 8C                   		shlr	#8, r12
 2962 0896 C7 8C 14                		mov.B	r12, 20[r8]
 471:../src/peripheral/uart.cpp **** 
 2963                             		.loc 10 471 0
 2964 0899 DD AC 14                		mov.W	40[r10], r12
 2965 089c C7 8C 15                		mov.B	r12, 21[r8]
 473:../src/peripheral/uart.cpp ****     buf[23] = ((0x000000ff & S12AD.ADDR5));
 2966                             		.loc 10 473 0
 2967 089f DD AC 15                		mov.W	42[r10], r12
 2968 08a2 68 8C                   		shlr	#8, r12
 2969 08a4 C7 8C 16                		mov.B	r12, 22[r8]
 474:../src/peripheral/uart.cpp **** 
 2970                             		.loc 10 474 0
 2971 08a7 DD AC 15                		mov.W	42[r10], r12
 2972 08aa C7 8C 17                		mov.B	r12, 23[r8]
 476:../src/peripheral/uart.cpp ****     buf[25] = ((0x000000ff & S12AD.ADDR6));
 2973                             		.loc 10 476 0
 2974 08ad DD AC 16                		mov.W	44[r10], r12
 2975 08b0 68 8C                   		shlr	#8, r12
 2976 08b2 C7 8C 18                		mov.B	r12, 24[r8]
 477:../src/peripheral/uart.cpp **** 
 2977                             		.loc 10 477 0
 2978 08b5 DD AC 16                		mov.W	44[r10], r12
 2979 08b8 C7 8C 19                		mov.B	r12, 25[r8]
 479:../src/peripheral/uart.cpp ****     buf[27] = ((0x000000ff & S12AD.ADDR7));
 2980                             		.loc 10 479 0
 2981 08bb DD AC 17                		mov.W	46[r10], r12
 2982 08be 68 8C                   		shlr	#8, r12
 2983 08c0 C7 8C 1A                		mov.B	r12, 26[r8]
 480:../src/peripheral/uart.cpp **** 
 2984                             		.loc 10 480 0
 2985 08c3 DD AA 17                		mov.W	46[r10], r10
 2986 08c6 C7 8A 1B                		mov.B	r10, 27[r8]
 482:../src/peripheral/uart.cpp ****     buf[29] = ((0x000000ff & S12AD1.ADDR8));
 2987                             		.loc 10 482 0
 2988 08c9 DD BA 18                		mov.W	48[r11], r10
 2989 08cc 68 8A                   		shlr	#8, r10
 2990 08ce C7 8A 1C                		mov.B	r10, 28[r8]
 483:../src/peripheral/uart.cpp **** 
 2991                             		.loc 10 483 0
 2992 08d1 DD BA 18                		mov.W	48[r11], r10
 2993 08d4 C7 8A 1D                		mov.B	r10, 29[r8]
 485:../src/peripheral/uart.cpp ****     buf[31] = ((0x000000ff & S12AD1.ADDR9));
 2994                             		.loc 10 485 0
 2995 08d7 DD BA 19                		mov.W	50[r11], r10
 2996 08da 68 8A                   		shlr	#8, r10
 2997 08dc C7 8A 1E                		mov.B	r10, 30[r8]
 486:../src/peripheral/uart.cpp **** 
 2998                             		.loc 10 486 0
 2999 08df DD BA 19                		mov.W	50[r11], r10
 3000 08e2 C7 8A 1F                		mov.B	r10, 31[r8]
 488:../src/peripheral/uart.cpp ****     buf[33] = ((0x000000ff & S12AD1.ADDR10));
 3001                             		.loc 10 488 0
 3002 08e5 DD BA 1A                		mov.W	52[r11], r10
 3003 08e8 68 8A                   		shlr	#8, r10
 3004 08ea C7 8A 20                		mov.B	r10, 32[r8]
 489:../src/peripheral/uart.cpp **** 
 3005                             		.loc 10 489 0
 3006 08ed DD B6 1A                		mov.W	52[r11], r6
 491:../src/peripheral/uart.cpp ****     buf[35] = ((0x000000ff & imu1.omega_raw[0]));
 3007                             		.loc 10 491 0
 3008 08f0 FB 92 00 00 00 00       		mov.L	#__ZZN7MPU925011getInstanceEvE8instance, r9
 3009 08f6 DC 98                   		mov.W	[r9], r8
 492:../src/peripheral/uart.cpp **** 
 3010                             		.loc 10 492 0
 3011 08f8 DC 99                   		mov.W	[r9], r9
 494:../src/peripheral/uart.cpp ****     buf[37] = ((0x000000ff & imu1.omega_raw[1]));
 3012                             		.loc 10 494 0
 3013 08fa FB A2 00 00 00 00       		mov.L	#__ZZN7MPU925011getInstanceEvE8instance, r10
 3014 0900 DD A1 01                		mov.W	2[r10], r1
 3015                             	.LVL224:
 495:../src/peripheral/uart.cpp **** 
 3016                             		.loc 10 495 0
 3017 0903 DD A2 01                		mov.W	2[r10], r2
 497:../src/peripheral/uart.cpp ****     buf[39] = ((0x000000ff & imu1.omega_raw[2]));
 3018                             		.loc 10 497 0
 3019 0906 DD A3 02                		mov.W	4[r10], r3
 498:../src/peripheral/uart.cpp **** 
 3020                             		.loc 10 498 0
 3021 0909 DD A4 02                		mov.W	4[r10], r4
 500:../src/peripheral/uart.cpp ****     buf[41] = ((0x000000ff & imu1.acc_raw[0]));
 3022                             		.loc 10 500 0
 3023 090c DD AE 03                		mov.W	6[r10], r14
 501:../src/peripheral/uart.cpp **** 
 3024                             		.loc 10 501 0
 3025 090f DD AD 03                		mov.W	6[r10], r13
 503:../src/peripheral/uart.cpp ****     buf[43] = ((0x000000ff & imu1.acc_raw[1]));
 3026                             		.loc 10 503 0
 3027 0912 DD AC 04                		mov.W	8[r10], r12
 504:../src/peripheral/uart.cpp **** 
 3028                             		.loc 10 504 0
 3029 0915 DD AB 04                		mov.W	8[r10], r11
 506:../src/peripheral/uart.cpp ****     buf[45] = ((0x000000ff & imu1.acc_raw[2]));
 3030                             		.loc 10 506 0
 3031 0918 DD AA 05                		mov.W	10[r10], r10
 491:../src/peripheral/uart.cpp ****     buf[35] = ((0x000000ff & imu1.omega_raw[0]));
 3032                             		.loc 10 491 0
 3033 091b 68 88                   		shlr	#8, r8
 494:../src/peripheral/uart.cpp ****     buf[37] = ((0x000000ff & imu1.omega_raw[1]));
 3034                             		.loc 10 494 0
 3035 091d 68 81                   		shlr	#8, r1
 497:../src/peripheral/uart.cpp ****     buf[39] = ((0x000000ff & imu1.omega_raw[2]));
 3036                             		.loc 10 497 0
 3037 091f 68 83                   		shlr	#8, r3
 500:../src/peripheral/uart.cpp ****     buf[41] = ((0x000000ff & imu1.acc_raw[0]));
 3038                             		.loc 10 500 0
 3039 0921 68 8E                   		shlr	#8, r14
 503:../src/peripheral/uart.cpp ****     buf[43] = ((0x000000ff & imu1.acc_raw[1]));
 3040                             		.loc 10 503 0
 3041 0923 68 8C                   		shlr	#8, r12
 506:../src/peripheral/uart.cpp ****     buf[45] = ((0x000000ff & imu1.acc_raw[2]));
 3042                             		.loc 10 506 0
 3043 0925 68 8A                   		shlr	#8, r10
 489:../src/peripheral/uart.cpp **** 
 3044                             		.loc 10 489 0
 3045 0927 ED 0F 0F                		mov.L	60[r0], r15
 3046 092a C7 F6 21                		mov.B	r6, 33[r15]
 491:../src/peripheral/uart.cpp ****     buf[35] = ((0x000000ff & imu1.omega_raw[0]));
 3047                             		.loc 10 491 0
 3048 092d C7 F8 22                		mov.B	r8, 34[r15]
 492:../src/peripheral/uart.cpp **** 
 3049                             		.loc 10 492 0
 3050 0930 C7 F9 23                		mov.B	r9, 35[r15]
 494:../src/peripheral/uart.cpp ****     buf[37] = ((0x000000ff & imu1.omega_raw[1]));
 3051                             		.loc 10 494 0
 3052 0933 C7 F1 24                		mov.B	r1, 36[r15]
 495:../src/peripheral/uart.cpp **** 
 3053                             		.loc 10 495 0
 3054 0936 C7 F2 25                		mov.B	r2, 37[r15]
 497:../src/peripheral/uart.cpp ****     buf[39] = ((0x000000ff & imu1.omega_raw[2]));
 3055                             		.loc 10 497 0
 3056 0939 C7 F3 26                		mov.B	r3, 38[r15]
 498:../src/peripheral/uart.cpp **** 
 3057                             		.loc 10 498 0
 3058 093c C7 F4 27                		mov.B	r4, 39[r15]
 500:../src/peripheral/uart.cpp ****     buf[41] = ((0x000000ff & imu1.acc_raw[0]));
 3059                             		.loc 10 500 0
 3060 093f C7 FE 28                		mov.B	r14, 40[r15]
 501:../src/peripheral/uart.cpp **** 
 3061                             		.loc 10 501 0
 3062 0942 C7 FD 29                		mov.B	r13, 41[r15]
 503:../src/peripheral/uart.cpp ****     buf[43] = ((0x000000ff & imu1.acc_raw[1]));
 3063                             		.loc 10 503 0
 3064 0945 C7 FC 2A                		mov.B	r12, 42[r15]
 504:../src/peripheral/uart.cpp **** 
 3065                             		.loc 10 504 0
 3066 0948 C7 FB 2B                		mov.B	r11, 43[r15]
 506:../src/peripheral/uart.cpp ****     buf[45] = ((0x000000ff & imu1.acc_raw[2]));
 3067                             		.loc 10 506 0
 3068 094b C7 FA 2C                		mov.B	r10, 44[r15]
 507:../src/peripheral/uart.cpp **** 
 3069                             		.loc 10 507 0
 3070 094e FB 62 00 00 00 00       		mov.L	#__ZZN7MPU925011getInstanceEvE8instance, r6
 3071 0954 DD 6F 05                		mov.W	10[r6], r15
 509:../src/peripheral/uart.cpp ****     buf[47] = ((0x000000ff & imu1.mag_raw[0]));
 3072                             		.loc 10 509 0
 3073 0957 99 E5                   		mov.W	12[r6], r5
 510:../src/peripheral/uart.cpp **** 
 3074                             		.loc 10 510 0
 3075 0959 99 E6                   		mov.W	12[r6], r6
 512:../src/peripheral/uart.cpp ****     buf[49] = ((0x000000ff & imu1.mag_raw[1]));
 3076                             		.loc 10 512 0
 3077 095b FB 92 00 00 00 00       		mov.L	#__ZZN7MPU925011getInstanceEvE8instance, r9
 3078 0961 DD 98 07                		mov.W	14[r9], r8
 513:../src/peripheral/uart.cpp **** 
 3079                             		.loc 10 513 0
 3080 0964 DD 99 07                		mov.W	14[r9], r9
 515:../src/peripheral/uart.cpp ****     buf[51] = ((0x000000ff & imu1.mag_raw[2]));
 3081                             		.loc 10 515 0
 3082 0967 FB A2 00 00 00 00       		mov.L	#__ZZN7MPU925011getInstanceEvE8instance, r10
 3083 096d DD A1 08                		mov.W	16[r10], r1
 516:../src/peripheral/uart.cpp **** 
 3084                             		.loc 10 516 0
 3085 0970 DD A2 08                		mov.W	16[r10], r2
 518:../src/peripheral/uart.cpp ****     buf[53] = ((0x000000ff & imu2.omega_raw[0]));
 3086                             		.loc 10 518 0
 3087 0973 DC 73                   		mov.W	[r7], r3
 519:../src/peripheral/uart.cpp **** 
 3088                             		.loc 10 519 0
 3089 0975 D4 70 24                		mov.W	[r7], 72[r0]
 521:../src/peripheral/uart.cpp ****     buf[55] = ((0x000000ff & imu2.omega_raw[1]));
 3090                             		.loc 10 521 0
 3091 0978 DD 7E 01                		mov.W	2[r7], r14
 522:../src/peripheral/uart.cpp **** 
 3092                             		.loc 10 522 0
 3093 097b D5 70 01 1C             		mov.W	2[r7], 56[r0]
 524:../src/peripheral/uart.cpp ****     buf[57] = ((0x000000ff & imu2.omega_raw[2]));
 3094                             		.loc 10 524 0
 3095 097f DD 7D 02                		mov.W	4[r7], r13
 525:../src/peripheral/uart.cpp **** 
 3096                             		.loc 10 525 0
 3097 0982 D5 70 02 20             		mov.W	4[r7], 64[r0]
 527:../src/peripheral/uart.cpp ****     buf[59] = ((0x000000ff & imu2.acc_raw[0]));
 3098                             		.loc 10 527 0
 3099 0986 DD 7C 03                		mov.W	6[r7], r12
 528:../src/peripheral/uart.cpp **** 
 3100                             		.loc 10 528 0
 3101 0989 D5 70 03 22             		mov.W	6[r7], 68[r0]
 530:../src/peripheral/uart.cpp ****     buf[61] = ((0x000000ff & imu2.acc_raw[1]));
 3102                             		.loc 10 530 0
 3103 098d DD 7B 04                		mov.W	8[r7], r11
 509:../src/peripheral/uart.cpp ****     buf[47] = ((0x000000ff & imu1.mag_raw[0]));
 3104                             		.loc 10 509 0
 3105 0990 68 85                   		shlr	#8, r5
 512:../src/peripheral/uart.cpp ****     buf[49] = ((0x000000ff & imu1.mag_raw[1]));
 3106                             		.loc 10 512 0
 3107 0992 68 88                   		shlr	#8, r8
 515:../src/peripheral/uart.cpp ****     buf[51] = ((0x000000ff & imu1.mag_raw[2]));
 3108                             		.loc 10 515 0
 3109 0994 68 81                   		shlr	#8, r1
 518:../src/peripheral/uart.cpp ****     buf[53] = ((0x000000ff & imu2.omega_raw[0]));
 3110                             		.loc 10 518 0
 3111 0996 68 83                   		shlr	#8, r3
 521:../src/peripheral/uart.cpp ****     buf[55] = ((0x000000ff & imu2.omega_raw[1]));
 3112                             		.loc 10 521 0
 3113 0998 68 8E                   		shlr	#8, r14
 524:../src/peripheral/uart.cpp ****     buf[57] = ((0x000000ff & imu2.omega_raw[2]));
 3114                             		.loc 10 524 0
 3115 099a 68 8D                   		shlr	#8, r13
 527:../src/peripheral/uart.cpp ****     buf[59] = ((0x000000ff & imu2.acc_raw[0]));
 3116                             		.loc 10 527 0
 3117 099c 68 8C                   		shlr	#8, r12
 530:../src/peripheral/uart.cpp ****     buf[61] = ((0x000000ff & imu2.acc_raw[1]));
 3118                             		.loc 10 530 0
 3119 099e 68 8B                   		shlr	#8, r11
 531:../src/peripheral/uart.cpp **** 
 3120                             		.loc 10 531 0
 3121 09a0 DD 7A 04                		mov.W	8[r7], r10
 507:../src/peripheral/uart.cpp **** 
 3122                             		.loc 10 507 0
 3123 09a3 AB 8C                   		mov.L	60[r0], r4
 3124 09a5 C7 4F 2D                		mov.B	r15, 45[r4]
 509:../src/peripheral/uart.cpp ****     buf[47] = ((0x000000ff & imu1.mag_raw[0]));
 3125                             		.loc 10 509 0
 3126 09a8 C7 45 2E                		mov.B	r5, 46[r4]
 510:../src/peripheral/uart.cpp **** 
 3127                             		.loc 10 510 0
 3128 09ab C7 46 2F                		mov.B	r6, 47[r4]
 512:../src/peripheral/uart.cpp ****     buf[49] = ((0x000000ff & imu1.mag_raw[1]));
 3129                             		.loc 10 512 0
 3130 09ae C7 48 30                		mov.B	r8, 48[r4]
 513:../src/peripheral/uart.cpp **** 
 3131                             		.loc 10 513 0
 3132 09b1 C7 49 31                		mov.B	r9, 49[r4]
 515:../src/peripheral/uart.cpp ****     buf[51] = ((0x000000ff & imu1.mag_raw[2]));
 3133                             		.loc 10 515 0
 3134 09b4 C7 41 32                		mov.B	r1, 50[r4]
 516:../src/peripheral/uart.cpp **** 
 3135                             		.loc 10 516 0
 3136 09b7 C7 42 33                		mov.B	r2, 51[r4]
 518:../src/peripheral/uart.cpp ****     buf[53] = ((0x000000ff & imu2.omega_raw[0]));
 3137                             		.loc 10 518 0
 3138 09ba C7 43 34                		mov.B	r3, 52[r4]
 519:../src/peripheral/uart.cpp **** 
 3139                             		.loc 10 519 0
 3140 09bd DD 06 24                		mov.W	72[r0], r6
 3141 09c0 C7 46 35                		mov.B	r6, 53[r4]
 521:../src/peripheral/uart.cpp ****     buf[55] = ((0x000000ff & imu2.omega_raw[1]));
 3142                             		.loc 10 521 0
 3143 09c3 C7 4E 36                		mov.B	r14, 54[r4]
 522:../src/peripheral/uart.cpp **** 
 3144                             		.loc 10 522 0
 3145 09c6 DD 08 1C                		mov.W	56[r0], r8
 3146 09c9 C7 48 37                		mov.B	r8, 55[r4]
 524:../src/peripheral/uart.cpp ****     buf[57] = ((0x000000ff & imu2.omega_raw[2]));
 3147                             		.loc 10 524 0
 3148 09cc C7 4D 38                		mov.B	r13, 56[r4]
 525:../src/peripheral/uart.cpp **** 
 3149                             		.loc 10 525 0
 3150 09cf DD 09 20                		mov.W	64[r0], r9
 3151 09d2 C7 49 39                		mov.B	r9, 57[r4]
 527:../src/peripheral/uart.cpp ****     buf[59] = ((0x000000ff & imu2.acc_raw[0]));
 3152                             		.loc 10 527 0
 3153 09d5 C7 4C 3A                		mov.B	r12, 58[r4]
 528:../src/peripheral/uart.cpp **** 
 3154                             		.loc 10 528 0
 3155 09d8 DD 0C 22                		mov.W	68[r0], r12
 3156 09db C7 4C 3B                		mov.B	r12, 59[r4]
 530:../src/peripheral/uart.cpp ****     buf[61] = ((0x000000ff & imu2.acc_raw[1]));
 3157                             		.loc 10 530 0
 3158 09de C7 4B 3C                		mov.B	r11, 60[r4]
 531:../src/peripheral/uart.cpp **** 
 3159                             		.loc 10 531 0
 3160 09e1 C7 4A 3D                		mov.B	r10, 61[r4]
 533:../src/peripheral/uart.cpp ****     buf[63] = ((0x000000ff & imu2.acc_raw[2]));
 3161                             		.loc 10 533 0
 3162 09e4 DD 7A 05                		mov.W	10[r7], r10
 534:../src/peripheral/uart.cpp **** 
 3163                             		.loc 10 534 0
 3164 09e7 99 7F                   		mov.W	10[r7], r7
 533:../src/peripheral/uart.cpp ****     buf[63] = ((0x000000ff & imu2.acc_raw[2]));
 3165                             		.loc 10 533 0
 3166 09e9 68 8A                   		shlr	#8, r10
 3167 09eb C7 4A 3E                		mov.B	r10, 62[r4]
 534:../src/peripheral/uart.cpp **** 
 3168                             		.loc 10 534 0
 3169 09ee C7 47 3F                		mov.B	r7, 63[r4]
 536:../src/peripheral/uart.cpp ****     buf[65] = ((0x000000ff & getTimeuCountIntCMT0()));
 3170                             		.loc 10 536 0
 3171 09f1 05 00 00 00             		bsr	__Z20getTimeuCountIntCMT0v
 3172                             	.LVL225:
 3173 09f5 68 81                   		shlr	#8, r1
 3174 09f7 ED 0D 0F                		mov.L	60[r0], r13
 3175 09fa C7 D1 40                		mov.B	r1, 64[r13]
 537:../src/peripheral/uart.cpp **** 
 3176                             		.loc 10 537 0
 3177 09fd 05 00 00 00             		bsr	__Z20getTimeuCountIntCMT0v
 3178                             	.LVL226:
 3179 0a01 C7 D1 41                		mov.B	r1, 65[r13]
 539:../src/peripheral/uart.cpp ****     buf[67] = ((0x000000ff & getTimeuCountIntCMT1()));
 3180                             		.loc 10 539 0
 3181 0a04 05 00 00 00             		bsr	__Z20getTimeuCountIntCMT1v
 3182                             	.LVL227:
 3183 0a08 68 81                   		shlr	#8, r1
 3184 0a0a C7 D1 42                		mov.B	r1, 66[r13]
 540:../src/peripheral/uart.cpp **** //
 3185                             		.loc 10 540 0
 3186 0a0d 05 00 00 00             		bsr	__Z20getTimeuCountIntCMT1v
 3187                             	.LVL228:
 3188 0a11 C7 D1 43                		mov.B	r1, 67[r13]
 542:../src/peripheral/uart.cpp ****     buf[69] = ((0x000000ff & TPU0.TCNT));
 3189                             		.loc 10 542 0
 3190 0a14 FB 7E 08 81 08          		mov.L	#0x88108, r7
 3191 0a19 DD 7A 07                		mov.W	14[r7], r10
 552:../src/peripheral/uart.cpp ****     set2ByteVal(72, m.duty_L, 32767);
 3192                             		.loc 10 552 0
 3193 0a1c FB 42 00 00 00 00       		mov.L	#__ZZN6UMouse11getInstanceEvE8instance, r4
 542:../src/peripheral/uart.cpp ****     buf[69] = ((0x000000ff & TPU0.TCNT));
 3194                             		.loc 10 542 0
 3195 0a22 68 8A                   		shlr	#8, r10
 3196 0a24 C7 DA 44                		mov.B	r10, 68[r13]
 543:../src/peripheral/uart.cpp **** /*
 3197                             		.loc 10 543 0
 3198 0a27 99 FF                   		mov.W	14[r7], r7
 555:../src/peripheral/uart.cpp ****     buf[75] = ((0x000000ff & MTU1.TCNT));
 3199                             		.loc 10 555 0
 3200 0a29 FB BE 90 12 0C          		mov.L	#0xc1290, r11
 543:../src/peripheral/uart.cpp **** /*
 3201                             		.loc 10 543 0
 3202 0a2e C7 D7 45                		mov.B	r7, 69[r13]
 552:../src/peripheral/uart.cpp ****     set2ByteVal(72, m.duty_L, 32767);
 3203                             		.loc 10 552 0
 3204 0a31 ED 4A 1B                		mov.L	108[r4], r10
 3205                             	.LVL229:
 553:../src/peripheral/uart.cpp **** 
 3206                             		.loc 10 553 0
 3207 0a34 AE C7                   		mov.L	104[r4], r7
 3208                             	.LBB2154:
 3209                             	.LBB2155:
 695:../src/peripheral/uart.cpp ****     periodicMsg[index]   = (0x0000ff00 & int_val) >> 8;
 3210                             		.loc 10 695 0
 3211 0a36 FD 72 3A 00 FE FF 46    		fmul	#0x46fffe00, r10
 3212                             	.LVL230:
 3213                             	.LBE2155:
 3214                             	.LBE2154:
 3215                             	.LBB2159:
 3216                             	.LBB2160:
 3217 0a3d FD 72 37 00 FE FF 46    		fmul	#0x46fffe00, r7
 3218                             	.LBE2160:
 3219                             	.LBE2159:
 555:../src/peripheral/uart.cpp ****     buf[75] = ((0x000000ff & MTU1.TCNT));
 3220                             		.loc 10 555 0
 3221 0a44 DD BC 7B                		mov.W	246[r11], r12
 3222                             	.LBB2164:
 3223                             	.LBB2156:
 695:../src/peripheral/uart.cpp ****     periodicMsg[index]   = (0x0000ff00 & int_val) >> 8;
 3224                             		.loc 10 695 0
 3225 0a47 FC 97 AA                		ftoi	r10, r10
 3226                             	.LVL231:
 3227                             	.LBE2156:
 3228                             	.LBE2164:
 3229                             	.LBB2165:
 3230                             	.LBB2161:
 3231 0a4a FC 97 77                		ftoi	r7, r7
 3232                             	.LVL232:
 3233                             	.LBE2161:
 3234                             	.LBE2165:
 3235                             	.LBB2166:
 3236                             	.LBB2157:
 696:../src/peripheral/uart.cpp ****     periodicMsg[index+1] = (0x000000ff & int_val)   ;
 3237                             		.loc 10 696 0
 3238 0a4d FB E2 B9 0B 00 00       		mov.L	#__ZL11periodicMsg, r14
 3239 0a53 FD 88 A3                		shlr	#8, r10, r3
 3240                             	.LBE2157:
 3241                             	.LBE2166:
 3242                             	.LBB2167:
 3243                             	.LBB2162:
 3244 0a56 FD 88 7D                		shlr	#8, r7, r13
 3245                             	.LBE2162:
 3246                             	.LBE2167:
 3247                             	.LBB2168:
 3248                             	.LBB2158:
 3249 0a59 C7 E3 46                		mov.B	r3, 70[r14]
 697:../src/peripheral/uart.cpp **** }
 3250                             		.loc 10 697 0
 3251 0a5c C7 EA 47                		mov.B	r10, 71[r14]
 3252                             	.LBE2158:
 3253                             	.LBE2168:
 3254                             	.LBB2169:
 3255                             	.LBB2163:
 696:../src/peripheral/uart.cpp ****     periodicMsg[index+1] = (0x000000ff & int_val)   ;
 3256                             		.loc 10 696 0
 3257 0a5f C7 ED 48                		mov.B	r13, 72[r14]
 697:../src/peripheral/uart.cpp **** }
 3258                             		.loc 10 697 0
 3259 0a62 C7 E7 49                		mov.B	r7, 73[r14]
 3260                             	.LBE2163:
 3261                             	.LBE2169:
 555:../src/peripheral/uart.cpp ****     buf[75] = ((0x000000ff & MTU1.TCNT));
 3262                             		.loc 10 555 0
 3263 0a65 FD 88 C7                		shlr	#8, r12, r7
 3264                             	.LVL233:
 3265 0a68 ED 0F 0F                		mov.L	60[r0], r15
 3266 0a6b C7 F7 4A                		mov.B	r7, 74[r15]
 3267                             	.LVL234:
 556:../src/peripheral/uart.cpp **** 
 3268                             		.loc 10 556 0
 3269 0a6e DD B7 7B                		mov.W	246[r11], r7
 558:../src/peripheral/uart.cpp ****     buf[77] = ((0x000000ff & MTU2.TCNT));
 3270                             		.loc 10 558 0
 3271 0a71 FB AE 92 12 0C          		mov.L	#0xc1292, r10
 3272                             	.LVL235:
 556:../src/peripheral/uart.cpp **** 
 3273                             		.loc 10 556 0
 3274 0a76 C7 F7 4B                		mov.B	r7, 75[r15]
 558:../src/peripheral/uart.cpp ****     buf[77] = ((0x000000ff & MTU2.TCNT));
 3275                             		.loc 10 558 0
 3276 0a79 DD AB BA                		mov.W	372[r10], r11
 3277                             	.LBB2170:
 3278                             	.LBB2171:
  21:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\tactsw.h **** 	};
 3279                             		.loc 2 21 0
 3280 0a7c FB 72 00 00 00 00       		mov.L	#__ZZN6TactSw11getInstanceEvE8instance, r7
 3281                             	.LBE2171:
 3282                             	.LBE2170:
 558:../src/peripheral/uart.cpp ****     buf[77] = ((0x000000ff & MTU2.TCNT));
 3283                             		.loc 10 558 0
 3284 0a82 68 8B                   		shlr	#8, r11
 3285 0a84 C7 FB 4C                		mov.B	r11, 76[r15]
 559:../src/peripheral/uart.cpp **** 
 3286                             		.loc 10 559 0
 3287 0a87 DD AB BA                		mov.W	372[r10], r11
 561:../src/peripheral/uart.cpp ****     buf[79] = ((0x000000ff & (tsw.getOntime())));
 3288                             		.loc 10 561 0
 3289 0a8a DC 7A                   		mov.W	[r7], r10
 3290 0a8c C5 7F 01 4E             		mov.B	1[r7], 78[r15]
 559:../src/peripheral/uart.cpp **** 
 3291                             		.loc 10 559 0
 3292 0a90 C7 FB 4D                		mov.B	r11, 77[r15]
 562:../src/peripheral/uart.cpp **** 
 3293                             		.loc 10 562 0
 3294 0a93 C7 FA 4F                		mov.B	r10, 79[r15]
 3295                             	.LVL236:
 3296                             	.LBB2172:
 3297                             	.LBB2173:
 3298                             	.LBB2174:
 3299                             	.LBB2175:
 3300                             	.LBB2176:
 3301                             	.LBB2177:
 337:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****     }
 3302                             		.loc 7 337 0
 3303 0a96 AB 09                   		mov.L	52[r0], r1
 3304 0a98 ED 1B 1D                		mov.L	116[r1], r11
 3305 0a9b ED 1D 21                		mov.L	132[r1], r13
 3306 0a9e AF 93                   		mov.L	120[r1], r3
 3307 0aa0 43 BD                   		sub	r11, r13
 3308 0aa2 ED 1C 1F                		mov.L	124[r1], r12
 3309 0aa5 AE 97                   		mov.L	104[r1], r7
 3310 0aa7 6A 2D                   		shar	#2, r13
 3311 0aa9 ED 1A 1C                		mov.L	112[r1], r10
 3312 0aac 60 1D                   		sub	#1, r13
 3313 0aae FF 0C C3                		sub	r12, r3, r12
 3314 0ab1 6C 8D                   		shll	#8, r13
 3315 0ab3 6A 1C                   		shar	#1, r12
 3316 0ab5 43 7A                   		sub	r7, r10
 3317 0ab7 4B DC                   		add	r13, r12
 3318 0ab9 6A 1A                   		shar	#1, r10
 3319 0abb 4B CA                   		add	r12, r10
 3320                             	.LBE2177:
 3321                             	.LBE2176:
 3322                             	.LBE2175:
1267:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	  __throw_out_of_range(__N("deque::_M_range_check"));
 3323                             		.loc 7 1267 0
 3324 0abd 3A E4 0A                		beq	.L274
 3325                             	.LVL237:
 3326                             	.LBE2174:
 3327                             	.LBE2173:
 3328                             	.LBB2179:
 3329                             	.LBB2180:
 3330                             	.LBB2181:
 3331                             	.LBB2182:
 3332                             	.LBB2183:
 3333                             	.LBB2184:
 190:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	if (__offset >= 0 && __offset < difference_type(_S_buffer_size()))
 3334                             		.loc 7 190 0
 3335 0ac0 FB A2 00 00 00 00       		mov.L	#__ZZN10WallSensor11getInstanceEvE8instance+108, r10
 3336 0ac6 EC AC                   		mov.L	[r10], r12
 3337 0ac8 FF 0C C7                		sub	r12, r7, r12
 3338 0acb FD A1 CA                		shar	#1, r12, r10
 3339                             	.LVL238:
 3340                             	.LBB2185:
 191:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	  _M_cur += __n;
 3341                             		.loc 7 191 0
 3342 0ace 75 5A FF                		cmp	#0xff, r10
 3343 0ad1 25 17                   		bleu	.L271
 3344                             	.LBB2186:
 198:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	    _M_set_node(_M_node + __node_offset);
 3345                             		.loc 7 198 0
 3346 0ad3 61 0A                   		cmp	#0, r10
 3347 0ad5 2A 05 38 DB 09          		ble	.L403
 3348 0ada 6A 9C                   		shar	#9, r12
 3349                             		.balign 8,3,2
 3350                             	.L273:
 3351                             	.LVL239:
 200:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 				 * difference_type(_S_buffer_size()));
 3352                             		.loc 7 200 0
 3353 0adc FD C8 C7                		shll	#8, r12, r7
 3354                             	.LVL240:
 3355 0adf 43 7A                   		sub	r7, r10
 3356                             	.LVL241:
 3357 0ae1 FE 6C B7                		mov.L	[r12,r11], r7
 3358 0ae4 4B AA                   		add	r10, r10
 3359 0ae6 4B A7                   		add	r10, r7
 3360                             	.LVL242:
 3361                             		.balign 8,3,1
 3362                             	.L271:
 3363                             	.LBE2186:
 3364                             	.LBE2185:
 3365                             	.LBE2184:
 3366                             	.LBE2183:
 3367                             	.LBE2182:
 3368                             	.LBE2181:
 3369                             	.LBE2180:
 3370                             	.LBE2179:
 3371                             	.LBE2172:
 564:../src/peripheral/uart.cpp ****     buf[95] = ((0x000000ff & (wallSen.right.at(0))));
 3372                             		.loc 10 564 0
 3373 0ae8 AB 8A                   		mov.L	60[r0], r2
 3374 0aea C5 72 01 5E             		mov.B	1[r7], 94[r2]
 3375                             	.LVL243:
 3376                             	.LBB2196:
 3377                             	.LBB2197:
 3378                             	.LBB2198:
 3379                             	.LBB2199:
 3380                             	.LBB2200:
 3381                             	.LBB2201:
 337:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****     }
 3382                             		.loc 7 337 0
 3383 0aee AB 0B                   		mov.L	52[r0], r3
 3384 0af0 ED 3B 1D                		mov.L	116[r3], r11
 3385 0af3 ED 3D 21                		mov.L	132[r3], r13
 3386 0af6 AF B3                   		mov.L	120[r3], r3
 3387 0af8 43 BD                   		sub	r11, r13
 3388 0afa AB 0D                   		mov.L	52[r0], r5
 3389 0afc ED 5C 1F                		mov.L	124[r5], r12
 3390 0aff AE D7                   		mov.L	104[r5], r7
 3391                             	.LVL244:
 3392 0b01 6A 2D                   		shar	#2, r13
 3393 0b03 ED 5A 1C                		mov.L	112[r5], r10
 3394 0b06 60 1D                   		sub	#1, r13
 3395 0b08 FF 0C C3                		sub	r12, r3, r12
 3396 0b0b 6C 8D                   		shll	#8, r13
 3397 0b0d 6A 1C                   		shar	#1, r12
 3398 0b0f 43 7A                   		sub	r7, r10
 3399 0b11 4B DC                   		add	r13, r12
 3400 0b13 6A 1A                   		shar	#1, r10
 3401 0b15 4B CA                   		add	r12, r10
 3402                             	.LBE2201:
 3403                             	.LBE2200:
 3404                             	.LBE2199:
1267:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	  __throw_out_of_range(__N("deque::_M_range_check"));
 3405                             		.loc 7 1267 0
 3406 0b17 3A 8A 0A                		beq	.L274
 3407                             	.LVL245:
 3408                             	.LBE2198:
 3409                             	.LBE2197:
 3410                             	.LBB2202:
 3411                             	.LBB2203:
 3412                             	.LBB2204:
 3413                             	.LBB2205:
 3414                             	.LBB2206:
 3415                             	.LBB2207:
 190:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	if (__offset >= 0 && __offset < difference_type(_S_buffer_size()))
 3416                             		.loc 7 190 0
 3417 0b1a FB A2 00 00 00 00       		mov.L	#__ZZN10WallSensor11getInstanceEvE8instance+108, r10
 3418 0b20 EC AC                   		mov.L	[r10], r12
 3419 0b22 FF 0C C7                		sub	r12, r7, r12
 3420 0b25 FD A1 CA                		shar	#1, r12, r10
 3421                             	.LVL246:
 3422                             	.LBB2208:
 191:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	  _M_cur += __n;
 3423                             		.loc 7 191 0
 3424 0b28 75 5A FF                		cmp	#0xff, r10
 3425 0b2b 25 19                   		bleu	.L275
 3426                             	.LBB2209:
 198:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	    _M_set_node(_M_node + __node_offset);
 3427                             		.loc 7 198 0
 3428 0b2d 61 0A                   		cmp	#0, r10
 3429 0b2f 2A 05 38 8D 09          		ble	.L404
 3430 0b34 6A 9C                   		shar	#9, r12
 3431 0b36 EF 00                   		.balign 8,3,2
 3432                             	.L277:
 3433                             	.LVL247:
 200:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 				 * difference_type(_S_buffer_size()));
 3434                             		.loc 7 200 0
 3435 0b38 FD C8 C7                		shll	#8, r12, r7
 3436                             	.LVL248:
 3437 0b3b 43 7A                   		sub	r7, r10
 3438                             	.LVL249:
 3439 0b3d FE 6C B7                		mov.L	[r12,r11], r7
 3440 0b40 4B AA                   		add	r10, r10
 3441 0b42 4B A7                   		add	r10, r7
 3442                             	.LVL250:
 3443                             		.balign 8,3,1
 3444                             	.L275:
 3445                             	.LBE2209:
 3446                             	.LBE2208:
 3447                             	.LBE2207:
 3448                             	.LBE2206:
 3449                             	.LBE2205:
 3450                             	.LBE2204:
 3451                             	.LBE2203:
 3452                             	.LBE2202:
 3453                             	.LBE2196:
 3454                             	.LBB2218:
 3455                             	.LBB2219:
 3456                             	.LBB2220:
 3457                             	.LBB2221:
 3458                             	.LBB2222:
 3459                             	.LBB2223:
 337:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****     }
 3460                             		.loc 7 337 0
 3461 0b44 AB 0E                   		mov.L	52[r0], r6
 3462 0b46 ED 6B 09                		mov.L	36[r6], r11
 3463 0b49 AB 6B                   		mov.L	52[r6], r3
 3464 0b4b AA E2                   		mov.L	40[r6], r2
 3465 0b4d 43 B3                   		sub	r11, r3
 3466 0b4f ED 6D 0B                		mov.L	44[r6], r13
 3467 0b52 ED 6A 06                		mov.L	24[r6], r10
 3468 0b55 6A 23                   		shar	#2, r3
 3469 0b57 ED 6C 08                		mov.L	32[r6], r12
 3470 0b5a 60 13                   		sub	#1, r3
 3471 0b5c FF 0D D2                		sub	r13, r2, r13
 3472 0b5f 6C 83                   		shll	#8, r3
 3473 0b61 6A 1D                   		shar	#1, r13
 3474 0b63 43 AC                   		sub	r10, r12
 3475 0b65 4B 3D                   		add	r3, r13
 3476 0b67 6A 1C                   		shar	#1, r12
 3477                             	.LBE2223:
 3478                             	.LBE2222:
 3479                             	.LBE2221:
 3480                             	.LBE2220:
 3481                             	.LBE2219:
 3482                             	.LBE2218:
 565:../src/peripheral/uart.cpp **** 
 3483                             		.loc 10 565 0
 3484 0b69 ED 08 0F                		mov.L	60[r0], r8
 3485 0b6c C4 78 5F                		mov.B	[r7], 95[r8]
 3486                             	.LVL251:
 3487                             	.LBB2268:
 3488                             	.LBB2228:
 3489                             	.LBB2227:
 3490                             	.LBB2226:
 3491                             	.LBB2225:
 3492                             	.LBB2224:
 337:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****     }
 3493                             		.loc 7 337 0
 3494 0b6f FF 27 CD                		add	r12, r13, r7
 3495                             	.LVL252:
 3496                             	.LBE2224:
 3497                             	.LBE2225:
 3498                             	.LBE2226:
1267:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	  __throw_out_of_range(__N("deque::_M_range_check"));
 3499                             		.loc 7 1267 0
 3500 0b72 3A 2F 0A                		beq	.L274
 3501                             	.LVL253:
 3502                             	.LBE2227:
 3503                             	.LBE2228:
 3504                             	.LBB2229:
 3505                             	.LBB2230:
 3506                             	.LBB2231:
 3507                             	.LBB2232:
 3508                             	.LBB2233:
 3509                             	.LBB2234:
 190:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	if (__offset >= 0 && __offset < difference_type(_S_buffer_size()))
 3510                             		.loc 7 190 0
 3511 0b75 FB 72 00 00 00 00       		mov.L	#__ZZN10WallSensor11getInstanceEvE8instance+28, r7
 3512 0b7b EC 7C                   		mov.L	[r7], r12
 3513 0b7d FF 0C CA                		sub	r12, r10, r12
 3514 0b80 FD A1 C7                		shar	#1, r12, r7
 3515                             	.LVL254:
 3516                             	.LBB2235:
 191:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	  _M_cur += __n;
 3517                             		.loc 7 191 0
 3518 0b83 75 57 FF                		cmp	#0xff, r7
 3519 0b86 25 05 38 91 04          		bgtu	.L405
 3520                             	.LVL255:
 3521                             	.LBE2235:
 3522                             	.LBE2234:
 3523                             	.LBE2233:
 3524                             	.LBE2232:
 3525                             	.LBE2231:
 3526                             	.LBE2230:
 3527                             	.LBE2229:
 3528                             	.LBE2268:
 567:../src/peripheral/uart.cpp ****     buf[97] = ((0x000000ff & (wallSen.ahead.at(0))));
 3529                             		.loc 10 567 0
 3530 0b8b ED 0B 0F                		mov.L	60[r0], r11
 3531 0b8e C5 AB 01 60             		mov.B	1[r10], 96[r11]
 3532                             	.LVL256:
 3533 0b92 EF BF                   		mov.L	r11, r15
 3534                             	.LVL257:
 3535                             		.balign 8,3,1
 3536                             	.L312:
 3537                             	.LBB2269:
 3538                             	.LBB2270:
 3539                             	.LBB2271:
 3540                             	.LBB2272:
 3541                             	.LBB2273:
 3542                             	.LBB2274:
 337:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****     }
 3543                             		.loc 7 337 0
 3544 0b94 ED 0C 0D                		mov.L	52[r0], r12
 3545 0b97 ED CB 13                		mov.L	76[r12], r11
 3546 0b9a ED C3 17                		mov.L	92[r12], r3
 3547 0b9d ED C2 14                		mov.L	80[r12], r2
 3548 0ba0 43 B3                   		sub	r11, r3
 3549 0ba2 ED CD 15                		mov.L	84[r12], r13
 3550 0ba5 ED C7 10                		mov.L	64[r12], r7
 3551 0ba8 6A 23                   		shar	#2, r3
 3552 0baa ED CC 12                		mov.L	72[r12], r12
 3553 0bad 60 13                   		sub	#1, r3
 3554 0baf FF 0D D2                		sub	r13, r2, r13
 3555 0bb2 6C 83                   		shll	#8, r3
 3556 0bb4 6A 1D                   		shar	#1, r13
 3557 0bb6 43 7C                   		sub	r7, r12
 3558 0bb8 4B 3D                   		add	r3, r13
 3559 0bba 6A 1C                   		shar	#1, r12
 3560                             	.LBE2274:
 3561                             	.LBE2273:
 3562                             	.LBE2272:
 3563                             	.LBE2271:
 3564                             	.LBE2270:
 3565                             	.LBE2269:
 568:../src/peripheral/uart.cpp **** 
 3566                             		.loc 10 568 0
 3567 0bbc C4 AF 61                		mov.B	[r10], 97[r15]
 3568                             	.LVL258:
 3569                             	.LBB2319:
 3570                             	.LBB2279:
 3571                             	.LBB2278:
 3572                             	.LBB2277:
 3573                             	.LBB2276:
 3574                             	.LBB2275:
 337:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****     }
 3575                             		.loc 7 337 0
 3576 0bbf FF 2A CD                		add	r12, r13, r10
 3577                             	.LBE2275:
 3578                             	.LBE2276:
 3579                             	.LBE2277:
1267:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	  __throw_out_of_range(__N("deque::_M_range_check"));
 3580                             		.loc 7 1267 0
 3581 0bc2 3A DF 09                		beq	.L274
 3582                             	.LVL259:
 3583                             	.LBE2278:
 3584                             	.LBE2279:
 3585                             	.LBB2280:
 3586                             	.LBB2281:
 3587                             	.LBB2282:
 3588                             	.LBB2283:
 3589                             	.LBB2284:
 3590                             	.LBB2285:
 190:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	if (__offset >= 0 && __offset < difference_type(_S_buffer_size()))
 3591                             		.loc 7 190 0
 3592 0bc5 FB A2 00 00 00 00       		mov.L	#__ZZN10WallSensor11getInstanceEvE8instance+68, r10
 3593 0bcb EC AC                   		mov.L	[r10], r12
 3594 0bcd FF 0C C7                		sub	r12, r7, r12
 3595 0bd0 FD A1 CA                		shar	#1, r12, r10
 3596                             	.LVL260:
 3597                             	.LBB2286:
 191:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	  _M_cur += __n;
 3598                             		.loc 7 191 0
 3599 0bd3 75 5A FF                		cmp	#0xff, r10
 3600 0bd6 25 05 38 08 04          		bgtu	.L406
 3601                             	.LVL261:
 3602                             	.LBE2286:
 3603                             	.LBE2285:
 3604                             	.LBE2284:
 3605                             	.LBE2283:
 3606                             	.LBE2282:
 3607                             	.LBE2281:
 3608                             	.LBE2280:
 3609                             	.LBE2319:
 570:../src/peripheral/uart.cpp ****     buf[99] = ((0x000000ff & (wallSen.left.at(0))));
 3610                             		.loc 10 570 0
 3611 0bdb ED 0C 0F                		mov.L	60[r0], r12
 3612 0bde C5 7C 01 62             		mov.B	1[r7], 98[r12]
 3613                             	.LVL262:
 3614 0be2 EF C2                   		mov.L	r12, r2
 3615                             	.LVL263:
 3616                             		.balign 8,3,1
 3617                             	.L313:
 571:../src/peripheral/uart.cpp **** 
 3618                             		.loc 10 571 0
 3619 0be4 C4 72 63                		mov.B	[r7], 99[r2]
 632:../src/peripheral/uart.cpp ****     set2ByteVal(102, m.t_ang_v, 20.0);
 3620                             		.loc 10 632 0
 3621 0be7 A9 42                   		mov.L	16[r4], r2
 3622                             	.LVL264:
 633:../src/peripheral/uart.cpp ****     set2ByteVal(104, m.t_ang, 20.0);
 3623                             		.loc 10 633 0
 3624 0be9 A9 4B                   		mov.L	20[r4], r3
 634:../src/peripheral/uart.cpp ****     set2ByteVal(106, m.accum_ang, 20.0);
 3625                             		.loc 10 634 0
 3626 0beb ED 48 06                		mov.L	24[r4], r8
 635:../src/peripheral/uart.cpp ****     set2ByteVal(108, imu1.omega_c[2]);
 3627                             		.loc 10 635 0
 3628 0bee ED 49 07                		mov.L	28[r4], r9
 636:../src/peripheral/uart.cpp **** 
 3629                             		.loc 10 636 0
 3630 0bf1 FB 52 00 00 00 00       		mov.L	#__ZZN7MPU925011getInstanceEvE8instance, r5
 3631 0bf7 9D 5E                   		mov.W	42[r5], r6
 638:../src/peripheral/uart.cpp ****     set2ByteVal(112, m.t_v, 3000.0);
 3632                             		.loc 10 638 0
 3633 0bf9 EC 41                   		mov.L	[r4], r1
 639:../src/peripheral/uart.cpp ****     set2ByteVal(114, m.t_x, 3000.0);
 3634                             		.loc 10 639 0
 3635 0bfb ED 4D 01                		mov.L	4[r4], r13
 640:../src/peripheral/uart.cpp ****     set2ByteVal(116, m.accum_x, 3000.0);
 3636                             		.loc 10 640 0
 3637 0bfe ED 4C 02                		mov.L	8[r4], r12
 641:../src/peripheral/uart.cpp ****     set2ByteVal(118, m.a_v, 1000.0);
 3638                             		.loc 10 641 0
 3639 0c01 ED 4B 03                		mov.L	12[r4], r11
 642:../src/peripheral/uart.cpp ****     set2ByteVal(120, m.a_h, 1000.0);
 3640                             		.loc 10 642 0
 3641 0c04 ED 4A 18                		mov.L	96[r4], r10
 643:../src/peripheral/uart.cpp ****     set2ByteVal(122, m.v_enc, 3000.0 );
 3642                             		.loc 10 643 0
 3643 0c07 AE 4F                   		mov.L	100[r4], r7
 3644                             	.LBB2320:
 3645                             	.LBB2321:
 695:../src/peripheral/uart.cpp ****     periodicMsg[index]   = (0x0000ff00 & int_val) >> 8;
 3646                             		.loc 10 695 0
 3647 0c09 FD 72 32 00 00 A0 41    		fmul	#0x41a00000, r2
 3648                             	.LVL265:
 3649                             	.LBE2321:
 3650                             	.LBE2320:
 3651                             	.LBB2325:
 3652                             	.LBB2326:
 3653 0c10 FD 72 33 00 00 A0 41    		fmul	#0x41a00000, r3
 3654                             	.LBE2326:
 3655                             	.LBE2325:
 3656                             	.LBB2330:
 3657                             	.LBB2331:
 3658 0c17 FD 72 38 00 00 A0 41    		fmul	#0x41a00000, r8
 3659                             	.LBE2331:
 3660                             	.LBE2330:
 3661                             	.LBB2335:
 3662                             	.LBB2336:
 3663 0c1e FD 72 39 00 00 A0 41    		fmul	#0x41a00000, r9
 3664                             	.LBE2336:
 3665                             	.LBE2335:
 3666                             	.LBB2340:
 3667                             	.LBB2341:
 3668 0c25 FD 72 31 00 00 7A 44    		fmul	#0x447a0000, r1
 3669                             	.LBE2341:
 3670                             	.LBE2340:
 3671                             	.LBB2345:
 3672                             	.LBB2346:
 3673 0c2c FD 72 3D 00 80 3B 45    		fmul	#0x453b8000, r13
 3674                             	.LBE2346:
 3675                             	.LBE2345:
 3676                             	.LBB2350:
 3677                             	.LBB2351:
 3678 0c33 FD 72 3C 00 80 3B 45    		fmul	#0x453b8000, r12
 3679                             	.LBE2351:
 3680                             	.LBE2350:
 3681                             	.LBB2355:
 3682                             	.LBB2356:
 3683 0c3a FD 72 3B 00 80 3B 45    		fmul	#0x453b8000, r11
 3684                             	.LBE2356:
 3685                             	.LBE2355:
 3686                             	.LBB2360:
 3687                             	.LBB2361:
 3688 0c41 FD 72 3A 00 00 7A 44    		fmul	#0x447a0000, r10
 3689                             	.LBE2361:
 3690                             	.LBE2360:
 3691                             	.LBB2365:
 3692                             	.LBB2322:
 3693 0c48 FC 97 22                		ftoi	r2, r2
 3694                             	.LVL266:
 3695                             	.LBE2322:
 3696                             	.LBE2365:
 3697                             	.LBB2366:
 3698                             	.LBB2327:
 3699 0c4b FC 97 33                		ftoi	r3, r3
 3700                             	.LVL267:
 3701                             	.LBE2327:
 3702                             	.LBE2366:
 3703                             	.LBB2367:
 3704                             	.LBB2332:
 3705 0c4e FC 97 88                		ftoi	r8, r8
 3706                             	.LVL268:
 3707                             	.LBE2332:
 3708                             	.LBE2367:
 3709                             	.LBB2368:
 3710                             	.LBB2337:
 3711 0c51 FC 97 99                		ftoi	r9, r9
 3712                             	.LVL269:
 3713                             	.LBE2337:
 3714                             	.LBE2368:
 3715                             	.LBB2369:
 3716                             	.LBB2342:
 3717 0c54 FC 97 11                		ftoi	r1, r1
 3718                             	.LVL270:
 3719                             	.LBE2342:
 3720                             	.LBE2369:
 3721                             	.LBB2370:
 3722                             	.LBB2347:
 3723 0c57 FC 97 DD                		ftoi	r13, r13
 3724                             	.LVL271:
 3725                             	.LBE2347:
 3726                             	.LBE2370:
 3727                             	.LBB2371:
 3728                             	.LBB2352:
 3729 0c5a FC 97 CC                		ftoi	r12, r12
 3730                             	.LVL272:
 3731                             	.LBE2352:
 3732                             	.LBE2371:
 3733                             	.LBB2372:
 3734                             	.LBB2357:
 3735 0c5d FC 97 BB                		ftoi	r11, r11
 3736                             	.LVL273:
 3737                             	.LBE2357:
 3738                             	.LBE2372:
 3739                             	.LBB2373:
 3740                             	.LBB2362:
 3741 0c60 FC 97 AA                		ftoi	r10, r10
 3742                             	.LVL274:
 3743                             	.LBE2362:
 3744                             	.LBE2373:
 3745                             	.LBB2374:
 3746                             	.LBB2375:
 3747 0c63 FD 72 37 00 00 7A 44    		fmul	#0x447a0000, r7
 3748                             	.LVL275:
 3749 0c6a FC 97 77                		ftoi	r7, r7
 3750 0c6d A3 0F                   		mov.L	r7, 52[r0]
 3751                             	.LVL276:
 3752                             	.LBE2375:
 3753                             	.LBE2374:
 3754                             	.LBB2379:
 3755                             	.LBB2323:
 696:../src/peripheral/uart.cpp ****     periodicMsg[index+1] = (0x000000ff & int_val)   ;
 3756                             		.loc 10 696 0
 3757 0c6f FD 88 27                		shlr	#8, r2, r7
 3758                             	.LVL277:
 3759 0c72 A3 87                   		mov.L	r7, 56[r0]
 3760                             	.LBE2323:
 3761                             	.LBE2379:
 3762                             	.LBB2380:
 3763                             	.LBB2328:
 3764 0c74 FD 88 3F                		shlr	#8, r3, r15
 3765 0c77 E7 0F 10                		mov.L	r15, 64[r0]
 3766                             	.LBE2328:
 3767                             	.LBE2380:
 3768                             	.LBB2381:
 3769                             	.LBB2333:
 3770 0c7a FD 88 85                		shlr	#8, r8, r5
 3771 0c7d A4 0D                   		mov.L	r5, 68[r0]
 3772                             	.LBE2333:
 3773                             	.LBE2381:
 3774                             	.LBB2382:
 3775                             	.LBB2338:
 3776 0c7f FD 88 97                		shlr	#8, r9, r7
 3777 0c82 A4 87                   		mov.L	r7, 72[r0]
 3778                             	.LBE2338:
 3779                             	.LBE2382:
 3780                             	.LBB2383:
 3781                             	.LBB2384:
 701:../src/peripheral/uart.cpp ****     periodicMsg[index+1] = (0x000000ff & val)   ;
 3782                             		.loc 10 701 0
 3783 0c84 EF 6F                   		mov.L	r6, r15
 3784 0c86 68 8F                   		shlr	#8, r15
 3785 0c88 E7 0F 13                		mov.L	r15, 76[r0]
 3786                             	.LBE2384:
 3787                             	.LBE2383:
 3788                             	.LBB2386:
 3789                             	.LBB2343:
 696:../src/peripheral/uart.cpp ****     periodicMsg[index+1] = (0x000000ff & int_val)   ;
 3790                             		.loc 10 696 0
 3791 0c8b FD 88 15                		shlr	#8, r1, r5
 3792 0c8e A5 05                   		mov.L	r5, 80[r0]
 3793                             	.LBE2343:
 3794                             	.LBE2386:
 3795                             	.LBB2387:
 3796                             	.LBB2348:
 3797 0c90 FD 88 D7                		shlr	#8, r13, r7
 3798 0c93 A5 0F                   		mov.L	r7, 84[r0]
 3799                             	.LBE2348:
 3800                             	.LBE2387:
 3801                             	.LBB2388:
 3802                             	.LBB2353:
 3803 0c95 FD 88 CF                		shlr	#8, r12, r15
 3804 0c98 E7 0F 17                		mov.L	r15, 92[r0]
 3805                             	.LBE2353:
 3806                             	.LBE2388:
 3807                             	.LBB2389:
 3808                             	.LBB2358:
 3809 0c9b FD 88 BF                		shlr	#8, r11, r15
 3810                             	.LBE2358:
 3811                             	.LBE2389:
 3812                             	.LBB2390:
 3813                             	.LBB2363:
 3814 0c9e FD 88 A5                		shlr	#8, r10, r5
 3815                             	.LBE2363:
 3816                             	.LBE2390:
 3817                             	.LBB2391:
 3818                             	.LBB2376:
 3819 0ca1 AB 0F                   		mov.L	52[r0], r7
 3820 0ca3 68 87                   		shlr	#8, r7
 3821 0ca5 A5 87                   		mov.L	r7, 88[r0]
 3822                             	.LBE2376:
 3823                             	.LBE2391:
 3824                             	.LBB2392:
 3825                             	.LBB2324:
 3826 0ca7 AB 87                   		mov.L	56[r0], r7
 3827 0ca9 C7 E7 64                		mov.B	r7, 100[r14]
 697:../src/peripheral/uart.cpp **** }
 3828                             		.loc 10 697 0
 3829 0cac C7 E2 65                		mov.B	r2, 101[r14]
 3830                             	.LBE2324:
 3831                             	.LBE2392:
 3832                             	.LBB2393:
 3833                             	.LBB2329:
 696:../src/peripheral/uart.cpp ****     periodicMsg[index+1] = (0x000000ff & int_val)   ;
 3834                             		.loc 10 696 0
 3835 0caf AC 02                   		mov.L	64[r0], r2
 3836                             	.LVL278:
 3837 0cb1 C7 E2 66                		mov.B	r2, 102[r14]
 697:../src/peripheral/uart.cpp **** }
 3838                             		.loc 10 697 0
 3839 0cb4 C7 E3 67                		mov.B	r3, 103[r14]
 3840                             	.LBE2329:
 3841                             	.LBE2393:
 3842                             	.LBB2394:
 3843                             	.LBB2334:
 696:../src/peripheral/uart.cpp ****     periodicMsg[index+1] = (0x000000ff & int_val)   ;
 3844                             		.loc 10 696 0
 3845 0cb7 AC 0B                   		mov.L	68[r0], r3
 3846                             	.LVL279:
 3847 0cb9 C7 E3 68                		mov.B	r3, 104[r14]
 697:../src/peripheral/uart.cpp **** }
 3848                             		.loc 10 697 0
 3849 0cbc C7 E8 69                		mov.B	r8, 105[r14]
 3850                             	.LBE2334:
 3851                             	.LBE2394:
 3852                             	.LBB2395:
 3853                             	.LBB2339:
 696:../src/peripheral/uart.cpp ****     periodicMsg[index+1] = (0x000000ff & int_val)   ;
 3854                             		.loc 10 696 0
 3855 0cbf AC 87                   		mov.L	72[r0], r7
 3856 0cc1 C7 E7 6A                		mov.B	r7, 106[r14]
 697:../src/peripheral/uart.cpp **** }
 3857                             		.loc 10 697 0
 3858 0cc4 C7 E9 6B                		mov.B	r9, 107[r14]
 3859                             	.LBE2339:
 3860                             	.LBE2395:
 3861                             	.LBB2396:
 3862                             	.LBB2385:
 701:../src/peripheral/uart.cpp ****     periodicMsg[index+1] = (0x000000ff & val)   ;
 3863                             		.loc 10 701 0
 3864 0cc7 ED 08 13                		mov.L	76[r0], r8
 3865                             	.LVL280:
 3866 0cca C7 E8 6C                		mov.B	r8, 108[r14]
 702:../src/peripheral/uart.cpp **** }
 3867                             		.loc 10 702 0
 3868 0ccd C7 E6 6D                		mov.B	r6, 109[r14]
 3869                             	.LBE2385:
 3870                             	.LBE2396:
 3871                             	.LBB2397:
 3872                             	.LBB2344:
 696:../src/peripheral/uart.cpp ****     periodicMsg[index+1] = (0x000000ff & int_val)   ;
 3873                             		.loc 10 696 0
 3874 0cd0 ED 09 14                		mov.L	80[r0], r9
 3875                             	.LVL281:
 3876 0cd3 C7 E9 6E                		mov.B	r9, 110[r14]
 697:../src/peripheral/uart.cpp **** }
 3877                             		.loc 10 697 0
 3878 0cd6 C7 E1 6F                		mov.B	r1, 111[r14]
 3879                             	.LBE2344:
 3880                             	.LBE2397:
 3881                             	.LBB2398:
 3882                             	.LBB2349:
 696:../src/peripheral/uart.cpp ****     periodicMsg[index+1] = (0x000000ff & int_val)   ;
 3883                             		.loc 10 696 0
 3884 0cd9 AD 09                   		mov.L	84[r0], r1
 3885                             	.LVL282:
 3886 0cdb C7 E1 70                		mov.B	r1, 112[r14]
 697:../src/peripheral/uart.cpp **** }
 3887                             		.loc 10 697 0
 3888 0cde C7 ED 71                		mov.B	r13, 113[r14]
 3889                             	.LBE2349:
 3890                             	.LBE2398:
 3891                             	.LBB2399:
 3892                             	.LBB2354:
 696:../src/peripheral/uart.cpp ****     periodicMsg[index+1] = (0x000000ff & int_val)   ;
 3893                             		.loc 10 696 0
 3894 0ce1 AD 8A                   		mov.L	92[r0], r2
 3895 0ce3 C7 E2 72                		mov.B	r2, 114[r14]
 697:../src/peripheral/uart.cpp **** }
 3896                             		.loc 10 697 0
 3897 0ce6 C7 EC 73                		mov.B	r12, 115[r14]
 3898                             	.LBE2354:
 3899                             	.LBE2399:
 3900                             	.LBB2400:
 3901                             	.LBB2359:
 696:../src/peripheral/uart.cpp ****     periodicMsg[index+1] = (0x000000ff & int_val)   ;
 3902                             		.loc 10 696 0
 3903 0ce9 C7 EF 74                		mov.B	r15, 116[r14]
 697:../src/peripheral/uart.cpp **** }
 3904                             		.loc 10 697 0
 3905 0cec C7 EB 75                		mov.B	r11, 117[r14]
 3906                             	.LBE2359:
 3907                             	.LBE2400:
 3908                             	.LBB2401:
 3909                             	.LBB2364:
 696:../src/peripheral/uart.cpp ****     periodicMsg[index+1] = (0x000000ff & int_val)   ;
 3910                             		.loc 10 696 0
 3911 0cef C7 E5 76                		mov.B	r5, 118[r14]
 697:../src/peripheral/uart.cpp **** }
 3912                             		.loc 10 697 0
 3913 0cf2 C7 EA 77                		mov.B	r10, 119[r14]
 3914                             	.LBE2364:
 3915                             	.LBE2401:
 3916                             	.LBB2402:
 3917                             	.LBB2377:
 696:../src/peripheral/uart.cpp ****     periodicMsg[index+1] = (0x000000ff & int_val)   ;
 3918                             		.loc 10 696 0
 3919 0cf5 AD 83                   		mov.L	88[r0], r3
 3920 0cf7 C7 E3 78                		mov.B	r3, 120[r14]
 3921                             	.LBE2377:
 3922                             	.LBE2402:
 644:../src/peripheral/uart.cpp ****     set2ByteVal(124, m.wall_P, 3000.0);
 3923                             		.loc 10 644 0
 3924 0cfa EE 47 61 02             		mov.L	2436[r4], r7
 3925                             	.LVL283:
 645:../src/peripheral/uart.cpp ****     set2ByteVal(126, m.wall_I, 3000.0);
 3926                             		.loc 10 645 0
 3927 0cfe ED 4B 09                		mov.L	36[r4], r11
 3928                             	.LVL284:
 3929                             	.LBB2403:
 3930                             	.LBB2404:
 695:../src/peripheral/uart.cpp ****     periodicMsg[index]   = (0x0000ff00 & int_val) >> 8;
 3931                             		.loc 10 695 0
 3932 0d01 FD 72 37 00 80 3B 45    		fmul	#0x453b8000, r7
 3933                             	.LVL285:
 3934                             	.LBE2404:
 3935                             	.LBE2403:
 646:../src/peripheral/uart.cpp ****     set2ByteVal(128, m.wall_D, 3000.0);
 3936                             		.loc 10 646 0
 3937 0d08 ED 48 0A                		mov.L	40[r4], r8
 3938                             	.LBB2408:
 3939                             	.LBB2405:
 695:../src/peripheral/uart.cpp ****     periodicMsg[index]   = (0x0000ff00 & int_val) >> 8;
 3940                             		.loc 10 695 0
 3941 0d0b FC 97 76                		ftoi	r7, r6
 3942                             	.LVL286:
 3943                             	.LBE2405:
 3944                             	.LBE2408:
 647:../src/peripheral/uart.cpp ****     set2ByteVal(130, m.v_P, 3000.0);
 3945                             		.loc 10 647 0
 3946 0d0e ED 49 0B                		mov.L	44[r4], r9
 648:../src/peripheral/uart.cpp ****     set2ByteVal(132, m.v_I, 3000.0);
 3947                             		.loc 10 648 0
 3948 0d11 AB 41                   		mov.L	48[r4], r1
 649:../src/peripheral/uart.cpp ****     set2ByteVal(134, m.v_D, 3000.0);
 3949                             		.loc 10 649 0
 3950 0d13 AB 4A                   		mov.L	52[r4], r2
 650:../src/peripheral/uart.cpp ****     set2ByteVal(136, m.ang_P, 3000.0);
 3951                             		.loc 10 650 0
 3952 0d15 AB C3                   		mov.L	56[r4], r3
 651:../src/peripheral/uart.cpp ****     set2ByteVal(138, m.ang_I, 3000.0);
 3953                             		.loc 10 651 0
 3954 0d17 ED 4A 12                		mov.L	72[r4], r10
 3955                             	.LVL287:
 652:../src/peripheral/uart.cpp ****     set2ByteVal(140, m.ang_D, 3000.0);
 3956                             		.loc 10 652 0
 3957 0d1a ED 4D 13                		mov.L	76[r4], r13
 3958                             	.LVL288:
 653:../src/peripheral/uart.cpp ****     set2ByteVal(142, m.ang_v_P, 3000.0);
 3959                             		.loc 10 653 0
 3960 0d1d ED 4C 14                		mov.L	80[r4], r12
 3961                             	.LVL289:
 654:../src/peripheral/uart.cpp ****     set2ByteVal(144, m.ang_v_I, 3000.0);
 3962                             		.loc 10 654 0
 3963 0d20 AB CF                   		mov.L	60[r4], r7
 3964                             	.LBB2409:
 3965                             	.LBB2406:
 696:../src/peripheral/uart.cpp ****     periodicMsg[index+1] = (0x000000ff & int_val)   ;
 3966                             		.loc 10 696 0
 3967 0d22 FD 88 65                		shlr	#8, r6, r5
 3968 0d25 A3 85                   		mov.L	r5, 56[r0]
 3969                             	.LBE2406:
 3970                             	.LBE2409:
 3971                             	.LBB2410:
 3972                             	.LBB2411:
 695:../src/peripheral/uart.cpp ****     periodicMsg[index]   = (0x0000ff00 & int_val) >> 8;
 3973                             		.loc 10 695 0
 3974 0d27 FD 72 3B 00 80 3B 45    		fmul	#0x453b8000, r11
 3975                             	.LVL290:
 3976                             	.LBE2411:
 3977                             	.LBE2410:
 3978                             	.LBB2415:
 3979                             	.LBB2416:
 3980 0d2e FD 72 38 00 80 3B 45    		fmul	#0x453b8000, r8
 3981                             	.LBE2416:
 3982                             	.LBE2415:
 3983                             	.LBB2420:
 3984                             	.LBB2421:
 3985 0d35 FD 72 39 00 80 3B 45    		fmul	#0x453b8000, r9
 3986                             	.LBE2421:
 3987                             	.LBE2420:
 3988                             	.LBB2425:
 3989                             	.LBB2426:
 3990 0d3c FD 72 31 00 80 3B 45    		fmul	#0x453b8000, r1
 3991                             	.LBE2426:
 3992                             	.LBE2425:
 3993                             	.LBB2430:
 3994                             	.LBB2431:
 3995 0d43 FD 72 32 00 80 3B 45    		fmul	#0x453b8000, r2
 3996                             	.LBE2431:
 3997                             	.LBE2430:
 3998                             	.LBB2435:
 3999                             	.LBB2436:
 4000 0d4a FD 72 33 00 80 3B 45    		fmul	#0x453b8000, r3
 4001                             	.LBE2436:
 4002                             	.LBE2435:
 4003                             	.LBB2440:
 4004                             	.LBB2441:
 4005 0d51 FD 72 3A 00 80 3B 45    		fmul	#0x453b8000, r10
 4006                             	.LBE2441:
 4007                             	.LBE2440:
 4008                             	.LBB2445:
 4009                             	.LBB2446:
 4010 0d58 FD 72 3D 00 80 3B 45    		fmul	#0x453b8000, r13
 4011                             	.LBE2446:
 4012                             	.LBE2445:
 4013                             	.LBB2450:
 4014                             	.LBB2451:
 4015 0d5f FD 72 3C 00 80 3B 45    		fmul	#0x453b8000, r12
 4016                             	.LBE2451:
 4017                             	.LBE2450:
 4018                             	.LBB2455:
 4019                             	.LBB2456:
 4020 0d66 FD 72 37 00 80 3B 45    		fmul	#0x453b8000, r7
 4021                             	.LBE2456:
 4022                             	.LBE2455:
 4023                             	.LBB2460:
 4024                             	.LBB2412:
 4025 0d6d FC 97 BB                		ftoi	r11, r11
 4026                             	.LVL291:
 4027                             	.LBE2412:
 4028                             	.LBE2460:
 4029                             	.LBB2461:
 4030                             	.LBB2417:
 4031 0d70 FC 97 88                		ftoi	r8, r8
 4032                             	.LVL292:
 4033                             	.LBE2417:
 4034                             	.LBE2461:
 4035                             	.LBB2462:
 4036                             	.LBB2422:
 4037 0d73 FC 97 99                		ftoi	r9, r9
 4038                             	.LVL293:
 4039                             	.LBE2422:
 4040                             	.LBE2462:
 4041                             	.LBB2463:
 4042                             	.LBB2427:
 4043 0d76 FC 97 11                		ftoi	r1, r1
 4044                             	.LVL294:
 4045                             	.LBE2427:
 4046                             	.LBE2463:
 4047                             	.LBB2464:
 4048                             	.LBB2432:
 4049 0d79 FC 97 22                		ftoi	r2, r2
 4050                             	.LVL295:
 4051                             	.LBE2432:
 4052                             	.LBE2464:
 4053                             	.LBB2465:
 4054                             	.LBB2437:
 4055 0d7c FC 97 33                		ftoi	r3, r3
 4056                             	.LVL296:
 4057                             	.LBE2437:
 4058                             	.LBE2465:
 4059                             	.LBB2466:
 4060                             	.LBB2442:
 4061 0d7f FC 97 AA                		ftoi	r10, r10
 4062                             	.LVL297:
 4063                             	.LBE2442:
 4064                             	.LBE2466:
 4065                             	.LBB2467:
 4066                             	.LBB2447:
 4067 0d82 FC 97 DD                		ftoi	r13, r13
 4068                             	.LVL298:
 4069                             	.LBE2447:
 4070                             	.LBE2467:
 4071                             	.LBB2468:
 4072                             	.LBB2452:
 4073 0d85 FC 97 CC                		ftoi	r12, r12
 4074                             	.LVL299:
 4075                             	.LBE2452:
 4076                             	.LBE2468:
 4077                             	.LBB2469:
 4078                             	.LBB2457:
 4079 0d88 FC 97 77                		ftoi	r7, r7
 4080                             	.LVL300:
 4081                             	.LBE2457:
 4082                             	.LBE2469:
 4083                             	.LBB2470:
 4084                             	.LBB2413:
 696:../src/peripheral/uart.cpp ****     periodicMsg[index+1] = (0x000000ff & int_val)   ;
 4085                             		.loc 10 696 0
 4086 0d8b FD 88 BF                		shlr	#8, r11, r15
 4087                             	.LBE2413:
 4088                             	.LBE2470:
 4089                             	.LBB2471:
 4090                             	.LBB2418:
 4091 0d8e FD 88 85                		shlr	#8, r8, r5
 4092 0d91 A6 05                   		mov.L	r5, 96[r0]
 4093                             	.LBE2418:
 4094                             	.LBE2471:
 4095                             	.LBB2472:
 4096                             	.LBB2423:
 4097 0d93 FD 88 95                		shlr	#8, r9, r5
 4098 0d96 A4 05                   		mov.L	r5, 64[r0]
 4099                             	.LBE2423:
 4100                             	.LBE2472:
 4101                             	.LBB2473:
 4102                             	.LBB2428:
 4103 0d98 FD 88 15                		shlr	#8, r1, r5
 4104 0d9b A4 0D                   		mov.L	r5, 68[r0]
 4105                             	.LBE2428:
 4106                             	.LBE2473:
 4107                             	.LBB2474:
 4108                             	.LBB2433:
 4109 0d9d FD 88 25                		shlr	#8, r2, r5
 4110 0da0 A4 85                   		mov.L	r5, 72[r0]
 4111                             	.LBE2433:
 4112                             	.LBE2474:
 4113                             	.LBB2475:
 4114                             	.LBB2438:
 4115 0da2 FD 88 35                		shlr	#8, r3, r5
 4116 0da5 A4 8D                   		mov.L	r5, 76[r0]
 4117                             	.LBE2438:
 4118                             	.LBE2475:
 4119                             	.LBB2476:
 4120                             	.LBB2443:
 4121 0da7 FD 88 A5                		shlr	#8, r10, r5
 4122 0daa A5 05                   		mov.L	r5, 80[r0]
 4123                             	.LBE2443:
 4124                             	.LBE2476:
 4125                             	.LBB2477:
 4126                             	.LBB2448:
 4127 0dac FD 88 D5                		shlr	#8, r13, r5
 4128 0daf A5 0D                   		mov.L	r5, 84[r0]
 4129                             	.LBE2448:
 4130                             	.LBE2477:
 4131                             	.LBB2478:
 4132                             	.LBB2453:
 4133 0db1 FD 88 C5                		shlr	#8, r12, r5
 4134 0db4 A5 85                   		mov.L	r5, 88[r0]
 4135                             	.LBE2453:
 4136                             	.LBE2478:
 4137                             	.LBB2479:
 4138                             	.LBB2458:
 4139 0db6 FD 88 75                		shlr	#8, r7, r5
 4140 0db9 A5 8D                   		mov.L	r5, 92[r0]
 4141                             	.LBE2458:
 4142                             	.LBE2479:
 4143                             	.LBB2480:
 4144                             	.LBB2378:
 697:../src/peripheral/uart.cpp **** }
 4145                             		.loc 10 697 0
 4146 0dbb AB 0D                   		mov.L	52[r0], r5
 4147 0dbd C7 E5 79                		mov.B	r5, 121[r14]
 4148                             	.LBE2378:
 4149                             	.LBE2480:
 4150                             	.LBB2481:
 4151                             	.LBB2407:
 696:../src/peripheral/uart.cpp ****     periodicMsg[index+1] = (0x000000ff & int_val)   ;
 4152                             		.loc 10 696 0
 4153 0dc0 AB 85                   		mov.L	56[r0], r5
 4154 0dc2 C7 E5 7A                		mov.B	r5, 122[r14]
 697:../src/peripheral/uart.cpp **** }
 4155                             		.loc 10 697 0
 4156 0dc5 C7 E6 7B                		mov.B	r6, 123[r14]
 4157                             	.LBE2407:
 4158                             	.LBE2481:
 4159                             	.LBB2482:
 4160                             	.LBB2414:
 696:../src/peripheral/uart.cpp ****     periodicMsg[index+1] = (0x000000ff & int_val)   ;
 4161                             		.loc 10 696 0
 4162 0dc8 C7 EF 7C                		mov.B	r15, 124[r14]
 697:../src/peripheral/uart.cpp **** }
 4163                             		.loc 10 697 0
 4164 0dcb C7 EB 7D                		mov.B	r11, 125[r14]
 4165                             	.LBE2414:
 4166                             	.LBE2482:
 4167                             	.LBB2483:
 4168                             	.LBB2419:
 696:../src/peripheral/uart.cpp ****     periodicMsg[index+1] = (0x000000ff & int_val)   ;
 4169                             		.loc 10 696 0
 4170 0dce AE 06                   		mov.L	96[r0], r6
 4171                             	.LVL301:
 4172 0dd0 C7 E6 7E                		mov.B	r6, 126[r14]
 697:../src/peripheral/uart.cpp **** }
 4173                             		.loc 10 697 0
 4174 0dd3 C7 E8 7F                		mov.B	r8, 127[r14]
 4175                             	.LBE2419:
 4176                             	.LBE2483:
 4177                             	.LBB2484:
 4178                             	.LBB2424:
 696:../src/peripheral/uart.cpp ****     periodicMsg[index+1] = (0x000000ff & int_val)   ;
 4179                             		.loc 10 696 0
 4180 0dd6 ED 08 10                		mov.L	64[r0], r8
 4181                             	.LVL302:
 4182 0dd9 C7 E8 80                		mov.B	r8, 128[r14]
 697:../src/peripheral/uart.cpp **** }
 4183                             		.loc 10 697 0
 4184 0ddc C7 E9 81                		mov.B	r9, 129[r14]
 4185                             	.LBE2424:
 4186                             	.LBE2484:
 4187                             	.LBB2485:
 4188                             	.LBB2429:
 696:../src/peripheral/uart.cpp ****     periodicMsg[index+1] = (0x000000ff & int_val)   ;
 4189                             		.loc 10 696 0
 4190 0ddf ED 09 11                		mov.L	68[r0], r9
 4191                             	.LVL303:
 4192 0de2 C7 E9 82                		mov.B	r9, 130[r14]
 697:../src/peripheral/uart.cpp **** }
 4193                             		.loc 10 697 0
 4194 0de5 C7 E1 83                		mov.B	r1, 131[r14]
 4195                             	.LBE2429:
 4196                             	.LBE2485:
 4197                             	.LBB2486:
 4198                             	.LBB2434:
 696:../src/peripheral/uart.cpp ****     periodicMsg[index+1] = (0x000000ff & int_val)   ;
 4199                             		.loc 10 696 0
 4200 0de8 ED 0B 12                		mov.L	72[r0], r11
 4201                             	.LVL304:
 4202 0deb C7 EB 84                		mov.B	r11, 132[r14]
 697:../src/peripheral/uart.cpp **** }
 4203                             		.loc 10 697 0
 4204 0dee C7 E2 85                		mov.B	r2, 133[r14]
 4205                             	.LBE2434:
 4206                             	.LBE2486:
 4207                             	.LBB2487:
 4208                             	.LBB2439:
 696:../src/peripheral/uart.cpp ****     periodicMsg[index+1] = (0x000000ff & int_val)   ;
 4209                             		.loc 10 696 0
 4210 0df1 ED 0F 13                		mov.L	76[r0], r15
 4211 0df4 C7 EF 86                		mov.B	r15, 134[r14]
 697:../src/peripheral/uart.cpp **** }
 4212                             		.loc 10 697 0
 4213 0df7 C7 E3 87                		mov.B	r3, 135[r14]
 4214                             	.LBE2439:
 4215                             	.LBE2487:
 4216                             	.LBB2488:
 4217                             	.LBB2444:
 696:../src/peripheral/uart.cpp ****     periodicMsg[index+1] = (0x000000ff & int_val)   ;
 4218                             		.loc 10 696 0
 4219 0dfa AD 01                   		mov.L	80[r0], r1
 4220                             	.LVL305:
 4221 0dfc C7 E1 88                		mov.B	r1, 136[r14]
 697:../src/peripheral/uart.cpp **** }
 4222                             		.loc 10 697 0
 4223 0dff C7 EA 89                		mov.B	r10, 137[r14]
 4224                             	.LBE2444:
 4225                             	.LBE2488:
 4226                             	.LBB2489:
 4227                             	.LBB2449:
 696:../src/peripheral/uart.cpp ****     periodicMsg[index+1] = (0x000000ff & int_val)   ;
 4228                             		.loc 10 696 0
 4229 0e02 AD 0A                   		mov.L	84[r0], r2
 4230                             	.LVL306:
 4231 0e04 C7 E2 8A                		mov.B	r2, 138[r14]
 697:../src/peripheral/uart.cpp **** }
 4232                             		.loc 10 697 0
 4233 0e07 C7 ED 8B                		mov.B	r13, 139[r14]
 4234                             	.LBE2449:
 4235                             	.LBE2489:
 4236                             	.LBB2490:
 4237                             	.LBB2454:
 696:../src/peripheral/uart.cpp ****     periodicMsg[index+1] = (0x000000ff & int_val)   ;
 4238                             		.loc 10 696 0
 4239 0e0a AD 83                   		mov.L	88[r0], r3
 4240                             	.LVL307:
 4241 0e0c C7 E3 8C                		mov.B	r3, 140[r14]
 697:../src/peripheral/uart.cpp **** }
 4242                             		.loc 10 697 0
 4243 0e0f C7 EC 8D                		mov.B	r12, 141[r14]
 4244                             	.LBE2454:
 4245                             	.LBE2490:
 4246                             	.LBB2491:
 4247                             	.LBB2459:
 696:../src/peripheral/uart.cpp ****     periodicMsg[index+1] = (0x000000ff & int_val)   ;
 4248                             		.loc 10 696 0
 4249 0e12 AD 8D                   		mov.L	92[r0], r5
 4250 0e14 C7 E5 8E                		mov.B	r5, 142[r14]
 697:../src/peripheral/uart.cpp **** }
 4251                             		.loc 10 697 0
 4252 0e17 C7 E7 8F                		mov.B	r7, 143[r14]
 4253                             	.LBE2459:
 4254                             	.LBE2491:
 655:../src/peripheral/uart.cpp ****     set2ByteVal(146, m.ang_v_D, 3000.0);
 4255                             		.loc 10 655 0
 4256 0e1a AC 47                   		mov.L	64[r4], r7
 4257                             	.LVL308:
 656:../src/peripheral/uart.cpp ****     set2ByteVal(148, m.v_FF, 3000.0);
 4258                             		.loc 10 656 0
 4259 0e1c ED 4B 11                		mov.L	68[r4], r11
 4260                             	.LBB2492:
 4261                             	.LBB2493:
 695:../src/peripheral/uart.cpp ****     periodicMsg[index]   = (0x0000ff00 & int_val) >> 8;
 4262                             		.loc 10 695 0
 4263 0e1f FD 72 37 00 80 3B 45    		fmul	#0x453b8000, r7
 4264                             	.LVL309:
 4265 0e26 FC 97 7C                		ftoi	r7, r12
 4266                             	.LVL310:
 4267                             	.LBE2493:
 4268                             	.LBE2492:
 657:../src/peripheral/uart.cpp ****     set2ByteVal(150, m.ang_FF, 3000.0);
 4269                             		.loc 10 657 0
 4270 0e29 ED 4A 15                		mov.L	84[r4], r10
 4271                             	.LVL311:
 658:../src/peripheral/uart.cpp **** 
 4272                             		.loc 10 658 0
 4273 0e2c AD C7                   		mov.L	88[r4], r7
 4274                             	.LBB2496:
 4275                             	.LBB2494:
 696:../src/peripheral/uart.cpp ****     periodicMsg[index+1] = (0x000000ff & int_val)   ;
 4276                             		.loc 10 696 0
 4277 0e2e FD 88 C9                		shlr	#8, r12, r9
 4278                             	.LBE2494:
 4279                             	.LBE2496:
 4280                             	.LBB2497:
 4281                             	.LBB2498:
 695:../src/peripheral/uart.cpp ****     periodicMsg[index]   = (0x0000ff00 & int_val) >> 8;
 4282                             		.loc 10 695 0
 4283 0e31 FD 72 3B 00 80 3B 45    		fmul	#0x453b8000, r11
 4284                             	.LVL312:
 4285                             	.LBE2498:
 4286                             	.LBE2497:
 4287                             	.LBB2502:
 4288                             	.LBB2503:
 4289 0e38 FD 72 3A 00 80 3B 45    		fmul	#0x453b8000, r10
 4290                             	.LBE2503:
 4291                             	.LBE2502:
 4292                             	.LBB2507:
 4293                             	.LBB2508:
 4294 0e3f FD 72 37 00 80 3B 45    		fmul	#0x453b8000, r7
 4295                             	.LBE2508:
 4296                             	.LBE2507:
 4297                             	.LBB2512:
 4298                             	.LBB2499:
 4299 0e46 FC 97 BB                		ftoi	r11, r11
 4300                             	.LVL313:
 4301                             	.LBE2499:
 4302                             	.LBE2512:
 4303                             	.LBB2513:
 4304                             	.LBB2504:
 4305 0e49 FC 97 AA                		ftoi	r10, r10
 4306                             	.LVL314:
 4307                             	.LBE2504:
 4308                             	.LBE2513:
 4309                             	.LBB2514:
 4310                             	.LBB2509:
 4311 0e4c FC 97 77                		ftoi	r7, r7
 4312                             	.LVL315:
 4313                             	.LBE2509:
 4314                             	.LBE2514:
 666:../src/peripheral/uart.cpp ****     count++;
 4315                             		.loc 10 666 0
 4316 0e4f FB 62 00 00 00 00       		mov.L	#__ZZ8packDataPhE5count, r6
 4317 0e55 CC 61                   		mov.B	[r6], r1
 4318                             	.LBB2515:
 4319                             	.LBB2500:
 696:../src/peripheral/uart.cpp ****     periodicMsg[index+1] = (0x000000ff & int_val)   ;
 4320                             		.loc 10 696 0
 4321 0e57 FD 88 B3                		shlr	#8, r11, r3
 4322                             	.LBE2500:
 4323                             	.LBE2515:
 4324                             	.LBB2516:
 4325                             	.LBB2505:
 4326 0e5a FD 88 A4                		shlr	#8, r10, r4
 4327                             	.LVL316:
 4328                             	.LBE2505:
 4329                             	.LBE2516:
 4330                             	.LBB2517:
 4331                             	.LBB2510:
 4332 0e5d FD 88 7D                		shlr	#8, r7, r13
 4333                             	.LVL317:
 4334                             	.LBE2510:
 4335                             	.LBE2517:
 666:../src/peripheral/uart.cpp ****     count++;
 4336                             		.loc 10 666 0
 4337 0e60 AB 8A                   		mov.L	60[r0], r2
 4338 0e62 72 22 A0 00             		add	#0xa0, r2
 4339                             	.LBB2518:
 4340                             	.LBB2495:
 696:../src/peripheral/uart.cpp ****     periodicMsg[index+1] = (0x000000ff & int_val)   ;
 4341                             		.loc 10 696 0
 4342 0e66 C7 E9 90                		mov.B	r9, 144[r14]
 697:../src/peripheral/uart.cpp **** }
 4343                             		.loc 10 697 0
 4344 0e69 C7 EC 91                		mov.B	r12, 145[r14]
 4345                             	.LBE2495:
 4346                             	.LBE2518:
 4347                             	.LBB2519:
 4348                             	.LBB2501:
 696:../src/peripheral/uart.cpp ****     periodicMsg[index+1] = (0x000000ff & int_val)   ;
 4349                             		.loc 10 696 0
 4350 0e6c C7 E3 92                		mov.B	r3, 146[r14]
 697:../src/peripheral/uart.cpp **** }
 4351                             		.loc 10 697 0
 4352 0e6f C7 EB 93                		mov.B	r11, 147[r14]
 4353                             	.LBE2501:
 4354                             	.LBE2519:
 4355                             	.LBB2520:
 4356                             	.LBB2506:
 696:../src/peripheral/uart.cpp ****     periodicMsg[index+1] = (0x000000ff & int_val)   ;
 4357                             		.loc 10 696 0
 4358 0e72 C7 E4 94                		mov.B	r4, 148[r14]
 697:../src/peripheral/uart.cpp **** }
 4359                             		.loc 10 697 0
 4360 0e75 C7 EA 95                		mov.B	r10, 149[r14]
 4361                             	.LBE2506:
 4362                             	.LBE2520:
 4363                             	.LBB2521:
 4364                             	.LBB2511:
 696:../src/peripheral/uart.cpp ****     periodicMsg[index+1] = (0x000000ff & int_val)   ;
 4365                             		.loc 10 696 0
 4366 0e78 C7 ED 96                		mov.B	r13, 150[r14]
 697:../src/peripheral/uart.cpp **** }
 4367                             		.loc 10 697 0
 4368 0e7b C7 E7 97                		mov.B	r7, 151[r14]
 4369                             	.LBE2511:
 4370                             	.LBE2521:
 666:../src/peripheral/uart.cpp ****     count++;
 4371                             		.loc 10 666 0
 4372 0e7e 05 00 00 00             		bsr	__Z12packDataMazehPh
 4373                             	.LVL318:
 667:../src/peripheral/uart.cpp ****     if (count == 4)
 4374                             		.loc 10 667 0
 4375 0e82 CC 67                   		mov.B	[r6], r7
 4376                             	.LVL319:
 4377 0e84 62 17                   		add	#1, r7
 668:../src/peripheral/uart.cpp ****         count = 0;
 4378                             		.loc 10 668 0
 4379 0e86 5B 7A                   		movu.B	r7, r10
 4380                             	.LVL320:
 4381 0e88 61 4A                   		cmp	#4, r10
 4382 0e8a 3A 1C 06                		beq	.L288
 667:../src/peripheral/uart.cpp ****     if (count == 4)
 4383                             		.loc 10 667 0
 4384 0e8d C3 67                   		mov.B	r7, [r6]
 4385 0e8f 03                      		.balign 8,3,1
 4386                             	.L289:
 4387                             	.LVL321:
 4388 0e90 ED 0A 0F                		mov.L	60[r0], r10
 4389 0e93 72 AA E6 00             		add	#0xe6, r10
 4390 0e97 E7 0A 0E                		mov.L	r10, 56[r0]
 4391                             	.LBB2522:
 4392                             	.LBB2144:
 4393                             	.LBB1889:
 4394                             	.LBB1890:
 4395                             	.LBB1891:
 4396                             	.LBB1892:
 4397                             	.LBB1893:
 4398                             	.LBB1894:
 4399                             	.LBB1895:
 4400                             	.LBB1896:
 4401                             	.LBB1897:
 4402                             	.LBB1898:
 4403                             	.LBB1899:
1428:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	  }
1429:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	else
1430:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	  _M_pop_front_aux();
1431:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       }
1432:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
1433:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       /**
1434:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  @brief  Removes last element.
1435:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *
1436:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  This is a typical stack operation.  It shrinks the %deque by one.
1437:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *
1438:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  Note that no data is returned, and if the last element's data is
1439:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  needed, it should be retrieved before pop_back() is called.
1440:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        */
1441:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       void
1442:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       pop_back()
1443:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       {
1444:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	if (this->_M_impl._M_finish._M_cur
1445:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	    != this->_M_impl._M_finish._M_first)
1446:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	  {
1447:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	    --this->_M_impl._M_finish._M_cur;
1448:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	    this->_M_impl.destroy(this->_M_impl._M_finish._M_cur);
1449:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	  }
1450:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	else
1451:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	  _M_pop_back_aux();
1452:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       }
1453:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
1454:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** #if __cplusplus >= 201103L
1455:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       /**
1456:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  @brief  Inserts an object in %deque before specified iterator.
1457:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  @param  __position  An iterator into the %deque.
1458:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  @param  __args  Arguments.
1459:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  @return  An iterator that points to the inserted data.
1460:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *
1461:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  This function will insert an object of type T constructed
1462:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  with T(std::forward<Args>(args)...) before the specified location.
1463:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        */
1464:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       template<typename... _Args>
1465:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****         iterator
1466:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****         emplace(iterator __position, _Args&&... __args);
1467:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** #endif
1468:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
1469:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       /**
1470:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  @brief  Inserts given value into %deque before specified iterator.
1471:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  @param  __position  An iterator into the %deque.
1472:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  @param  __x  Data to be inserted.
1473:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  @return  An iterator that points to the inserted data.
1474:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *
1475:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  This function will insert a copy of the given value before the
1476:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  specified location.
1477:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        */
1478:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       iterator
1479:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       insert(iterator __position, const value_type& __x);
1480:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
1481:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** #if __cplusplus >= 201103L
1482:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       /**
1483:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  @brief  Inserts given rvalue into %deque before specified iterator.
1484:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  @param  __position  An iterator into the %deque.
1485:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  @param  __x  Data to be inserted.
1486:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  @return  An iterator that points to the inserted data.
1487:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *
1488:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  This function will insert a copy of the given rvalue before the
1489:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  specified location.
1490:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        */
1491:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       iterator
1492:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       insert(iterator __position, value_type&& __x)
1493:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       { return emplace(__position, std::move(__x)); }
1494:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
1495:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       /**
1496:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  @brief  Inserts an initializer list into the %deque.
1497:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  @param  __p  An iterator into the %deque.
1498:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  @param  __l  An initializer_list.
1499:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *
1500:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  This function will insert copies of the data in the
1501:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  initializer_list @a __l into the %deque before the location
1502:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  specified by @a __p.  This is known as <em>list insert</em>.
1503:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        */
1504:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       void
1505:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       insert(iterator __p, initializer_list<value_type> __l)
1506:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       { this->insert(__p, __l.begin(), __l.end()); }
1507:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** #endif
1508:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
1509:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       /**
1510:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  @brief  Inserts a number of copies of given data into the %deque.
1511:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  @param  __position  An iterator into the %deque.
1512:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  @param  __n  Number of elements to be inserted.
1513:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  @param  __x  Data to be inserted.
1514:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *
1515:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  This function will insert a specified number of copies of the given
1516:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  data before the location specified by @a __position.
1517:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        */
1518:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       void
1519:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       insert(iterator __position, size_type __n, const value_type& __x)
1520:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       { _M_fill_insert(__position, __n, __x); }
1521:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
1522:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       /**
1523:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  @brief  Inserts a range into the %deque.
1524:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  @param  __position  An iterator into the %deque.
1525:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  @param  __first  An input iterator.
1526:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  @param  __last   An input iterator.
1527:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *
1528:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  This function will insert copies of the data in the range
1529:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  [__first,__last) into the %deque before the location specified
1530:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  by @a __position.  This is known as <em>range insert</em>.
1531:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        */
1532:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** #if __cplusplus >= 201103L
1533:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       template<typename _InputIterator,
1534:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	       typename = std::_RequireInputIter<_InputIterator>>
1535:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****         void
1536:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****         insert(iterator __position, _InputIterator __first,
1537:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	       _InputIterator __last)
1538:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****         { _M_insert_dispatch(__position, __first, __last, __false_type()); }
1539:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** #else
1540:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       template<typename _InputIterator>
1541:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****         void
1542:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****         insert(iterator __position, _InputIterator __first,
1543:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	       _InputIterator __last)
1544:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****         {
1545:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	  // Check whether it's an integral type.  If so, it's not an iterator.
1546:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	  typedef typename std::__is_integer<_InputIterator>::__type _Integral;
1547:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	  _M_insert_dispatch(__position, __first, __last, _Integral());
1548:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	}
1549:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** #endif
1550:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
1551:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       /**
1552:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  @brief  Remove element at given position.
1553:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  @param  __position  Iterator pointing to element to be erased.
1554:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  @return  An iterator pointing to the next element (or end()).
1555:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *
1556:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  This function will erase the element at the given position and thus
1557:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  shorten the %deque by one.
1558:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *
1559:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  The user is cautioned that
1560:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  this function only erases the element, and that if the element is
1561:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  itself a pointer, the pointed-to memory is not touched in any way.
1562:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  Managing the pointer is the user's responsibility.
1563:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        */
1564:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       iterator
1565:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       erase(iterator __position);
1566:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
1567:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       /**
1568:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  @brief  Remove a range of elements.
1569:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  @param  __first  Iterator pointing to the first element to be erased.
1570:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  @param  __last  Iterator pointing to one past the last element to be
1571:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *                erased.
1572:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  @return  An iterator pointing to the element pointed to by @a last
1573:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *           prior to erasing (or end()).
1574:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *
1575:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  This function will erase the elements in the range
1576:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  [__first,__last) and shorten the %deque accordingly.
1577:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *
1578:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  The user is cautioned that
1579:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  this function only erases the elements, and that if the elements
1580:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  themselves are pointers, the pointed-to memory is not touched in any
1581:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  way.  Managing the pointer is the user's responsibility.
1582:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        */
1583:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       iterator
1584:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       erase(iterator __first, iterator __last);
1585:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
1586:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       /**
1587:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  @brief  Swaps data with another %deque.
1588:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  @param  __x  A %deque of the same element and allocator types.
1589:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *
1590:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  This exchanges the elements between two deques in constant time.
1591:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  (Four pointers, so it should be quite fast.)
1592:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  Note that the global std::swap() function is specialized such that
1593:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  std::swap(d1,d2) will feed to this function.
1594:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        */
1595:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       void
1596:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       swap(deque& __x)
1597:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       {
1598:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	std::swap(this->_M_impl._M_start, __x._M_impl._M_start);
1599:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	std::swap(this->_M_impl._M_finish, __x._M_impl._M_finish);
1600:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	std::swap(this->_M_impl._M_map, __x._M_impl._M_map);
1601:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	std::swap(this->_M_impl._M_map_size, __x._M_impl._M_map_size);
1602:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
1603:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	// _GLIBCXX_RESOLVE_LIB_DEFECTS
1604:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	// 431. Swapping containers with unequal allocators.
1605:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	std::__alloc_swap<_Tp_alloc_type>::_S_do_it(_M_get_Tp_allocator(),
1606:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 						    __x._M_get_Tp_allocator());
1607:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       }
1608:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
1609:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       /**
1610:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  Erases all the elements.  Note that this function only erases the
1611:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  elements, and that if the elements themselves are pointers, the
1612:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  pointed-to memory is not touched in any way.  Managing the pointer is
1613:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  the user's responsibility.
1614:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        */
1615:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       void
1616:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       clear() _GLIBCXX_NOEXCEPT
1617:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       { _M_erase_at_end(begin()); }
1618:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
1619:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****     protected:
1620:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       // Internal constructor functions follow.
1621:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
1622:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       // called by the range constructor to implement [23.1.1]/9
1623:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
1624:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
1625:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       // 438. Ambiguity in the "do the right thing" clause
1626:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       template<typename _Integer>
1627:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****         void
1628:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****         _M_initialize_dispatch(_Integer __n, _Integer __x, __true_type)
1629:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****         {
1630:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	  _M_initialize_map(static_cast<size_type>(__n));
1631:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	  _M_fill_initialize(__x);
1632:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	}
1633:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
1634:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       // called by the range constructor to implement [23.1.1]/9
1635:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       template<typename _InputIterator>
1636:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****         void
1637:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****         _M_initialize_dispatch(_InputIterator __first, _InputIterator __last,
1638:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 			       __false_type)
1639:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****         {
1640:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	  typedef typename std::iterator_traits<_InputIterator>::
1641:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	    iterator_category _IterCategory;
1642:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	  _M_range_initialize(__first, __last, _IterCategory());
1643:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	}
1644:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
1645:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       // called by the second initialize_dispatch above
1646:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       //@{
1647:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       /**
1648:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  @brief Fills the deque with whatever is in [first,last).
1649:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  @param  __first  An input iterator.
1650:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  @param  __last  An input iterator.
1651:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  @return   Nothing.
1652:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *
1653:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  If the iterators are actually forward iterators (or better), then the
1654:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  memory layout can be done all at once.  Else we move forward using
1655:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  push_back on each value from the iterator.
1656:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        */
1657:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       template<typename _InputIterator>
1658:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****         void
1659:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****         _M_range_initialize(_InputIterator __first, _InputIterator __last,
1660:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 			    std::input_iterator_tag);
1661:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
1662:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       // called by the second initialize_dispatch above
1663:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       template<typename _ForwardIterator>
1664:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****         void
1665:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****         _M_range_initialize(_ForwardIterator __first, _ForwardIterator __last,
1666:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 			    std::forward_iterator_tag);
1667:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       //@}
1668:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
1669:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       /**
1670:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  @brief Fills the %deque with copies of value.
1671:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  @param  __value  Initial value.
1672:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  @return   Nothing.
1673:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  @pre _M_start and _M_finish have already been initialized,
1674:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  but none of the %deque's elements have yet been constructed.
1675:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *
1676:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  This function is called only when the user provides an explicit size
1677:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  (with or without an explicit exemplar value).
1678:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        */
1679:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       void
1680:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       _M_fill_initialize(const value_type& __value);
1681:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
1682:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** #if __cplusplus >= 201103L
1683:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       // called by deque(n).
1684:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       void
1685:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       _M_default_initialize();
1686:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** #endif
1687:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
1688:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       // Internal assign functions follow.  The *_aux functions do the actual
1689:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       // assignment work for the range versions.
1690:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
1691:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       // called by the range assign to implement [23.1.1]/9
1692:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
1693:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
1694:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       // 438. Ambiguity in the "do the right thing" clause
1695:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       template<typename _Integer>
1696:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****         void
1697:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****         _M_assign_dispatch(_Integer __n, _Integer __val, __true_type)
1698:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****         { _M_fill_assign(__n, __val); }
1699:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
1700:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       // called by the range assign to implement [23.1.1]/9
1701:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       template<typename _InputIterator>
1702:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****         void
1703:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****         _M_assign_dispatch(_InputIterator __first, _InputIterator __last,
1704:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 			   __false_type)
1705:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****         {
1706:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	  typedef typename std::iterator_traits<_InputIterator>::
1707:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	    iterator_category _IterCategory;
1708:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	  _M_assign_aux(__first, __last, _IterCategory());
1709:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	}
1710:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
1711:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       // called by the second assign_dispatch above
1712:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       template<typename _InputIterator>
1713:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****         void
1714:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****         _M_assign_aux(_InputIterator __first, _InputIterator __last,
1715:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 		      std::input_iterator_tag);
1716:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
1717:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       // called by the second assign_dispatch above
1718:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       template<typename _ForwardIterator>
1719:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****         void
1720:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****         _M_assign_aux(_ForwardIterator __first, _ForwardIterator __last,
1721:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 		      std::forward_iterator_tag)
1722:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****         {
1723:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	  const size_type __len = std::distance(__first, __last);
1724:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	  if (__len > size())
1725:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	    {
1726:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	      _ForwardIterator __mid = __first;
1727:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	      std::advance(__mid, size());
1728:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	      std::copy(__first, __mid, begin());
1729:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	      insert(end(), __mid, __last);
1730:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	    }
1731:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	  else
1732:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	    _M_erase_at_end(std::copy(__first, __last, begin()));
1733:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	}
1734:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
1735:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       // Called by assign(n,t), and the range assign when it turns out
1736:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       // to be the same thing.
1737:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       void
1738:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       _M_fill_assign(size_type __n, const value_type& __val)
1739:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       {
1740:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	if (__n > size())
1741:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	  {
1742:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	    std::fill(begin(), end(), __val);
1743:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	    insert(end(), __n - size(), __val);
1744:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	  }
1745:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	else
1746:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	  {
1747:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	    _M_erase_at_end(begin() + difference_type(__n));
1748:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	    std::fill(begin(), end(), __val);
1749:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	  }
1750:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       }
1751:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
1752:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       //@{
1753:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       /// Helper functions for push_* and pop_*.
1754:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** #if __cplusplus < 201103L
1755:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       void _M_push_back_aux(const value_type&);
1756:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
1757:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       void _M_push_front_aux(const value_type&);
1758:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** #else
1759:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       template<typename... _Args>
1760:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****         void _M_push_back_aux(_Args&&... __args);
1761:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
1762:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       template<typename... _Args>
1763:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****         void _M_push_front_aux(_Args&&... __args);
1764:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** #endif
1765:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
1766:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       void _M_pop_back_aux();
1767:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
1768:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       void _M_pop_front_aux();
1769:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       //@}
1770:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
1771:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       // Internal insert functions follow.  The *_aux functions do the actual
1772:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       // insertion work when all shortcuts fail.
1773:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
1774:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       // called by the range insert to implement [23.1.1]/9
1775:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
1776:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
1777:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       // 438. Ambiguity in the "do the right thing" clause
1778:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       template<typename _Integer>
1779:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****         void
1780:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****         _M_insert_dispatch(iterator __pos,
1781:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 			   _Integer __n, _Integer __x, __true_type)
1782:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****         { _M_fill_insert(__pos, __n, __x); }
1783:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
1784:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       // called by the range insert to implement [23.1.1]/9
1785:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       template<typename _InputIterator>
1786:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****         void
1787:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****         _M_insert_dispatch(iterator __pos,
1788:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 			   _InputIterator __first, _InputIterator __last,
1789:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 			   __false_type)
1790:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****         {
1791:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	  typedef typename std::iterator_traits<_InputIterator>::
1792:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	    iterator_category _IterCategory;
1793:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****           _M_range_insert_aux(__pos, __first, __last, _IterCategory());
1794:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	}
1795:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
1796:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       // called by the second insert_dispatch above
1797:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       template<typename _InputIterator>
1798:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****         void
1799:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****         _M_range_insert_aux(iterator __pos, _InputIterator __first,
1800:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 			    _InputIterator __last, std::input_iterator_tag);
1801:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
1802:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       // called by the second insert_dispatch above
1803:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       template<typename _ForwardIterator>
1804:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****         void
1805:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****         _M_range_insert_aux(iterator __pos, _ForwardIterator __first,
1806:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 			    _ForwardIterator __last, std::forward_iterator_tag);
1807:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
1808:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       // Called by insert(p,n,x), and the range insert when it turns out to be
1809:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       // the same thing.  Can use fill functions in optimal situations,
1810:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       // otherwise passes off to insert_aux(p,n,x).
1811:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       void
1812:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       _M_fill_insert(iterator __pos, size_type __n, const value_type& __x);
1813:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
1814:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       // called by insert(p,x)
1815:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** #if __cplusplus < 201103L
1816:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       iterator
1817:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       _M_insert_aux(iterator __pos, const value_type& __x);
1818:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** #else
1819:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       template<typename... _Args>
1820:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****         iterator
1821:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****         _M_insert_aux(iterator __pos, _Args&&... __args);
1822:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** #endif
1823:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
1824:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       // called by insert(p,n,x) via fill_insert
1825:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       void
1826:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       _M_insert_aux(iterator __pos, size_type __n, const value_type& __x);
1827:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
1828:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       // called by range_insert_aux for forward iterators
1829:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       template<typename _ForwardIterator>
1830:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****         void
1831:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****         _M_insert_aux(iterator __pos,
1832:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 		      _ForwardIterator __first, _ForwardIterator __last,
1833:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 		      size_type __n);
1834:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
1835:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
1836:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       // Internal erase functions follow.
1837:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
1838:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       void
1839:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       _M_destroy_data_aux(iterator __first, iterator __last);
1840:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
1841:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       // Called by ~deque().
1842:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       // NB: Doesn't deallocate the nodes.
1843:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       template<typename _Alloc1>
1844:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****         void
1845:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****         _M_destroy_data(iterator __first, iterator __last, const _Alloc1&)
1846:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****         { _M_destroy_data_aux(__first, __last); }
1847:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
1848:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       void
1849:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       _M_destroy_data(iterator __first, iterator __last,
1850:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 		      const std::allocator<_Tp>&)
1851:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       {
1852:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	if (!__has_trivial_destructor(value_type))
1853:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	  _M_destroy_data_aux(__first, __last);
1854:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       }
1855:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
1856:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       // Called by erase(q1, q2).
1857:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       void
1858:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       _M_erase_at_begin(iterator __pos)
1859:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       {
1860:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	_M_destroy_data(begin(), __pos, _M_get_Tp_allocator());
1861:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	_M_destroy_nodes(this->_M_impl._M_start._M_node, __pos._M_node);
1862:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	this->_M_impl._M_start = __pos;
1863:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       }
1864:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
1865:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       // Called by erase(q1, q2), resize(), clear(), _M_assign_aux,
1866:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       // _M_fill_assign, operator=.
1867:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       void
1868:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       _M_erase_at_end(iterator __pos)
1869:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       {
1870:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	_M_destroy_data(__pos, end(), _M_get_Tp_allocator());
1871:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	_M_destroy_nodes(__pos._M_node + 1,
1872:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 			 this->_M_impl._M_finish._M_node + 1);
1873:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	this->_M_impl._M_finish = __pos;
1874:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       }
1875:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
1876:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** #if __cplusplus >= 201103L
1877:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       // Called by resize(sz).
1878:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       void
1879:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       _M_default_append(size_type __n);
1880:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
1881:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       bool
1882:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       _M_shrink_to_fit();
1883:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** #endif
1884:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
1885:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       //@{
1886:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       /// Memory-handling helpers for the previous internal insert functions.
1887:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       iterator
1888:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       _M_reserve_elements_at_front(size_type __n)
1889:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       {
1890:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	const size_type __vacancies = this->_M_impl._M_start._M_cur
1891:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	                              - this->_M_impl._M_start._M_first;
1892:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	if (__n > __vacancies)
1893:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	  _M_new_elements_at_front(__n - __vacancies);
1894:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	return this->_M_impl._M_start - difference_type(__n);
1895:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       }
1896:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
1897:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       iterator
1898:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       _M_reserve_elements_at_back(size_type __n)
1899:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       {
1900:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	const size_type __vacancies = (this->_M_impl._M_finish._M_last
1901:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 				       - this->_M_impl._M_finish._M_cur) - 1;
1902:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	if (__n > __vacancies)
1903:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	  _M_new_elements_at_back(__n - __vacancies);
1904:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	return this->_M_impl._M_finish + difference_type(__n);
1905:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       }
1906:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
1907:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       void
1908:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       _M_new_elements_at_front(size_type __new_elements);
1909:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
1910:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       void
1911:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       _M_new_elements_at_back(size_type __new_elements);
1912:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       //@}
1913:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
1914:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
1915:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       //@{
1916:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       /**
1917:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  @brief Memory-handling helpers for the major %map.
1918:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *
1919:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  Makes sure the _M_map has space for new nodes.  Does not
1920:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  actually add the nodes.  Can invalidate _M_map pointers.
1921:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        *  (And consequently, %deque iterators.)
1922:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****        */
1923:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       void
1924:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       _M_reserve_map_at_back(size_type __nodes_to_add = 1)
1925:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       {
1926:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
1927:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	    - (this->_M_impl._M_finish._M_node - this->_M_impl._M_map))
1928:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	  _M_reallocate_map(__nodes_to_add, false);
1929:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       }
1930:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
1931:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       void
1932:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       _M_reserve_map_at_front(size_type __nodes_to_add = 1)
1933:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       {
1934:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	if (__nodes_to_add > size_type(this->_M_impl._M_start._M_node
 4404                             		.loc 7 1934 0 discriminator 1
 4405 0e9a 3E 0D 14                		mov.L	#20, 52[r0]
 4406                             	.LVL322:
 4407 0e9d F9 04 40 00             		mov.B	#0, 64[r0]
 4408 0ea1 2E 31                   		bra	.L295
 4409                             	.LVL323:
 4410                             	.L408:
 4411                             	.LBE1899:
 4412                             	.LBE1898:
 4413                             	.LBE1897:
 4414                             	.LBE1896:
 4415                             	.LBE1895:
 4416                             	.LBE1894:
 4417                             	.LBE1893:
 4418                             	.LBE1892:
 4419                             	.LBE1891:
 4420                             	.LBE1890:
 4421                             	.LBE1889:
 4422                             	.LBE2144:
 4423                             	.LBE2522:
 4424                             	.LBB2523:
 677:../src/peripheral/uart.cpp ****             printfBuff.pop();
 4425                             		.loc 10 677 0
 4426 0ea3 ED 0C 0E                		mov.L	56[r0], r12
 4427 0ea6 C0 7C                   		mov.B	[r7], [r12]
 4428                             	.LVL324:
 4429                             	.LBB2524:
 4430                             	.LBB2525:
 4431                             	.LBB2526:
1424:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	  {
 4432                             		.loc 7 1424 0
 4433 0ea8 ED BA 04                		mov.L	16[r11], r10
1423:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	    != this->_M_impl._M_start._M_last - 1)
 4434                             		.loc 7 1423 0
 4435 0eab ED B7 02                		mov.L	8[r11], r7
1424:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	  {
 4436                             		.loc 7 1424 0
 4437 0eae 60 1A                   		sub	#1, r10
1423:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	    != this->_M_impl._M_start._M_last - 1)
 4438                             		.loc 7 1423 0
 4439 0eb0 47 A7                   		cmp	r10, r7
 4440 0eb2 3A 06 01                		beq	.L291
 4441                             	.LVL325:
1427:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	  }
 4442                             		.loc 7 1427 0
 4443 0eb5 62 17                   		add	#1, r7
 4444                             	.LVL326:
 4445 0eb7 E7 B7 02                		mov.L	r7, 8[r11]
 4446                             	.LVL327:
 4447                             		.balign 8,3,5
 4448                             	.L292:
 4449                             	.LBE2526:
 4450                             	.LBE2525:
 4451                             	.LBE2524:
 679:../src/peripheral/uart.cpp ****         } else {
 4452                             		.loc 10 679 0
 4453 0eba CD 0E 40                		mov.B	64[r0], r14
 4454 0ebd 62 1E                   		add	#1, r14
 4455 0ebf C7 0E 40                		mov.B	r14, 64[r0]
 4456                             	.LVL328:
 4457 0ec2 AB 82                   		mov.L	56[r0], r2
 4458 0ec4 AB 09                   		mov.L	52[r0], r1
 4459 0ec6 60 11                   		sub	#1, r1
 4460 0ec8 A3 09                   		mov.L	r1, 52[r0]
 4461 0eca 62 12                   		add	#1, r2
 4462 0ecc A3 82                   		mov.L	r2, 56[r0]
 675:../src/peripheral/uart.cpp ****         if (printfBuff.empty() == false) {
 4463                             		.loc 10 675 0
 4464 0ece 61 01                   		cmp	#0, r1
 4465 0ed0 20 28                   		beq	.L407
 4466                             	.LVL329:
 4467                             		.balign 8,3,5
 4468                             	.L295:
 4469                             	.LBE2523:
 4470                             	.LBE1875:
1229:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
 4471                             		.loc 7 1229 0
 4472 0ed2 FB B2 B8 0E 00 00       		mov.L	#__ZL10printfBuff, r11
 4473 0ed8 ED B7 02                		mov.L	8[r11], r7
 4474                             	.LVL330:
 4475                             	.LBB2594:
 4476                             	.LBB2537:
 676:../src/peripheral/uart.cpp ****             buf[i] = printfBuff.front();
 4477                             		.loc 10 676 0
 4478 0edb ED BA 06                		mov.L	24[r11], r10
 4479 0ede 47 7A                   		cmp	r7, r10
 4480 0ee0 21 C3                   		bne	.L408
 681:../src/peripheral/uart.cpp ****         }
 4481                             		.loc 10 681 0
 4482 0ee2 ED 0F 0E                		mov.L	56[r0], r15
 4483 0ee5 F8 F4 00                		mov.B	#0, [r15]
 4484 0ee8 EF F2                   		mov.L	r15, r2
 4485 0eea AB 09                   		mov.L	52[r0], r1
 4486 0eec 60 11                   		sub	#1, r1
 4487 0eee A3 09                   		mov.L	r1, 52[r0]
 4488 0ef0 62 12                   		add	#1, r2
 4489 0ef2 A3 82                   		mov.L	r2, 56[r0]
 675:../src/peripheral/uart.cpp ****         if (printfBuff.empty() == false) {
 4490                             		.loc 10 675 0
 4491 0ef4 61 01                   		cmp	#0, r1
 4492 0ef6 21 DC                   		bne	.L295
 4493                             	.LVL331:
 4494                             		.balign 8,3,1
 4495                             	.L407:
 4496 0ef8 AB 8F                   		mov.L	60[r0], r7
 4497 0efa 62 77                   		add	#7, r7
 4498 0efc 7E 17                   		neg	r7
 4499                             	.LBE2537:
 685:../src/peripheral/uart.cpp **** 
 4500                             		.loc 10 685 0
 4501 0efe AB 8B                   		mov.L	60[r0], r3
 4502 0f00 C5 03 40 07             		mov.B	64[r0], 7[r3]
 4503                             	.LVL332:
 4504 0f04 64 37                   		and	#3, r7
 4505 0f06 3A 94 05                		beq	.L317
 4506                             	.LBB2538:
 690:../src/peripheral/uart.cpp ****     buf[6] = sum;
 4507                             		.loc 10 690 0
 4508 0f09 CD 04 40                		mov.B	64[r0], r4
 4509                             	.LVL333:
 4510 0f0c 61 17                   		cmp	#1, r7
 4511 0f0e 24 05 38 33 06          		bleu	.L318
 4512 0f13 CD 3A 08                		mov.B	8[r3], r10
 4513 0f16 4B 4A                   		add	r4, r10
 4514 0f18 CF A4                   		mov.B	r10, r4
 4515                             	.LVL334:
 4516 0f1a 61 27                   		cmp	#2, r7
 4517 0f1c 24 05 38 2D 06          		bleu	.L319
 4518 0f21 8A 3C                   		mov.B	9[r3], r4
 4519 0f23 75 42 F0                		mov.L	#0xf0, r2
 4520 0f26 4B A4                   		add	r10, r4
 4521                             	.LVL335:
 689:../src/peripheral/uart.cpp ****         sum += buf[i];
 4522                             		.loc 10 689 0
 4523 0f28 66 A3                   		mov.L	#10, r3
 4524                             	.LVL336:
 4525                             		.balign 8,3,2
 4526                             	.L296:
 4527 0f2a 71 7C 07                		add	#7, r7, r12
 4528                             	.LBE2538:
 688:../src/peripheral/uart.cpp ****     for (int i = 7; i < PERIODIC_MSG_LEN; i++)
 4529                             		.loc 10 688 0
 4530 0f2d 66 0B                   		mov.L	#0, r11
 4531 0f2f 75 4A F3                		mov.L	#0xf3, r10
 4532 0f32 FF 01 7A                		sub	r7, r10, r1
 4533 0f35 06 89 0C 0F             		add	60[r0], r12
 4534 0f39 EF B7                   		mov.L	r11, r7
 4535                             		.balign 8,3,1
 4536                             	.L398:
 4537 0f3b EF 7A                   		mov.L	r7, r10
 4538                             	.LBB2539:
 690:../src/peripheral/uart.cpp ****     buf[6] = sum;
 4539                             		.loc 10 690 0
 4540 0f3d FD 2A CD                		mov.L	[r12+], r13
 4541 0f40 FB 72 7F 7F 7F 7F       		mov.L	#0x7f7f7f7f, r7
 4542 0f46 53 A7                   		and	r10, r7
 4543 0f48 FB E2 7F 7F 7F 7F       		mov.L	#0x7f7f7f7f, r14
 4544 0f4e 53 DE                   		and	r13, r14
 4545 0f50 FC 37 DA                		xor	r13, r10
 4546 0f53 4B E7                   		add	r14, r7
 4547 0f55 74 2A 80 80 80 80       		and #0x80808080, r10
 4548 0f5b 62 1B                   		add	#1, r11
 4549 0f5d FC 37 A7                		xor	r10, r7
 4550 0f60 75 5B 3B                		cmp	#59, r11
 4551 0f63 25 D8                   		bleu	.L398
 4552 0f65 FD 98 7A                		shlr	#24, r7, r10
 4553 0f68 4B 7A                   		add	r7, r10
 4554 0f6a FD 88 7C                		shlr	#8, r7, r12
 4555 0f6d 4B A4                   		add	r10, r4
 4556 0f6f 4B 4C                   		add	r4, r12
 4557 0f71 69 07                   		shlr	#16, r7
 4558 0f73 4B 7C                   		add	r7, r12
 4559 0f75 CF CA                   		mov.B	r12, r10
 4560 0f77 72 37 F0 00             		add	#0xf0, r3, r7
 4561 0f7b 75 51 F0                		cmp	#0xf0, r1
 4562 0f7e 20 2B                   		beq	.L301
 4563                             	.LVL337:
 4564 0f80 ED 08 0F                		mov.L	60[r0], r8
 4565 0f83 FE 47 87                		mov.B	[r7,r8], r7
 4566                             	.LVL338:
 689:../src/peripheral/uart.cpp ****         sum += buf[i];
 4567                             		.loc 10 689 0
 4568 0f86 72 3B F1 00             		add	#0xf1, r3, r11
 690:../src/peripheral/uart.cpp ****     buf[6] = sum;
 4569                             		.loc 10 690 0
 4570 0f8a 4B C7                   		add	r12, r7
 4571 0f8c CF 7A                   		mov.B	r7, r10
 4572                             	.LVL339:
 689:../src/peripheral/uart.cpp ****         sum += buf[i];
 4573                             		.loc 10 689 0
 4574 0f8e 75 52 F1                		cmp	#0xf1, r2
 4575 0f91 20 18                   		beq	.L301
 690:../src/peripheral/uart.cpp ****     buf[6] = sum;
 4576                             		.loc 10 690 0
 4577 0f93 FE 4B 8A                		mov.B	[r11,r8], r10
 689:../src/peripheral/uart.cpp ****         sum += buf[i];
 4578                             		.loc 10 689 0
 4579 0f96 72 33 F2 00             		add	#0xf2, r3
 690:../src/peripheral/uart.cpp ****     buf[6] = sum;
 4580                             		.loc 10 690 0
 4581 0f9a 4B A7                   		add	r10, r7
 4582                             	.LVL340:
 4583 0f9c CF 7A                   		mov.B	r7, r10
 4584                             	.LVL341:
 689:../src/peripheral/uart.cpp ****         sum += buf[i];
 4585                             		.loc 10 689 0
 4586 0f9e 75 52 F2                		cmp	#0xf2, r2
 4587 0fa1 10                      		beq	.L301
 690:../src/peripheral/uart.cpp ****     buf[6] = sum;
 4588                             		.loc 10 690 0
 4589 0fa2 AB 8E                   		mov.L	60[r0], r6
 4590 0fa4 FE 43 6A                		mov.B	[r3,r6], r10
 4591 0fa7 4B 7A                   		add	r7, r10
 4592                             	.LVL342:
 4593                             		.balign 8,3,1
 4594                             	.L301:
 4595                             	.LBE2539:
 691:../src/peripheral/uart.cpp **** }
 4596                             		.loc 10 691 0
 4597 0fa9 ED 09 0F                		mov.L	60[r0], r9
 4598 0fac C7 9A 06                		mov.B	r10, 6[r9]
 4599 0faf EF 01                   		mov.L	r0, r1
 4600 0fb1 05 00 00 00             		bsr	__Unwind_SjLj_Unregister
 4601                             	.LVL343:
 4602                             	.LBE2594:
 692:../src/peripheral/uart.cpp **** 
 4603                             		.loc 10 692 0
 4604 0fb5 3F 6D 21                		rtsd	#132, r6-r13
 4605                             	.LVL344:
 4606                             	.L291:
 4607                             	.LBB2595:
 4608                             	.LBB2540:
 4609                             	.LBB2536:
 4610                             	.LBB2535:
 4611                             	.LBB2534:
 4612                             	.LBB2527:
 4613                             	.LBB2528:
 4614                             	.LBB2529:
 4615                             	.LBB2530:
 4616                             	.LBB2531:
 4617                             		.loc 8 110 0
 4618 0fb8 FB D2 B8 0E 00 00       		mov.L	#__ZL10printfBuff, r13
 4619 0fbe ED D1 03                		mov.L	12[r13], r1
 4620 0fc1 05 00 00 00             		bsr	__ZdlPv
 4621                             	.LVL345:
 4622                             	.LBE2531:
 4623                             	.LBE2530:
 4624                             	.LBE2529:
 524:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****       this->_M_impl._M_start._M_cur = this->_M_impl._M_start._M_first;
 4625                             		.loc 11 524 0
 4626 0fc5 ED D7 05                		mov.L	20[r13], r7
 4627                             	.LVL346:
 4628 0fc8 71 7A 04                		add	#4, r7, r10
 4629                             	.LVL347:
 4630                             	.LBB2532:
 4631                             	.LBB2533:
 236:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	_M_first = *__new_node;
 4632                             		.loc 7 236 0
 4633 0fcb E7 DA 05                		mov.L	r10, 20[r13]
 237:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	_M_last = _M_first + difference_type(_S_buffer_size());
 4634                             		.loc 7 237 0
 4635 0fce A8 7F                   		mov.L	4[r7], r7
 238:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       }
 4636                             		.loc 7 238 0
 4637 0fd0 72 7A 00 02             		add	#0x200, r7, r10
 4638                             	.LVL348:
 237:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	_M_last = _M_first + difference_type(_S_buffer_size());
 4639                             		.loc 7 237 0
 4640 0fd4 E7 D7 03                		mov.L	r7, 12[r13]
 4641                             	.LVL349:
 238:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       }
 4642                             		.loc 7 238 0
 4643 0fd7 E7 DA 04                		mov.L	r10, 16[r13]
 4644                             	.LBE2533:
 4645                             	.LBE2532:
 525:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****     }
 4646                             		.loc 11 525 0
 4647 0fda E7 D7 02                		mov.L	r7, 8[r13]
 4648 0fdd 38 DD FE                		bra	.L292
 4649                             	.LVL350:
 4650                             	.L406:
 4651                             	.LBE2528:
 4652                             	.LBE2527:
 4653                             	.LBE2534:
 4654                             	.LBE2535:
 4655                             	.LBE2536:
 4656                             	.LBE2540:
 4657                             	.LBB2541:
 4658                             	.LBB2315:
 4659                             	.LBB2311:
 4660                             	.LBB2307:
 4661                             	.LBB2303:
 4662                             	.LBB2299:
 4663                             	.LBB2295:
 4664                             	.LBB2291:
 4665                             	.LBB2287:
 198:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	    _M_set_node(_M_node + __node_offset);
 4666                             		.loc 7 198 0
 4667 0fe0 61 0A                   		cmp	#0, r10
 4668 0fe2 2A 05 38 E6 04          		ble	.L409
 4669 0fe7 6A 9C                   		shar	#9, r12
 4670                             	.LVL351:
 200:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 				 * difference_type(_S_buffer_size()));
 4671                             		.loc 7 200 0
 4672 0fe9 FD C8 C7                		shll	#8, r12, r7
 4673                             	.LBE2287:
 4674                             	.LBE2291:
 4675                             	.LBE2295:
 4676                             	.LBE2299:
 4677                             	.LBE2303:
 4678                             	.LBE2307:
 4679                             	.LBE2311:
 4680                             	.LBE2315:
 4681                             	.LBE2541:
 570:../src/peripheral/uart.cpp ****     buf[99] = ((0x000000ff & (wallSen.left.at(0))));
 4682                             		.loc 10 570 0
 4683 0fec FE 6C BC                		mov.L	[r12,r11], r12
 4684                             	.LVL352:
 4685                             	.LBB2542:
 4686                             	.LBB2316:
 4687                             	.LBB2312:
 4688                             	.LBB2308:
 4689                             	.LBB2304:
 4690                             	.LBB2300:
 4691                             	.LBB2296:
 4692                             	.LBB2292:
 4693                             	.LBB2288:
 200:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 				 * difference_type(_S_buffer_size()));
 4694                             		.loc 7 200 0
 4695 0fef FF 07 7A                		sub	r7, r10, r7
 4696                             	.LBE2288:
 4697                             	.LBE2292:
 4698                             	.LBE2296:
 4699                             	.LBE2300:
 4700                             	.LBE2304:
 4701                             	.LBE2308:
 4702                             	.LBE2312:
 4703                             	.LBE2316:
 4704                             	.LBE2542:
 570:../src/peripheral/uart.cpp ****     buf[99] = ((0x000000ff & (wallSen.left.at(0))));
 4705                             		.loc 10 570 0
 4706 0ff2 4B 77                   		add	r7, r7
 4707 0ff4 4B C7                   		add	r12, r7
 4708 0ff6 AB 89                   		mov.L	60[r0], r1
 4709 0ff8 C5 71 01 62             		mov.B	1[r7], 98[r1]
 4710                             	.LVL353:
 4711                             	.LBB2543:
 4712                             	.LBB2544:
 4713                             	.LBB2545:
 4714                             	.LBB2546:
 4715                             	.LBB2547:
 4716                             	.LBB2548:
 4717                             	.LBB2549:
 4718                             	.LBB2550:
 198:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	    _M_set_node(_M_node + __node_offset);
 4719                             		.loc 7 198 0
 4720 0ffc 61 0A                   		cmp	#0, r10
 4721 0ffe 2A 05 38 ED 04          		ble	.L286
 4722                             		.balign 8,3,2
 4723                             	.L418:
 4724 1003 FD A8 AC                		shar	#8, r10, r12
 4725 1006 EF 00                   		.balign 8,3,2
 4726                             	.L287:
 4727                             	.LVL354:
 200:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 				 * difference_type(_S_buffer_size()));
 4728                             		.loc 7 200 0
 4729 1008 FD C8 C7                		shll	#8, r12, r7
 4730 100b 43 7A                   		sub	r7, r10
 4731                             	.LVL355:
 4732 100d FE 6C B7                		mov.L	[r12,r11], r7
 4733 1010 4B AA                   		add	r10, r10
 4734                             	.LVL356:
 4735 1012 4B A7                   		add	r10, r7
 4736                             	.LVL357:
 4737 1014 AB 8A                   		mov.L	60[r0], r2
 4738 1016 38 CE FB                		bra	.L313
 4739                             	.LVL358:
 4740                             	.L405:
 4741                             	.LBE2550:
 4742                             	.LBE2549:
 4743                             	.LBE2548:
 4744                             	.LBE2547:
 4745                             	.LBE2546:
 4746                             	.LBE2545:
 4747                             	.LBE2544:
 4748                             	.LBE2543:
 4749                             	.LBB2558:
 4750                             	.LBB2264:
 4751                             	.LBB2260:
 4752                             	.LBB2256:
 4753                             	.LBB2252:
 4754                             	.LBB2248:
 4755                             	.LBB2244:
 4756                             	.LBB2240:
 4757                             	.LBB2236:
 198:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	    _M_set_node(_M_node + __node_offset);
 4758                             		.loc 7 198 0
 4759 1019 61 07                   		cmp	#0, r7
 4760 101b 2A 05 38 DC 04          		ble	.L410
 4761 1020 6A 9C                   		shar	#9, r12
 4762                             	.LVL359:
 200:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 				 * difference_type(_S_buffer_size()));
 4763                             		.loc 7 200 0
 4764 1022 FD C8 CA                		shll	#8, r12, r10
 4765                             	.LBE2236:
 4766                             	.LBE2240:
 4767                             	.LBE2244:
 4768                             	.LBE2248:
 4769                             	.LBE2252:
 4770                             	.LBE2256:
 4771                             	.LBE2260:
 4772                             	.LBE2264:
 4773                             	.LBE2558:
 567:../src/peripheral/uart.cpp ****     buf[97] = ((0x000000ff & (wallSen.ahead.at(0))));
 4774                             		.loc 10 567 0
 4775 1025 FE 6C BC                		mov.L	[r12,r11], r12
 4776                             	.LVL360:
 4777                             	.LBB2559:
 4778                             	.LBB2265:
 4779                             	.LBB2261:
 4780                             	.LBB2257:
 4781                             	.LBB2253:
 4782                             	.LBB2249:
 4783                             	.LBB2245:
 4784                             	.LBB2241:
 4785                             	.LBB2237:
 200:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 				 * difference_type(_S_buffer_size()));
 4786                             		.loc 7 200 0
 4787 1028 FF 0A A7                		sub	r10, r7, r10
 4788                             	.LBE2237:
 4789                             	.LBE2241:
 4790                             	.LBE2245:
 4791                             	.LBE2249:
 4792                             	.LBE2253:
 4793                             	.LBE2257:
 4794                             	.LBE2261:
 4795                             	.LBE2265:
 4796                             	.LBE2559:
 567:../src/peripheral/uart.cpp ****     buf[97] = ((0x000000ff & (wallSen.ahead.at(0))));
 4797                             		.loc 10 567 0
 4798 102b 4B AA                   		add	r10, r10
 4799 102d 4B CA                   		add	r12, r10
 4800 102f ED 09 0F                		mov.L	60[r0], r9
 4801 1032 C5 A9 01 60             		mov.B	1[r10], 96[r9]
 4802                             	.LVL361:
 4803                             	.LBB2560:
 4804                             	.LBB2561:
 4805                             	.LBB2562:
 4806                             	.LBB2563:
 4807                             	.LBB2564:
 4808                             	.LBB2565:
 4809                             	.LBB2566:
 4810                             	.LBB2567:
 198:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	    _M_set_node(_M_node + __node_offset);
 4811                             		.loc 7 198 0
 4812 1036 61 07                   		cmp	#0, r7
 4813 1038 2A 05 38 E3 04          		ble	.L281
 4814                             		.balign 8,3,2
 4815                             	.L419:
 4816 103d FD A8 7C                		shar	#8, r7, r12
 4817                             		.balign 8,3,2
 4818                             	.L282:
 4819                             	.LVL362:
 200:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 				 * difference_type(_S_buffer_size()));
 4820                             		.loc 7 200 0
 4821 1040 FD C8 CA                		shll	#8, r12, r10
 4822 1043 43 A7                   		sub	r10, r7
 4823                             	.LVL363:
 4824 1045 FE 6C BA                		mov.L	[r12,r11], r10
 4825 1048 4B 77                   		add	r7, r7
 4826                             	.LVL364:
 4827 104a 4B 7A                   		add	r7, r10
 4828                             	.LVL365:
 4829 104c ED 0F 0F                		mov.L	60[r0], r15
 4830 104f 38 45 FB                		bra	.L312
 4831                             	.LVL366:
 4832                             	.L399:
 4833                             	.LBE2567:
 4834                             	.LBE2566:
 4835                             	.LBE2565:
 4836                             	.LBE2564:
 4837                             	.LBE2563:
 4838                             	.LBE2562:
 4839                             	.LBE2561:
 4840                             	.LBE2560:
 4841                             	.LBB2575:
 4842                             	.LBB1878:
  70:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\imu.hpp **** 		return instance;
 4843                             		.loc 1 70 0
 4844 1052 05 00 00 00             		bsr	___cxa_guard_acquire
 4845                             	.LVL367:
 4846 1056 61 01                   		cmp	#0, r1
 4847 1058 3A 78 F7                		beq	.L226
 4848                             	.LVL368:
 4849 105b FB 12 00 00 00 00       		mov.L	#__ZGVZN7MPU925011getInstanceEvE8instance, r1
 4850 1061 05 00 00 00             		bsr	___cxa_guard_release
 4851                             	.LVL369:
 4852 1065 FB 12 00 00 00 00       		mov.L	#__ZN7MPU9250D1Ev, r1
 4853 106b FB 22 00 00 00 00       		mov.L	#__ZZN7MPU925011getInstanceEvE8instance, r2
 4854 1071 FB 32 00 00 00 00       		mov.L	#___dso_handle, r3
 4855 1077 05 00 00 00             		bsr	___cxa_atexit
 4856                             	.LVL370:
 4857                             	.LBE1878:
 4858                             	.LBE2575:
 4859                             	.LBB2576:
 4860                             	.LBB1881:
  26:C:\Users\ryota\e2_studio\workspace\umouse\src\umouse_object\imu.hpp **** 		return instance;
 4861                             		.loc 1 26 0
 4862 107b FB 22 00 00 00 00       		mov.L	#__ZGVZN9Icm20608G11getInstanceEvE8instance, r2
 4863 1081 58 27                   		movu.B	[r2], r7
 4864 1083 61 07                   		cmp	#0, r7
 4865 1085 3B 5B F7                		bne	.L229
 4866                             	.LVL371:
 4867                             		.balign 8,3,1
 4868                             	.L400:
 4869 1088 EF 21                   		mov.L	r2, r1
 4870 108a 05 00 00 00             		bsr	___cxa_guard_acquire
 4871                             	.LVL372:
 4872 108e 61 01                   		cmp	#0, r1
 4873 1090 3A 50 F7                		beq	.L229
 4874                             	.LVL373:
 4875 1093 FB 12 00 00 00 00       		mov.L	#__ZGVZN9Icm20608G11getInstanceEvE8instance, r1
 4876 1099 05 00 00 00             		bsr	___cxa_guard_release
 4877                             	.LVL374:
 4878 109d FB 12 00 00 00 00       		mov.L	#__ZN9Icm20608GD1Ev, r1
 4879 10a3 FB 22 00 00 00 00       		mov.L	#__ZZN9Icm20608G11getInstanceEvE8instance, r2
 4880 10a9 FB 32 00 00 00 00       		mov.L	#___dso_handle, r3
 4881 10af 05 00 00 00             		bsr	___cxa_atexit
 4882                             	.LVL375:
 4883                             	.LBE1881:
 4884                             	.LBE2576:
 4885                             	.LBB2577:
 4886                             	.LBB1886:
 4887                             		.loc 2 30 0
 4888 10b3 FB 32 00 00 00 00       		mov.L	#__ZGVZN6TactSw11getInstanceEvE8instance, r3
 4889 10b9 58 33                   		movu.B	[r3], r3
 4890 10bb A3 0B                   		mov.L	r3, 52[r0]
 4891 10bd 61 03                   		cmp	#0, r3
 4892 10bf 3B 31 F7                		bne	.L232
 4893                             	.LVL376:
 4894                             		.balign 8,3,5
 4895                             	.L401:
 4896 10c2 FB 12 00 00 00 00       		mov.L	#__ZGVZN6TactSw11getInstanceEvE8instance, r1
 4897 10c8 05 00 00 00             		bsr	___cxa_guard_acquire
 4898                             	.LVL377:
 4899 10cc 61 01                   		cmp	#0, r1
 4900 10ce 3A 22 F7                		beq	.L232
 4901                             	.LVL378:
 4902 10d1 FB 12 00 00 00 00       		mov.L	#__ZGVZN6TactSw11getInstanceEvE8instance, r1
 4903                             	.LBB1884:
 4904                             	.LBB1885:
  10:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\tactsw.h ****     TactSw(TactSw&){on_time_msec = 0;};
 4905                             		.loc 2 10 0
 4906 10d7 AB 0D                   		mov.L	52[r0], r5
 4907 10d9 FB 42 00 00 00 00       		mov.L	#__ZZN6TactSw11getInstanceEvE8instance, r4
 4908 10df D3 45                   		mov.W	r5, [r4]
 4909                             	.LBE1885:
 4910                             	.LBE1884:
 4911                             		.loc 2 30 0
 4912 10e1 05 00 00 00             		bsr	___cxa_guard_release
 4913                             	.LVL379:
 4914 10e5 FB 12 00 00 00 00       		mov.L	#__ZN6TactSwD1Ev, r1
 4915 10eb FB 22 00 00 00 00       		mov.L	#__ZZN6TactSw11getInstanceEvE8instance, r2
 4916 10f1 FB 32 00 00 00 00       		mov.L	#___dso_handle, r3
 4917 10f7 05 00 00 00             		bsr	___cxa_atexit
 4918                             	.LVL380:
 4919                             	.LBE1886:
 4920                             	.LBE2577:
 4921                             	.LBB2578:
 4922                             	.LBB2145:
 4923                             		.loc 9 133 0
 4924 10fb FB 12 00 00 00 00       		mov.L	#__ZGVZN10WallSensor11getInstanceEvE8instance, r1
 4925 1101 58 16                   		movu.B	[r1], r6
 4926 1103 A3 86                   		mov.L	r6, 56[r0]
 4927 1105 61 06                   		cmp	#0, r6
 4928 1107 3B F8 F6                		bne	.L411
 4929                             	.LVL381:
 4930                             		.balign 8,3,3
 4931                             	.L234:
 4932 110a 05 00 00 00             		bsr	___cxa_guard_acquire
 4933                             	.LVL382:
 4934                             	.LBB2138:
 4935                             	.LBB2132:
  18:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\wallsensor.hpp ****         enable = true;
 4936                             		.loc 9 18 0
 4937 110e F9 02 0D 00 00 00 00    		mov.L	#__ZZN10WallSensor11getInstanceEvE8instance, 52[r0]
 4938                             	.LBE2132:
 4939                             	.LBE2138:
 4940                             		.loc 9 133 0
 4941 1115 61 01                   		cmp	#0, r1
 4942 1117 3A F1 F6                		beq	.L235
 4943                             	.LVL383:
 4944                             	.LBB2139:
 4945                             	.LBB2133:
  18:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\wallsensor.hpp ****         enable = true;
 4946                             		.loc 9 18 0
 4947 111a AB 0F                   		mov.L	52[r0], r7
 4948 111c F8 74 05                		mov.B	#5, [r7]
 4949                             	.LVL384:
 4950                             	.LBB1988:
 4951                             	.LBB1989:
 4952                             	.LBB1990:
 4953                             	.LBB1991:
 502:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	{ }
 4954                             		.loc 7 502 0
 4955 111f E5 07 0E 04             		mov.L	56[r0], 16[r7]
 4956                             	.LVL385:
 4957                             	.LBB1992:
 4958                             	.LBB1993:
 133:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
 4959                             		.loc 7 133 0
 4960 1123 E5 07 0E 06             		mov.L	56[r0], 24[r7]
 4961 1127 E5 07 0E 07             		mov.L	56[r0], 28[r7]
 4962 112b E5 07 0E 08             		mov.L	56[r0], 32[r7]
 4963 112f E5 07 0E 09             		mov.L	56[r0], 36[r7]
 4964                             	.LVL386:
 4965                             	.LBE1993:
 4966                             	.LBE1992:
 4967                             	.LBB1994:
 4968                             	.LBB1995:
 4969 1133 E5 07 0E 0A             		mov.L	56[r0], 40[r7]
 4970 1137 E5 07 0E 0B             		mov.L	56[r0], 44[r7]
 4971 113b E5 07 0E 0C             		mov.L	56[r0], 48[r7]
 4972 113f E5 07 0E 0D             		mov.L	56[r0], 52[r7]
 4973                             	.LVL387:
 4974                             	.LBE1995:
 4975                             	.LBE1994:
 4976                             	.LBE1991:
 4977                             	.LBE1990:
 4978                             	.LBB1996:
 4979                             	.LBB1997:
 587:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 					   size_t(__num_nodes + 2));
 4980                             		.loc 7 587 0
 4981 1143 3E 75 08                		mov.L	#8, 20[r7]
 4982                             	.LVL388:
 4983                             	.LBB1998:
 4984                             	.LBB1999:
 4985                             	.LBB2000:
 104:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\ext\new_allocator.h ****       }
 4986                             		.loc 8 104 0
 4987 1146 3E 01 01                		mov.L	#1, 4[r0]
 4988 1149 75 41 20                		mov.L	#32, r1
 4989 114c 05 00 00 00             		bsr	__Znwm
 4990                             	.LVL389:
 4991 1150 EF 17                   		mov.L	r1, r7
 4992                             	.LBE2000:
 4993                             	.LBE1999:
 4994                             	.LBE1998:
 597:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       _Tp** __nfinish = __nstart + __num_nodes;
 4995                             		.loc 7 597 0
 4996 1152 ED 08 0D                		mov.L	52[r0], r8
 4997 1155 ED 8A 05                		mov.L	20[r8], r10
 589:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
 4998                             		.loc 7 589 0
 4999 1158 E7 81 04                		mov.L	r1, 16[r8]
 597:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       _Tp** __nfinish = __nstart + __num_nodes;
 5000                             		.loc 7 597 0
 5001 115b 60 1A                   		sub	#1, r10
 5002 115d 68 1A                   		shlr	#1, r10
 5003 115f 6C 2A                   		shll	#2, r10
 5004                             	.LBB2001:
 5005                             	.LBB2002:
 5006                             	.LBB2003:
 5007                             	.LBB2004:
 5008                             	.LBB2005:
 104:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\ext\new_allocator.h ****       }
 5009                             		.loc 8 104 0
 5010 1161 3E 01 06                		mov.L	#6, 4[r0]
 5011 1164 FB 1A 00 02             		mov.L	#0x200, r1
 5012                             	.LBE2005:
 5013                             	.LBE2004:
 5014                             	.LBE2003:
 5015                             	.LBE2002:
 5016                             	.LBE2001:
 597:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       _Tp** __nfinish = __nstart + __num_nodes;
 5017                             		.loc 7 597 0
 5018 1168 4B 7A                   		add	r7, r10
 5019 116a E7 0A 0E                		mov.L	r10, 56[r0]
 5020                             	.LVL390:
 5021                             	.LBB2011:
 5022                             	.LBB2009:
 5023                             	.LBB2008:
 5024                             	.LBB2007:
 5025                             	.LBB2006:
 104:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\ext\new_allocator.h ****       }
 5026                             		.loc 8 104 0
 5027 116d 05 00 00 00             		bsr	__Znwm
 5028                             	.LVL391:
 5029                             	.LBE2006:
 5030                             	.LBE2007:
 5031                             	.LBE2008:
 627:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	}
 5032                             		.loc 7 627 0
 5033 1171 E3 A1                   		mov.L	r1, [r10]
 5034                             	.LVL392:
 5035                             	.LBE2009:
 5036                             	.LBE2011:
 5037                             	.LBB2012:
 5038                             	.LBB2013:
 236:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	_M_first = *__new_node;
 5039                             		.loc 7 236 0
 5040 1173 E5 08 0E 09             		mov.L	56[r0], 36[r8]
 237:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	_M_last = _M_first + difference_type(_S_buffer_size());
 5041                             		.loc 7 237 0
 5042 1177 ED 09 0E                		mov.L	56[r0], r9
 5043 117a EC 9A                   		mov.L	[r9], r10
 5044                             	.LVL393:
 5045                             	.LBE2013:
 5046                             	.LBE2012:
 5047                             	.LBB2015:
 5048                             	.LBB2016:
 236:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	_M_first = *__new_node;
 5049                             		.loc 7 236 0
 5050 117c E7 89 0D                		mov.L	r9, 52[r8]
 5051                             	.LBE2016:
 5052                             	.LBE2015:
 5053                             	.LBB2019:
 5054                             	.LBB2014:
 238:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       }
 5055                             		.loc 7 238 0
 5056 117f 72 A7 00 02             		add	#0x200, r10, r7
 237:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	_M_last = _M_first + difference_type(_S_buffer_size());
 5057                             		.loc 7 237 0
 5058 1183 E7 8A 07                		mov.L	r10, 28[r8]
 5059                             	.LVL394:
 238:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       }
 5060                             		.loc 7 238 0
 5061 1186 E7 87 08                		mov.L	r7, 32[r8]
 5062                             	.LVL395:
 5063                             	.LBE2014:
 5064                             	.LBE2019:
 5065                             	.LBB2020:
 5066                             	.LBB2017:
 237:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	_M_last = _M_first + difference_type(_S_buffer_size());
 5067                             		.loc 7 237 0
 5068 1189 EC 97                   		mov.L	[r9], r7
 5069                             	.LBE2017:
 5070                             	.LBE2020:
 612:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
 5071                             		.loc 7 612 0
 5072 118b E7 8A 06                		mov.L	r10, 24[r8]
 5073                             	.LBB2021:
 5074                             	.LBB2018:
 238:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       }
 5075                             		.loc 7 238 0
 5076 118e 72 7A 00 02             		add	#0x200, r7, r10
 237:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	_M_last = _M_first + difference_type(_S_buffer_size());
 5077                             		.loc 7 237 0
 5078 1192 E7 87 0B                		mov.L	r7, 44[r8]
 5079                             	.LVL396:
 238:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       }
 5080                             		.loc 7 238 0
 5081 1195 E7 8A 0C                		mov.L	r10, 48[r8]
 5082                             	.LBE2018:
 5083                             	.LBE2021:
 613:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 					+ __num_elements
 5084                             		.loc 7 613 0
 5085 1198 E7 87 0A                		mov.L	r7, 40[r8]
 5086                             	.LVL397:
 5087                             	.LBE1997:
 5088                             	.LBE1996:
 5089                             	.LBE1989:
 5090                             	.LBE1988:
 5091                             	.LBB2032:
 5092                             	.LBB2033:
 5093                             	.LBB2034:
 5094                             	.LBB2035:
 502:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	{ }
 5095                             		.loc 7 502 0
 5096 119b F9 86 0E 00             		mov.L	#0, 56[r8]
 5097                             	.LVL398:
 5098                             	.LBB2036:
 5099                             	.LBB2037:
 133:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
 5100                             		.loc 7 133 0
 5101 119f F9 86 10 00             		mov.L	#0, 64[r8]
 5102 11a3 F9 86 11 00             		mov.L	#0, 68[r8]
 5103 11a7 F9 86 12 00             		mov.L	#0, 72[r8]
 5104 11ab F9 86 13 00             		mov.L	#0, 76[r8]
 5105                             	.LVL399:
 5106                             	.LBE2037:
 5107                             	.LBE2036:
 5108                             	.LBB2038:
 5109                             	.LBB2039:
 5110 11af F9 86 14 00             		mov.L	#0, 80[r8]
 5111 11b3 F9 86 15 00             		mov.L	#0, 84[r8]
 5112 11b7 F9 86 16 00             		mov.L	#0, 88[r8]
 5113 11bb F9 86 17 00             		mov.L	#0, 92[r8]
 5114                             	.LVL400:
 5115                             	.LBE2039:
 5116                             	.LBE2038:
 5117                             	.LBE2035:
 5118                             	.LBE2034:
 5119                             	.LBB2040:
 5120                             	.LBB2041:
 587:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 					   size_t(__num_nodes + 2));
 5121                             		.loc 7 587 0
 5122 11bf F9 86 0F 08             		mov.L	#8, 60[r8]
 5123                             	.LVL401:
 5124                             	.LBB2042:
 5125                             	.LBB2043:
 5126                             	.LBB2044:
 104:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\ext\new_allocator.h ****       }
 5127                             		.loc 8 104 0
 5128 11c3 3E 01 02                		mov.L	#2, 4[r0]
 5129 11c6 75 41 20                		mov.L	#32, r1
 5130 11c9 05 00 00 00             		bsr	__Znwm
 5131                             	.LVL402:
 5132 11cd EF 17                   		mov.L	r1, r7
 5133                             	.LBE2044:
 5134                             	.LBE2043:
 5135                             	.LBE2042:
 597:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       _Tp** __nfinish = __nstart + __num_nodes;
 5136                             		.loc 7 597 0
 5137 11cf ED 8A 0F                		mov.L	60[r8], r10
 589:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
 5138                             		.loc 7 589 0
 5139 11d2 E7 81 0E                		mov.L	r1, 56[r8]
 597:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       _Tp** __nfinish = __nstart + __num_nodes;
 5140                             		.loc 7 597 0
 5141 11d5 60 1A                   		sub	#1, r10
 5142 11d7 68 1A                   		shlr	#1, r10
 5143 11d9 6C 2A                   		shll	#2, r10
 5144                             	.LBB2045:
 5145                             	.LBB2046:
 5146                             	.LBB2047:
 5147                             	.LBB2048:
 5148                             	.LBB2049:
 104:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\ext\new_allocator.h ****       }
 5149                             		.loc 8 104 0
 5150 11db 3E 01 09                		mov.L	#9, 4[r0]
 5151 11de FB 1A 00 02             		mov.L	#0x200, r1
 5152                             	.LBE2049:
 5153                             	.LBE2048:
 5154                             	.LBE2047:
 5155                             	.LBE2046:
 5156                             	.LBE2045:
 597:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       _Tp** __nfinish = __nstart + __num_nodes;
 5157                             		.loc 7 597 0
 5158 11e2 4B 7A                   		add	r7, r10
 5159 11e4 E7 0A 0E                		mov.L	r10, 56[r0]
 5160                             	.LVL403:
 5161                             	.LBB2055:
 5162                             	.LBB2053:
 5163                             	.LBB2052:
 5164                             	.LBB2051:
 5165                             	.LBB2050:
 104:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\ext\new_allocator.h ****       }
 5166                             		.loc 8 104 0
 5167 11e7 05 00 00 00             		bsr	__Znwm
 5168                             	.LVL404:
 5169                             	.LBE2050:
 5170                             	.LBE2051:
 5171                             	.LBE2052:
 627:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	}
 5172                             		.loc 7 627 0
 5173 11eb ED 0B 0E                		mov.L	56[r0], r11
 5174 11ee E3 B1                   		mov.L	r1, [r11]
 5175                             	.LVL405:
 5176                             	.LBE2053:
 5177                             	.LBE2055:
 5178                             	.LBB2056:
 5179                             	.LBB2057:
 236:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	_M_first = *__new_node;
 5180                             		.loc 7 236 0
 5181 11f0 ED 0C 0D                		mov.L	52[r0], r12
 5182 11f3 E7 CB 13                		mov.L	r11, 76[r12]
 237:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	_M_last = _M_first + difference_type(_S_buffer_size());
 5183                             		.loc 7 237 0
 5184 11f6 EC BA                   		mov.L	[r11], r10
 5185                             	.LVL406:
 5186                             	.LBE2057:
 5187                             	.LBE2056:
 5188                             	.LBB2059:
 5189                             	.LBB2060:
 236:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	_M_first = *__new_node;
 5190                             		.loc 7 236 0
 5191 11f8 E7 CB 17                		mov.L	r11, 92[r12]
 5192                             	.LBE2060:
 5193                             	.LBE2059:
 5194                             	.LBB2063:
 5195                             	.LBB2058:
 238:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       }
 5196                             		.loc 7 238 0
 5197 11fb 72 A7 00 02             		add	#0x200, r10, r7
 237:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	_M_last = _M_first + difference_type(_S_buffer_size());
 5198                             		.loc 7 237 0
 5199 11ff E7 CA 11                		mov.L	r10, 68[r12]
 238:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       }
 5200                             		.loc 7 238 0
 5201 1202 E7 C7 12                		mov.L	r7, 72[r12]
 5202                             	.LVL407:
 5203                             	.LBE2058:
 5204                             	.LBE2063:
 5205                             	.LBB2064:
 5206                             	.LBB2061:
 237:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	_M_last = _M_first + difference_type(_S_buffer_size());
 5207                             		.loc 7 237 0
 5208 1205 EC B7                   		mov.L	[r11], r7
 5209                             	.LBE2061:
 5210                             	.LBE2064:
 612:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
 5211                             		.loc 7 612 0
 5212 1207 E7 CA 10                		mov.L	r10, 64[r12]
 5213                             	.LBB2065:
 5214                             	.LBB2062:
 238:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       }
 5215                             		.loc 7 238 0
 5216 120a 72 7A 00 02             		add	#0x200, r7, r10
 237:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	_M_last = _M_first + difference_type(_S_buffer_size());
 5217                             		.loc 7 237 0
 5218 120e E7 C7 15                		mov.L	r7, 84[r12]
 238:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       }
 5219                             		.loc 7 238 0
 5220 1211 E7 CA 16                		mov.L	r10, 88[r12]
 5221                             	.LBE2062:
 5222                             	.LBE2065:
 613:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 					+ __num_elements
 5223                             		.loc 7 613 0
 5224 1214 E7 C7 14                		mov.L	r7, 80[r12]
 5225                             	.LVL408:
 5226                             	.LBE2041:
 5227                             	.LBE2040:
 5228                             	.LBE2033:
 5229                             	.LBE2032:
 5230                             	.LBB2073:
 5231                             	.LBB2074:
 5232                             	.LBB2075:
 5233                             	.LBB2076:
 502:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	{ }
 5234                             		.loc 7 502 0
 5235 1217 F9 C6 18 00             		mov.L	#0, 96[r12]
 5236                             	.LVL409:
 5237                             	.LBB2077:
 5238                             	.LBB2078:
 133:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
 5239                             		.loc 7 133 0
 5240 121b F9 C6 1A 00             		mov.L	#0, 104[r12]
 5241 121f F9 C6 1B 00             		mov.L	#0, 108[r12]
 5242 1223 F9 C6 1C 00             		mov.L	#0, 112[r12]
 5243 1227 F9 C6 1D 00             		mov.L	#0, 116[r12]
 5244                             	.LVL410:
 5245                             	.LBE2078:
 5246                             	.LBE2077:
 5247                             	.LBB2079:
 5248                             	.LBB2080:
 5249 122b F9 C6 1E 00             		mov.L	#0, 120[r12]
 5250 122f F9 C6 1F 00             		mov.L	#0, 124[r12]
 5251 1233 F9 C6 20 00             		mov.L	#0, 128[r12]
 5252 1237 F9 C6 21 00             		mov.L	#0, 132[r12]
 5253                             	.LVL411:
 5254                             	.LBE2080:
 5255                             	.LBE2079:
 5256                             	.LBE2076:
 5257                             	.LBE2075:
 5258                             	.LBB2081:
 5259                             	.LBB2082:
 587:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 					   size_t(__num_nodes + 2));
 5260                             		.loc 7 587 0
 5261 123b F9 C6 19 08             		mov.L	#8, 100[r12]
 5262                             	.LVL412:
 5263                             	.LBB2083:
 5264                             	.LBB2084:
 5265                             	.LBB2085:
 104:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\ext\new_allocator.h ****       }
 5266                             		.loc 8 104 0
 5267 123f 3E 01 03                		mov.L	#3, 4[r0]
 5268 1242 75 41 20                		mov.L	#32, r1
 5269 1245 05 00 00 00             		bsr	__Znwm
 5270                             	.LVL413:
 5271 1249 EF 17                   		mov.L	r1, r7
 5272                             	.LBE2085:
 5273                             	.LBE2084:
 5274                             	.LBE2083:
 597:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       _Tp** __nfinish = __nstart + __num_nodes;
 5275                             		.loc 7 597 0
 5276 124b ED CA 19                		mov.L	100[r12], r10
 589:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
 5277                             		.loc 7 589 0
 5278 124e E7 C1 18                		mov.L	r1, 96[r12]
 597:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       _Tp** __nfinish = __nstart + __num_nodes;
 5279                             		.loc 7 597 0
 5280 1251 60 1A                   		sub	#1, r10
 5281 1253 68 1A                   		shlr	#1, r10
 5282 1255 6C 2A                   		shll	#2, r10
 5283                             	.LBB2086:
 5284                             	.LBB2087:
 5285                             	.LBB2088:
 5286                             	.LBB2089:
 5287                             	.LBB2090:
 104:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\ext\new_allocator.h ****       }
 5288                             		.loc 8 104 0
 5289 1257 3E 01 0C                		mov.L	#12, 4[r0]
 5290 125a FB 1A 00 02             		mov.L	#0x200, r1
 5291                             	.LBE2090:
 5292                             	.LBE2089:
 5293                             	.LBE2088:
 5294                             	.LBE2087:
 5295                             	.LBE2086:
 597:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       _Tp** __nfinish = __nstart + __num_nodes;
 5296                             		.loc 7 597 0
 5297 125e 4B 7A                   		add	r7, r10
 5298 1260 E7 0A 0E                		mov.L	r10, 56[r0]
 5299                             	.LVL414:
 5300                             	.LBB2096:
 5301                             	.LBB2094:
 5302                             	.LBB2093:
 5303                             	.LBB2092:
 5304                             	.LBB2091:
 104:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\ext\new_allocator.h ****       }
 5305                             		.loc 8 104 0
 5306 1263 05 00 00 00             		bsr	__Znwm
 5307                             	.LVL415:
 5308                             	.LBE2091:
 5309                             	.LBE2092:
 5310                             	.LBE2093:
 627:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	}
 5311                             		.loc 7 627 0
 5312 1267 ED 0E 0E                		mov.L	56[r0], r14
 5313 126a E3 E1                   		mov.L	r1, [r14]
 5314                             	.LVL416:
 5315                             	.LBE2094:
 5316                             	.LBE2096:
 5317                             	.LBB2097:
 5318                             	.LBB2098:
 236:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	_M_first = *__new_node;
 5319                             		.loc 7 236 0
 5320 126c ED 0F 0D                		mov.L	52[r0], r15
 5321 126f E7 FE 1D                		mov.L	r14, 116[r15]
 237:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	_M_last = _M_first + difference_type(_S_buffer_size());
 5322                             		.loc 7 237 0
 5323 1272 EC EA                   		mov.L	[r14], r10
 5324                             	.LVL417:
 5325                             	.LBE2098:
 5326                             	.LBE2097:
 5327                             	.LBB2100:
 5328                             	.LBB2101:
 236:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	_M_first = *__new_node;
 5329                             		.loc 7 236 0
 5330 1274 E7 FE 21                		mov.L	r14, 132[r15]
 5331                             	.LBE2101:
 5332                             	.LBE2100:
 5333                             	.LBB2104:
 5334                             	.LBB2099:
 238:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       }
 5335                             		.loc 7 238 0
 5336 1277 72 A7 00 02             		add	#0x200, r10, r7
 237:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	_M_last = _M_first + difference_type(_S_buffer_size());
 5337                             		.loc 7 237 0
 5338 127b E7 FA 1B                		mov.L	r10, 108[r15]
 238:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       }
 5339                             		.loc 7 238 0
 5340 127e E7 F7 1C                		mov.L	r7, 112[r15]
 5341                             	.LVL418:
 5342                             	.LBE2099:
 5343                             	.LBE2104:
 5344                             	.LBB2105:
 5345                             	.LBB2102:
 237:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	_M_last = _M_first + difference_type(_S_buffer_size());
 5346                             		.loc 7 237 0
 5347 1281 EC E7                   		mov.L	[r14], r7
 5348                             	.LBE2102:
 5349                             	.LBE2105:
 5350                             	.LBE2082:
 5351                             	.LBE2081:
 5352                             	.LBE2074:
 5353                             	.LBE2073:
 5354                             	.LBB2117:
 5355                             	.LBB1984:
  27:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\wallsensor.hpp ****             ahead.push_front(0);
 5356                             		.loc 9 27 0
 5357 1283 58 FB                   		movu.B	[r15], r11
 5358                             	.LBE1984:
 5359                             	.LBE2117:
 5360                             	.LBB2118:
 5361                             	.LBB2115:
 5362                             	.LBB2113:
 5363                             	.LBB2111:
 5364                             	.LBB2106:
 5365                             	.LBB2103:
 238:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       }
 5366                             		.loc 7 238 0
 5367 1285 72 7C 00 02             		add	#0x200, r7, r12
 237:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	_M_last = _M_first + difference_type(_S_buffer_size());
 5368                             		.loc 7 237 0
 5369 1289 E7 F7 1F                		mov.L	r7, 124[r15]
 238:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       }
 5370                             		.loc 7 238 0
 5371 128c E7 FC 20                		mov.L	r12, 128[r15]
 5372                             	.LBE2103:
 5373                             	.LBE2106:
 612:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
 5374                             		.loc 7 612 0
 5375 128f E7 FA 1A                		mov.L	r10, 104[r15]
 613:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 					+ __num_elements
 5376                             		.loc 7 613 0
 5377 1292 E7 F7 1E                		mov.L	r7, 120[r15]
 5378                             	.LBE2111:
 5379                             	.LBE2113:
 5380                             	.LBE2115:
 5381                             	.LBE2118:
 5382                             	.LBB2119:
  19:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\wallsensor.hpp ****         ahead_on = 0;
 5383                             		.loc 9 19 0
 5384 1295 F9 F4 01 01             		mov.B	#1, 1[r15]
  20:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\wallsensor.hpp ****         left_on  = 0;
 5385                             		.loc 9 20 0
 5386 1299 F9 F5 01 00             		mov.W	#0, 2[r15]
  21:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\wallsensor.hpp ****         right_on = 0;
 5387                             		.loc 9 21 0
 5388 129d F9 F5 02 00             		mov.W	#0, 4[r15]
  22:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\wallsensor.hpp **** 
 5389                             		.loc 9 22 0
 5390 12a1 F9 F5 03 00             		mov.W	#0, 6[r15]
  24:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\wallsensor.hpp ****         left_off = 0;
 5391                             		.loc 9 24 0
 5392 12a5 F9 F5 04 00             		mov.W	#0, 8[r15]
  25:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\wallsensor.hpp ****         right_off = 0;
 5393                             		.loc 9 25 0
 5394 12a9 F9 F5 05 00             		mov.W	#0, 10[r15]
  26:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\wallsensor.hpp ****         for(uint8_t i=0;i<BUFF_SIZE;i++){
 5395                             		.loc 9 26 0
 5396 12ad F9 F5 06 00             		mov.W	#0, 12[r15]
 5397                             	.LVL419:
 5398                             	.LBB1985:
  27:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\wallsensor.hpp ****             ahead.push_front(0);
 5399                             		.loc 9 27 0
 5400 12b1 F9 04 38 00             		mov.B	#0, 56[r0]
 5401                             	.LVL420:
 5402 12b5 61 0B                   		cmp	#0, r11
 5403 12b7 21 57                   		bne	.L383
 5404 12b9 38 7F 01                		bra	.L248
 5405                             	.LVL421:
 5406                             	.L412:
 5407                             	.LBB1925:
 5408                             	.LBB1926:
 5409                             	.LBB1927:
 120:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 				    std::forward<_Args>(__args)...);
 5410                             		.loc 11 120 0
 5411 12bc 60 27                   		sub	#2, r7
 5412                             	.LVL422:
 5413                             	.LBB1928:
 5414                             	.LBB1929:
 111:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\ext\new_allocator.h **** 
 112:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\ext\new_allocator.h ****       size_type
 113:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\ext\new_allocator.h ****       max_size() const _GLIBCXX_USE_NOEXCEPT
 114:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\ext\new_allocator.h ****       { return size_t(-1) / sizeof(_Tp); }
 115:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\ext\new_allocator.h **** 
 116:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\ext\new_allocator.h **** #if __cplusplus >= 201103L
 117:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\ext\new_allocator.h ****       template<typename _Up, typename... _Args>
 118:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\ext\new_allocator.h ****         void
 119:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\ext\new_allocator.h ****         construct(_Up* __p, _Args&&... __args)
 120:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\ext\new_allocator.h **** 	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 5415                             		.loc 8 120 0
 5416 12be 14                      		beq	.L254
 5417 12bf F8 75 00                		mov.W	#0, [r7]
 5418                             		.balign 8,3,1
 5419                             	.L254:
 5420                             	.LBE1929:
 5421                             	.LBE1928:
 122:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	  }
 5422                             		.loc 11 122 0
 5423 12c2 AB 0D                   		mov.L	52[r0], r5
 5424 12c4 A1 D7                   		mov.L	r7, 24[r5]
 5425                             	.LVL423:
 5426                             		.balign 8,3,1
 5427                             	.L255:
 5428                             	.LBE1927:
 5429                             	.LBE1926:
 5430                             	.LBE1925:
 5431                             	.LBB1951:
 5432                             	.LBB1952:
 5433                             	.LBB1953:
 118:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	  {
 5434                             		.loc 11 118 0
 5435 12c6 ED 09 0D                		mov.L	52[r0], r9
 5436 12c9 ED 97 1A                		mov.L	104[r9], r7
 5437 12cc 06 85 97 1B             		cmp	108[r9].L, r7
 5438 12d0 3A A8 00                		beq	.L257
 5439                             		.balign 8,3,1
 5440                             	.L414:
 120:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 				    std::forward<_Args>(__args)...);
 5441                             		.loc 11 120 0
 5442 12d3 60 27                   		sub	#2, r7
 5443                             	.LVL424:
 5444                             	.LBB1954:
 5445                             	.LBB1955:
 5446                             		.loc 8 120 0
 5447 12d5 14                      		beq	.L258
 5448 12d6 F8 75 00                		mov.W	#0, [r7]
 5449                             		.balign 8,3,1
 5450                             	.L258:
 5451                             	.LBE1955:
 5452                             	.LBE1954:
 122:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	  }
 5453                             		.loc 11 122 0
 5454 12d9 ED 0A 0D                		mov.L	52[r0], r10
 5455 12dc E7 A7 1A                		mov.L	r7, 104[r10]
 5456                             	.LVL425:
 5457 12df 03                      		.balign 8,3,1
 5458                             	.L259:
 5459                             	.LBE1953:
 5460                             	.LBE1952:
 5461                             	.LBE1951:
 5462                             	.LBB1977:
 5463                             	.LBB1922:
 5464                             	.LBB1919:
 118:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	  {
 5465                             		.loc 11 118 0
 5466 12e0 ED 0E 0D                		mov.L	52[r0], r14
 5467 12e3 ED E7 10                		mov.L	64[r14], r7
 5468 12e6 06 85 E7 11             		cmp	68[r14].L, r7
 5469 12ea 3A EE 00                		beq	.L261
 5470                             		.balign 8,3,1
 5471                             	.L416:
 120:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 				    std::forward<_Args>(__args)...);
 5472                             		.loc 11 120 0
 5473 12ed 60 27                   		sub	#2, r7
 5474                             	.LVL426:
 5475                             	.LBB1915:
 5476                             	.LBB1916:
 5477                             		.loc 8 120 0
 5478 12ef 14                      		beq	.L262
 5479 12f0 F8 75 00                		mov.W	#0, [r7]
 5480                             		.balign 8,3,1
 5481                             	.L262:
 5482                             	.LBE1916:
 5483                             	.LBE1915:
 122:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	  }
 5484                             		.loc 11 122 0
 5485 12f3 ED 0F 0D                		mov.L	52[r0], r15
 5486 12f6 E7 F7 10                		mov.L	r7, 64[r15]
 5487                             	.LVL427:
 5488                             		.balign 8,3,5
 5489                             	.L263:
 5490                             	.LBE1919:
 5491                             	.LBE1922:
 5492                             	.LBE1977:
  27:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\wallsensor.hpp ****             ahead.push_front(0);
 5493                             		.loc 9 27 0
 5494 12f9 CD 07 38                		mov.B	56[r0], r7
 5495 12fc 62 17                   		add	#1, r7
 5496 12fe AB 0C                   		mov.L	52[r0], r4
 5497 1300 58 4A                   		movu.B	[r4], r10
 5498 1302 5B 7B                   		movu.B	r7, r11
 5499 1304 C7 07 38                		mov.B	r7, 56[r0]
 5500                             	.LVL428:
 5501 1307 47 AB                   		cmp	r10, r11
 5502 1309 23 05 38 2D 01          		bgeu	.L248
 5503                             	.LVL429:
 5504                             		.balign 8,3,1
 5505                             	.L383:
 5506                             	.LBB1978:
 5507                             	.LBB1949:
 5508                             	.LBB1947:
 118:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	  {
 5509                             		.loc 11 118 0
 5510 130e AB 0C                   		mov.L	52[r0], r4
 5511 1310 A9 C7                   		mov.L	24[r4], r7
 5512 1312 06 85 47 07             		cmp	28[r4].L, r7
 5513 1316 21 A6                   		bne	.L412
 5514                             	.LVL430:
 5515                             	.LBB1930:
 5516                             	.LBB1931:
 5517                             	.LBB1932:
 5518                             	.LBB1933:
 5519                             		.loc 7 1934 0
 5520 1318 FB 62 00 00 00 00       		mov.L	#__ZZN10WallSensor11getInstanceEvE8instance, r6
 5521 131e AA 6F                   		mov.L	36[r6], r7
 5522 1320 ED 6A 04                		mov.L	16[r6], r10
 5523 1323 FF 0A A7                		sub	r10, r7, r10
 5524 1326 6A 2A                   		shar	#2, r10
 5525 1328 3A 01 02                		beq	.L413
 5526 132b A4 07                   		mov.L	r7, 64[r0]
 5527 132d FC 13 00                		.balign 8,3,4
 5528                             	.L256:
 5529                             	.LVL431:
 5530                             	.LBE1933:
 5531                             	.LBE1932:
 5532                             	.LBB1935:
 5533                             	.LBB1936:
 5534                             	.LBB1937:
 104:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\ext\new_allocator.h ****       }
 5535                             		.loc 8 104 0
 5536 1330 3E 01 04                		mov.L	#4, 4[r0]
 5537 1333 FB 1A 00 02             		mov.L	#0x200, r1
 5538 1337 05 00 00 00             		bsr	__Znwm
 5539                             	.LVL432:
 5540                             	.LBE1937:
 5541                             	.LBE1936:
 5542                             	.LBE1935:
 481:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	__try
 5543                             		.loc 11 481 0
 5544 133b AC 07                   		mov.L	64[r0], r7
 5545 133d 60 47                   		sub	#4, r7
 5546 133f E3 71                   		mov.L	r1, [r7]
 484:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 					       - 1);
 5547                             		.loc 11 484 0
 5548 1341 ED 08 0D                		mov.L	52[r0], r8
 5549 1344 ED 87 09                		mov.L	36[r8], r7
 5550                             	.LVL433:
 5551 1347 60 47                   		sub	#4, r7
 5552                             	.LVL434:
 5553                             	.LBB1938:
 5554                             	.LBB1939:
 236:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	_M_first = *__new_node;
 5555                             		.loc 7 236 0
 5556 1349 E7 87 09                		mov.L	r7, 36[r8]
 237:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	_M_last = _M_first + difference_type(_S_buffer_size());
 5557                             		.loc 7 237 0
 5558 134c EC 77                   		mov.L	[r7], r7
 5559                             	.LVL435:
 238:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       }
 5560                             		.loc 7 238 0
 5561 134e 72 7B 00 02             		add	#0x200, r7, r11
 5562                             	.LBE1939:
 5563                             	.LBE1938:
 486:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** #if __cplusplus >= 201103L
 5564                             		.loc 11 486 0
 5565 1352 72 7A FE 01             		add	#0x1fe, r7, r10
 5566                             	.LBB1941:
 5567                             	.LBB1940:
 237:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	_M_last = _M_first + difference_type(_S_buffer_size());
 5568                             		.loc 7 237 0
 5569 1356 E7 87 07                		mov.L	r7, 28[r8]
 238:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       }
 5570                             		.loc 7 238 0
 5571 1359 E7 8B 08                		mov.L	r11, 32[r8]
 5572                             	.LBE1940:
 5573                             	.LBE1941:
 486:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** #if __cplusplus >= 201103L
 5574                             		.loc 11 486 0
 5575 135c E7 8A 06                		mov.L	r10, 24[r8]
 5576                             	.LVL436:
 5577                             	.LBB1942:
 5578                             	.LBB1943:
 5579                             		.loc 8 120 0
 5580 135f 3A 67 FF                		beq	.L255
 5581 1362 F9 75 FF 00             		mov.W	#0, 510[r7]
 5582                             	.LVL437:
 5583                             	.LBE1943:
 5584                             	.LBE1942:
 5585                             	.LBE1931:
 5586                             	.LBE1930:
 5587                             	.LBE1947:
 5588                             	.LBE1949:
 5589                             	.LBE1978:
 5590                             	.LBB1979:
 5591                             	.LBB1975:
 5592                             	.LBB1973:
 118:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	  {
 5593                             		.loc 11 118 0
 5594 1366 ED 09 0D                		mov.L	52[r0], r9
 5595 1369 ED 97 1A                		mov.L	104[r9], r7
 5596 136c 06 85 97 1B             		cmp	108[r9].L, r7
 5597 1370 3B 63 FF                		bne	.L414
 5598                             	.LVL438:
 5599 1373 77 10 01 00 00          		.balign 8,3,5
 5600                             	.L257:
 5601                             	.LBB1956:
 5602                             	.LBB1957:
 5603                             	.LBB1958:
 5604                             	.LBB1959:
 5605                             		.loc 7 1934 0
 5606 1378 FB B2 00 00 00 00       		mov.L	#__ZZN10WallSensor11getInstanceEvE8instance, r11
 5607 137e ED B7 1D                		mov.L	116[r11], r7
 5608 1381 ED BA 18                		mov.L	96[r11], r10
 5609 1384 FF 0A A7                		sub	r10, r7, r10
 5610 1387 6A 2A                   		shar	#2, r10
 5611 1389 3A E4 01                		beq	.L415
 5612 138c A4 07                   		mov.L	r7, 64[r0]
 5613 138e EF 00                   		.balign 8,3,4
 5614                             	.L260:
 5615                             	.LVL439:
 5616                             	.LBE1959:
 5617                             	.LBE1958:
 5618                             	.LBB1961:
 5619                             	.LBB1962:
 5620                             	.LBB1963:
 104:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\ext\new_allocator.h ****       }
 5621                             		.loc 8 104 0
 5622 1390 3E 01 04                		mov.L	#4, 4[r0]
 5623 1393 FB 1A 00 02             		mov.L	#0x200, r1
 5624 1397 05 00 00 00             		bsr	__Znwm
 5625                             	.LVL440:
 5626                             	.LBE1963:
 5627                             	.LBE1962:
 5628                             	.LBE1961:
 481:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	__try
 5629                             		.loc 11 481 0
 5630 139b AC 07                   		mov.L	64[r0], r7
 5631 139d 60 47                   		sub	#4, r7
 5632 139f E3 71                   		mov.L	r1, [r7]
 484:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 					       - 1);
 5633                             		.loc 11 484 0
 5634 13a1 ED 0D 0D                		mov.L	52[r0], r13
 5635 13a4 ED D7 1D                		mov.L	116[r13], r7
 5636                             	.LVL441:
 5637 13a7 60 47                   		sub	#4, r7
 5638                             	.LVL442:
 5639                             	.LBB1964:
 5640                             	.LBB1965:
 236:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	_M_first = *__new_node;
 5641                             		.loc 7 236 0
 5642 13a9 E7 D7 1D                		mov.L	r7, 116[r13]
 237:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	_M_last = _M_first + difference_type(_S_buffer_size());
 5643                             		.loc 7 237 0
 5644 13ac EC 77                   		mov.L	[r7], r7
 5645                             	.LVL443:
 238:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       }
 5646                             		.loc 7 238 0
 5647 13ae 72 7B 00 02             		add	#0x200, r7, r11
 5648                             	.LBE1965:
 5649                             	.LBE1964:
 486:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** #if __cplusplus >= 201103L
 5650                             		.loc 11 486 0
 5651 13b2 72 7A FE 01             		add	#0x1fe, r7, r10
 5652                             	.LBB1967:
 5653                             	.LBB1966:
 237:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	_M_last = _M_first + difference_type(_S_buffer_size());
 5654                             		.loc 7 237 0
 5655 13b6 E7 D7 1B                		mov.L	r7, 108[r13]
 238:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       }
 5656                             		.loc 7 238 0
 5657 13b9 E7 DB 1C                		mov.L	r11, 112[r13]
 5658                             	.LBE1966:
 5659                             	.LBE1967:
 486:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** #if __cplusplus >= 201103L
 5660                             		.loc 11 486 0
 5661 13bc E7 DA 1A                		mov.L	r10, 104[r13]
 5662                             	.LVL444:
 5663                             	.LBB1968:
 5664                             	.LBB1969:
 5665                             		.loc 8 120 0
 5666 13bf 3A 21 FF                		beq	.L259
 5667 13c2 F9 75 FF 00             		mov.W	#0, 510[r7]
 5668                             	.LVL445:
 5669                             	.LBE1969:
 5670                             	.LBE1968:
 5671                             	.LBE1957:
 5672                             	.LBE1956:
 5673                             	.LBE1973:
 5674                             	.LBE1975:
 5675                             	.LBE1979:
 5676                             	.LBB1980:
 5677                             	.LBB1923:
 5678                             	.LBB1920:
 118:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	  {
 5679                             		.loc 11 118 0
 5680 13c6 ED 0E 0D                		mov.L	52[r0], r14
 5681 13c9 ED E7 10                		mov.L	64[r14], r7
 5682 13cc 06 85 E7 11             		cmp	68[r14].L, r7
 5683 13d0 3B 1D FF                		bne	.L416
 5684                             	.LVL446:
 5685 13d3 77 10 01 00 00          		.balign 8,3,5
 5686                             	.L261:
 5687                             	.LBB1917:
 5688                             	.LBB1913:
 5689                             	.LBB1902:
 5690                             	.LBB1900:
 5691                             		.loc 7 1934 0
 5692 13d8 FB 12 00 00 00 00       		mov.L	#__ZZN10WallSensor11getInstanceEvE8instance, r1
 5693 13de AC 9F                   		mov.L	76[r1], r7
 5694 13e0 ED 1A 0E                		mov.L	56[r1], r10
 5695 13e3 FF 0A A7                		sub	r10, r7, r10
 5696 13e6 6A 2A                   		shar	#2, r10
 5697 13e8 3A 6B 01                		beq	.L417
 5698 13eb A4 07                   		mov.L	r7, 64[r0]
 5699 13ed FC 13 00                		.balign 8,3,4
 5700                             	.L264:
 5701                             	.LVL447:
 5702                             	.LBE1900:
 5703                             	.LBE1902:
 5704                             	.LBB1903:
 5705                             	.LBB1904:
 5706                             	.LBB1905:
 104:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\ext\new_allocator.h ****       }
 5707                             		.loc 8 104 0
 5708 13f0 3E 01 04                		mov.L	#4, 4[r0]
 5709 13f3 FB 1A 00 02             		mov.L	#0x200, r1
 5710 13f7 05 00 00 00             		bsr	__Znwm
 5711                             	.LVL448:
 5712                             	.LBE1905:
 5713                             	.LBE1904:
 5714                             	.LBE1903:
 481:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	__try
 5715                             		.loc 11 481 0
 5716 13fb AC 07                   		mov.L	64[r0], r7
 5717 13fd 60 47                   		sub	#4, r7
 5718 13ff E3 71                   		mov.L	r1, [r7]
 484:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 					       - 1);
 5719                             		.loc 11 484 0
 5720 1401 AB 0B                   		mov.L	52[r0], r3
 5721 1403 AC BF                   		mov.L	76[r3], r7
 5722                             	.LVL449:
 5723 1405 60 47                   		sub	#4, r7
 5724                             	.LVL450:
 5725                             	.LBB1906:
 5726                             	.LBB1907:
 236:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	_M_first = *__new_node;
 5727                             		.loc 7 236 0
 5728 1407 A4 BF                   		mov.L	r7, 76[r3]
 237:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	_M_last = _M_first + difference_type(_S_buffer_size());
 5729                             		.loc 7 237 0
 5730 1409 EC 77                   		mov.L	[r7], r7
 5731                             	.LVL451:
 238:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       }
 5732                             		.loc 7 238 0
 5733 140b 72 7B 00 02             		add	#0x200, r7, r11
 5734                             	.LBE1907:
 5735                             	.LBE1906:
 486:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** #if __cplusplus >= 201103L
 5736                             		.loc 11 486 0
 5737 140f 72 7A FE 01             		add	#0x1fe, r7, r10
 5738                             	.LBB1909:
 5739                             	.LBB1908:
 237:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	_M_last = _M_first + difference_type(_S_buffer_size());
 5740                             		.loc 7 237 0
 5741 1413 A4 3F                   		mov.L	r7, 68[r3]
 238:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       }
 5742                             		.loc 7 238 0
 5743 1415 E7 3B 12                		mov.L	r11, 72[r3]
 5744                             	.LBE1908:
 5745                             	.LBE1909:
 486:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** #if __cplusplus >= 201103L
 5746                             		.loc 11 486 0
 5747 1418 E7 3A 10                		mov.L	r10, 64[r3]
 5748                             	.LVL452:
 5749                             	.LBB1910:
 5750                             	.LBB1911:
 5751                             		.loc 8 120 0
 5752 141b 3A DE FE                		beq	.L263
 5753 141e F9 75 FF 00             		mov.W	#0, 510[r7]
 5754                             	.LBE1911:
 5755                             	.LBE1910:
 5756                             	.LBE1913:
 5757                             	.LBE1917:
 5758                             	.LBE1920:
 5759                             	.LBE1923:
 5760                             	.LBE1980:
  27:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\wallsensor.hpp ****             ahead.push_front(0);
 5761                             		.loc 9 27 0
 5762 1422 CD 07 38                		mov.B	56[r0], r7
 5763 1425 62 17                   		add	#1, r7
 5764 1427 AB 0C                   		mov.L	52[r0], r4
 5765 1429 58 4A                   		movu.B	[r4], r10
 5766                             	.LVL453:
 5767 142b 5B 7B                   		movu.B	r7, r11
 5768 142d C7 07 38                		mov.B	r7, 56[r0]
 5769                             	.LVL454:
 5770 1430 47 AB                   		cmp	r10, r11
 5771 1432 22 05 38 DA FE          		bltu	.L383
 5772                             	.LVL455:
 5773 1437 03                      		.balign 8,3,5
 5774                             	.L248:
 5775                             	.LBE1985:
 5776                             	.LBE2119:
 5777                             	.LBE2133:
 5778                             	.LBE2139:
 5779                             		.loc 9 133 0
 5780 1438 FB 12 00 00 00 00       		mov.L	#__ZGVZN10WallSensor11getInstanceEvE8instance, r1
 5781 143e 05 00 00 00             		bsr	___cxa_guard_release
 5782                             	.LVL456:
 5783 1442 FB 12 00 00 00 00       		mov.L	#__ZN10WallSensorD1Ev, r1
 5784 1448 FB 22 00 00 00 00       		mov.L	#__ZZN10WallSensor11getInstanceEvE8instance, r2
 5785 144e FB 32 00 00 00 00       		mov.L	#___dso_handle, r3
 5786 1454 05 00 00 00             		bsr	___cxa_atexit
 5787                             	.LVL457:
 5788                             	.LBE2145:
 5789                             	.LBE2578:
 5790                             	.LBB2579:
 5791                             	.LBB2151:
 123:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\mouse.h ****         return instance;
 5792                             		.loc 3 123 0
 5793 1458 FB 62 00 00 00 00       		mov.L	#__ZGVZN6UMouse11getInstanceEvE8instance, r6
 5794 145e 58 67                   		movu.B	[r6], r7
 5795 1460 61 07                   		cmp	#0, r7
 5796 1462 3B B3 F3                		bne	.L268
 5797                             	.LVL458:
 5798 1465 FC 13 00                		.balign 8,3,5
 5799                             	.L402:
 5800 1468 FB 12 00 00 00 00       		mov.L	#__ZGVZN6UMouse11getInstanceEvE8instance, r1
 5801 146e 05 00 00 00             		bsr	___cxa_guard_acquire
 5802                             	.LVL459:
 5803 1472 61 01                   		cmp	#0, r1
 5804 1474 3A A1 F3                		beq	.L268
 5805                             	.LVL460:
 5806                             	.LBE2151:
 5807                             	.LBB2152:
 5808                             	.LBB2153:
 5809 1477 FB 12 00 00 00 00       		mov.L	#__ZGVZN6UMouse11getInstanceEvE8instance, r1
 5810 147d 05 00 00 00             		bsr	___cxa_guard_release
 5811                             	.LVL461:
 5812 1481 FB 12 00 00 00 00       		mov.L	#__ZN6UMouseD1Ev, r1
 5813 1487 FB 22 00 00 00 00       		mov.L	#__ZZN6UMouse11getInstanceEvE8instance, r2
 5814 148d FB 32 00 00 00 00       		mov.L	#___dso_handle, r3
 5815 1493 05 00 00 00             		bsr	___cxa_atexit
 5816                             	.LVL462:
 5817 1497 38 7E F3                		bra	.L268
 5818                             	.LVL463:
 5819                             	.L317:
 5820                             	.LBE2153:
 5821                             	.LBE2152:
 5822                             	.LBE2579:
 685:../src/peripheral/uart.cpp **** 
 5823                             		.loc 10 685 0
 5824 149a 75 42 F3                		mov.L	#0xf3, r2
 5825                             	.LBB2580:
 689:../src/peripheral/uart.cpp ****         sum += buf[i];
 5826                             		.loc 10 689 0
 5827 149d 66 73                   		mov.L	#7, r3
 5828                             	.LBE2580:
 688:../src/peripheral/uart.cpp ****     for (int i = 7; i < PERIODIC_MSG_LEN; i++)
 5829                             		.loc 10 688 0
 5830 149f AB 0D                   		mov.L	52[r0], r5
 5831 14a1 CF 54                   		mov.B	r5, r4
 5832 14a3 38 87 FA                		bra	.L296
 5833                             	.LVL464:
 5834                             	.L288:
 669:../src/peripheral/uart.cpp **** 
 5835                             		.loc 10 669 0
 5836 14a6 FB 92 00 00 00 00       		mov.L	#__ZZ8packDataPhE5count, r9
 5837 14ac F8 94 00                		mov.B	#0, [r9]
 5838 14af 38 E1 F9                		bra	.L289
 5839                             	.LVL465:
 5840                             	.L403:
 5841                             	.LBB2581:
 5842                             	.LBB2194:
 5843                             	.LBB2193:
 5844                             	.LBB2192:
 5845                             	.LBB2191:
 5846                             	.LBB2190:
 5847                             	.LBB2189:
 5848                             	.LBB2188:
 5849                             	.LBB2187:
 198:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	    _M_set_node(_M_node + __node_offset);
 5850                             		.loc 7 198 0
 5851 14b2 FD 88 AC                		shlr	#8, r10, r12
 5852 14b5 74 3C 00 00 00 FF       		or	#0xff000000, r12
 5853 14bb 38 21 F6                		bra	.L273
 5854                             	.LVL466:
 5855                             	.L404:
 5856                             	.LBE2187:
 5857                             	.LBE2188:
 5858                             	.LBE2189:
 5859                             	.LBE2190:
 5860                             	.LBE2191:
 5861                             	.LBE2192:
 5862                             	.LBE2193:
 5863                             	.LBE2194:
 5864                             	.LBE2581:
 5865                             	.LBB2582:
 5866                             	.LBB2217:
 5867                             	.LBB2216:
 5868                             	.LBB2215:
 5869                             	.LBB2214:
 5870                             	.LBB2213:
 5871                             	.LBB2212:
 5872                             	.LBB2211:
 5873                             	.LBB2210:
 5874 14be FD 88 AC                		shlr	#8, r10, r12
 5875 14c1 74 3C 00 00 00 FF       		or	#0xff000000, r12
 5876 14c7 38 71 F6                		bra	.L277
 5877                             	.LVL467:
 5878                             	.L409:
 5879                             	.LBE2210:
 5880                             	.LBE2211:
 5881                             	.LBE2212:
 5882                             	.LBE2213:
 5883                             	.LBE2214:
 5884                             	.LBE2215:
 5885                             	.LBE2216:
 5886                             	.LBE2217:
 5887                             	.LBE2582:
 5888                             	.LBB2583:
 5889                             	.LBB2317:
 5890                             	.LBB2313:
 5891                             	.LBB2309:
 5892                             	.LBB2305:
 5893                             	.LBB2301:
 5894                             	.LBB2297:
 5895                             	.LBB2293:
 5896                             	.LBB2289:
 5897 14ca FD 88 AC                		shlr	#8, r10, r12
 5898 14cd 74 3C 00 00 00 FF       		or	#0xff000000, r12
 5899                             	.LVL468:
 200:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 				 * difference_type(_S_buffer_size()));
 5900                             		.loc 7 200 0
 5901 14d3 FD C8 C7                		shll	#8, r12, r7
 5902                             	.LBE2289:
 5903                             	.LBE2293:
 5904                             	.LBE2297:
 5905                             	.LBE2301:
 5906                             	.LBE2305:
 5907                             	.LBE2309:
 5908                             	.LBE2313:
 5909                             	.LBE2317:
 5910                             	.LBE2583:
 570:../src/peripheral/uart.cpp ****     buf[99] = ((0x000000ff & (wallSen.left.at(0))));
 5911                             		.loc 10 570 0
 5912 14d6 FE 6C BC                		mov.L	[r12,r11], r12
 5913                             	.LVL469:
 5914                             	.LBB2584:
 5915                             	.LBB2318:
 5916                             	.LBB2314:
 5917                             	.LBB2310:
 5918                             	.LBB2306:
 5919                             	.LBB2302:
 5920                             	.LBB2298:
 5921                             	.LBB2294:
 5922                             	.LBB2290:
 200:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 				 * difference_type(_S_buffer_size()));
 5923                             		.loc 7 200 0
 5924 14d9 FF 07 7A                		sub	r7, r10, r7
 5925                             	.LBE2290:
 5926                             	.LBE2294:
 5927                             	.LBE2298:
 5928                             	.LBE2302:
 5929                             	.LBE2306:
 5930                             	.LBE2310:
 5931                             	.LBE2314:
 5932                             	.LBE2318:
 5933                             	.LBE2584:
 570:../src/peripheral/uart.cpp ****     buf[99] = ((0x000000ff & (wallSen.left.at(0))));
 5934                             		.loc 10 570 0
 5935 14dc 4B 77                   		add	r7, r7
 5936 14de 4B C7                   		add	r12, r7
 5937 14e0 AB 89                   		mov.L	60[r0], r1
 5938 14e2 C5 71 01 62             		mov.B	1[r7], 98[r1]
 5939                             	.LVL470:
 5940                             	.LBB2585:
 5941                             	.LBB2557:
 5942                             	.LBB2556:
 5943                             	.LBB2555:
 5944                             	.LBB2554:
 5945                             	.LBB2553:
 5946                             	.LBB2552:
 5947                             	.LBB2551:
 198:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	    _M_set_node(_M_node + __node_offset);
 5948                             		.loc 7 198 0
 5949 14e6 61 0A                   		cmp	#0, r10
 5950 14e8 2B 05 38 19 FB          		bgt	.L418
 5951                             	.LVL471:
 5952                             		.balign 8,3,2
 5953                             	.L286:
 5954 14ed FD 88 AC                		shlr	#8, r10, r12
 5955 14f0 74 3C 00 00 00 FF       		or	#0xff000000, r12
 5956 14f6 38 12 FB                		bra	.L287
 5957                             	.LVL472:
 5958                             	.L410:
 5959                             	.LBE2551:
 5960                             	.LBE2552:
 5961                             	.LBE2553:
 5962                             	.LBE2554:
 5963                             	.LBE2555:
 5964                             	.LBE2556:
 5965                             	.LBE2557:
 5966                             	.LBE2585:
 5967                             	.LBB2586:
 5968                             	.LBB2266:
 5969                             	.LBB2262:
 5970                             	.LBB2258:
 5971                             	.LBB2254:
 5972                             	.LBB2250:
 5973                             	.LBB2246:
 5974                             	.LBB2242:
 5975                             	.LBB2238:
 5976 14f9 FD 88 7C                		shlr	#8, r7, r12
 5977 14fc 74 3C 00 00 00 FF       		or	#0xff000000, r12
 5978                             	.LVL473:
 200:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 				 * difference_type(_S_buffer_size()));
 5979                             		.loc 7 200 0
 5980 1502 FD C8 CA                		shll	#8, r12, r10
 5981                             	.LBE2238:
 5982                             	.LBE2242:
 5983                             	.LBE2246:
 5984                             	.LBE2250:
 5985                             	.LBE2254:
 5986                             	.LBE2258:
 5987                             	.LBE2262:
 5988                             	.LBE2266:
 5989                             	.LBE2586:
 567:../src/peripheral/uart.cpp ****     buf[97] = ((0x000000ff & (wallSen.ahead.at(0))));
 5990                             		.loc 10 567 0
 5991 1505 FE 6C BC                		mov.L	[r12,r11], r12
 5992                             	.LVL474:
 5993                             	.LBB2587:
 5994                             	.LBB2267:
 5995                             	.LBB2263:
 5996                             	.LBB2259:
 5997                             	.LBB2255:
 5998                             	.LBB2251:
 5999                             	.LBB2247:
 6000                             	.LBB2243:
 6001                             	.LBB2239:
 200:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 				 * difference_type(_S_buffer_size()));
 6002                             		.loc 7 200 0
 6003 1508 FF 0A A7                		sub	r10, r7, r10
 6004                             	.LBE2239:
 6005                             	.LBE2243:
 6006                             	.LBE2247:
 6007                             	.LBE2251:
 6008                             	.LBE2255:
 6009                             	.LBE2259:
 6010                             	.LBE2263:
 6011                             	.LBE2267:
 6012                             	.LBE2587:
 567:../src/peripheral/uart.cpp ****     buf[97] = ((0x000000ff & (wallSen.ahead.at(0))));
 6013                             		.loc 10 567 0
 6014 150b 4B AA                   		add	r10, r10
 6015 150d 4B CA                   		add	r12, r10
 6016 150f ED 09 0F                		mov.L	60[r0], r9
 6017 1512 C5 A9 01 60             		mov.B	1[r10], 96[r9]
 6018                             	.LVL475:
 6019                             	.LBB2588:
 6020                             	.LBB2574:
 6021                             	.LBB2573:
 6022                             	.LBB2572:
 6023                             	.LBB2571:
 6024                             	.LBB2570:
 6025                             	.LBB2569:
 6026                             	.LBB2568:
 198:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	    _M_set_node(_M_node + __node_offset);
 6027                             		.loc 7 198 0
 6028 1516 61 07                   		cmp	#0, r7
 6029 1518 2B 05 38 23 FB          		bgt	.L419
 6030                             	.LVL476:
 6031                             		.balign 8,3,2
 6032                             	.L281:
 6033 151d FD 88 7C                		shlr	#8, r7, r12
 6034 1520 74 3C 00 00 00 FF       		or	#0xff000000, r12
 6035 1526 38 1A FB                		bra	.L282
 6036                             	.LVL477:
 6037                             	.L413:
 6038                             	.LBE2568:
 6039                             	.LBE2569:
 6040                             	.LBE2570:
 6041                             	.LBE2571:
 6042                             	.LBE2572:
 6043                             	.LBE2573:
 6044                             	.LBE2574:
 6045                             	.LBE2588:
 6046                             	.LBB2589:
 6047                             	.LBB2146:
 6048                             	.LBB2140:
 6049                             	.LBB2134:
 6050                             	.LBB2120:
 6051                             	.LBB1986:
 6052                             	.LBB1981:
 6053                             	.LBB1950:
 6054                             	.LBB1948:
 6055                             	.LBB1946:
 6056                             	.LBB1945:
 6057                             	.LBB1944:
 6058                             	.LBB1934:
1935:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 				       - this->_M_impl._M_map))
1936:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	  _M_reallocate_map(__nodes_to_add, true);
 6059                             		.loc 7 1936 0
 6060 1529 66 12                   		mov.L	#1, r2
 6061 152b 3E 01 04                		mov.L	#4, 4[r0]
 6062 152e FB 12 00 00 00 00       		mov.L	#__ZZN10WallSensor11getInstanceEvE8instance+16, r1
 6063                             	.LVL478:
 6064 1534 CF 23                   		mov.B	r2, r3
 6065 1536 05 00 00 00             		bsr	__ZNSt5dequeIsSaIsEE17_M_reallocate_mapEmb
 6066                             	.LVL479:
 6067 153a AB 0F                   		mov.L	52[r0], r7
 6068 153c E5 70 09 10             		mov.L	36[r7], 64[r0]
 6069 1540 38 F0 FD                		bra	.L256
 6070                             	.LVL480:
 6071                             	.L318:
 6072                             	.LBE1934:
 6073                             	.LBE1944:
 6074                             	.LBE1945:
 6075                             	.LBE1946:
 6076                             	.LBE1948:
 6077                             	.LBE1950:
 6078                             	.LBE1981:
 6079                             	.LBE1986:
 6080                             	.LBE2120:
 6081                             	.LBE2134:
 6082                             	.LBE2140:
 6083                             	.LBE2146:
 6084                             	.LBE2589:
 6085                             	.LBB2590:
 690:../src/peripheral/uart.cpp ****     buf[6] = sum;
 6086                             		.loc 10 690 0
 6087 1543 75 42 F2                		mov.L	#0xf2, r2
 689:../src/peripheral/uart.cpp ****         sum += buf[i];
 6088                             		.loc 10 689 0
 6089 1546 66 83                   		mov.L	#8, r3
 6090 1548 38 E2 F9                		bra	.L296
 6091                             	.LVL481:
 6092                             	.L319:
 690:../src/peripheral/uart.cpp ****     buf[6] = sum;
 6093                             		.loc 10 690 0
 6094 154b 75 42 F1                		mov.L	#0xf1, r2
 689:../src/peripheral/uart.cpp ****         sum += buf[i];
 6095                             		.loc 10 689 0
 6096 154e 66 93                   		mov.L	#9, r3
 6097 1550 38 DA F9                		bra	.L296
 6098                             	.LVL482:
 6099                             	.L417:
 6100                             	.LBE2590:
 6101                             	.LBB2591:
 6102                             	.LBB2147:
 6103                             	.LBB2141:
 6104                             	.LBB2135:
 6105                             	.LBB2121:
 6106                             	.LBB1987:
 6107                             	.LBB1982:
 6108                             	.LBB1924:
 6109                             	.LBB1921:
 6110                             	.LBB1918:
 6111                             	.LBB1914:
 6112                             	.LBB1912:
 6113                             	.LBB1901:
 6114                             		.loc 7 1936 0
 6115 1553 66 12                   		mov.L	#1, r2
 6116 1555 3E 01 04                		mov.L	#4, 4[r0]
 6117 1558 FB 12 00 00 00 00       		mov.L	#__ZZN10WallSensor11getInstanceEvE8instance+56, r1
 6118                             	.LVL483:
 6119 155e CF 23                   		mov.B	r2, r3
 6120 1560 05 00 00 00             		bsr	__ZNSt5dequeIsSaIsEE17_M_reallocate_mapEmb
 6121                             	.LVL484:
 6122 1564 AB 0A                   		mov.L	52[r0], r2
 6123 1566 E5 20 13 10             		mov.L	76[r2], 64[r0]
 6124 156a 38 86 FE                		bra	.L264
 6125                             	.LVL485:
 6126                             	.L415:
 6127                             	.LBE1901:
 6128                             	.LBE1912:
 6129                             	.LBE1914:
 6130                             	.LBE1918:
 6131                             	.LBE1921:
 6132                             	.LBE1924:
 6133                             	.LBE1982:
 6134                             	.LBB1983:
 6135                             	.LBB1976:
 6136                             	.LBB1974:
 6137                             	.LBB1972:
 6138                             	.LBB1971:
 6139                             	.LBB1970:
 6140                             	.LBB1960:
 6141 156d 66 12                   		mov.L	#1, r2
 6142 156f 3E 01 04                		mov.L	#4, 4[r0]
 6143 1572 FB 12 00 00 00 00       		mov.L	#__ZZN10WallSensor11getInstanceEvE8instance+96, r1
 6144                             	.LVL486:
 6145 1578 CF 23                   		mov.B	r2, r3
 6146 157a 05 00 00 00             		bsr	__ZNSt5dequeIsSaIsEE17_M_reallocate_mapEmb
 6147                             	.LVL487:
 6148 157e ED 0C 0D                		mov.L	52[r0], r12
 6149 1581 E5 C0 1D 10             		mov.L	116[r12], 64[r0]
 6150 1585 38 0B FE                		bra	.L260
 6151                             	.LVL488:
 6152                             	.L320:
 6153 1588 A8 0F                   		mov.L	4[r0], r7
 6154 158a E5 00 02 0F             		mov.L	8[r0], 60[r0]
 6155 158e 61 C7                   		cmp	#12, r7
 6156 1590 25 05 38 06 01          		bgtu	.L334
 6157 1595 6C 27                   		shll	#2, r7
 6158 1597 70 77 00 00 00 00       		add	#.L335, r7
 6159 159d EC 77                   		mov.L	[r7], r7
 6160                             		
 6161 159f 7F 07                   	1:jmp	r7
 6162                             		.section C,"a",@progbits
 6163                             		.p2align 2
 6164                             		.balign 4
 6165                             		.balign 4
 6166                             	.L335:
 6167 0000 B8 15 00 00             		.long .L241
 6168 0004 E2 15 00 00             		.long .L246
 6169 0008 D8 15 00 00             		.long .L252
 6170 000c CC 15 00 00             		.long .L324
 6171 0010 AF 15 00 00             		.long .L325
 6172 0014 EE 15 00 00             		.long .L326
 6173 0018 FB 15 00 00             		.long .L327
 6174 001c 21 16 00 00             		.long .L328
 6175 0020 2A 16 00 00             		.long .L329
 6176 0024 37 16 00 00             		.long .L330
 6177 0028 5D 16 00 00             		.long .L331
 6178 002c 67 16 00 00             		.long .L332
 6179 0030 74 16 00 00             		.long .L333
 6180                             		.section P,"ax"
 6181                             	.LVL489:
 6182                             	.L274:
 6183                             	.LBE1960:
 6184                             	.LBE1970:
 6185                             	.LBE1971:
 6186                             	.LBE1972:
 6187                             	.LBE1974:
 6188                             	.LBE1976:
 6189                             	.LBE1983:
 6190                             	.LBE1987:
 6191                             	.LBE2121:
 6192                             	.LBE2135:
 6193                             	.LBE2141:
 6194                             	.LBE2147:
 6195                             	.LBE2591:
 6196                             	.LBB2592:
 6197                             	.LBB2195:
 6198                             	.LBB2178:
1268:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       }
 6199                             		.loc 7 1268 0
 6200 15a1 F9 06 01 FF             		mov.L	#-1, 4[r0]
 6201 15a5 FB 12 00 00 00 00       		mov.L	#.LC0, r1
 6202 15ab 05 00 00 00             		bsr	__ZSt20__throw_out_of_rangePKc
 6203                             	.LVL490:
 6204                             	.L325:
 6205                             	.LBE2178:
 6206                             	.LBE2195:
 6207                             	.LBE2592:
 6208                             	.LBB2593:
 6209                             	.LBB2148:
 6210                             	.LBB2142:
 6211                             	.LBB2136:
 6212                             	.LBB2122:
 6213                             	.LBB2030:
 6214                             	.LBB2028:
 6215                             	.LBB2026:
 602:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	{
 6216                             		.loc 7 602 0
 6217 15af 3E 01 00                		mov.L	#0, 4[r0]
 6218 15b2 05 00 00 00             		bsr	___cxa_end_catch
 6219                             	.LVL491:
 6220 15b6 EF 00                   		.balign 8,3,5
 6221                             	.L241:
 6222                             	.LBE2026:
 6223                             	.LBE2028:
 6224                             	.LBE2030:
 6225                             	.LBE2122:
 6226                             	.LBE2136:
 6227                             	.LBE2142:
 6228                             		.loc 9 133 0
 6229 15b8 FB 12 00 00 00 00       		mov.L	#__ZGVZN10WallSensor11getInstanceEvE8instance, r1
 6230 15be 05 00 00 00             		bsr	___cxa_guard_abort
 6231                             	.LVL492:
 6232 15c2 AB 89                   		mov.L	60[r0], r1
 6233 15c4 F9 06 01 FF             		mov.L	#-1, 4[r0]
 6234 15c8 05 00 00 00             		bsr	__Unwind_SjLj_Resume
 6235                             	.LVL493:
 6236                             	.L324:
 6237                             	.LBB2143:
 6238                             	.LBB2137:
 6239                             	.LBB2123:
 6240                             	.LBB2124:
 918:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
 6241                             		.loc 7 918 0
 6242 15cc FB 12 00 00 00 00       		mov.L	#__ZZN10WallSensor11getInstanceEvE8instance+96, r1
 6243                             	.LVL494:
 6244 15d2 05 00 00 00             		bsr	__ZNSt11_Deque_baseIsSaIsEED2Ev
 6245                             	.LVL495:
 6246 15d6 EF 00                   		.balign 8,3,5
 6247                             	.L252:
 6248                             	.LBE2124:
 6249                             	.LBE2123:
 6250                             	.LBB2125:
 6251                             	.LBB2126:
 6252 15d8 FB 12 00 00 00 00       		mov.L	#__ZZN10WallSensor11getInstanceEvE8instance+56, r1
 6253                             	.LVL496:
 6254 15de 05 00 00 00             		bsr	__ZNSt11_Deque_baseIsSaIsEED2Ev
 6255                             	.LVL497:
 6256                             		.balign 8,3,5
 6257                             	.L246:
 6258                             	.LBE2126:
 6259                             	.LBE2125:
 6260                             	.LBB2127:
 6261                             	.LBB2128:
 6262 15e2 FB 12 00 00 00 00       		mov.L	#__ZZN10WallSensor11getInstanceEvE8instance+16, r1
 6263                             	.LVL498:
 6264 15e8 05 00 00 00             		bsr	__ZNSt11_Deque_baseIsSaIsEED2Ev
 6265                             	.LVL499:
 6266 15ec 2E CC                   		bra	.L241
 6267                             	.LVL500:
 6268                             	.L326:
 6269                             	.LBE2128:
 6270                             	.LBE2127:
 6271                             	.LBB2129:
 6272                             	.LBB2031:
 6273                             	.LBB2029:
 6274                             	.LBB2027:
 6275                             	.LBB2022:
 6276                             	.LBB2010:
 629:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	{
 6277                             		.loc 7 629 0
 6278 15ee AB 89                   		mov.L	60[r0], r1
 6279 15f0 05 00 00 00             		bsr	___cxa_begin_catch
 6280                             	.LVL501:
 632:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	}
 6281                             		.loc 7 632 0
 6282 15f4 3E 01 07                		mov.L	#7, 4[r0]
 6283 15f7 05 00 00 00             		bsr	___cxa_rethrow
 6284                             	.LVL502:
 6285                             	.L327:
 629:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	{
 6286                             		.loc 7 629 0
 6287 15fb 3E 01 00                		mov.L	#0, 4[r0]
 6288 15fe 05 00 00 00             		bsr	___cxa_end_catch
 6289                             	.LVL503:
 6290                             	.LBE2010:
 6291                             	.LBE2022:
 602:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	{
 6292                             		.loc 7 602 0
 6293 1602 AB 89                   		mov.L	60[r0], r1
 6294 1604 05 00 00 00             		bsr	___cxa_begin_catch
 6295                             	.LVL504:
 6296                             	.LBB2023:
 6297                             	.LBB2024:
 6298                             	.LBB2025:
 110:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\ext\new_allocator.h **** 
 6299                             		.loc 8 110 0
 6300 1608 ED 0A 0D                		mov.L	52[r0], r10
 6301 160b ED A1 04                		mov.L	16[r10], r1
 6302 160e 05 00 00 00             		bsr	__ZdlPv
 6303                             	.LVL505:
 6304                             	.LBE2025:
 6305                             	.LBE2024:
 6306                             	.LBE2023:
 605:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	  this->_M_impl._M_map_size = 0;
 6307                             		.loc 7 605 0
 6308 1612 F9 A6 04 00             		mov.L	#0, 16[r10]
 606:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	  __throw_exception_again;
 6309                             		.loc 7 606 0
 6310 1616 F9 A6 05 00             		mov.L	#0, 20[r10]
 607:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	}
 6311                             		.loc 7 607 0
 6312 161a 3E 01 05                		mov.L	#5, 4[r0]
 6313 161d 05 00 00 00             		bsr	___cxa_rethrow
 6314                             	.LVL506:
 6315                             	.L328:
 6316                             	.LBE2027:
 6317                             	.LBE2029:
 6318                             	.LBE2031:
 6319                             	.LBE2129:
 6320                             	.LBB2130:
 6321                             	.LBB2072:
 6322                             	.LBB2071:
 6323                             	.LBB2070:
 602:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	{
 6324                             		.loc 7 602 0
 6325 1621 3E 01 00                		mov.L	#0, 4[r0]
 6326 1624 05 00 00 00             		bsr	___cxa_end_catch
 6327                             	.LVL507:
 6328 1628 2E BA                   		bra	.L246
 6329                             	.L329:
 6330                             	.LBB2066:
 6331                             	.LBB2054:
 629:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	{
 6332                             		.loc 7 629 0
 6333 162a AB 89                   		mov.L	60[r0], r1
 6334 162c 05 00 00 00             		bsr	___cxa_begin_catch
 6335                             	.LVL508:
 632:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	}
 6336                             		.loc 7 632 0
 6337 1630 3E 01 0A                		mov.L	#10, 4[r0]
 6338 1633 05 00 00 00             		bsr	___cxa_rethrow
 6339                             	.LVL509:
 6340                             	.L330:
 629:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	{
 6341                             		.loc 7 629 0
 6342 1637 3E 01 00                		mov.L	#0, 4[r0]
 6343 163a 05 00 00 00             		bsr	___cxa_end_catch
 6344                             	.LVL510:
 6345                             	.LBE2054:
 6346                             	.LBE2066:
 602:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	{
 6347                             		.loc 7 602 0
 6348 163e AB 89                   		mov.L	60[r0], r1
 6349 1640 05 00 00 00             		bsr	___cxa_begin_catch
 6350                             	.LVL511:
 6351                             	.LBB2067:
 6352                             	.LBB2068:
 6353                             	.LBB2069:
 110:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\ext\new_allocator.h **** 
 6354                             		.loc 8 110 0
 6355 1644 ED 0D 0D                		mov.L	52[r0], r13
 6356 1647 ED D1 0E                		mov.L	56[r13], r1
 6357 164a 05 00 00 00             		bsr	__ZdlPv
 6358                             	.LVL512:
 6359                             	.LBE2069:
 6360                             	.LBE2068:
 6361                             	.LBE2067:
 605:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	  this->_M_impl._M_map_size = 0;
 6362                             		.loc 7 605 0
 6363 164e F9 D6 0E 00             		mov.L	#0, 56[r13]
 606:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	  __throw_exception_again;
 6364                             		.loc 7 606 0
 6365 1652 F9 D6 0F 00             		mov.L	#0, 60[r13]
 607:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	}
 6366                             		.loc 7 607 0
 6367 1656 3E 01 08                		mov.L	#8, 4[r0]
 6368 1659 05 00 00 00             		bsr	___cxa_rethrow
 6369                             	.LVL513:
 6370                             	.L331:
 6371                             	.LBE2070:
 6372                             	.LBE2071:
 6373                             	.LBE2072:
 6374                             	.LBE2130:
 6375                             	.LBB2131:
 6376                             	.LBB2116:
 6377                             	.LBB2114:
 6378                             	.LBB2112:
 602:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	{
 6379                             		.loc 7 602 0
 6380 165d 3E 01 00                		mov.L	#0, 4[r0]
 6381 1660 05 00 00 00             		bsr	___cxa_end_catch
 6382                             	.LVL514:
 6383 1664 38 74 FF                		bra	.L252
 6384                             	.L332:
 6385                             	.LBB2107:
 6386                             	.LBB2095:
 629:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	{
 6387                             		.loc 7 629 0
 6388 1667 AB 89                   		mov.L	60[r0], r1
 6389 1669 05 00 00 00             		bsr	___cxa_begin_catch
 6390                             	.LVL515:
 632:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	}
 6391                             		.loc 7 632 0
 6392 166d 3E 01 0D                		mov.L	#13, 4[r0]
 6393 1670 05 00 00 00             		bsr	___cxa_rethrow
 6394                             	.LVL516:
 6395                             	.L333:
 629:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	{
 6396                             		.loc 7 629 0
 6397 1674 3E 01 00                		mov.L	#0, 4[r0]
 6398 1677 05 00 00 00             		bsr	___cxa_end_catch
 6399                             	.LVL517:
 6400                             	.LBE2095:
 6401                             	.LBE2107:
 602:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	{
 6402                             		.loc 7 602 0
 6403 167b AB 89                   		mov.L	60[r0], r1
 6404 167d 05 00 00 00             		bsr	___cxa_begin_catch
 6405                             	.LVL518:
 6406                             	.LBB2108:
 6407                             	.LBB2109:
 6408                             	.LBB2110:
 110:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\ext\new_allocator.h **** 
 6409                             		.loc 8 110 0
 6410 1681 AB 0A                   		mov.L	52[r0], r2
 6411 1683 AE 21                   		mov.L	96[r2], r1
 6412 1685 05 00 00 00             		bsr	__ZdlPv
 6413                             	.LVL519:
 6414                             	.LBE2110:
 6415                             	.LBE2109:
 6416                             	.LBE2108:
 605:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	  this->_M_impl._M_map_size = 0;
 6417                             		.loc 7 605 0
 6418 1689 AB 0B                   		mov.L	52[r0], r3
 6419 168b 3E B8 00                		mov.L	#0, 96[r3]
 606:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	  __throw_exception_again;
 6420                             		.loc 7 606 0
 6421 168e 3E B9 00                		mov.L	#0, 100[r3]
 607:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	}
 6422                             		.loc 7 607 0
 6423 1691 3E 01 0B                		mov.L	#11, 4[r0]
 6424 1694 05 00 00 00             		bsr	___cxa_rethrow
 6425                             	.LVL520:
 6426                             	.L334:
 6427 1698 05 00 00 00             		bsr	_abort
 6428                             	.LVL521:
 6429                             	.LBE2112:
 6430                             	.LBE2114:
 6431                             	.LBE2116:
 6432                             	.LBE2131:
 6433                             	.LBE2137:
 6434                             	.LBE2143:
 6435                             	.LBE2148:
 6436                             	.LBE2593:
 6437                             	.LBE2595:
 6438                             	.LFE1445:
 6439                             		.section	.gcc_except_table,"aw",@progbits
 6440                             		.balign 4
 6441                             	.LLSDA1445:
 6442 0000 FF                      		.byte	0xff
 6443 0001 00                      		.byte	0
 6444 0002 25                      		.uleb128 .LLSDATT1445-.LLSDATTD1445
 6445                             	.LLSDATTD1445:
 6446 0003 01                      		.byte	0x1
 6447 0004 1A                      		.uleb128 .LLSDACSE1445-.LLSDACSB1445
 6448                             	.LLSDACSB1445:
 6449 0005 00                      		.uleb128 0
 6450 0006 00                      		.uleb128 0
 6451 0007 01                      		.uleb128 0x1
 6452 0008 00                      		.uleb128 0
 6453 0009 02                      		.uleb128 0x2
 6454 000a 00                      		.uleb128 0
 6455 000b 03                      		.uleb128 0x3
 6456 000c 00                      		.uleb128 0
 6457 000d 04                      		.uleb128 0x4
 6458 000e 00                      		.uleb128 0
 6459 000f 05                      		.uleb128 0x5
 6460 0010 01                      		.uleb128 0x1
 6461 0011 06                      		.uleb128 0x6
 6462 0012 01                      		.uleb128 0x1
 6463 0013 07                      		.uleb128 0x7
 6464 0014 00                      		.uleb128 0
 6465 0015 08                      		.uleb128 0x8
 6466 0016 01                      		.uleb128 0x1
 6467 0017 09                      		.uleb128 0x9
 6468 0018 01                      		.uleb128 0x1
 6469 0019 0A                      		.uleb128 0xa
 6470 001a 00                      		.uleb128 0
 6471 001b 0B                      		.uleb128 0xb
 6472 001c 01                      		.uleb128 0x1
 6473 001d 0C                      		.uleb128 0xc
 6474 001e 01                      		.uleb128 0x1
 6475                             	.LLSDACSE1445:
 6476 001f 01                      		.byte	0x1
 6477 0020 00                      		.byte	0
 6478 0021 00 00 00                		.balign 4
 6479 0024 00 00 00 00             		.long	0
 6480                             	.LLSDATT1445:
 6481                             		.section P,"ax"
 6483                             		.section	.text._ZNSt5dequeIhSaIhEE17_M_reallocate_mapEmb,"axG",@progbits,_ZNSt5dequeIhSaIhEE17_M_r
 6484                             		.weak	__ZNSt5dequeIhSaIhEE17_M_reallocate_mapEmb
 6486                             	__ZNSt5dequeIhSaIhEE17_M_reallocate_mapEmb:
 6487                             	.LFB1689:
 873:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****     _M_reallocate_map(size_type __nodes_to_add, bool __add_at_front)
 6488                             		.loc 11 873 0
 6489                             	.LVL522:
 6490 0000 6E 6D                   		pushm	r6-r13
 6491                             	.LCFI18:
 873:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****     _M_reallocate_map(size_type __nodes_to_add, bool __add_at_front)
 6492                             		.loc 11 873 0
 6493 0002 EF 17                   		mov.L	r1, r7
 6494                             	.LBB2633:
 877:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****       const size_type __new_num_nodes = __old_num_nodes + __nodes_to_add;
 6495                             		.loc 11 877 0
 6496 0004 AA 19                   		mov.L	36[r1], r1
 6497                             	.LVL523:
 6498 0006 A9 7C                   		mov.L	20[r7], r4
 6499                             	.LBE2633:
 873:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****     _M_reallocate_map(size_type __nodes_to_add, bool __add_at_front)
 6500                             		.loc 11 873 0
 6501 0008 EF 2C                   		mov.L	r2, r12
 6502                             	.LBB2708:
 877:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****       const size_type __new_num_nodes = __old_num_nodes + __nodes_to_add;
 6503                             		.loc 11 877 0
 6504 000a FF 0D 41                		sub	r4, r1, r13
 6505 000d 6A 2D                   		shar	#2, r13
 6506 000f 62 1D                   		add	#1, r13
 6507                             	.LVL524:
 878:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 
 6508                             		.loc 11 878 0
 6509 0011 FF 2B 2D                		add	r2, r13, r11
 6510                             	.LVL525:
 6511                             	.LBB2634:
 881:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	{
 6512                             		.loc 11 881 0
 6513 0014 ED 7E 01                		mov.L	4[r7], r14
 6514 0017 FF 2A BB                		add	r11, r11, r10
 6515                             	.LBE2634:
 6516                             	.LBE2708:
 873:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****     _M_reallocate_map(size_type __nodes_to_add, bool __add_at_front)
 6517                             		.loc 11 873 0
 6518 001a CF 39                   		mov.B	r3, r9
 6519                             	.LBB2709:
 6520                             	.LBB2700:
 881:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	{
 6521                             		.loc 11 881 0
 6522 001c 47 AE                   		cmp	r10, r14
 6523 001e 25 2C                   		bleu	.L421
 885:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	  if (__new_nstart < this->_M_impl._M_start._M_node)
 6524                             		.loc 11 885 0
 6525 0020 FF 0B BE                		sub	r11, r14, r11
 6526                             	.LVL526:
 6527 0023 68 1B                   		shlr	#1, r11
 6528 0025 5B 39                   		movu.B	r3, r9
 6529 0027 EC 7A                   		mov.L	[r7], r10
 6530 0029 6C 2B                   		shll	#2, r11
 6531 002b 61 09                   		cmp	#0, r9
 6532 002d 14                      		beq	.L422
 885:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	  if (__new_nstart < this->_M_impl._M_start._M_node)
 6533                             		.loc 11 885 0 is_stmt 0 discriminator 1
 6534 002e FD C2 29                		shll	#2, r2, r9
 6535                             		.balign 8,3,1
 6536                             	.L422:
 885:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	  if (__new_nstart < this->_M_impl._M_start._M_node)
 6537                             		.loc 11 885 0 discriminator 3
 6538 0031 4B B9                   		add	r11, r9
 883:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 					 - __new_num_nodes) / 2
 6539                             		.loc 11 883 0 is_stmt 1 discriminator 3
 6540 0033 4B 9A                   		add	r9, r10
 6541                             	.LVL527:
 889:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	  else
 6542                             		.loc 11 889 0 discriminator 3
 6543 0035 71 13 04                		add	#4, r1, r3
 6544                             	.LVL528:
 6545                             	.LBB2635:
 6546                             	.LBB2636:
 6547                             	.LBB2637:
 6548                             	.LBB2638:
 6549                             	.LBB2639:
 6550                             	.LBB2640:
 370:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** 	  if (_Num)
 6551                             		.loc 13 370 0 discriminator 3
 6552 0038 43 43                   		sub	r4, r3
 6553                             	.LBE2640:
 6554                             	.LBE2639:
 6555                             	.LBE2638:
 6556                             	.LBE2637:
 6557                             	.LBE2636:
 6558                             	.LBE2635:
 886:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	    std::copy(this->_M_impl._M_start._M_node,
 6559                             		.loc 11 886 0 discriminator 3
 6560 003a 47 A4                   		cmp	r10, r4
 6561 003c 24 05 38 87 00          		bleu	.L423
 6562                             	.LVL529:
 6563                             	.LBB2651:
 6564                             	.LBB2649:
 6565                             	.LBB2647:
 6566                             	.LBB2645:
 6567                             	.LBB2643:
 6568                             	.LBB2641:
 370:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** 	  if (_Num)
 6569                             		.loc 13 370 0
 6570 0041 6A 23                   		shar	#2, r3
 6571                             	.LVL530:
 371:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** 	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 6572                             		.loc 13 371 0
 6573 0043 3B 99 00                		bne	.L424
 6574 0046 6C 2D                   		shll	#2, r13
 6575                             	.LVL531:
 6576 0048 2E 58                   		bra	.L425
 6577                             	.LVL532:
 6578                             	.L421:
 6579                             	.LBE2641:
 6580                             	.LBE2643:
 6581                             	.LBE2645:
 6582                             	.LBE2647:
 6583                             	.LBE2649:
 6584                             	.LBE2651:
 6585                             	.LBB2652:
 899:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 
 6586                             		.loc 11 899 0
 6587 004a 71 E8 02                		add	#2, r14, r8
 6588 004d 47 E2                   		cmp	r14, r2
 6589 004f 23 04                   		bltu 1f
 6590 0051 EF 2E                   		mov r2, r14
 6591                             	1:
 6592 0053 4B E8                   		add	r14, r8
 6593                             	.LVL533:
 6594                             	.LBB2653:
 6595                             	.LBB2654:
 6596                             	.LBB2655:
 101:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\ext\new_allocator.h **** 	  std::__throw_bad_alloc();
 6597                             		.loc 8 101 0
 6598 0055 74 08 FF FF FF 3F       		cmp	#0x3fffffff, r8
 6599 005b 25 05 38 8D 00          		bgtu	.L439
 104:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\ext\new_allocator.h ****       }
 6600                             		.loc 8 104 0
 6601 0060 FD C2 81                		shll	#2, r8, r1
 6602 0063 05 00 00 00             		bsr	__Znwm
 6603                             	.LVL534:
 6604 0067 EF 16                   		mov.L	r1, r6
 6605                             	.LBE2655:
 6606                             	.LBE2654:
 6607                             	.LBE2653:
 903:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	  std::copy(this->_M_impl._M_start._M_node,
 6608                             		.loc 11 903 0
 6609 0069 FF 0B B8                		sub	r11, r8, r11
 6610                             	.LVL535:
 6611 006c 68 1B                   		shlr	#1, r11
 6612 006e 5B 99                   		movu.B	r9, r9
 6613 0070 6C 2B                   		shll	#2, r11
 6614 0072 61 09                   		cmp	#0, r9
 6615 0074 14                      		beq	.L427
 903:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	  std::copy(this->_M_impl._M_start._M_node,
 6616                             		.loc 11 903 0 is_stmt 0 discriminator 1
 6617 0075 FD C2 C9                		shll	#2, r12, r9
 6618                             	.LVL536:
 6619                             		.balign 8,3,1
 6620                             	.L427:
 906:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	  _M_deallocate_map(this->_M_impl._M_map, this->_M_impl._M_map_size);
 6621                             		.loc 11 906 0 is_stmt 1 discriminator 3
 6622 0078 AA 7B                   		mov.L	36[r7], r3
 6623 007a A9 7A                   		mov.L	20[r7], r2
 6624 007c 62 43                   		add	#4, r3
 6625                             	.LBB2658:
 6626                             	.LBB2659:
 6627                             	.LBB2660:
 6628                             	.LBB2661:
 6629                             	.LBB2662:
 6630                             	.LBB2663:
 370:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** 	  if (_Num)
 6631                             		.loc 13 370 0 discriminator 3
 6632 007e 43 23                   		sub	r2, r3
 6633                             	.LBE2663:
 6634                             	.LBE2662:
 6635                             	.LBE2661:
 6636                             	.LBE2660:
 6637                             	.LBE2659:
 6638                             	.LBE2658:
 903:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	  std::copy(this->_M_impl._M_start._M_node,
 6639                             		.loc 11 903 0 discriminator 3
 6640 0080 FF 2A B9                		add	r11, r9, r10
 6641                             	.LBB2674:
 6642                             	.LBB2672:
 6643                             	.LBB2670:
 6644                             	.LBB2668:
 6645                             	.LBB2666:
 6646                             	.LBB2664:
 370:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** 	  if (_Num)
 6647                             		.loc 13 370 0 discriminator 3
 6648 0083 6A 23                   		shar	#2, r3
 6649                             	.LBE2664:
 6650                             	.LBE2666:
 6651                             	.LBE2668:
 6652                             	.LBE2670:
 6653                             	.LBE2672:
 6654                             	.LBE2674:
 902:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	                 + (__add_at_front ? __nodes_to_add : 0);
 6655                             		.loc 11 902 0 discriminator 3
 6656 0085 4B 6A                   		add	r6, r10
 6657                             	.LVL537:
 6658                             	.LBB2675:
 6659                             	.LBB2673:
 6660                             	.LBB2671:
 6661                             	.LBB2669:
 6662                             	.LBB2667:
 6663                             	.LBB2665:
 371:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** 	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 6664                             		.loc 13 371 0 discriminator 3
 6665 0087 61 03                   		cmp	#0, r3
 6666 0089 11                      		beq	.L428
 372:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** 	  return __result + _Num;
 6667                             		.loc 13 372 0
 6668 008a EF A1                   		mov.L	r10, r1
 6669 008c 6C 23                   		shll	#2, r3
 6670                             	.LVL538:
 6671 008e 05 00 00 00             		bsr	_memmove
 6672                             	.LVL539:
 6673                             		.balign 8,3,1
 6674                             	.L428:
 6675                             	.LBE2665:
 6676                             	.LBE2667:
 6677                             	.LBE2669:
 6678                             	.LBE2671:
 6679                             	.LBE2673:
 6680                             	.LBE2675:
 6681                             	.LBB2676:
 6682                             	.LBB2677:
 6683                             	.LBB2678:
 110:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\ext\new_allocator.h **** 
 6684                             		.loc 8 110 0
 6685 0092 EC 71                   		mov.L	[r7], r1
 6686 0094 6C 2D                   		shll	#2, r13
 6687                             	.LVL540:
 6688 0096 05 00 00 00             		bsr	__ZdlPv
 6689                             	.LVL541:
 6690                             	.LBE2678:
 6691                             	.LBE2677:
 6692                             	.LBE2676:
 909:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	  this->_M_impl._M_map_size = __new_map_size;
 6693                             		.loc 11 909 0
 6694 009a E3 76                   		mov.L	r6, [r7]
 910:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	}
 6695                             		.loc 11 910 0
 6696 009c E7 78 01                		mov.L	r8, 4[r7]
 6697                             	.LVL542:
 6698 009f 03                      		.balign 8,3,5
 6699                             	.L425:
 6700                             	.LBE2652:
 6701                             	.LBE2700:
 6702                             	.LBB2701:
 6703                             	.LBB2702:
 236:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	_M_first = *__new_node;
 6704                             		.loc 7 236 0
 6705 00a0 E7 7A 05                		mov.L	r10, 20[r7]
 237:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	_M_last = _M_first + difference_type(_S_buffer_size());
 6706                             		.loc 7 237 0
 6707 00a3 EC AB                   		mov.L	[r10], r11
 6708                             	.LBE2702:
 6709                             	.LBE2701:
 914:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc ****     }
 6710                             		.loc 11 914 0
 6711 00a5 60 4D                   		sub	#4, r13
 6712 00a7 4B DA                   		add	r13, r10
 6713                             	.LVL543:
 6714                             	.LBB2704:
 6715                             	.LBB2703:
 238:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       }
 6716                             		.loc 7 238 0
 6717 00a9 72 BC 00 02             		add	#0x200, r11, r12
 6718                             	.LVL544:
 237:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	_M_last = _M_first + difference_type(_S_buffer_size());
 6719                             		.loc 7 237 0
 6720 00ad E7 7B 03                		mov.L	r11, 12[r7]
 6721                             	.LVL545:
 238:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       }
 6722                             		.loc 7 238 0
 6723 00b0 E7 7C 04                		mov.L	r12, 16[r7]
 6724                             	.LVL546:
 6725                             	.LBE2703:
 6726                             	.LBE2704:
 6727                             	.LBB2705:
 6728                             	.LBB2706:
 236:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	_M_first = *__new_node;
 6729                             		.loc 7 236 0
 6730 00b3 E7 7A 09                		mov.L	r10, 36[r7]
 237:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	_M_last = _M_first + difference_type(_S_buffer_size());
 6731                             		.loc 7 237 0
 6732 00b6 EC AA                   		mov.L	[r10], r10
 6733                             	.LVL547:
 238:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       }
 6734                             		.loc 7 238 0
 6735 00b8 72 AB 00 02             		add	#0x200, r10, r11
 237:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	_M_last = _M_first + difference_type(_S_buffer_size());
 6736                             		.loc 7 237 0
 6737 00bc E7 7A 07                		mov.L	r10, 28[r7]
 238:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       }
 6738                             		.loc 7 238 0
 6739 00bf E7 7B 08                		mov.L	r11, 32[r7]
 6740                             	.LBE2706:
 6741                             	.LBE2705:
 6742                             	.LBE2709:
 6743                             		.loc 11 915 0
 6744 00c2 3F 6D 08                		rtsd	#32, r6-r13
 6745                             	.LVL548:
 6746                             	.L423:
 6747                             	.LBB2710:
 6748                             	.LBB2707:
 6749                             	.LBB2680:
 6750                             	.LBB2681:
 6751                             	.LBB2682:
 6752                             	.LBB2683:
 6753                             	.LBB2684:
 6754                             	.LBB2685:
 565:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** 	  if (_Num)
 6755                             		.loc 13 565 0
 6756 00c5 6A 23                   		shar	#2, r3
 6757                             	.LBE2685:
 6758                             	.LBE2684:
 6759                             	.LBE2683:
 6760                             	.LBE2682:
 6761                             	.LBE2681:
 6762                             	.LBE2680:
 893:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	}
 6763                             		.loc 11 893 0
 6764 00c7 6C 2D                   		shll	#2, r13
 6765                             	.LVL549:
 6766                             	.LBB2696:
 6767                             	.LBB2694:
 6768                             	.LBB2692:
 6769                             	.LBB2690:
 6770                             	.LBB2688:
 6771                             	.LBB2686:
 566:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** 	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
 6772                             		.loc 13 566 0
 6773 00c9 61 03                   		cmp	#0, r3
 6774 00cb 20 D5                   		beq	.L425
 6775                             		.loc 13 567 0
 6776 00cd 6C 23                   		shll	#2, r3
 6777                             	.LVL550:
 6778                             	.LBE2686:
 6779                             	.LBE2688:
 6780                             	.LBE2690:
 6781                             	.LBE2692:
 6782                             	.LBE2694:
 6783                             	.LBE2696:
 893:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	}
 6784                             		.loc 11 893 0
 6785 00cf FF 21 DA                		add	r13, r10, r1
 6786                             	.LVL551:
 6787                             	.LBB2697:
 6788                             	.LBB2695:
 6789                             	.LBB2693:
 6790                             	.LBB2691:
 6791                             	.LBB2689:
 6792                             	.LBB2687:
 6793                             		.loc 13 567 0
 6794 00d2 43 31                   		sub	r3, r1
 6795                             	.LVL552:
 6796 00d4 EF 42                   		mov.L	r4, r2
 6797                             	.LVL553:
 6798 00d6 05 00 00 00             		bsr	_memmove
 6799                             	.LVL554:
 6800 00da 2E C6                   		bra	.L425
 6801                             	.LVL555:
 6802                             	.L424:
 6803                             	.LBE2687:
 6804                             	.LBE2689:
 6805                             	.LBE2691:
 6806                             	.LBE2693:
 6807                             	.LBE2695:
 6808                             	.LBE2697:
 6809                             	.LBB2698:
 6810                             	.LBB2650:
 6811                             	.LBB2648:
 6812                             	.LBB2646:
 6813                             	.LBB2644:
 6814                             	.LBB2642:
 372:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_algobase.h **** 	  return __result + _Num;
 6815                             		.loc 13 372 0
 6816 00dc EF A1                   		mov.L	r10, r1
 6817 00de EF 42                   		mov.L	r4, r2
 6818                             	.LVL556:
 6819 00e0 6C 23                   		shll	#2, r3
 6820                             	.LVL557:
 6821 00e2 05 00 00 00             		bsr	_memmove
 6822                             	.LVL558:
 6823 00e6 6C 2D                   		shll	#2, r13
 6824                             	.LVL559:
 6825 00e8 2E B8                   		bra	.L425
 6826                             	.LVL560:
 6827                             	.L439:
 6828                             	.LBE2642:
 6829                             	.LBE2644:
 6830                             	.LBE2646:
 6831                             	.LBE2648:
 6832                             	.LBE2650:
 6833                             	.LBE2698:
 6834                             	.LBB2699:
 6835                             	.LBB2679:
 6836                             	.LBB2657:
 6837                             	.LBB2656:
 102:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\ext\new_allocator.h **** 
 6838                             		.loc 8 102 0
 6839 00ea 05 00 00 00             		bsr	__ZSt17__throw_bad_allocv
 6840                             	.LVL561:
 6841                             	.LBE2656:
 6842                             	.LBE2657:
 6843                             	.LBE2679:
 6844                             	.LBE2699:
 6845                             	.LBE2707:
 6846                             	.LBE2710:
 6847                             	.LFE1689:
 6849 00ee EF 00                   		.section P,"ax"
 6850                             		.global	__Z15sendPeriodicMsgv
 6852                             	__Z15sendPeriodicMsgv:
 6853                             	.LFB1443:
 369:../src/peripheral/uart.cpp ****     packData(periodicMsg);
 6854                             		.loc 10 369 0
 6855 169c 6E 7C                   		pushm	r7-r12
 6856                             	.LCFI19:
 6857 169e FB A2 E0 0E 00 00       		mov.L	#__ZL9transBuff, r10
 370:../src/peripheral/uart.cpp ****     putnbyte3(periodicMsg, PERIODIC_MSG_LEN);
 6858                             		.loc 10 370 0
 6859 16a4 FB 12 B9 0B 00 00       		mov.L	#__ZL11periodicMsg, r1
 6860 16aa 05 00 00 00             		bsr	__Z8packDataPh
 6861                             	.LVL562:
 6862 16ae ED AE 06                		mov.L	24[r10], r14
 6863 16b1 FB 72 B9 0B 00 00       		mov.L	#__ZL11periodicMsg, r7
 6864                             	.LBB2730:
 6865                             	.LBB2731:
 6866                             	.LBB2732:
 6867                             	.LBB2733:
 6868                             	.LBB2734:
1393:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	  {
 6869                             		.loc 7 1393 0
 6870 16b7 EF AB                   		mov.L	r10, r11
 6871 16b9 2E 1B                   		bra	.L447
 6872                             	.LVL563:
 6873                             	.L457:
 6874                             	.LBB2735:
 6875                             	.LBB2736:
 6876                             		.loc 8 120 0
 6877 16bb CC 74                   		mov.B	[r7], r4
 6878                             	.LVL564:
 6879 16bd 61 0E                   		cmp	#0, r14
 6880 16bf 16                      		beq	.L442
 6881 16c0 C3 E4                   		mov.B	r4, [r14]
 6882 16c2 ED BE 06                		mov.L	24[r11], r14
 6883                             	.LVL565:
 6884                             		.balign 8,3,1
 6885                             	.L442:
 6886                             	.LBE2736:
 6887                             	.LBE2735:
1396:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	  }
 6888                             		.loc 7 1396 0
 6889 16c5 62 1E                   		add	#1, r14
 6890 16c7 E7 AE 06                		mov.L	r14, 24[r10]
 6891                             	.LVL566:
 6892 16ca 62 17                   		add	#1, r7
 6893                             	.LVL567:
 6894                             	.LBE2734:
 6895                             	.LBE2733:
 6896                             	.LBE2732:
 294:../src/peripheral/uart.cpp ****         transBuff.push(buf[c]);
 6897                             		.loc 10 294 0
 6898 16cc 74 07 B3 0C 00 00       		cmp	#__ZL11periodicMsg+250, r7
 6899 16d2 20 59                   		beq	.L456
 6900                             	.LVL568:
 6901                             		.balign 8,3,1
 6902                             	.L447:
 6903                             	.LBB2756:
 6904                             	.LBB2754:
 6905                             	.LBB2752:
1393:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	  {
 6906                             		.loc 7 1393 0
 6907 16d4 ED A4 08                		mov.L	32[r10], r4
 6908 16d7 60 14                   		sub	#1, r4
1392:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	    != this->_M_impl._M_finish._M_last - 1)
 6909                             		.loc 7 1392 0
 6910 16d9 47 4E                   		cmp	r4, r14
 6911 16db 21 E0                   		bne	.L457
 6912                             	.LVL569:
 6913                             	.LBB2737:
 6914                             	.LBB2738:
 6915                             	.LBB2739:
 6916                             	.LBB2740:
1926:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	    - (this->_M_impl._M_finish._M_node - this->_M_impl._M_map))
 6917                             		.loc 7 1926 0
 6918 16dd ED B4 09                		mov.L	36[r11], r4
 6919 16e0 EC BE                   		mov.L	[r11], r14
 6920 16e2 FF 0E E4                		sub	r14, r4, r14
 6921 16e5 6A 2E                   		shar	#2, r14
 6922 16e7 7E 1E                   		neg	r14
 6923 16e9 06 89 BE 01             		add	4[r11].L, r14
 6924 16ed 61 1E                   		cmp	#1, r14
 6925 16ef 25 3F                   		bleu	.L458
 6926 16f1 EF 4C                   		mov.L	r4, r12
 6927                             		.balign 8,3,3
 6928                             	.L444:
 6929                             	.LVL570:
 6930                             	.LBE2740:
 6931                             	.LBE2739:
 6932                             	.LBB2742:
 6933                             	.LBB2743:
 6934                             	.LBB2744:
 104:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\ext\new_allocator.h ****       }
 6935                             		.loc 8 104 0
 6936 16f3 FB 1A 00 02             		mov.L	#0x200, r1
 6937 16f7 05 00 00 00             		bsr	__Znwm
 6938                             	.LVL571:
 6939                             	.LBE2744:
 6940                             	.LBE2743:
 6941                             	.LBE2742:
 447:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	__try
 6942                             		.loc 11 447 0
 6943 16fb E7 C1 01                		mov.L	r1, 4[r12]
 451:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 				    std::forward<_Args>(__args)...);
 6944                             		.loc 11 451 0
 6945 16fe ED AE 06                		mov.L	24[r10], r14
 6946                             	.LVL572:
 6947                             	.LBB2745:
 6948                             	.LBB2746:
 6949                             		.loc 8 120 0
 6950 1701 CC 7C                   		mov.B	[r7], r12
 6951                             	.LVL573:
 6952 1703 61 0E                   		cmp	#0, r14
 6953 1705 13                      		beq	.L445
 6954 1706 C3 EC                   		mov.B	r12, [r14]
 6955                             		.balign 8,3,1
 6956                             	.L445:
 6957                             	.LBE2746:
 6958                             	.LBE2745:
 456:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 						+ 1);
 6959                             		.loc 11 456 0
 6960 1708 ED AE 09                		mov.L	36[r10], r14
 6961                             	.LVL574:
 6962 170b 71 E4 04                		add	#4, r14, r4
 6963                             	.LVL575:
 6964                             	.LBB2747:
 6965                             	.LBB2748:
 236:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	_M_first = *__new_node;
 6966                             		.loc 7 236 0
 6967 170e E7 A4 09                		mov.L	r4, 36[r10]
 237:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	_M_last = _M_first + difference_type(_S_buffer_size());
 6968                             		.loc 7 237 0
 6969 1711 ED EE 01                		mov.L	4[r14], r14
 238:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       }
 6970                             		.loc 7 238 0
 6971 1714 72 E4 00 02             		add	#0x200, r14, r4
 6972                             	.LVL576:
 237:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	_M_last = _M_first + difference_type(_S_buffer_size());
 6973                             		.loc 7 237 0
 6974 1718 E7 AE 07                		mov.L	r14, 28[r10]
 6975                             	.LVL577:
 238:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       }
 6976                             		.loc 7 238 0
 6977 171b E7 A4 08                		mov.L	r4, 32[r10]
 6978                             	.LBE2748:
 6979                             	.LBE2747:
 458:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	  }
 6980                             		.loc 11 458 0
 6981 171e E7 AE 06                		mov.L	r14, 24[r10]
 6982                             	.LVL578:
 6983 1721 62 17                   		add	#1, r7
 6984                             	.LVL579:
 6985                             	.LBE2738:
 6986                             	.LBE2737:
 6987                             	.LBE2752:
 6988                             	.LBE2754:
 6989                             	.LBE2756:
 294:../src/peripheral/uart.cpp ****         transBuff.push(buf[c]);
 6990                             		.loc 10 294 0
 6991 1723 74 07 B3 0C 00 00       		cmp	#__ZL11periodicMsg+250, r7
 6992 1729 21 AB                   		bne	.L447
 6993                             	.LVL580:
 6994                             		.balign 8,3,2
 6995                             	.L456:
 6996                             	.LBE2731:
 6997                             	.LBE2730:
 372:../src/peripheral/uart.cpp **** 
 6998                             		.loc 10 372 0
 6999 172b 3F 7C 06                		rtsd	#24, r7-r12
 7000                             	.LVL581:
 7001                             	.L458:
 7002                             	.LBB2759:
 7003                             	.LBB2758:
 7004                             	.LBB2757:
 7005                             	.LBB2755:
 7006                             	.LBB2753:
 7007                             	.LBB2751:
 7008                             	.LBB2750:
 7009                             	.LBB2749:
 7010                             	.LBB2741:
1928:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       }
 7011                             		.loc 7 1928 0
 7012 172e FB 12 E0 0E 00 00       		mov.L	#__ZL9transBuff, r1
 7013 1734 66 12                   		mov.L	#1, r2
 7014 1736 66 03                   		mov	#0, r3
 7015 1738 05 00 00 00             		bsr	__ZNSt5dequeIhSaIhEE17_M_reallocate_mapEmb
 7016                             	.LVL582:
 7017 173c ED BC 09                		mov.L	36[r11], r12
 7018 173f 2E B4                   		bra	.L444
 7019                             	.LBE2741:
 7020                             	.LBE2749:
 7021                             	.LBE2750:
 7022                             	.LBE2751:
 7023                             	.LBE2753:
 7024                             	.LBE2755:
 7025                             	.LBE2757:
 7026                             	.LBE2758:
 7027                             	.LBE2759:
 7028                             	.LFE1443:
 7030                             		.global	__Z9putnbyte3Pht
 7032                             	__Z9putnbyte3Pht:
 7033                             	.LFB1438:
 291:../src/peripheral/uart.cpp ****     int c;
 7034                             		.loc 10 291 0
 7035                             	.LVL583:
 7036 1741 6E 7D                   		pushm	r7-r13
 7037                             	.LCFI20:
 7038                             	.LVL584:
 7039                             	.LBB2778:
 294:../src/peripheral/uart.cpp ****         transBuff.push(buf[c]);
 7040                             		.loc 10 294 0
 7041 1743 5F 2C                   		movu.W	r2, r12
 7042 1745 61 0C                   		cmp	#0, r12
 7043 1747 20 31                   		beq	.L459
 7044 1749 FB B2 E0 0E 00 00       		mov.L	#__ZL9transBuff, r11
 7045 174f ED BE 06                		mov.L	24[r11], r14
 7046 1752 EF 1A                   		mov.L	r1, r10
 7047 1754 66 07                   		mov.L	#0, r7
 7048                             	.LBB2779:
 7049                             	.LBB2780:
 7050                             	.LBB2781:
1393:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	  {
 7051                             		.loc 7 1393 0
 7052 1756 EF BD                   		mov.L	r11, r13
 7053                             	.LVL585:
 7054                             		.balign 8,3,1
 7055                             	.L467:
1393:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	  {
 7056                             		.loc 7 1393 0 is_stmt 0 discriminator 2
 7057 1758 ED B4 08                		mov.L	32[r11], r4
 7058 175b 60 14                   		sub	#1, r4
1392:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	    != this->_M_impl._M_finish._M_last - 1)
 7059                             		.loc 7 1392 0 is_stmt 1 discriminator 2
 7060 175d 47 4E                   		cmp	r4, r14
 7061 175f 20 1C                   		beq	.L461
 7062                             	.LVL586:
 7063                             	.LBB2782:
 7064                             	.LBB2783:
 7065                             		.loc 8 120 0
 7066 1761 CC A4                   		mov.B	[r10], r4
 7067                             	.LVL587:
 7068 1763 61 0E                   		cmp	#0, r14
 7069 1765 16                      		beq	.L462
 7070 1766 C3 E4                   		mov.B	r4, [r14]
 7071 1768 ED DE 06                		mov.L	24[r13], r14
 7072                             	.LVL588:
 7073                             		.balign 8,3,1
 7074                             	.L462:
 7075                             	.LBE2783:
 7076                             	.LBE2782:
1396:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	  }
 7077                             		.loc 7 1396 0
 7078 176b 62 1E                   		add	#1, r14
 7079 176d E7 BE 06                		mov.L	r14, 24[r11]
 7080                             	.LVL589:
 7081                             		.balign 8,3,1
 7082                             	.L463:
 7083                             	.LBE2781:
 7084                             	.LBE2780:
 7085                             	.LBE2779:
 294:../src/peripheral/uart.cpp ****         transBuff.push(buf[c]);
 7086                             		.loc 10 294 0 discriminator 2
 7087 1770 62 17                   		add	#1, r7
 7088                             	.LVL590:
 7089 1772 62 1A                   		add	#1, r10
 7090 1774 47 C7                   		cmp	r12, r7
 7091 1776 29 E2                   		blt	.L467
 7092                             	.LVL591:
 7093                             		.balign 8,3,2
 7094                             	.L459:
 7095                             	.LBE2778:
 298:../src/peripheral/uart.cpp **** /***********受信バッファの中身を取り出す関数******************/
 7096                             		.loc 10 298 0
 7097 1778 3F 7D 07                		rtsd	#28, r7-r13
 7098                             	.LVL592:
 7099                             	.L461:
 7100                             	.LBB2800:
 7101                             	.LBB2799:
 7102                             	.LBB2798:
 7103                             	.LBB2797:
 7104                             	.LBB2784:
 7105                             	.LBB2785:
 7106                             	.LBB2786:
 7107                             	.LBB2787:
1926:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	    - (this->_M_impl._M_finish._M_node - this->_M_impl._M_map))
 7108                             		.loc 7 1926 0
 7109 177b ED D4 09                		mov.L	36[r13], r4
 7110 177e EC DE                   		mov.L	[r13], r14
 7111 1780 FF 0E E4                		sub	r14, r4, r14
 7112 1783 6A 2E                   		shar	#2, r14
 7113 1785 7E 1E                   		neg	r14
 7114 1787 06 89 DE 01             		add	4[r13].L, r14
 7115 178b 61 1E                   		cmp	#1, r14
 7116 178d 25 34                   		bleu	.L476
 7117 178f EF 49                   		mov.L	r4, r9
 7118                             		.balign 8,3,3
 7119                             	.L464:
 7120                             	.LVL593:
 7121                             	.LBE2787:
 7122                             	.LBE2786:
 7123                             	.LBB2789:
 7124                             	.LBB2790:
 7125                             	.LBB2791:
 104:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\ext\new_allocator.h ****       }
 7126                             		.loc 8 104 0
 7127 1791 FB 1A 00 02             		mov.L	#0x200, r1
 7128 1795 05 00 00 00             		bsr	__Znwm
 7129                             	.LVL594:
 7130                             	.LBE2791:
 7131                             	.LBE2790:
 7132                             	.LBE2789:
 447:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	__try
 7133                             		.loc 11 447 0
 7134 1799 E7 91 01                		mov.L	r1, 4[r9]
 451:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 				    std::forward<_Args>(__args)...);
 7135                             		.loc 11 451 0
 7136 179c ED BE 06                		mov.L	24[r11], r14
 7137                             	.LVL595:
 7138                             	.LBB2792:
 7139                             	.LBB2793:
 7140                             		.loc 8 120 0
 7141 179f CC A4                   		mov.B	[r10], r4
 7142                             	.LVL596:
 7143 17a1 61 0E                   		cmp	#0, r14
 7144 17a3 13                      		beq	.L465
 7145 17a4 C3 E4                   		mov.B	r4, [r14]
 7146                             		.balign 8,3,1
 7147                             	.L465:
 7148                             	.LBE2793:
 7149                             	.LBE2792:
 456:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 						+ 1);
 7150                             		.loc 11 456 0
 7151 17a6 ED BE 09                		mov.L	36[r11], r14
 7152                             	.LVL597:
 7153 17a9 71 E4 04                		add	#4, r14, r4
 7154                             	.LVL598:
 7155                             	.LBB2794:
 7156                             	.LBB2795:
 236:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	_M_first = *__new_node;
 7157                             		.loc 7 236 0
 7158 17ac E7 B4 09                		mov.L	r4, 36[r11]
 237:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	_M_last = _M_first + difference_type(_S_buffer_size());
 7159                             		.loc 7 237 0
 7160 17af ED EE 01                		mov.L	4[r14], r14
 238:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       }
 7161                             		.loc 7 238 0
 7162 17b2 72 E4 00 02             		add	#0x200, r14, r4
 7163                             	.LVL599:
 237:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	_M_last = _M_first + difference_type(_S_buffer_size());
 7164                             		.loc 7 237 0
 7165 17b6 E7 BE 07                		mov.L	r14, 28[r11]
 7166                             	.LVL600:
 238:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       }
 7167                             		.loc 7 238 0
 7168 17b9 E7 B4 08                		mov.L	r4, 32[r11]
 7169                             	.LBE2795:
 7170                             	.LBE2794:
 458:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	  }
 7171                             		.loc 11 458 0
 7172 17bc E7 BE 06                		mov.L	r14, 24[r11]
 7173 17bf 2E B1                   		bra	.L463
 7174                             	.LVL601:
 7175                             	.L476:
 7176                             	.LBB2796:
 7177                             	.LBB2788:
1928:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       }
 7178                             		.loc 7 1928 0
 7179 17c1 FB 12 E0 0E 00 00       		mov.L	#__ZL9transBuff, r1
 7180 17c7 66 12                   		mov.L	#1, r2
 7181 17c9 66 03                   		mov	#0, r3
 7182 17cb 05 00 00 00             		bsr	__ZNSt5dequeIhSaIhEE17_M_reallocate_mapEmb
 7183                             	.LVL602:
 7184 17cf ED D9 09                		mov.L	36[r13], r9
 7185 17d2 2E BF                   		bra	.L464
 7186                             	.LBE2788:
 7187                             	.LBE2796:
 7188                             	.LBE2785:
 7189                             	.LBE2784:
 7190                             	.LBE2797:
 7191                             	.LBE2798:
 7192                             	.LBE2799:
 7193                             	.LBE2800:
 7194                             	.LFE1438:
 7196                             		.global	__Z9myprintf3PKcz
 7198                             	__Z9myprintf3PKcz:
 7199                             	.LFB1441:
 331:../src/peripheral/uart.cpp ****     static char buffer[1000];
 7200                             		.loc 10 331 0
 7201                             	.LVL603:
 7202 17d4 6E 7D                   		pushm	r7-r13
 7203                             	.LCFI21:
 7204 17d6 60 40                   		sub	#4, r0
 7205                             	.LCFI22:
 331:../src/peripheral/uart.cpp ****     static char buffer[1000];
 7206                             		.loc 10 331 0
 7207 17d8 75 47 24                		mov.L	#36, r7
 7208 17db 4B 07                   		add	r0, r7
 7209                             	.LVL604:
 7210                             	.LBB2822:
 338:../src/peripheral/uart.cpp **** 
 7211                             		.loc 10 338 0
 7212 17dd FD 2A 72                		mov.L	[r7+], r2
 7213                             	.LVL605:
 7214 17e0 FB 12 01 00 00 00       		mov.L	#__ZZ9myprintf3PKczE6buffer, r1
 7215 17e6 EF 73                   		mov.L	r7, r3
 7216 17e8 05 00 00 00             		bsr	_vsprintf
 7217                             	.LVL606:
 7218                             	.LBB2823:
 340:../src/peripheral/uart.cpp ****         printfBuff.push(buffer[c]);
 7219                             		.loc 10 340 0
 7220 17ec 71 19 00                		add	#0, r1, r9
 7221 17ef 2B 7C                   		ble	.L489
 7222 17f1 FB A2 B8 0E 00 00       		mov.L	#__ZL10printfBuff, r10
 7223 17f7 ED AE 06                		mov.L	24[r10], r14
 7224 17fa FB 72 01 00 00 00       		mov.L	#__ZZ9myprintf3PKczE6buffer, r7
 7225                             	.LVL607:
 7226 1800 FF 2D 79                		add	r7, r9, r13
 7227                             	.LBB2824:
 7228                             	.LBB2825:
 7229                             	.LBB2826:
 7230                             	.LBB2827:
 135:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	  {
 7231                             		.loc 11 135 0
 7232 1803 EF AC                   		mov.L	r10, r12
 7233 1805 2E 14                   		bra	.L485
 7234                             	.LVL608:
 7235                             	.L495:
 7236                             	.LBB2828:
 7237                             	.LBB2829:
 7238                             		.loc 8 120 0
 7239 1807 61 0E                   		cmp	#0, r14
 7240 1809 17                      		beq	.L480
 7241 180a C3 EB                   		mov.B	r11, [r14]
 7242 180c ED CE 06                		mov.L	24[r12], r14
 7243                             	.LVL609:
 7244 180f 03                      		.balign 8,3,1
 7245                             	.L480:
 7246                             	.LBE2829:
 7247                             	.LBE2828:
 139:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	  }
 7248                             		.loc 11 139 0
 7249 1810 62 1E                   		add	#1, r14
 7250 1812 E7 AE 06                		mov.L	r14, 24[r10]
 7251                             	.LVL610:
 7252                             	.LBE2827:
 7253                             	.LBE2826:
 7254                             	.LBE2825:
 7255                             	.LBE2824:
 340:../src/peripheral/uart.cpp ****         printfBuff.push(buffer[c]);
 7256                             		.loc 10 340 0
 7257 1815 47 D7                   		cmp	r13, r7
 7258 1817 20 54                   		beq	.L489
 7259                             	.LVL611:
 7260                             		.balign 8,3,1
 7261                             	.L485:
 7262                             	.LBB2854:
 7263                             	.LBB2851:
 7264                             	.LBB2848:
 7265                             	.LBB2845:
 135:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	  {
 7266                             		.loc 11 135 0
 7267 1819 ED A4 08                		mov.L	32[r10], r4
 7268                             	.LBE2845:
 7269                             	.LBE2848:
 7270                             	.LBE2851:
 7271                             	.LBE2854:
 341:../src/peripheral/uart.cpp ****     }
 7272                             		.loc 10 341 0
 7273 181c FD 28 7B                		mov.B	[r7+], r11
 7274                             	.LVL612:
 7275                             	.LBB2855:
 7276                             	.LBB2852:
 7277                             	.LBB2849:
 7278                             	.LBB2846:
 135:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	  {
 7279                             		.loc 11 135 0
 7280 181f 60 14                   		sub	#1, r4
 134:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	    != this->_M_impl._M_finish._M_last - 1)
 7281                             		.loc 11 134 0
 7282 1821 47 4E                   		cmp	r4, r14
 7283 1823 21 E4                   		bne	.L495
 7284                             	.LVL613:
 7285                             	.LBB2830:
 7286                             	.LBB2831:
 7287                             	.LBB2832:
 7288                             	.LBB2833:
1926:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	    - (this->_M_impl._M_finish._M_node - this->_M_impl._M_map))
 7289                             		.loc 7 1926 0
 7290 1825 ED C4 09                		mov.L	36[r12], r4
 7291 1828 EC CE                   		mov.L	[r12], r14
 7292 182a FF 0E E4                		sub	r14, r4, r14
 7293 182d 6A 2E                   		shar	#2, r14
 7294 182f 7E 1E                   		neg	r14
 7295 1831 06 89 CE 01             		add	4[r12].L, r14
 7296 1835 61 1E                   		cmp	#1, r14
 7297 1837 25 39                   		bleu	.L496
 7298 1839 EF 48                   		mov.L	r4, r8
 7299                             		.balign 8,3,3
 7300                             	.L482:
 7301                             	.LVL614:
 7302                             	.LBE2833:
 7303                             	.LBE2832:
 7304                             	.LBB2835:
 7305                             	.LBB2836:
 7306                             	.LBB2837:
 104:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\ext\new_allocator.h ****       }
 7307                             		.loc 8 104 0
 7308 183b FB 1A 00 02             		mov.L	#0x200, r1
 7309 183f 05 00 00 00             		bsr	__Znwm
 7310                             	.LVL615:
 7311                             	.LBE2837:
 7312                             	.LBE2836:
 7313                             	.LBE2835:
 447:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	__try
 7314                             		.loc 11 447 0
 7315 1843 E7 81 01                		mov.L	r1, 4[r8]
 451:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 				    std::forward<_Args>(__args)...);
 7316                             		.loc 11 451 0
 7317 1846 ED AE 06                		mov.L	24[r10], r14
 7318                             	.LVL616:
 7319                             	.LBB2838:
 7320                             	.LBB2839:
 7321                             		.loc 8 120 0
 7322 1849 61 0E                   		cmp	#0, r14
 7323 184b 13                      		beq	.L483
 7324 184c C3 EB                   		mov.B	r11, [r14]
 7325                             		.balign 8,3,1
 7326                             	.L483:
 7327                             	.LBE2839:
 7328                             	.LBE2838:
 456:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 						+ 1);
 7329                             		.loc 11 456 0
 7330 184e ED AB 09                		mov.L	36[r10], r11
 7331                             	.LVL617:
 7332 1851 71 BE 04                		add	#4, r11, r14
 7333                             	.LVL618:
 7334                             	.LBB2840:
 7335                             	.LBB2841:
 236:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	_M_first = *__new_node;
 7336                             		.loc 7 236 0
 7337 1854 E7 AE 09                		mov.L	r14, 36[r10]
 237:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	_M_last = _M_first + difference_type(_S_buffer_size());
 7338                             		.loc 7 237 0
 7339 1857 ED BE 01                		mov.L	4[r11], r14
 7340                             	.LVL619:
 238:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       }
 7341                             		.loc 7 238 0
 7342 185a 72 EB 00 02             		add	#0x200, r14, r11
 237:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	_M_last = _M_first + difference_type(_S_buffer_size());
 7343                             		.loc 7 237 0
 7344 185e E7 AE 07                		mov.L	r14, 28[r10]
 7345                             	.LVL620:
 238:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       }
 7346                             		.loc 7 238 0
 7347 1861 E7 AB 08                		mov.L	r11, 32[r10]
 7348                             	.LBE2841:
 7349                             	.LBE2840:
 458:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\deque.tcc **** 	  }
 7350                             		.loc 11 458 0
 7351 1864 E7 AE 06                		mov.L	r14, 24[r10]
 7352                             	.LVL621:
 7353                             	.LBE2831:
 7354                             	.LBE2830:
 7355                             	.LBE2846:
 7356                             	.LBE2849:
 7357                             	.LBE2852:
 7358                             	.LBE2855:
 340:../src/peripheral/uart.cpp ****         printfBuff.push(buffer[c]);
 7359                             		.loc 10 340 0
 7360 1867 47 D7                   		cmp	r13, r7
 7361 1869 21 B0                   		bne	.L485
 7362                             	.LVL622:
 7363                             		.balign 8,3,1
 7364                             	.L489:
 7365                             	.LBE2823:
 7366                             	.LBE2822:
 346:../src/peripheral/uart.cpp **** 
 7367                             		.loc 10 346 0
 7368 186b EF 91                   		mov.L	r9, r1
 7369 186d 3F 7D 08                		rtsd	#32, r7-r13
 7370                             	.LVL623:
 7371                             	.L496:
 7372                             	.LBB2858:
 7373                             	.LBB2857:
 7374                             	.LBB2856:
 7375                             	.LBB2853:
 7376                             	.LBB2850:
 7377                             	.LBB2847:
 7378                             	.LBB2844:
 7379                             	.LBB2843:
 7380                             	.LBB2842:
 7381                             	.LBB2834:
1928:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h ****       }
 7382                             		.loc 7 1928 0
 7383 1870 FB 12 B8 0E 00 00       		mov.L	#__ZL10printfBuff, r1
 7384 1876 66 12                   		mov.L	#1, r2
 7385 1878 66 03                   		mov	#0, r3
 7386 187a 05 00 00 00             		bsr	__ZNSt5dequeIhSaIhEE17_M_reallocate_mapEmb
 7387                             	.LVL624:
 7388 187e ED C8 09                		mov.L	36[r12], r8
 7389 1881 2E BA                   		bra	.L482
 7390                             	.LBE2834:
 7391                             	.LBE2842:
 7392                             	.LBE2843:
 7393                             	.LBE2844:
 7394                             	.LBE2847:
 7395                             	.LBE2850:
 7396                             	.LBE2853:
 7397                             	.LBE2856:
 7398                             	.LBE2857:
 7399                             	.LBE2858:
 7400                             	.LFE1441:
 7402                             		.section	.rodata.str1.1
 7403                             	.LC1:
 7404 0016 3D 25 64 2C 25 64 2C 25 		.string	"=%d,%d,%d,%d,%d\n"
 7404      64 2C 25 64 2C 25 64 0A 
 7404      00 
 7405                             		.section P,"ax"
 7406                             		.global	__Z11execCommandPh
 7408                             	__Z11execCommandPh:
 7409                             	.LFB1427:
  50:../src/peripheral/uart.cpp ****     FcLed& fcled = FcLed::getInstance();
 7410                             		.loc 10 50 0
 7411                             	.LVL625:
 7412 1883 6E 67                   		pushm	r6-r7
 7413                             	.LCFI23:
 7414 1885 71 00 A8                		add	#0xffffffa8, r0
 7415                             	.LCFI24:
  50:../src/peripheral/uart.cpp ****     FcLed& fcled = FcLed::getInstance();
 7416                             		.loc 10 50 0
 7417 1888 A5 09                   		mov.L	r1, 84[r0]
 7418 188a F9 02 0C 00 00 00 00    		mov.L	#___gxx_personality_sj0, 48[r0]
 7419 1891 F9 02 0D 28 00 00 00    		mov.L	#.LLSDA1427, 52[r0]
 7420 1898 75 47 18                		mov.L	#24, r7
 7421 189b 4B 07                   		add	r0, r7
 7422 189d A3 87                   		mov.L	r7, 56[r0]
 7423 189f F9 02 0F 25 1B 00 00    		mov.L	#.L509, 60[r0]
 7424 18a6 A4 00                   		mov.L	r0, 64[r0]
 7425 18a8 EF 71                   		mov.L	r7, r1
 7426                             	.LVL626:
 7427 18aa 05 00 00 00             		bsr	__Unwind_SjLj_Register
 7428                             	.LVL627:
 7429                             	.LBB2880:
 7430                             	.LBB2881:
 7431                             	.LBB2882:
  26:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\fcled.h **** 		return instance;
 7432                             		.loc 5 26 0
 7433 18ae FB 12 00 00 00 00       		mov.L	#__ZGVZN5FcLed11getInstanceEvE8instance, r1
 7434 18b4 58 17                   		movu.B	[r1], r7
 7435 18b6 A4 8F                   		mov.L	r7, 76[r0]
 7436 18b8 61 07                   		cmp	#0, r7
 7437 18ba 3A 9A 01                		beq	.L516
 7438                             		.balign 8,3,1
 7439                             	.L499:
 7440                             	.LVL628:
 7441                             	.LBE2882:
 7442                             	.LBE2881:
  58:../src/peripheral/uart.cpp ****     float rt_f, lt_f;
 7443                             		.loc 10 58 0
 7444 18bd AD 0F                   		mov.L	84[r0], r7
 7445 18bf 59 7E 0E                		movu.B	14[r7], r14
  57:../src/peripheral/uart.cpp ****     int16_t lt = cmd[14];
 7446                             		.loc 10 57 0
 7447 18c2 B3 77                   		movu.B	12[r7], r7
 7448 18c4 A4 8F                   		mov.L	r7, 76[r0]
 7449                             	.LVL629:
  61:../src/peripheral/uart.cpp ****         PORT2.PODR.BIT.B0 = 0;
 7450                             		.loc 10 61 0
 7451 18c6 DF E4                   		mov.W	r14, r4
 7452 18c8 75 54 80                		cmp	#0x80, r4
 7453 18cb 3A FE 01                		beq	.L517
 7454                             	.LVL630:
 7455 18ce EF 00                   		.balign 8,3,4
 7456                             	.L514:
  68:../src/peripheral/uart.cpp ****         PORT1.PODR.BIT.B7 = 0;
 7457                             		.loc 10 68 0
 7458 18d0 FB 3E 02 C0 08          		mov.L	#0x8c002, r3
 7459 18d5 CD 32 20                		mov.B	32[r3], r2
  69:../src/peripheral/uart.cpp ****         lt_f = 0.001+0.2*(float(lt-128)/128.0);
 7460                             		.loc 10 69 0
 7461 18d8 FB 4E 01 C0 08          		mov.L	#0x8c001, r4
  67:../src/peripheral/uart.cpp ****         PORT2.PODR.BIT.B0 = 1;
 7462                             		.loc 10 67 0
 7463 18dd 2B 44                   		ble	.L505
  68:../src/peripheral/uart.cpp ****         PORT1.PODR.BIT.B7 = 0;
 7464                             		.loc 10 68 0
 7465 18df 78 02                   		bset #0, r2
 7466 18e1 C7 32 20                		mov.B	r2, 32[r3]
 7467                             	.LVL631:
  69:../src/peripheral/uart.cpp ****         lt_f = 0.001+0.2*(float(lt-128)/128.0);
 7468                             		.loc 10 69 0
 7469 18e4 CD 43 20                		mov.B	32[r4], r3
  70:../src/peripheral/uart.cpp ****         fcled.B.turn(1);
 7470                             		.loc 10 70 0
 7471 18e7 71 EE 80                		add	#0xffffff80, r14
  69:../src/peripheral/uart.cpp ****         lt_f = 0.001+0.2*(float(lt-128)/128.0);
 7472                             		.loc 10 69 0
 7473 18ea 75 23 7F                		and #0x7f, r3
  70:../src/peripheral/uart.cpp ****         fcled.B.turn(1);
 7474                             		.loc 10 70 0
 7475 18ed FC 47 EE                		itof	r14, r14
 7476 18f0 E7 0E 14                		mov.L	r14, 80[r0]
  69:../src/peripheral/uart.cpp ****         lt_f = 0.001+0.2*(float(lt-128)/128.0);
 7477                             		.loc 10 69 0
 7478 18f3 C7 43 20                		mov.B	r3, 32[r4]
  70:../src/peripheral/uart.cpp ****         fcled.B.turn(1);
 7479                             		.loc 10 70 0
 7480 18f6 AD 07                   		mov.L	80[r0], r7
 7481 18f8 FD 72 37 00 00 00 3C    		fmul	#0x3c000000, r7
 7482 18ff FD 72 37 CD CC 4C 3E    		fmul	#0x3e4ccccd, r7
  71:../src/peripheral/uart.cpp ****     }else{
 7483                             		.loc 10 71 0
 7484 1906 F9 06 07 FF             		mov.L	#-1, 28[r0]
 7485 190a FB 12 00 00 00 00       		mov.L	#__ZZN5FcLed11getInstanceEvE8instance+24, r1
 7486 1910 66 12                   		mov	#1, r2
  70:../src/peripheral/uart.cpp ****         fcled.B.turn(1);
 7487                             		.loc 10 70 0
 7488 1912 FD 72 27 6F 12 83 3A    		fadd	#0x3a83126f, r7
 7489 1919 A5 07                   		mov.L	r7, 80[r0]
 7490                             	.LVL632:
  71:../src/peripheral/uart.cpp ****     }else{
 7491                             		.loc 10 71 0
 7492 191b 05 00 00 00             		bsr	__ZN11AbstructLED4turnEh
 7493                             	.LVL633:
 7494 191f 2E 49                   		bra	.L504
 7495                             	.LVL634:
 7496                             	.L505:
  73:../src/peripheral/uart.cpp ****         PORT1.PODR.BIT.B7 = 1;
 7497                             		.loc 10 73 0
 7498 1921 7A 02                   		bclr #0, r2
 7499 1923 C7 32 20                		mov.B	r2, 32[r3]
 7500                             	.LVL635:
  74:../src/peripheral/uart.cpp ****         lt_f = 0.001+0.2*(float(128-lt)/128.0);
 7501                             		.loc 10 74 0
 7502 1926 CD 43 20                		mov.B	32[r4], r3
  75:../src/peripheral/uart.cpp ****         fcled.B.flash(100,100);
 7503                             		.loc 10 75 0
 7504 1929 75 42 80                		mov.L	#0x80, r2
 7505 192c FF 0E E2                		sub	r14, r2, r14
  74:../src/peripheral/uart.cpp ****         lt_f = 0.001+0.2*(float(128-lt)/128.0);
 7506                             		.loc 10 74 0
 7507 192f 75 33 80                		or	#0xffffff80, r3
  75:../src/peripheral/uart.cpp ****         fcled.B.flash(100,100);
 7508                             		.loc 10 75 0
 7509 1932 FC 47 EE                		itof	r14, r14
 7510 1935 E7 0E 14                		mov.L	r14, 80[r0]
  74:../src/peripheral/uart.cpp ****         lt_f = 0.001+0.2*(float(128-lt)/128.0);
 7511                             		.loc 10 74 0
 7512 1938 C7 43 20                		mov.B	r3, 32[r4]
  75:../src/peripheral/uart.cpp ****         fcled.B.flash(100,100);
 7513                             		.loc 10 75 0
 7514 193b AD 07                   		mov.L	80[r0], r7
 7515 193d FD 72 37 00 00 00 3C    		fmul	#0x3c000000, r7
  76:../src/peripheral/uart.cpp ****     }
 7516                             		.loc 10 76 0
 7517 1944 75 42 64                		mov	#0x64, r2
  75:../src/peripheral/uart.cpp ****         fcled.B.flash(100,100);
 7518                             		.loc 10 75 0
 7519 1947 FD 72 37 CD CC 4C 3E    		fmul	#0x3e4ccccd, r7
  76:../src/peripheral/uart.cpp ****     }
 7520                             		.loc 10 76 0
 7521 194e F9 06 07 FF             		mov.L	#-1, 28[r0]
 7522 1952 FB 12 00 00 00 00       		mov.L	#__ZZN5FcLed11getInstanceEvE8instance+24, r1
 7523 1958 DF 23                   		mov.W	r2, r3
  75:../src/peripheral/uart.cpp ****         fcled.B.flash(100,100);
 7524                             		.loc 10 75 0
 7525 195a FD 72 27 6F 12 83 3A    		fadd	#0x3a83126f, r7
 7526 1961 A5 07                   		mov.L	r7, 80[r0]
 7527                             	.LVL636:
  76:../src/peripheral/uart.cpp ****     }
 7528                             		.loc 10 76 0
 7529 1963 05 00 00 00             		bsr	__ZN11AbstructLED5flashEtt
 7530                             	.LVL637:
 7531 1967 03                      		.balign 8,3,1
 7532                             	.L504:
  79:../src/peripheral/uart.cpp ****         PORT1.PODR.BIT.B3 = 0;
 7533                             		.loc 10 79 0
 7534 1968 AC 8F                   		mov.L	76[r0], r7
 7535 196a DF 7E                   		mov.W	r7, r14
 7536 196c 75 5E 80                		cmp	#0x80, r14
  80:../src/peripheral/uart.cpp ****         PORT1.PODR.BIT.B2 = 0;
 7537                             		.loc 10 80 0
 7538 196f FB EE 01 C0 08          		mov.L	#0x8c001, r14
 7539 1974 CD E4 20                		mov.B	32[r14], r4
  79:../src/peripheral/uart.cpp ****         PORT1.PODR.BIT.B3 = 0;
 7540                             		.loc 10 79 0
 7541 1977 3A 87 01                		beq	.L518
  85:../src/peripheral/uart.cpp ****         PORT1.PODR.BIT.B3 = 0;
 7542                             		.loc 10 85 0
 7543 197a 2A 05 38 90 00          		ble	.L508
  88:../src/peripheral/uart.cpp ****         fcled.R.turn(1);
 7544                             		.loc 10 88 0
 7545 197f AC 8B                   		mov.L	76[r0], r3
 7546 1981 71 33 80                		add	#0xffffff80, r3
  86:../src/peripheral/uart.cpp ****         PORT1.PODR.BIT.B2 = 1;
 7547                             		.loc 10 86 0
 7548 1984 7A 34                   		bclr #3, r4
 7549 1986 C7 E4 20                		mov.B	r4, 32[r14]
 7550                             	.LVL638:
  87:../src/peripheral/uart.cpp ****         rt_f = 0.001+0.2*(float(rt-128)/128.0);
 7551                             		.loc 10 87 0
 7552 1989 CD E4 20                		mov.B	32[r14], r4
  88:../src/peripheral/uart.cpp ****         fcled.R.turn(1);
 7553                             		.loc 10 88 0
 7554 198c FC 47 33                		itof	r3, r3
 7555 198f A4 8B                   		mov.L	r3, 76[r0]
  87:../src/peripheral/uart.cpp ****         rt_f = 0.001+0.2*(float(rt-128)/128.0);
 7556                             		.loc 10 87 0
 7557 1991 78 24                   		bset #2, r4
 7558 1993 C7 E4 20                		mov.B	r4, 32[r14]
  88:../src/peripheral/uart.cpp ****         fcled.R.turn(1);
 7559                             		.loc 10 88 0
 7560 1996 AC 8F                   		mov.L	76[r0], r7
 7561 1998 FD 72 37 00 00 00 3C    		fmul	#0x3c000000, r7
 7562 199f FD 72 37 CD CC 4C 3E    		fmul	#0x3e4ccccd, r7
  89:../src/peripheral/uart.cpp ****     }else{
 7563                             		.loc 10 89 0
 7564 19a6 F9 06 07 FF             		mov.L	#-1, 28[r0]
 7565 19aa FB 12 00 00 00 00       		mov.L	#__ZZN5FcLed11getInstanceEvE8instance, r1
 7566 19b0 66 12                   		mov	#1, r2
  88:../src/peripheral/uart.cpp ****         fcled.R.turn(1);
 7567                             		.loc 10 88 0
 7568 19b2 FD 72 27 6F 12 83 3A    		fadd	#0x3a83126f, r7
 7569 19b9 A4 8F                   		mov.L	r7, 76[r0]
 7570                             	.LVL639:
  89:../src/peripheral/uart.cpp ****     }else{
 7571                             		.loc 10 89 0
 7572 19bb 05 00 00 00             		bsr	__ZN11AbstructLED4turnEh
 7573                             	.LVL640:
 7574 19bf 03                      		.balign 8,3,4
 7575                             	.L507:
  96:../src/peripheral/uart.cpp **** 
 7576                             		.loc 10 96 0
 7577 19c0 FB EE 01 C0 08          		mov.L	#0x8c001, r14
 7578 19c5 CD E4 20                		mov.B	32[r14], r4
 7579 19c8 CD EE 20                		mov.B	32[r14], r14
 7580 19cb AD 0F                   		mov.L	84[r0], r7
 7581 19cd B0 F9                   		movu.B	3[r7], r1
 7582 19cf B1 72                   		movu.B	4[r7], r2
 7583 19d1 B1 7B                   		movu.B	5[r7], r3
 7584 19d3 68 34                   		shlr	#3, r4
 7585 19d5 68 2E                   		shlr	#2, r14
 7586 19d7 64 14                   		and #1, r4
 7587 19d9 64 1E                   		and #1, r14
 7588 19db F8 02 16 00 00 00       		mov.L	#.LC1, [r0]
 7589 19e1 A0 09                   		mov.L	r1, 4[r0]
 7590 19e3 A0 82                   		mov.L	r2, 8[r0]
 7591 19e5 A0 8B                   		mov.L	r3, 12[r0]
 7592 19e7 A1 04                   		mov.L	r4, 16[r0]
 7593 19e9 E7 0E 05                		mov.L	r14, 20[r0]
 7594 19ec F9 06 07 FF             		mov.L	#-1, 28[r0]
 7595 19f0 05 00 00 00             		bsr	__Z9myprintf3PKcz
 7596                             	.LVL641:
  98:../src/peripheral/uart.cpp ****     setDutyMTU4(lt_f);
 7597                             		.loc 10 98 0
 7598 19f4 AC 89                   		mov.L	76[r0], r1
 7599 19f6 05 00 00 00             		bsr	__Z11setDutyMTU3f
 7600                             	.LVL642:
  99:../src/peripheral/uart.cpp **** }
 7601                             		.loc 10 99 0
 7602 19fa AD 01                   		mov.L	80[r0], r1
 7603 19fc 05 00 00 00             		bsr	__Z11setDutyMTU4f
 7604                             	.LVL643:
 7605 1a00 75 41 18                		mov.L	#24, r1
 7606 1a03 4B 01                   		add	r0, r1
 7607 1a05 05 00 00 00             		bsr	__Unwind_SjLj_Unregister
 7608                             	.LVL644:
 7609                             	.LBE2880:
 100:../src/peripheral/uart.cpp **** 
 7610                             		.loc 10 100 0
 7611 1a09 3F 67 18                		rtsd	#96, r6-r7
 7612                             	.LVL645:
 7613                             	.L508:
 7614                             	.LBB2896:
  91:../src/peripheral/uart.cpp ****         PORT1.PODR.BIT.B2 = 0;
 7615                             		.loc 10 91 0
 7616 1a0c 78 34                   		bset #3, r4
 7617 1a0e C7 E4 20                		mov.B	r4, 32[r14]
 7618                             	.LVL646:
  92:../src/peripheral/uart.cpp ****         rt_f = 0.001+0.2*(float(128-rt)/128.0);
 7619                             		.loc 10 92 0
 7620 1a11 CD E4 20                		mov.B	32[r14], r4
  93:../src/peripheral/uart.cpp ****         fcled.R.flash(100,100);
 7621                             		.loc 10 93 0
 7622 1a14 75 43 80                		mov.L	#0x80, r3
 7623 1a17 AC 8F                   		mov.L	76[r0], r7
 7624 1a19 43 73                   		sub	r7, r3
  92:../src/peripheral/uart.cpp ****         rt_f = 0.001+0.2*(float(128-rt)/128.0);
 7625                             		.loc 10 92 0
 7626 1a1b 7A 24                   		bclr #2, r4
  93:../src/peripheral/uart.cpp ****         fcled.R.flash(100,100);
 7627                             		.loc 10 93 0
 7628 1a1d FC 47 33                		itof	r3, r3
 7629 1a20 A4 8B                   		mov.L	r3, 76[r0]
  92:../src/peripheral/uart.cpp ****         rt_f = 0.001+0.2*(float(128-rt)/128.0);
 7630                             		.loc 10 92 0
 7631 1a22 C7 E4 20                		mov.B	r4, 32[r14]
  93:../src/peripheral/uart.cpp ****         fcled.R.flash(100,100);
 7632                             		.loc 10 93 0
 7633 1a25 AC 8F                   		mov.L	76[r0], r7
 7634 1a27 FD 72 37 00 00 00 3C    		fmul	#0x3c000000, r7
  94:../src/peripheral/uart.cpp ****     }
 7635                             		.loc 10 94 0
 7636 1a2e 75 42 64                		mov	#0x64, r2
  93:../src/peripheral/uart.cpp ****         fcled.R.flash(100,100);
 7637                             		.loc 10 93 0
 7638 1a31 FD 72 37 CD CC 4C 3E    		fmul	#0x3e4ccccd, r7
  94:../src/peripheral/uart.cpp ****     }
 7639                             		.loc 10 94 0
 7640 1a38 F9 06 07 FF             		mov.L	#-1, 28[r0]
 7641 1a3c FB 12 00 00 00 00       		mov.L	#__ZZN5FcLed11getInstanceEvE8instance, r1
 7642 1a42 DF 23                   		mov.W	r2, r3
  93:../src/peripheral/uart.cpp ****         fcled.R.flash(100,100);
 7643                             		.loc 10 93 0
 7644 1a44 FD 72 27 6F 12 83 3A    		fadd	#0x3a83126f, r7
 7645 1a4b A4 8F                   		mov.L	r7, 76[r0]
 7646                             	.LVL647:
  94:../src/peripheral/uart.cpp ****     }
 7647                             		.loc 10 94 0
 7648 1a4d 05 00 00 00             		bsr	__ZN11AbstructLED5flashEtt
 7649                             	.LVL648:
 7650 1a51 38 6F FF                		bra	.L507
 7651                             	.LVL649:
 7652                             	.L516:
 7653                             	.LBB2894:
 7654                             	.LBB2892:
  26:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\fcled.h **** 		return instance;
 7655                             		.loc 5 26 0
 7656 1a54 05 00 00 00             		bsr	___cxa_guard_acquire
 7657                             	.LVL650:
 7658 1a58 61 01                   		cmp	#0, r1
 7659 1a5a 3A 63 FE                		beq	.L499
 7660                             	.LVL651:
 7661                             	.LBB2883:
 7662                             	.LBB2884:
 7663                             	.LBB2885:
   8:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\fcled.h **** public:
 7664                             		.loc 5 8 0
 7665 1a5d FB 12 00 00 00 00       		mov.L	#__ZZN5FcLed11getInstanceEvE8instance, r1
 7666 1a63 F8 12 00 00 00 00       		mov.L	#__ZTV5LED_R+8, [r1]
 7667                             	.LVL652:
 7668                             	.LBE2885:
 7669                             	.LBE2884:
 7670                             	.LBB2886:
 7671                             	.LBB2887:
  13:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\fcled.h **** public:
 7672                             		.loc 5 13 0
 7673 1a69 F9 12 03 00 00 00 00    		mov.L	#__ZTV5LED_G+8, 12[r1]
 7674                             	.LVL653:
 7675                             	.LBE2887:
 7676                             	.LBE2886:
 7677                             	.LBB2888:
 7678                             	.LBB2889:
  18:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\fcled.h **** public:
 7679                             		.loc 5 18 0
 7680 1a70 F9 12 06 00 00 00 00    		mov.L	#__ZTV5LED_B+8, 24[r1]
 7681                             	.LVL654:
 7682                             	.LBE2889:
 7683                             	.LBE2888:
 7684                             	.LBB2890:
 7685                             	.LBB2891:
  39:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\fcled.h **** 		G.turn(g);
 7686                             		.loc 5 39 0
 7687 1a77 3E 07 01                		mov.L	#1, 28[r0]
 7688 1a7a CF 72                   		mov.B	r7, r2
 7689 1a7c 05 00 00 00             		bsr	__ZN11AbstructLED4turnEh
 7690                             	.LVL655:
  40:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\fcled.h **** 		B.turn(b);
 7691                             		.loc 5 40 0
 7692 1a80 FB 12 00 00 00 00       		mov.L	#__ZZN5FcLed11getInstanceEvE8instance+12, r1
 7693                             	.LVL656:
 7694 1a86 66 02                   		mov	#0, r2
 7695 1a88 05 00 00 00             		bsr	__ZN11AbstructLED4turnEh
 7696                             	.LVL657:
  41:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\fcled.h **** 	}
 7697                             		.loc 5 41 0
 7698 1a8c FB 12 00 00 00 00       		mov.L	#__ZZN5FcLed11getInstanceEvE8instance+24, r1
 7699                             	.LVL658:
 7700 1a92 66 02                   		mov	#0, r2
 7701 1a94 05 00 00 00             		bsr	__ZN11AbstructLED4turnEh
 7702                             	.LVL659:
 7703                             	.LBE2891:
 7704                             	.LBE2890:
 7705                             	.LBE2883:
  26:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\fcled.h **** 		return instance;
 7706                             		.loc 5 26 0
 7707 1a98 FB 12 00 00 00 00       		mov.L	#__ZGVZN5FcLed11getInstanceEvE8instance, r1
 7708 1a9e 05 00 00 00             		bsr	___cxa_guard_release
 7709                             	.LVL660:
 7710 1aa2 FB 12 00 00 00 00       		mov.L	#__ZN5FcLedD1Ev, r1
 7711 1aa8 FB 22 00 00 00 00       		mov.L	#__ZZN5FcLed11getInstanceEvE8instance, r2
 7712 1aae FB 32 00 00 00 00       		mov.L	#___dso_handle, r3
 7713 1ab4 05 00 00 00             		bsr	___cxa_atexit
 7714                             	.LVL661:
 7715                             	.LBE2892:
 7716                             	.LBE2894:
  58:../src/peripheral/uart.cpp ****     float rt_f, lt_f;
 7717                             		.loc 10 58 0
 7718 1ab8 AD 0F                   		mov.L	84[r0], r7
 7719 1aba 59 7E 0E                		movu.B	14[r7], r14
  57:../src/peripheral/uart.cpp ****     int16_t lt = cmd[14];
 7720                             		.loc 10 57 0
 7721 1abd B3 77                   		movu.B	12[r7], r7
 7722 1abf A4 8F                   		mov.L	r7, 76[r0]
 7723                             	.LVL662:
  61:../src/peripheral/uart.cpp ****         PORT2.PODR.BIT.B0 = 0;
 7724                             		.loc 10 61 0
 7725 1ac1 DF E4                   		mov.W	r14, r4
 7726 1ac3 75 54 80                		cmp	#0x80, r4
 7727 1ac6 3B 0A FE                		bne	.L514
 7728                             	.LVL663:
 7729                             		.balign 8,3,4
 7730                             	.L517:
  62:../src/peripheral/uart.cpp ****         PORT1.PODR.BIT.B7 = 0;
 7731                             		.loc 10 62 0
 7732 1ac9 FB 4E 02 C0 08          		mov.L	#0x8c002, r4
 7733 1ace CD 43 20                		mov.B	32[r4], r3
  63:../src/peripheral/uart.cpp ****         lt_f = 0.001;
 7734                             		.loc 10 63 0
 7735 1ad1 FB EE 01 C0 08          		mov.L	#0x8c001, r14
  62:../src/peripheral/uart.cpp ****         PORT1.PODR.BIT.B7 = 0;
 7736                             		.loc 10 62 0
 7737 1ad6 7A 03                   		bclr #0, r3
 7738 1ad8 C7 43 20                		mov.B	r3, 32[r4]
 7739                             	.LVL664:
  63:../src/peripheral/uart.cpp ****         lt_f = 0.001;
 7740                             		.loc 10 63 0
 7741 1adb CD E4 20                		mov.B	32[r14], r4
  65:../src/peripheral/uart.cpp ****     }
 7742                             		.loc 10 65 0
 7743 1ade FB 12 00 00 00 00       		mov.L	#__ZZN5FcLed11getInstanceEvE8instance+24, r1
  63:../src/peripheral/uart.cpp ****         lt_f = 0.001;
 7744                             		.loc 10 63 0
 7745 1ae4 75 24 7F                		and #0x7f, r4
 7746 1ae7 C7 E4 20                		mov.B	r4, 32[r14]
 7747                             	.LVL665:
  65:../src/peripheral/uart.cpp ****     }
 7748                             		.loc 10 65 0
 7749 1aea F9 06 07 FF             		mov.L	#-1, 28[r0]
 7750 1aee 66 02                   		mov	#0, r2
 7751 1af0 05 00 00 00             		bsr	__ZN11AbstructLED4turnEh
 7752                             	.LVL666:
  64:../src/peripheral/uart.cpp ****         fcled.B.turn(0);
 7753                             		.loc 10 64 0
 7754 1af4 F9 02 14 6F 12 83 3A    		mov.L	#0x3a83126f, 80[r0]
 7755 1afb 38 6D FE                		bra	.L504
 7756                             	.LVL667:
 7757                             	.L518:
  83:../src/peripheral/uart.cpp ****     }
 7758                             		.loc 10 83 0
 7759 1afe FB 12 00 00 00 00       		mov.L	#__ZZN5FcLed11getInstanceEvE8instance, r1
  80:../src/peripheral/uart.cpp ****         PORT1.PODR.BIT.B2 = 0;
 7760                             		.loc 10 80 0
 7761 1b04 7A 34                   		bclr #3, r4
 7762 1b06 C7 E4 20                		mov.B	r4, 32[r14]
 7763                             	.LVL668:
  81:../src/peripheral/uart.cpp ****         rt_f = 0.001;
 7764                             		.loc 10 81 0
 7765 1b09 CD E4 20                		mov.B	32[r14], r4
  83:../src/peripheral/uart.cpp ****     }
 7766                             		.loc 10 83 0
 7767 1b0c 66 02                   		mov	#0, r2
  81:../src/peripheral/uart.cpp ****         rt_f = 0.001;
 7768                             		.loc 10 81 0
 7769 1b0e 7A 24                   		bclr #2, r4
 7770 1b10 C7 E4 20                		mov.B	r4, 32[r14]
 7771                             	.LVL669:
  83:../src/peripheral/uart.cpp ****     }
 7772                             		.loc 10 83 0
 7773 1b13 F9 06 07 FF             		mov.L	#-1, 28[r0]
 7774 1b17 05 00 00 00             		bsr	__ZN11AbstructLED4turnEh
 7775                             	.LVL670:
  82:../src/peripheral/uart.cpp ****         fcled.R.turn(0);
 7776                             		.loc 10 82 0
 7777 1b1b F9 02 13 6F 12 83 3A    		mov.L	#0x3a83126f, 76[r0]
 7778 1b22 38 9E FE                		bra	.L507
 7779                             	.LVL671:
 7780                             	.L509:
 7781                             	.LBB2895:
 7782                             	.LBB2893:
  26:C:\Users\ryota\e2_studio\workspace\umouse\src\robot_object\fcled.h **** 		return instance;
 7783                             		.loc 5 26 0
 7784 1b25 FB 12 00 00 00 00       		mov.L	#__ZGVZN5FcLed11getInstanceEvE8instance, r1
 7785 1b2b E5 00 08 13             		mov.L	32[r0], 76[r0]
 7786 1b2f 05 00 00 00             		bsr	___cxa_guard_abort
 7787                             	.LVL672:
 7788 1b33 AC 89                   		mov.L	76[r0], r1
 7789 1b35 F9 06 07 FF             		mov.L	#-1, 28[r0]
 7790 1b39 05 00 00 00             		bsr	__Unwind_SjLj_Resume
 7791                             	.LVL673:
 7792                             	.LBE2893:
 7793                             	.LBE2895:
 7794                             	.LBE2896:
 7795                             	.LFE1427:
 7796                             		.section	.gcc_except_table
 7797                             	.LLSDA1427:
 7798 0028 FF                      		.byte	0xff
 7799 0029 FF                      		.byte	0xff
 7800 002a 01                      		.byte	0x1
 7801 002b 02                      		.uleb128 .LLSDACSE1427-.LLSDACSB1427
 7802                             	.LLSDACSB1427:
 7803 002c 00                      		.uleb128 0
 7804 002d 00                      		.uleb128 0
 7805                             	.LLSDACSE1427:
 7806                             		.section P,"ax"
 7808                             		.section	.text.startup,"ax",@progbits
 7810                             	__GLOBAL__sub_I__Z11execCommandPh:
 7811                             	.LFB1736:
 7812                             		.loc 10 708 0
 7813 0000 7E A6                   		push.l	r6
 7814                             	.LCFI25:
 7815 0002 71 00 A0                		add	#0xffffffa0, r0
 7816                             	.LCFI26:
 7817 0005 71 01 28                		add	#40, r0, r1
 7818 0008 F9 02 10 00 00 00 00    		mov.L	#___gxx_personality_sj0, 64[r0]
 7819 000f F9 02 11 2E 00 00 00    		mov.L	#.LLSDA1736, 68[r0]
 7820 0016 A4 80                   		mov.L	r0, 72[r0]
 7821 0018 F9 02 13 C5 00 00 00    		mov.L	#.L522, 76[r0]
 7822 001f A5 00                   		mov.L	r0, 80[r0]
 7823 0021 05 00 00 00             		bsr	__Unwind_SjLj_Register
 7824                             	.LVL674:
 7825                             	.LBB2935:
 7826                             	.LBB2936:
 7827                             	.LBB2937:
 7828                             	.LBB2938:
 7829                             	.LBB2939:
 7830                             	.LBB2940:
 453:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
 7831                             		.loc 7 453 0
 7832 0025 EF 01                   		mov.L	r0, r1
 7833 0027 66 02                   		mov.L	#0, r2
 7834                             	.LBB2941:
 7835                             	.LBB2942:
 502:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	{ }
 7836                             		.loc 7 502 0
 7837 0029 E3 02                   		mov.L	r2, [r0]
 7838 002b A0 0A                   		mov.L	r2, 4[r0]
 7839                             	.LVL675:
 7840                             	.LBB2943:
 7841                             	.LBB2944:
 133:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
 7842                             		.loc 7 133 0
 7843 002d A0 82                   		mov.L	r2, 8[r0]
 7844 002f A0 8A                   		mov.L	r2, 12[r0]
 7845 0031 A1 02                   		mov.L	r2, 16[r0]
 7846 0033 A1 0A                   		mov.L	r2, 20[r0]
 7847                             	.LVL676:
 7848                             	.LBE2944:
 7849                             	.LBE2943:
 7850                             	.LBB2945:
 7851                             	.LBB2946:
 7852 0035 A1 82                   		mov.L	r2, 24[r0]
 7853 0037 A1 8A                   		mov.L	r2, 28[r0]
 7854 0039 A2 02                   		mov.L	r2, 32[r0]
 7855 003b A2 0A                   		mov.L	r2, 36[r0]
 7856                             	.LBE2946:
 7857                             	.LBE2945:
 7858                             	.LBE2942:
 7859                             	.LBE2941:
 453:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
 7860                             		.loc 7 453 0
 7861 003d F9 06 0B FF             		mov.L	#-1, 44[r0]
 7862 0041 05 00 00 00             		bsr	__ZNSt11_Deque_baseIhSaIhEE17_M_initialize_mapEm
 7863                             	.LVL677:
 7864                             	.LBE2940:
 7865                             	.LBE2939:
 7866                             	.LBE2938:
 7867                             	.LBE2937:
 7868                             	.LBB2947:
 7869                             	.LBB2948:
 7870                             	.LBB2949:
 856:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
 7871                             		.loc 7 856 0
 7872 0045 FB 12 E0 0E 00 00       		mov.L	#__ZL9transBuff, r1
 7873 004b 3E 0B 01                		mov.L	#1, 44[r0]
 7874 004e EF 02                   		mov.L	r0, r2
 7875 0050 05 00 00 00             		bsr	__ZNSt11_Deque_baseIhSaIhEEC2EOS1_
 7876                             	.LVL678:
 7877                             	.LBE2949:
 7878                             	.LBE2948:
 7879                             	.LBE2947:
 7880                             	.LBB2950:
 7881                             	.LBB2951:
 918:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
 7882                             		.loc 7 918 0
 7883 0054 EF 01                   		mov.L	r0, r1
 7884 0056 05 00 00 00             		bsr	__ZNSt11_Deque_baseIhSaIhEED2Ev
 7885                             	.LVL679:
 7886                             	.LBE2951:
 7887                             	.LBE2950:
  41:../src/peripheral/uart.cpp **** static queue<uint8_t> printfBuff;
 7888                             		.loc 10 41 0
 7889 005a FB 22 E0 0E 00 00       		mov.L	#__ZL9transBuff, r2
 7890 0060 FB 32 00 00 00 00       		mov.L	#___dso_handle, r3
 7891 0066 FB 12 00 00 00 00       		mov.L	#__ZNSt5queueIhSt5dequeIhSaIhEEED1Ev, r1
 7892 006c 05 00 00 00             		bsr	___cxa_atexit
 7893                             	.LVL680:
 7894                             	.LBB2952:
 7895                             	.LBB2953:
 7896                             	.LBB2954:
 7897                             	.LBB2955:
 453:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
 7898                             		.loc 7 453 0
 7899 0070 EF 01                   		mov.L	r0, r1
 7900 0072 66 02                   		mov.L	#0, r2
 7901                             	.LBB2956:
 7902                             	.LBB2957:
 502:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 	{ }
 7903                             		.loc 7 502 0
 7904 0074 E3 02                   		mov.L	r2, [r0]
 7905 0076 A0 0A                   		mov.L	r2, 4[r0]
 7906                             	.LVL681:
 7907                             	.LBB2958:
 7908                             	.LBB2959:
 133:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
 7909                             		.loc 7 133 0
 7910 0078 A0 82                   		mov.L	r2, 8[r0]
 7911 007a A0 8A                   		mov.L	r2, 12[r0]
 7912 007c A1 02                   		mov.L	r2, 16[r0]
 7913 007e A1 0A                   		mov.L	r2, 20[r0]
 7914                             	.LVL682:
 7915                             	.LBE2959:
 7916                             	.LBE2958:
 7917                             	.LBB2960:
 7918                             	.LBB2961:
 7919 0080 A1 82                   		mov.L	r2, 24[r0]
 7920 0082 A1 8A                   		mov.L	r2, 28[r0]
 7921 0084 A2 02                   		mov.L	r2, 32[r0]
 7922 0086 A2 0A                   		mov.L	r2, 36[r0]
 7923                             	.LBE2961:
 7924                             	.LBE2960:
 7925                             	.LBE2957:
 7926                             	.LBE2956:
 453:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
 7927                             		.loc 7 453 0
 7928 0088 F9 06 0B FF             		mov.L	#-1, 44[r0]
 7929 008c 05 00 00 00             		bsr	__ZNSt11_Deque_baseIhSaIhEE17_M_initialize_mapEm
 7930                             	.LVL683:
 7931                             	.LBE2955:
 7932                             	.LBE2954:
 7933                             	.LBE2953:
 7934                             	.LBE2952:
 7935                             	.LBB2962:
 7936                             	.LBB2963:
 7937                             	.LBB2964:
 856:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
 7938                             		.loc 7 856 0
 7939 0090 FB 12 B8 0E 00 00       		mov.L	#__ZL10printfBuff, r1
 7940 0096 3E 0B 02                		mov.L	#2, 44[r0]
 7941 0099 EF 02                   		mov.L	r0, r2
 7942 009b 05 00 00 00             		bsr	__ZNSt11_Deque_baseIhSaIhEEC2EOS1_
 7943                             	.LVL684:
 7944                             	.LBE2964:
 7945                             	.LBE2963:
 7946                             	.LBE2962:
 7947                             	.LBB2965:
 7948                             	.LBB2966:
 918:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
 7949                             		.loc 7 918 0
 7950 009f EF 01                   		mov.L	r0, r1
 7951 00a1 05 00 00 00             		bsr	__ZNSt11_Deque_baseIhSaIhEED2Ev
 7952                             	.LVL685:
 7953                             	.LBE2966:
 7954                             	.LBE2965:
  42:../src/peripheral/uart.cpp **** static uint8_t recieveBuff[RECEIVE_BUFF_LEN];
 7955                             		.loc 10 42 0
 7956 00a5 FB 22 B8 0E 00 00       		mov.L	#__ZL10printfBuff, r2
 7957 00ab FB 32 00 00 00 00       		mov.L	#___dso_handle, r3
 7958 00b1 FB 12 00 00 00 00       		mov.L	#__ZNSt5queueIhSt5dequeIhSaIhEEED1Ev, r1
 7959 00b7 05 00 00 00             		bsr	___cxa_atexit
 7960                             	.LVL686:
 7961 00bb 71 01 28                		add	#40, r0, r1
 7962 00be 05 00 00 00             		bsr	__Unwind_SjLj_Unregister
 7963                             	.LVL687:
 7964                             	.LBE2936:
 7965                             	.LBE2935:
 7966                             		.loc 10 708 0
 7967 00c2 3F 66 19                		rtsd	#100, r6-r6
 7968                             	.LVL688:
 7969                             	.L522:
 7970 00c5 ED 0E 0B                		mov.L	44[r0], r14
 7971 00c8 E5 00 0C 17             		mov.L	48[r0], 92[r0]
 7972 00cc 61 0E                   		cmp	#0, r14
 7973 00ce 10                      		beq	.L524
 7974 00cf 61 1E                   		cmp	#1, r14
 7975 00d1 15                      		beq	.L524
 7976 00d2 05 00 00 00             		bsr	_abort
 7977                             	.LVL689:
 7978                             	.L524:
 7979                             	.LBB2970:
 7980                             	.LBB2969:
 7981                             	.LBB2967:
 7982                             	.LBB2968:
 918:c:\progra~2\gccfor~2.201\rx-elf\rx-elf\rx-elf\include\c++\4.8.0.201602-gnurx\bits\stl_deque.h **** 
 7983                             		.loc 7 918 0
 7984 00d6 EF 01                   		mov.L	r0, r1
 7985 00d8 05 00 00 00             		bsr	__ZNSt11_Deque_baseIhSaIhEED2Ev
 7986                             	.LVL690:
 7987 00dc AD 89                   		mov.L	92[r0], r1
 7988 00de F9 06 0B FF             		mov.L	#-1, 44[r0]
 7989 00e2 05 00 00 00             		bsr	__Unwind_SjLj_Resume
 7990                             	.LVL691:
 7991                             	.LBE2968:
 7992                             	.LBE2967:
 7993                             	.LBE2969:
 7994                             	.LBE2970:
 7995                             	.LFE1736:
 7996                             		.section	.gcc_except_table
 7997                             	.LLSDA1736:
 7998 002e FF                      		.byte	0xff
 7999 002f FF                      		.byte	0xff
 8000 0030 01                      		.byte	0x1
 8001 0031 04                      		.uleb128 .LLSDACSE1736-.LLSDACSB1736
 8002                             	.LLSDACSB1736:
 8003 0032 00                      		.uleb128 0
 8004 0033 00                      		.uleb128 0
 8005 0034 01                      		.uleb128 0x1
 8006 0035 00                      		.uleb128 0
 8007                             	.LLSDACSE1736:
 8008 0036 00 00                   		.section	.text.startup
 8010                             		.section	.init_array,"awx",@init_array
 8011                             		.balign 4
 8012 0000 00 00 00 00             		.long	__GLOBAL__sub_I__Z11execCommandPh
 8013                             		.weak	__ZZN10WallSensor11getInstanceEvE8instance
 8014                             		.section	.bss._ZZN10WallSensor11getInstanceEvE8instance,"awG",@nobits,_ZZN10WallSensor11getInstanc
 8015                             		.balign 4
 8018                             	__ZZN10WallSensor11getInstanceEvE8instance:
 8019 0000 00 00 00 00 00 00 00 00 		.zero	136
 8019      00 00 00 00 00 00 00 00 
 8019      00 00 00 00 00 00 00 00 
 8019      00 00 00 00 00 00 00 00 
 8019      00 00 00 00 00 00 00 00 
 8020                             		.weak	__ZZN6TactSw11getInstanceEvE8instance
 8021                             		.section	.bss._ZZN6TactSw11getInstanceEvE8instance,"awG",@nobits,_ZZN6TactSw11getInstanceEvE8insta
 8022                             		.balign 4
 8025                             	__ZZN6TactSw11getInstanceEvE8instance:
 8026 0000 00 00                   		.zero	2
 8027                             		.weak	__ZZN9Icm20608G11getInstanceEvE8instance
 8028 0002 00 00                   		.section	.bss._ZZN9Icm20608G11getInstanceEvE8instance,"awG",@nobits,_ZZN9Icm20608G11getInstanceEvE
 8029                             		.balign 4
 8032                             	__ZZN9Icm20608G11getInstanceEvE8instance:
 8033 0000 00 00 00 00 00 00 00 00 		.zero	84
 8033      00 00 00 00 00 00 00 00 
 8033      00 00 00 00 00 00 00 00 
 8033      00 00 00 00 00 00 00 00 
 8033      00 00 00 00 00 00 00 00 
 8034                             		.weak	__ZZN7MPU925011getInstanceEvE8instance
 8035                             		.section	.bss._ZZN7MPU925011getInstanceEvE8instance,"awG",@nobits,_ZZN7MPU925011getInstanceEvE8ins
 8036                             		.balign 4
 8039                             	__ZZN7MPU925011getInstanceEvE8instance:
 8040 0000 00 00 00 00 00 00 00 00 		.zero	100
 8040      00 00 00 00 00 00 00 00 
 8040      00 00 00 00 00 00 00 00 
 8040      00 00 00 00 00 00 00 00 
 8040      00 00 00 00 00 00 00 00 
 8041                             		.local	__ZZ8packDataPhE5count
 8042                             		.comm	__ZZ8packDataPhE5count,1,4
 8043                             		.weak	__ZZN6UMouse11getInstanceEvE8instance
 8044                             		.section	.bss._ZZN6UMouse11getInstanceEvE8instance,"awG",@nobits,_ZZN6UMouse11getInstanceEvE8insta
 8045                             		.balign 4
 8048                             	__ZZN6UMouse11getInstanceEvE8instance:
 8049 0000 00 00 00 00 00 00 00 00 		.zero	2456
 8049      00 00 00 00 00 00 00 00 
 8049      00 00 00 00 00 00 00 00 
 8049      00 00 00 00 00 00 00 00 
 8049      00 00 00 00 00 00 00 00 
 8050                             		.local	__ZZ9myprintf3PKczE6buffer
 8051                             		.comm	__ZZ9myprintf3PKczE6buffer,1000,1
 8052                             		.local	__ZZ9myprintf2PKczE6buffer
 8053                             		.comm	__ZZ9myprintf2PKczE6buffer,1000,1
 8054                             		.local	__ZZ8myprintfPKczE6buffer
 8055                             		.comm	__ZZ8myprintfPKczE6buffer,1000,1
 8056                             		.weak	__ZZN7Gamepad11getInstanceEvE8instance
 8057                             		.section	.bss._ZZN7Gamepad11getInstanceEvE8instance,"awG",@nobits,_ZZN7Gamepad11getInstanceEvE8ins
 8058                             		.balign 4
 8061                             	__ZZN7Gamepad11getInstanceEvE8instance:
 8062 0000 00 00 00 00 00 00 00 00 		.zero	68
 8062      00 00 00 00 00 00 00 00 
 8062      00 00 00 00 00 00 00 00 
 8062      00 00 00 00 00 00 00 00 
 8062      00 00 00 00 00 00 00 00 
 8063                             		.weak	__ZZN5FcLed11getInstanceEvE8instance
 8064                             		.section	.bss._ZZN5FcLed11getInstanceEvE8instance,"awG",@nobits,_ZZN5FcLed11getInstanceEvE8instanc
 8065                             		.balign 4
 8068                             	__ZZN5FcLed11getInstanceEvE8instance:
 8069 0000 00 00 00 00 00 00 00 00 		.zero	36
 8069      00 00 00 00 00 00 00 00 
 8069      00 00 00 00 00 00 00 00 
 8069      00 00 00 00 00 00 00 00 
 8069      00 00 00 00 
 8070                             		.local	__ZL11periodicMsg
 8071                             		.comm	__ZL11periodicMsg,250,1
 8072                             		.local	__ZL16recieveBuffCount
 8073                             		.comm	__ZL16recieveBuffCount,2,4
 8074                             		.local	__ZL11recieveBuff
 8075                             		.comm	__ZL11recieveBuff,512,4
 8076                             		.local	__ZL10printfBuff
 8077                             		.comm	__ZL10printfBuff,40,4
 8078                             		.local	__ZL9transBuff
 8079                             		.comm	__ZL9transBuff,40,4
 8080                             		.weak	__ZGVZN7Gamepad11getInstanceEvE8instance
 8081                             		.section	.bss._ZGVZN7Gamepad11getInstanceEvE8instance,"awG",@nobits,_ZGVZN7Gamepad11getInstanceEvE
 8082                             		.balign 4
 8085                             	__ZGVZN7Gamepad11getInstanceEvE8instance:
 8086 0000 00 00 00 00 00 00 00 00 		.zero	8
 8087                             		.weak	__ZGVZN10WallSensor11getInstanceEvE8instance
 8088                             		.section	.bss._ZGVZN10WallSensor11getInstanceEvE8instance,"awG",@nobits,_ZGVZN10WallSensor11getIns
 8089                             		.balign 4
 8092                             	__ZGVZN10WallSensor11getInstanceEvE8instance:
 8093 0000 00 00 00 00 00 00 00 00 		.zero	8
 8094                             		.weak	__ZGVZN6UMouse11getInstanceEvE8instance
 8095                             		.section	.bss._ZGVZN6UMouse11getInstanceEvE8instance,"awG",@nobits,_ZGVZN6UMouse11getInstanceEvE8i
 8096                             		.balign 4
 8099                             	__ZGVZN6UMouse11getInstanceEvE8instance:
 8100 0000 00 00 00 00 00 00 00 00 		.zero	8
 8101                             		.weak	__ZGVZN5FcLed11getInstanceEvE8instance
 8102                             		.section	.bss._ZGVZN5FcLed11getInstanceEvE8instance,"awG",@nobits,_ZGVZN5FcLed11getInstanceEvE8ins
 8103                             		.balign 4
 8106                             	__ZGVZN5FcLed11getInstanceEvE8instance:
 8107 0000 00 00 00 00 00 00 00 00 		.zero	8
 8108                             		.weak	__ZGVZN6TactSw11getInstanceEvE8instance
 8109                             		.section	.bss._ZGVZN6TactSw11getInstanceEvE8instance,"awG",@nobits,_ZGVZN6TactSw11getInstanceEvE8i
 8110                             		.balign 4
 8113                             	__ZGVZN6TactSw11getInstanceEvE8instance:
 8114 0000 00 00 00 00 00 00 00 00 		.zero	8
 8115                             		.weak	__ZGVZN7MPU925011getInstanceEvE8instance
 8116                             		.section	.bss._ZGVZN7MPU925011getInstanceEvE8instance,"awG",@nobits,_ZGVZN7MPU925011getInstanceEvE
 8117                             		.balign 4
 8120                             	__ZGVZN7MPU925011getInstanceEvE8instance:
 8121 0000 00 00 00 00 00 00 00 00 		.zero	8
 8122                             		.weak	__ZGVZN9Icm20608G11getInstanceEvE8instance
 8123                             		.section	.bss._ZGVZN9Icm20608G11getInstanceEvE8instance,"awG",@nobits,_ZGVZN9Icm20608G11getInstanc
 8124                             		.balign 4
 8127                             	__ZGVZN9Icm20608G11getInstanceEvE8instance:
 8128 0000 00 00 00 00 00 00 00 00 		.zero	8
 8739                             	.Letext0:
 8740                             		.file 14 "c:\\progra~2\\gccfor~2.201\\rx-elf\\rx-elf\\rx-elf\\include\\machine\\_default_types.h"
 8741                             		.file 15 "c:\\progra~2\\gccfor~2.201\\rx-elf\\rx-elf\\lib\\gcc\\rx-elf\\4.8.0.201602-gnurx\\includ
 8742                             		.file 16 "c:\\progra~2\\gccfor~2.201\\rx-elf\\rx-elf\\lib\\gcc\\rx-elf\\4.8.0.201602-gnurx\\includ
 8743                             		.file 17 "c:\\progra~2\\gccfor~2.201\\rx-elf\\rx-elf\\rx-elf\\include\\sys\\lock.h"
 8744                             		.file 18 "c:\\progra~2\\gccfor~2.201\\rx-elf\\rx-elf\\rx-elf\\include\\sys\\_types.h"
 8745                             		.file 19 "c:\\progra~2\\gccfor~2.201\\rx-elf\\rx-elf\\rx-elf\\include\\sys\\reent.h"
 8746                             		.file 20 "c:\\progra~2\\gccfor~2.201\\rx-elf\\rx-elf\\rx-elf\\include\\stdint.h"
 8747                             		.file 21 "../src/peripheral/iodefine.h"
 8748                             		.file 22 "C:\\Users\\ryota\\e2_studio\\workspace\\umouse\\src\\umouse_object/maze.h"
 8749                             		.file 23 "c:\\progra~2\\gccfor~2.201\\rx-elf\\rx-elf\\rx-elf\\include\\c++\\4.8.0.201602-gnurx\\ty
 8750                             		.file 24 "c:\\progra~2\\gccfor~2.201\\rx-elf\\rx-elf\\rx-elf\\include\\c++\\4.8.0.201602-gnurx\\rx
 8751                             		.file 25 "c:\\progra~2\\gccfor~2.201\\rx-elf\\rx-elf\\rx-elf\\include\\c++\\4.8.0.201602-gnurx\\bi
 8752                             		.file 26 "c:\\progra~2\\gccfor~2.201\\rx-elf\\rx-elf\\rx-elf\\include\\c++\\4.8.0.201602-gnurx\\cw
 8753                             		.file 27 "c:\\progra~2\\gccfor~2.201\\rx-elf\\rx-elf\\rx-elf\\include\\c++\\4.8.0.201602-gnurx\\cs
 8754                             		.file 28 "c:\\progra~2\\gccfor~2.201\\rx-elf\\rx-elf\\rx-elf\\include\\c++\\4.8.0.201602-gnurx\\cl
 8755                             		.file 29 "c:\\progra~2\\gccfor~2.201\\rx-elf\\rx-elf\\rx-elf\\include\\c++\\4.8.0.201602-gnurx\\in
 8756                             		.file 30 "c:\\progra~2\\gccfor~2.201\\rx-elf\\rx-elf\\rx-elf\\include\\c++\\4.8.0.201602-gnurx\\bi
 8757                             		.file 31 "c:\\progra~2\\gccfor~2.201\\rx-elf\\rx-elf\\rx-elf\\include\\c++\\4.8.0.201602-gnurx\\bi
 8758                             		.file 32 "c:\\progra~2\\gccfor~2.201\\rx-elf\\rx-elf\\rx-elf\\include\\c++\\4.8.0.201602-gnurx\\ex
 8759                             		.file 33 "c:\\progra~2\\gccfor~2.201\\rx-elf\\rx-elf\\rx-elf\\include\\c++\\4.8.0.201602-gnurx\\bi
 8760                             		.file 34 "c:\\progra~2\\gccfor~2.201\\rx-elf\\rx-elf\\rx-elf\\include\\c++\\4.8.0.201602-gnurx\\de
 8761                             		.file 35 "c:\\progra~2\\gccfor~2.201\\rx-elf\\rx-elf\\rx-elf\\include\\wchar.h"
 8762                             		.file 36 "c:\\progra~2\\gccfor~2.201\\rx-elf\\rx-elf\\rx-elf\\include\\locale.h"
 8763                             		.file 37 "C:\\Users\\ryota\\e2_studio\\workspace\\umouse\\src\\robot_object/abcled.h"
 8764                             		.file 38 "c:\\progra~2\\gccfor~2.201\\rx-elf\\rx-elf\\rx-elf\\include\\c++\\4.8.0.201602-gnurx\\ne
 8765                             		.file 39 "../src/peripheral/clock.h"
 8766                             		.file 40 "../src/peripheral/timer.h"
 8767                             		.file 41 "c:\\progra~2\\gccfor~2.201\\rx-elf\\rx-elf\\rx-elf\\include\\stdio.h"
 8768                             		.file 42 "../src/peripheral/timeInterrupt.hpp"
 8769                             		.file 43 "../src/peripheral/pwm.h"
 8770                             		.file 44 "<built-in>"
 8771                             		.file 45 "c:\\progra~2\\gccfor~2.201\\rx-elf\\rx-elf\\rx-elf\\include\\c++\\4.8.0.201602-gnurx\\bi
