   1                             		.file	"myUtil.cpp"
   2                             		.section P,"ax"
   3                             	.Ltext0:
   4                             		.global	__Z20concatenate2Byte_inthh
   6                             	__Z20concatenate2Byte_inthh:
   7                             	.LFB0:
   8                             		.file 1 "../src/utility/myUtil.cpp"
   1:../src/utility/myUtil.cpp **** /*
   2:../src/utility/myUtil.cpp ****  * myUtil.cpp
   3:../src/utility/myUtil.cpp ****  *
   4:../src/utility/myUtil.cpp ****  *  Created on: 2016/10/02
   5:../src/utility/myUtil.cpp ****  *      Author: ryota
   6:../src/utility/myUtil.cpp ****  */
   7:../src/utility/myUtil.cpp **** 
   8:../src/utility/myUtil.cpp **** #include <myUtil.h>
   9:../src/utility/myUtil.cpp **** #include <stdio.h>
  10:../src/utility/myUtil.cpp **** #include <stdint.h>
  11:../src/utility/myUtil.cpp **** 
  12:../src/utility/myUtil.cpp **** 
  13:../src/utility/myUtil.cpp **** 
  14:../src/utility/myUtil.cpp **** int16_t concatenate2Byte_int(uint8_t H_byte, uint8_t L_byte) {
   9                             		.loc 1 14 0
  10                             	.LVL0:
  11                             	.LBB2:
  15:../src/utility/myUtil.cpp ****   int32_t con;
  16:../src/utility/myUtil.cpp ****   con = L_byte + (H_byte<<8);
  12                             		.loc 1 16 0
  13 0000 5B 11                   		movu.B	r1, r1
  14 0002 5B 22                   		movu.B	r2, r2
  15 0004 6C 81                   		shll	#8, r1
  16                             	.LVL1:
  17 0006 4B 21                   		add	r2, r1
  18                             	.LVL2:
  19                             	.LBE2:
  17:../src/utility/myUtil.cpp ****   if (con > 32767) {
  18:../src/utility/myUtil.cpp ****     con -=  65536;
  19:../src/utility/myUtil.cpp ****   }
  20:../src/utility/myUtil.cpp ****   return (int16_t)con;
  21:../src/utility/myUtil.cpp **** }
  20                             		.loc 1 21 0
  21 0008 DF 11                   		mov.W	r1, r1
  22                             	.LVL3:
  23 000a 02                      		rts
  24                             	.LFE0:
  26                             		.global	__Z21concatenate2Byte_uinthh
  28                             	__Z21concatenate2Byte_uinthh:
  29                             	.LFB1:
  22:../src/utility/myUtil.cpp **** 
  23:../src/utility/myUtil.cpp **** uint16_t concatenate2Byte_uint(uint8_t H_byte, uint8_t L_byte) {
  30                             		.loc 1 23 0
  31                             	.LVL4:
  32                             	.LBB3:
  24:../src/utility/myUtil.cpp ****   int32_t con;
  25:../src/utility/myUtil.cpp ****   con = L_byte + (H_byte<<8);
  33                             		.loc 1 25 0
  34 000b 5B 11                   		movu.B	r1, r1
  35 000d 5B 22                   		movu.B	r2, r2
  36 000f 6C 81                   		shll	#8, r1
  37                             	.LVL5:
  38 0011 4B 21                   		add	r2, r1
  39                             	.LVL6:
  40                             	.LBE3:
  26:../src/utility/myUtil.cpp ****   return (uint16_t)con;
  27:../src/utility/myUtil.cpp **** }
  41                             		.loc 1 27 0
  42 0013 5F 11                   		movu.W	r1, r1
  43                             	.LVL7:
  44 0015 02                      		rts
  45                             	.LFE1:
  47                             		.global	__Z21concatenate4Byte_uinthhhh
  49                             	__Z21concatenate4Byte_uinthhhh:
  50                             	.LFB2:
  28:../src/utility/myUtil.cpp **** 
  29:../src/utility/myUtil.cpp **** uint32_t concatenate4Byte_uint(uint8_t byte3, uint8_t byte2, uint8_t byte1, uint8_t byte0) {
  51                             		.loc 1 29 0
  52                             	.LVL8:
  53                             	.LBB4:
  30:../src/utility/myUtil.cpp **** 	uint32_t con;
  31:../src/utility/myUtil.cpp **** 	con = (byte3 << 24) + (byte2 << 16) + (byte1 << 8) + byte0;
  54                             		.loc 1 31 0
  55 0016 5B 22                   		movu.B	r2, r2
  56 0018 6D 81                   		shll	#24, r1
  57                             	.LVL9:
  58 001a 6D 02                   		shll	#16, r2
  59                             	.LVL10:
  60 001c 5B 33                   		movu.B	r3, r3
  61                             	.LVL11:
  62 001e 4B 12                   		add	r1, r2
  63 0020 6C 83                   		shll	#8, r3
  64                             	.LVL12:
  65 0022 FF 21 32                		add	r3, r2, r1
  66 0025 5B 44                   		movu.B	r4, r4
  67                             	.LBE4:
  32:../src/utility/myUtil.cpp **** 	return con;
  33:../src/utility/myUtil.cpp **** }
  68                             		.loc 1 33 0
  69 0027 4B 41                   		add	r4, r1
  70 0029 02                      		rts
  71                             	.LFE2:
  73                             		.global	__Z15quickSort_int16Psmm
  75                             	__Z15quickSort_int16Psmm:
  76                             	.LFB3:
  34:../src/utility/myUtil.cpp **** 
  35:../src/utility/myUtil.cpp **** 
  36:../src/utility/myUtil.cpp **** void quickSort_int16(int16_t numbers[], uint32_t left, uint32_t right)
  37:../src/utility/myUtil.cpp **** {
  77                             		.loc 1 37 0
  78                             	.LVL13:
  79 002a 6E 7D                   		pushm	r7-r13
  80                             	.LCFI0:
  81 002c EF 1A                   		mov.L	r1, r10
  82 002e EF 3B                   		mov.L	r3, r11
  83                             	.LVL14:
  84                             	.LBB5:
  38:../src/utility/myUtil.cpp ****     uint32_t pivot, l_hold, r_hold;
  39:../src/utility/myUtil.cpp **** 
  40:../src/utility/myUtil.cpp ****     l_hold = left;
  41:../src/utility/myUtil.cpp ****     r_hold = right;
  42:../src/utility/myUtil.cpp ****     pivot = numbers[left];
  85                             		.loc 1 42 0
  86 0030 FF 27 22                		add	r2, r2, r7
  87 0033 4B A7                   		add	r10, r7
  88 0035 DC 7D                   		mov.W	[r7], r13
  89 0037 DF D3                   		mov.W	r13, r3
  90                             	.LVL15:
  43:../src/utility/myUtil.cpp ****     while (left < right)
  91                             		.loc 1 43 0
  92 0039 47 B2                   		cmp	r11, r2
  93 003b 23 05 38 8D 00          		bgeu	.L5
  94                             	.LVL16:
  95                             		.balign 8,3,1
  96                             	.L23:
  97 0040 EF 27                   		mov.L	r2, r7
  98 0042 EF BE                   		mov.L	r11, r14
  99                             	.LVL17:
 100                             		.balign 8,3,2
 101                             	.L7:
  44:../src/utility/myUtil.cpp ****     {
  45:../src/utility/myUtil.cpp ****         while ((numbers[right] >= pivot) && (left < right))
 102                             		.loc 1 45 0 discriminator 1
 103 0044 FF 24 EE                		add	r14, r14, r4
 104 0047 FF 2F 4A                		add	r4, r10, r15
 105 004a DC F5                   		mov.W	[r15], r5
 106 004c DF 5C                   		mov.W	r5, r12
 107 004e 47 C3                   		cmp	r12, r3
 108 0050 24 1D                   		bgtu	.L8
 109                             		.loc 1 45 0 is_stmt 0
 110 0052 47 7E                   		cmp	r7, r14
 111 0054 25 19                   		bleu	.L8
 112 0056 60 24                   		sub	#2, r4
 113 0058 4B A4                   		add	r10, r4
 114 005a 0F                      		bra	.L15
 115                             	.L20:
 116 005b 60 24                   		sub	#2, r4
 117                             		.loc 1 45 0 discriminator 2
 118 005d 47 7E                   		cmp	r7, r14
 119 005f 25 0E                   		bleu	.L8
 120                             		.balign 8,3,5
 121                             	.L15:
 122                             		.loc 1 45 0
 123 0061 DC 45                   		mov.W	[r4], r5
  46:../src/utility/myUtil.cpp ****             right--;
 124                             		.loc 1 46 0 is_stmt 1
 125 0063 60 1E                   		sub	#1, r14
 126                             	.LVL18:
  45:../src/utility/myUtil.cpp ****             right--;
 127                             		.loc 1 45 0
 128 0065 DF 51                   		mov.W	r5, r1
 129 0067 EF 4F                   		mov.L	r4, r15
 130 0069 47 13                   		cmp	r1, r3
 131 006b 25 F0                   		bleu	.L20
 132                             		.balign 8,3,1
 133                             	.L8:
  47:../src/utility/myUtil.cpp ****         if (left != right)
 134                             		.loc 1 47 0
 135 006d 47 E7                   		cmp	r14, r7
 136 006f 20 69                   		beq	.L10
  48:../src/utility/myUtil.cpp ****         {
  49:../src/utility/myUtil.cpp ****             numbers[left] = numbers[right];
 137                             		.loc 1 49 0
 138 0071 FF 24 77                		add	r7, r7, r4
 139 0074 FF 21 4A                		add	r4, r10, r1
  50:../src/utility/myUtil.cpp ****             left++;
  51:../src/utility/myUtil.cpp ****         }
  52:../src/utility/myUtil.cpp ****         while ((numbers[left] <= pivot) && (left < right))
 140                             		.loc 1 52 0
 141 0077 71 4C 02                		add	#2, r4, r12
  49:../src/utility/myUtil.cpp ****             left++;
 142                             		.loc 1 49 0
 143 007a D3 15                   		mov.W	r5, [r1]
 144                             		.loc 1 52 0
 145 007c 4B AC                   		add	r10, r12
 146 007e DC C5                   		mov.W	[r12], r5
  50:../src/utility/myUtil.cpp ****             left++;
 147                             		.loc 1 50 0
 148 0080 62 17                   		add	#1, r7
 149                             	.LVL19:
 150                             		.loc 1 52 0
 151 0082 DF 51                   		mov.W	r5, r1
 152 0084 47 13                   		cmp	r1, r3
 153 0086 23 1C                   		bltu	.L11
 154 0088 47 E7                   		cmp	r14, r7
 155 008a 22 18                   		bgeu	.L11
 156 008c 62 44                   		add	#4, r4
 157 008e 4B A4                   		add	r10, r4
 158 0090 0D                      		bra	.L12
 159                             	.L21:
 160                             		.loc 1 52 0 is_stmt 0 discriminator 2
 161 0091 47 E7                   		cmp	r14, r7
 162 0093 22 0F                   		bgeu	.L11
 163                             		.balign 8,3,1
 164                             	.L12:
 165                             		.loc 1 52 0
 166 0095 EF 4C                   		mov.L	r4, r12
 167 0097 FD 29 45                		mov.W	[r4+], r5
  53:../src/utility/myUtil.cpp ****             left++;
 168                             		.loc 1 53 0 is_stmt 1
 169 009a 62 17                   		add	#1, r7
 170                             	.LVL20:
  52:../src/utility/myUtil.cpp ****             left++;
 171                             		.loc 1 52 0
 172 009c DF 51                   		mov.W	r5, r1
 173 009e 47 13                   		cmp	r1, r3
 174 00a0 22 F1                   		bgeu	.L21
 175                             		.balign 8,3,1
 176                             	.L11:
  54:../src/utility/myUtil.cpp ****         if (left != right)
 177                             		.loc 1 54 0
 178 00a2 47 E7                   		cmp	r14, r7
 179 00a4 11                      		beq	.L14
  55:../src/utility/myUtil.cpp ****         {
  56:../src/utility/myUtil.cpp ****             numbers[right] = numbers[left];
 180                             		.loc 1 56 0
 181 00a5 D3 F5                   		mov.W	r5, [r15]
  57:../src/utility/myUtil.cpp ****             right--;
 182                             		.loc 1 57 0
 183 00a7 60 1E                   		sub	#1, r14
 184                             	.LVL21:
  43:../src/utility/myUtil.cpp ****     {
 185                             		.loc 1 43 0
 186 00a9 47 E7                   		cmp	r14, r7
 187 00ab 23 99                   		bltu	.L7
 188                             		.balign 8,3,1
 189                             	.L14:
  58:../src/utility/myUtil.cpp ****         }
  59:../src/utility/myUtil.cpp ****     }
  60:../src/utility/myUtil.cpp ****     numbers[left] = pivot;
 190                             		.loc 1 60 0
 191 00ad D3 CD                   		mov.W	r13, [r12]
 192                             	.LVL22:
  61:../src/utility/myUtil.cpp ****     pivot = left;
  62:../src/utility/myUtil.cpp ****     left = l_hold;
  63:../src/utility/myUtil.cpp ****     right = r_hold;
  64:../src/utility/myUtil.cpp ****     if (left < pivot)
 193                             		.loc 1 64 0
 194 00af 47 72                   		cmp	r7, r2
 195 00b1 23 1C                   		bltu	.L22
 196                             	.LVL23:
 197                             		.balign 8,3,1
 198                             	.L16:
  65:../src/utility/myUtil.cpp ****         quickSort_int16(numbers, left, pivot-1);
  66:../src/utility/myUtil.cpp ****     if (right > pivot)
 199                             		.loc 1 66 0
 200 00b3 47 7B                   		cmp	r7, r11
 201 00b5 25 15                   		bleu	.L5
  67:../src/utility/myUtil.cpp ****         quickSort_int16(numbers, pivot+1, right);
 202                             		.loc 1 67 0
 203 00b7 71 72 01                		add	#1, r7, r2
 204                             	.LVL24:
  42:../src/utility/myUtil.cpp ****     while (left < right)
 205                             		.loc 1 42 0
 206 00ba FF 27 22                		add	r2, r2, r7
 207                             	.LVL25:
 208 00bd 4B A7                   		add	r10, r7
 209 00bf DC 7D                   		mov.W	[r7], r13
 210 00c1 DF D3                   		mov.W	r13, r3
 211                             	.LVL26:
  43:../src/utility/myUtil.cpp ****     {
 212                             		.loc 1 43 0
 213 00c3 47 B2                   		cmp	r11, r2
 214 00c5 22 05 38 79 FF          		bltu	.L23
 215                             	.LVL27:
 216                             		.balign 8,3,2
 217                             	.L5:
 218                             	.LBE5:
  68:../src/utility/myUtil.cpp **** }
 219                             		.loc 1 68 0
 220 00ca 3F 7D 07                		rtsd	#28, r7-r13
 221                             	.LVL28:
 222                             	.L22:
 223                             	.LBB6:
  65:../src/utility/myUtil.cpp ****     if (right > pivot)
 224                             		.loc 1 65 0
 225 00cd EF A1                   		mov.L	r10, r1
 226 00cf 71 73 FF                		add	#-1, r7, r3
 227 00d2 05 00 00 00             		bsr	__Z15quickSort_int16Psmm
 228                             	.LVL29:
 229 00d6 2E DD                   		bra	.L16
 230                             	.LVL30:
 231                             	.L10:
  52:../src/utility/myUtil.cpp ****             left++;
 232                             		.loc 1 52 0
 233 00d8 FF 2C 77                		add	r7, r7, r12
 234 00db 4B AC                   		add	r10, r12
 235 00dd 2E D0                   		bra	.L14
 236                             	.LBE6:
 237                             	.LFE3:
 239                             		.global	__Z9constrainfff
 241                             	__Z9constrainfff:
 242                             	.LFB4:
  69:../src/utility/myUtil.cpp **** 
  70:../src/utility/myUtil.cpp **** float constrain(float amt, float low, float high){
 243                             		.loc 1 70 0
 244                             	.LVL31:
  71:../src/utility/myUtil.cpp **** 	if(amt > high) return high;
 245                             		.loc 1 71 0
 246 00df FC 87 13                		fcmp	r1, r3
 247 00e2 27 0B                   		bn	.L27
 248 00e4 FC 87 21                		fcmp	r2, r1
 249 00e7 27 03                   		bn	.L28
  72:../src/utility/myUtil.cpp **** 	else if(amt < low) return low;
  73:../src/utility/myUtil.cpp **** 	else return amt;
  74:../src/utility/myUtil.cpp **** }
 250                             		.loc 1 74 0
 251 00e9 02                      		rts
 252                             	.L28:
 253 00ea EF 21                   		mov.L	r2, r1
 254                             	.LVL32:
 255 00ec 02                      		rts
 256                             	.LVL33:
 257                             	.L27:
  71:../src/utility/myUtil.cpp **** 	if(amt > high) return high;
 258                             		.loc 1 71 0
 259 00ed EF 31                   		mov.L	r3, r1
 260                             	.LVL34:
 261                             		.loc 1 74 0
 262 00ef 02                      		rts
 263                             	.LFE4:
 265                             		.global	__Z10constrainHff
 267                             	__Z10constrainHff:
 268                             	.LFB5:
  75:../src/utility/myUtil.cpp **** 
  76:../src/utility/myUtil.cpp **** float constrainH(float amt, float high){
 269                             		.loc 1 76 0
 270                             	.LVL35:
 271 00f0 FC 87 12                		fcmp	r1, r2
 272 00f3 26 04                   		bpz	.L30
 273 00f5 EF 21                   		mov.L	r2, r1
 274                             	.LVL36:
 275                             	.L30:
  77:../src/utility/myUtil.cpp **** 	if(amt > high) return high;
  78:../src/utility/myUtil.cpp **** 	else return amt;
  79:../src/utility/myUtil.cpp **** }
 276                             		.loc 1 79 0
 277 00f7 02                      		rts
 278                             	.LFE5:
 280                             		.global	__Z10constrainLff
 282                             	__Z10constrainLff:
 283                             	.LFB6:
  80:../src/utility/myUtil.cpp **** 
  81:../src/utility/myUtil.cpp **** float constrainL(float amt, float low){
 284                             		.loc 1 81 0
 285                             	.LVL37:
 286 00f8 FC 87 21                		fcmp	r2, r1
 287 00fb 26 04                   		bpz	.L32
 288 00fd EF 21                   		mov.L	r2, r1
 289                             	.LVL38:
 290                             	.L32:
  82:../src/utility/myUtil.cpp **** 	if(amt < low) return low;
  83:../src/utility/myUtil.cpp **** 	else return amt;
  84:../src/utility/myUtil.cpp **** }
 291                             		.loc 1 84 0
 292 00ff 02                      		rts
 293                             	.LFE6:
 295                             		.global	__Z5byteHt
 297                             	__Z5byteHt:
 298                             	.LFB7:
  85:../src/utility/myUtil.cpp **** 
  86:../src/utility/myUtil.cpp **** uint8_t byteH(uint16_t val){
 299                             		.loc 1 86 0
 300                             	.LVL39:
  87:../src/utility/myUtil.cpp ****     return (0x0000ff00 & val) >> 8;
 301                             		.loc 1 87 0
 302 0100 5F 11                   		movu.W	r1, r1
  88:../src/utility/myUtil.cpp **** }
 303                             		.loc 1 88 0
 304 0102 68 81                   		shlr	#8, r1
 305                             	.LVL40:
 306 0104 02                      		rts
 307                             	.LFE7:
 309                             		.global	__Z5byteLt
 311                             	__Z5byteLt:
 312                             	.LFB8:
  89:../src/utility/myUtil.cpp **** 
  90:../src/utility/myUtil.cpp **** uint8_t byteL(uint16_t val){
 313                             		.loc 1 90 0
 314                             	.LVL41:
  91:../src/utility/myUtil.cpp ****     return (0x000000ff & val);
  92:../src/utility/myUtil.cpp **** }
 315                             		.loc 1 92 0
 316 0105 5B 11                   		movu.B	r1, r1
 317                             	.LVL42:
 318 0107 02                      		rts
 319                             	.LFE8:
 321                             		.global	__Z5xor32v
 323                             	__Z5xor32v:
 324                             	.LFB9:
  93:../src/utility/myUtil.cpp **** 
  94:../src/utility/myUtil.cpp **** 
  95:../src/utility/myUtil.cpp **** uint32_t xor32(void) {
 325                             		.loc 1 95 0
 326                             	.LBB7:
  96:../src/utility/myUtil.cpp ****   static uint32_t y = 2463534242;
  97:../src/utility/myUtil.cpp ****   y = y ^ (y << 13); y = y ^ (y >> 17);
 327                             		.loc 1 97 0
 328 0108 FB 32 2C 00 00 00       		mov.L	#__ZZ5xor32vE1y, r3
 329 010e EC 3E                   		mov.L	[r3], r14
 330 0110 FD CD E4                		shll	#13, r14, r4
 331 0113 FC 37 E4                		xor	r14, r4
 332 0116 FD 91 4E                		shlr	#17, r4, r14
 333 0119 FC 37 4E                		xor	r4, r14
  98:../src/utility/myUtil.cpp ****   return y = y ^ (y << 5);
 334                             		.loc 1 98 0
 335 011c FD C5 E1                		shll	#5, r14, r1
 336 011f FC 37 E1                		xor	r14, r1
 337 0122 E3 31                   		mov.L	r1, [r3]
 338                             	.LBE7:
  99:../src/utility/myUtil.cpp **** }
 339                             		.loc 1 99 0
 340 0124 02                      		rts
 341                             	.LFE9:
 343                             		.global	__Z5xor64v
 345                             	__Z5xor64v:
 346                             	.LFB10:
 100:../src/utility/myUtil.cpp **** 
 101:../src/utility/myUtil.cpp **** uint32_t xor64(void) {
 347                             		.loc 1 101 0
 348                             	.LBB8:
 102:../src/utility/myUtil.cpp ****   static uint64_t x = 88172645463325252ULL;
 103:../src/utility/myUtil.cpp ****   x = x ^ (x << 13); x = x ^ (x >> 7);
 349                             		.loc 1 103 0
 350 0125 FB 32 24 00 00 00       		mov.L	#__ZZ5xor64vE1x, r3
 351 012b EC 3E                   		mov.L	[r3], r14
 352 012d A8 3A                   		mov.L	4[r3], r2
 353 012f FD 93 E1                		shlr	#19, r14, r1
 354 0132 FD CD 24                		shll	#13, r2, r4
 355 0135 57 14                   		or	r1, r4
 356 0137 FD CD E1                		shll	#13, r14, r1
 357 013a FC 37 24                		xor	r2, r4
 358 013d FC 37 E1                		xor	r14, r1
 359 0140 FD D9 42                		shll	#25, r4, r2
 360 0143 FD 87 1E                		shlr	#7, r1, r14
 361 0146 57 2E                   		or	r2, r14
 362 0148 FD 87 42                		shlr	#7, r4, r2
 363 014b FC 37 1E                		xor	r1, r14
 364 014e FC 37 42                		xor	r4, r2
 104:../src/utility/myUtil.cpp ****   return x = x ^ (x << 17);
 365                             		.loc 1 104 0
 366 0151 FD 8F E1                		shlr	#15, r14, r1
 367 0154 FD D1 24                		shll	#17, r2, r4
 368 0157 57 14                   		or	r1, r4
 369 0159 FD D1 E1                		shll	#17, r14, r1
 370 015c FC 37 E1                		xor	r14, r1
 371 015f FC 37 24                		xor	r2, r4
 372 0162 E3 31                   		mov.L	r1, [r3]
 373 0164 A0 3C                   		mov.L	r4, 4[r3]
 374                             	.LBE8:
 105:../src/utility/myUtil.cpp **** }
 375                             		.loc 1 105 0
 376 0166 02                      		rts
 377                             	.LFE10:
 379                             		.global	__Z5xor96v
 381                             	__Z5xor96v:
 382                             	.LFB11:
 106:../src/utility/myUtil.cpp **** 
 107:../src/utility/myUtil.cpp **** uint32_t xor96(void) {
 383                             		.loc 1 107 0
 384                             	.LBB9:
 108:../src/utility/myUtil.cpp ****   static uint32_t x = 123456789;
 109:../src/utility/myUtil.cpp ****   static uint32_t y = 362436069;
 110:../src/utility/myUtil.cpp ****   static uint32_t z = 521288629;
 111:../src/utility/myUtil.cpp ****   uint32_t t;
 112:../src/utility/myUtil.cpp **** 
 113:../src/utility/myUtil.cpp ****   t = (x ^ (x << 3)) ^ (y ^ (y >> 19)) ^ (z ^ (z << 6));
 385                             		.loc 1 113 0
 386 0167 FB 52 20 00 00 00       		mov.L	#__ZZ5xor96vE1x, r5
 387 016d FB 22 1C 00 00 00       		mov.L	#__ZZ5xor96vE1y, r2
 388 0173 EC 24                   		mov.L	[r2], r4
 389 0175 EC 5F                   		mov.L	[r5], r15
 390 0177 FB 32 18 00 00 00       		mov.L	#__ZZ5xor96vE1z, r3
 391 017d EC 3E                   		mov.L	[r3], r14
 392 017f EF 41                   		mov.L	r4, r1
 393 0181 FC 37 F1                		xor	r15, r1
 394 0184 FC 37 E1                		xor	r14, r1
 395 0187 6C 3F                   		shll	#3, r15
 396 0189 FC 37 F1                		xor	r15, r1
 397 018c FD 93 4F                		shlr	#19, r4, r15
 398 018f FC 37 F1                		xor	r15, r1
 399 0192 FD C6 EF                		shll	#6, r14, r15
 400 0195 FC 37 F1                		xor	r15, r1
 401                             	.LVL43:
 114:../src/utility/myUtil.cpp ****   x = y; y = z;
 402                             		.loc 1 114 0
 403 0198 E3 54                   		mov.L	r4, [r5]
 404 019a E3 2E                   		mov.L	r14, [r2]
 115:../src/utility/myUtil.cpp ****   return z = t;
 405                             		.loc 1 115 0
 406 019c E3 31                   		mov.L	r1, [r3]
 407                             	.LBE9:
 116:../src/utility/myUtil.cpp **** }
 408                             		.loc 1 116 0
 409 019e 02                      		rts
 410                             	.LFE11:
 412                             		.global	__Z6xor128v
 414                             	__Z6xor128v:
 415                             	.LFB12:
 117:../src/utility/myUtil.cpp **** 
 118:../src/utility/myUtil.cpp **** uint32_t xor128(void) {
 416                             		.loc 1 118 0
 417                             	.LBB10:
 119:../src/utility/myUtil.cpp ****   static uint32_t x = 123456789;
 120:../src/utility/myUtil.cpp ****   static uint32_t y = 362436069;
 121:../src/utility/myUtil.cpp ****   static uint32_t z = 521288629;
 122:../src/utility/myUtil.cpp ****   static uint32_t w = 88675123;
 123:../src/utility/myUtil.cpp ****   uint32_t t;
 124:../src/utility/myUtil.cpp **** 
 125:../src/utility/myUtil.cpp ****   t = x ^ (x << 11);
 418                             		.loc 1 125 0
 419 019f FB F2 14 00 00 00       		mov.L	#__ZZ6xor128vE1x, r15
 126:../src/utility/myUtil.cpp ****   x = y; y = z; z = w;
 420                             		.loc 1 126 0
 421 01a5 FB 52 08 00 00 00       		mov.L	#__ZZ6xor128vE1w, r5
 422 01ab EC 54                   		mov.L	[r5], r4
 125:../src/utility/myUtil.cpp ****   x = y; y = z; z = w;
 423                             		.loc 1 125 0
 424 01ad EC F3                   		mov.L	[r15], r3
 127:../src/utility/myUtil.cpp ****   return w = (w ^ (w >> 19)) ^ (t ^ (t >> 8));
 425                             		.loc 1 127 0
 426 01af FD 93 41                		shlr	#19, r4, r1
 125:../src/utility/myUtil.cpp ****   x = y; y = z; z = w;
 427                             		.loc 1 125 0
 428 01b2 FD CB 3E                		shll	#11, r3, r14
 429 01b5 FC 37 3E                		xor	r3, r14
 430                             	.LVL44:
 431                             		.loc 1 127 0
 432 01b8 FC 37 41                		xor	r4, r1
 433 01bb FC 37 E1                		xor	r14, r1
 434 01be 68 8E                   		shlr	#8, r14
 435                             	.LVL45:
 126:../src/utility/myUtil.cpp ****   x = y; y = z; z = w;
 436                             		.loc 1 126 0
 437 01c0 FB 22 10 00 00 00       		mov.L	#__ZZ6xor128vE1y, r2
 438 01c6 FB 32 0C 00 00 00       		mov.L	#__ZZ6xor128vE1z, r3
 439                             	.LVL46:
 440                             		.loc 1 127 0
 441 01cc FC 37 E1                		xor	r14, r1
 126:../src/utility/myUtil.cpp ****   x = y; y = z; z = w;
 442                             		.loc 1 126 0
 443 01cf E0 2F                   		mov.L	[r2], [r15]
 444                             	.LVL47:
 445                             		.loc 1 127 0
 446 01d1 E3 51                   		mov.L	r1, [r5]
 126:../src/utility/myUtil.cpp ****   x = y; y = z; z = w;
 447                             		.loc 1 126 0
 448 01d3 E0 32                   		mov.L	[r3], [r2]
 449 01d5 E3 34                   		mov.L	r4, [r3]
 450                             	.LBE10:
 128:../src/utility/myUtil.cpp **** }
 451                             		.loc 1 128 0
 452 01d7 02                      		rts
 453                             	.LFE12:
 455                             		.global	__Z14shortFreqNoisev
 457                             	__Z14shortFreqNoisev:
 458                             	.LFB13:
 129:../src/utility/myUtil.cpp **** 
 130:../src/utility/myUtil.cpp **** 
 131:../src/utility/myUtil.cpp **** 
 132:../src/utility/myUtil.cpp **** uint32_t shortFreqNoise(){
 459                             		.loc 1 132 0
 460                             	.LVL48:
 461                             	.LBB11:
 133:../src/utility/myUtil.cpp **** static uint32_t reg = 0x8000;
 134:../src/utility/myUtil.cpp **** 
 135:../src/utility/myUtil.cpp **** 	//以下の3行を回す。
 136:../src/utility/myUtil.cpp **** 	//　shortFreqは、短周期フラグ。1にすると有効になる。
 137:../src/utility/myUtil.cpp **** 	//　これで得られるoutputの値が、ノイズチャンネルの波形。
 138:../src/utility/myUtil.cpp **** 	uint32_t shortFreq = 1;
 139:../src/utility/myUtil.cpp **** 	reg >>= 1;
 462                             		.loc 1 139 0
 463 01d8 FB 42 04 00 00 00       		mov.L	#__ZZ14shortFreqNoisevE3reg, r4
 464 01de EC 4E                   		mov.L	[r4], r14
 465 01e0 FD 81 E3                		shlr	#1, r14, r3
 140:../src/utility/myUtil.cpp **** 	reg |= ((reg ^ (reg >> (shortFreq ? 6 : 1))) & 1) << 15;
 466                             		.loc 1 140 0
 467 01e3 68 7E                   		shlr	#7, r14
 468 01e5 FC 37 3E                		xor	r3, r14
 469 01e8 6C FE                   		shll	#15, r14
 470 01ea 77 2E FF FF 00          		and #0xffff, r14
 471 01ef FF 51 3E                		or	r3, r14, r1
 472 01f2 E3 41                   		mov.L	r1, [r4]
 473                             	.LBE11:
 141:../src/utility/myUtil.cpp **** 	return reg & 1;
 142:../src/utility/myUtil.cpp **** }
 474                             		.loc 1 142 0
 475 01f4 64 11                   		and #1, r1
 476 01f6 02                      		rts
 477                             	.LFE13:
 479                             		.global	__Z13longFreqNoisev
 481                             	__Z13longFreqNoisev:
 482                             	.LFB14:
 143:../src/utility/myUtil.cpp **** 
 144:../src/utility/myUtil.cpp **** uint32_t longFreqNoise(){
 483                             		.loc 1 144 0
 484                             	.LVL49:
 485                             	.LBB12:
 145:../src/utility/myUtil.cpp **** static uint32_t reg = 0x8000;
 146:../src/utility/myUtil.cpp **** 
 147:../src/utility/myUtil.cpp **** 	//以下の3行を回す。
 148:../src/utility/myUtil.cpp **** 	//　shortFreqは、短周期フラグ。1にすると有効になる。
 149:../src/utility/myUtil.cpp **** 	//　これで得られるoutputの値が、ノイズチャンネルの波形。
 150:../src/utility/myUtil.cpp **** 	uint32_t shortFreq = 0;
 151:../src/utility/myUtil.cpp **** 	reg >>= 1;
 486                             		.loc 1 151 0
 487 01f7 FB 42 00 00 00 00       		mov.L	#__ZZ13longFreqNoisevE3reg, r4
 488 01fd EC 4E                   		mov.L	[r4], r14
 489 01ff FD 81 E3                		shlr	#1, r14, r3
 152:../src/utility/myUtil.cpp **** 	reg |= ((reg ^ (reg >> (shortFreq ? 6 : 1))) & 1) << 15;
 490                             		.loc 1 152 0
 491 0202 68 2E                   		shlr	#2, r14
 492 0204 FC 37 3E                		xor	r3, r14
 493 0207 6C FE                   		shll	#15, r14
 494 0209 77 2E FF FF 00          		and #0xffff, r14
 495 020e FF 51 3E                		or	r3, r14, r1
 496 0211 E3 41                   		mov.L	r1, [r4]
 497                             	.LBE12:
 153:../src/utility/myUtil.cpp **** 	return reg & 1;
 154:../src/utility/myUtil.cpp **** }
 498                             		.loc 1 154 0
 499 0213 64 11                   		and #1, r1
 500 0215 02                      		rts
 501                             	.LFE14:
 503                             		.section D,"aw",@progbits
 504                             		.p2align 2
 505                             		.balign 4
 508                             	__ZZ13longFreqNoisevE3reg:
 509 0000 00 80 00 00             		.long	0x8000
 510                             		.balign 4
 513                             	__ZZ14shortFreqNoisevE3reg:
 514 0004 00 80 00 00             		.long	0x8000
 515                             		.balign 4
 518                             	__ZZ6xor128vE1w:
 519 0008 33 13 49 05             		.long	0x5491333
 520                             		.balign 4
 523                             	__ZZ6xor128vE1z:
 524 000c B5 3B 12 1F             		.long	0x1f123bb5
 525                             		.balign 4
 528                             	__ZZ6xor128vE1y:
 529 0010 E5 55 9A 15             		.long	0x159a55e5
 530                             		.balign 4
 533                             	__ZZ6xor128vE1x:
 534 0014 15 CD 5B 07             		.long	0x75bcd15
 535                             		.balign 4
 538                             	__ZZ5xor96vE1z:
 539 0018 B5 3B 12 1F             		.long	0x1f123bb5
 540                             		.balign 4
 543                             	__ZZ5xor96vE1y:
 544 001c E5 55 9A 15             		.long	0x159a55e5
 545                             		.balign 4
 548                             	__ZZ5xor96vE1x:
 549 0020 15 CD 5B 07             		.long	0x75bcd15
 550                             		.balign 4
 553                             	__ZZ5xor64vE1x:
 554 0024 44 7A BF CB             		.long	0xcbbf7a44
 555 0028 8D 40 39 01             		.long	0x139408d
 556                             		.balign 4
 559                             	__ZZ5xor32vE1y:
 560 002c A2 8C D6 92             		.long	0x92d68ca2
 717                             	.Letext0:
 718                             		.file 2 "c:\\progra~2\\gccfor~2.201\\rx-elf\\rx-elf\\rx-elf\\include\\machine\\_default_types.h"
 719                             		.file 3 "c:\\progra~2\\gccfor~2.201\\rx-elf\\rx-elf\\rx-elf\\include\\stdint.h"
